{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rolesManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_certAuthority",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AuditorOversight__AppealWindowClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AuditorOversight__CaseNotPending",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AuditorOversight__NotAuthorizedEnterpriseOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CertificateNFT__CertificateDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CertificateNFT__EnterpriseAlreadyCertified",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CertificationAuthority__CertificationNotExpiredYet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CertificationAuthority__EnterpriseAlreadyCertified",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CertificationAuthority__EnterpriseNotCertifiedYet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnterpriseRegistry__EnterpriseAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnterpriseRegistry__EnterpriseDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnterpriseRegistry__InvalidStart",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InspectionManager__InspectionPeriodExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InspectionManager__InspectorAlreadyAssigned",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InspectionManager__InvalidReportIndex",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InspectionManager__NoReportsAssociatedWithEnterprise",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InspectionManager__NotAssignedToEnterprise",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InspectionManager__ReportAlreadyFlagged",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__AlreadyHasRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__ArrayLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__EmptyArray",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidDuration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__NotAuthorizedAuditor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__NotAuthorizedCertificateFactory",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__NotAuthorizedCertifier",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__NotAuthorizedEnterprise",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__NotAuthorizedInspector",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__NotAuthorizedPublicUser",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__RoleDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__UnauthorizedToPerformAction",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "roles",
          "type": "bytes32[]"
        },
        {
          "indexed": true,
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "BulkRolesGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "enterprise",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reportIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "flaggedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "InspectionReportFlagged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "inspector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "enterprise",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "passed",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "remarks",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "evidenceURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ReportedAt",
          "type": "uint256"
        }
      ],
      "name": "InspectionReportSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "enterprise",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "inspector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "validityPeriod",
          "type": "uint256"
        }
      ],
      "name": "InspectorAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "PublicRoleExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "PublicRoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "RoleTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AUDITOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CERTIFICATE_FACTORY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CERTIFIER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_PUBLIC_ROLE_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ENTERPRISE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INSPECTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "enterprise",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "inspector",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "validityPeriod",
          "type": "uint256"
        }
      ],
      "name": "assignInspector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "roles",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "bulkGrantRoles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "certAuthority",
      "outputs": [
        {
          "internalType": "contract CertificationAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "checkExpiryRoles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "durationInHours",
          "type": "uint256"
        }
      ],
      "name": "claimTemporaryPublicRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "enterprise",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reportIndex",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "flagInspection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getActiveRoles",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAdmin",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isCertifier",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isInspector",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isAuditor",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isEnterprise",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isCertificateFactory",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isPublic",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "enterprise",
          "type": "address"
        }
      ],
      "name": "getEnterpriseFlaggedReports",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "enterprise",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "reportIndex",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "inspector",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "enterprise",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "remarks",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "evidenceURI",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "inspectedAt",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "passed",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "flagged",
                  "type": "bool"
                }
              ],
              "internalType": "struct DataTypes.InspectionReport",
              "name": "report",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "flaggedBy",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "reason",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "flaggedAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.FlaggedInspection[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "enterprise",
          "type": "address"
        }
      ],
      "name": "getEnterpriseInspectionReports",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "inspector",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "enterprise",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "remarks",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "evidenceURI",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "inspectedAt",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "passed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "flagged",
              "type": "bool"
            }
          ],
          "internalType": "struct DataTypes.InspectionReport[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "enterprise",
          "type": "address"
        }
      ],
      "name": "getEnterpriseInspectors",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "validityPeriods",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "getFlaggedInspections",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "enterprise",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "reportIndex",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "inspector",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "enterprise",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "remarks",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "evidenceURI",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "inspectedAt",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "passed",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "flagged",
                  "type": "bool"
                }
              ],
              "internalType": "struct DataTypes.InspectionReport",
              "name": "report",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "flaggedBy",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "reason",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "flaggedAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.FlaggedInspection[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "inspector",
          "type": "address"
        }
      ],
      "name": "getInspectorReports",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "inspector",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "enterprise",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "remarks",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "evidenceURI",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "inspectedAt",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "passed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "flagged",
              "type": "bool"
            }
          ],
          "internalType": "struct DataTypes.InspectionReport[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxPublicRoleDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantAuditor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantCertificateFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantCertifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantEnterprise",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantInspector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantPublicRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasAdminRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasAuditorRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasCertificateFactoryRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasCertifierRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasEnterpriseRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasInspectorRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasPublicRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "publicRoleExpiry",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeAuditorRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeCertificateFactoryRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeCertifierRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeEnterpriseRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeInspectorRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokePublicRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rolesManager",
      "outputs": [
        {
          "internalType": "contract RolesManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_enterprise",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_passed",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "_remarks",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_evidenceURI",
          "type": "string"
        }
      ],
      "name": "submitInspectionReport",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc448fb1410db1adc0c31f1bb1abfbebbda7b595a240b516078ad667f295bda8a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "3190224",
    "logsBloom": "0x
    "blockHash": "0x45886c5b42a5a0b19d3fd28c30ccfb5903e3a0352c55ceb316d7d1952ec85690",
    "transactionHash": "0xc448fb1410db1adc0c31f1bb1abfbebbda7b595a240b516078ad667f295bda8a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 7,
        "transactionHash": "0xc448fb1410db1adc0c31f1bb1abfbebbda7b595a240b516078ad667f295bda8a",
        "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x45886c5b42a5a0b19d3fd28c30ccfb5903e3a0352c55ceb316d7d1952ec85690"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 7,
        "transactionHash": "0xc448fb1410db1adc0c31f1bb1abfbebbda7b595a240b516078ad667f295bda8a",
        "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xc41a06b26ced3a23b7bf835a0918ade784f4055ded86d18305f528f47a726052",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x45886c5b42a5a0b19d3fd28c30ccfb5903e3a0352c55ceb316d7d1952ec85690"
      }
    ],
    "blockNumber": 7,
    "cumulativeGasUsed": "3190224",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "9a79105cccbca1c8fcdf00bf17d246a3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rolesManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_certAuthority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuditorOversight__AppealWindowClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuditorOversight__CaseNotPending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuditorOversight__NotAuthorizedEnterpriseOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificateNFT__CertificateDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificateNFT__EnterpriseAlreadyCertified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificationAuthority__CertificationNotExpiredYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificationAuthority__EnterpriseAlreadyCertified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificationAuthority__EnterpriseNotCertifiedYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnterpriseRegistry__EnterpriseAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnterpriseRegistry__EnterpriseDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnterpriseRegistry__InvalidStart\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__InspectionPeriodExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__InspectorAlreadyAssigned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__InvalidReportIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__NoReportsAssociatedWithEnterprise\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__NotAssignedToEnterprise\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__ReportAlreadyFlagged\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__AlreadyHasRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__EmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedAuditor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedCertificateFactory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedCertifier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedEnterprise\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedInspector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedPublicUser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__RoleDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__UnauthorizedToPerformAction\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"roles\",\"type\":\"bytes32[]\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"BulkRolesGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reportIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"flaggedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"InspectionReportFlagged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inspector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"remarks\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"evidenceURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ReportedAt\",\"type\":\"uint256\"}],\"name\":\"InspectionReportSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inspector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validityPeriod\",\"type\":\"uint256\"}],\"name\":\"InspectorAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"PublicRoleExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"PublicRoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RoleTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUDITOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CERTIFICATE_FACTORY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CERTIFIER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_PUBLIC_ROLE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENTERPRISE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INSPECTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inspector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"validityPeriod\",\"type\":\"uint256\"}],\"name\":\"assignInspector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"roles\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"bulkGrantRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"certAuthority\",\"outputs\":[{\"internalType\":\"contract CertificationAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkExpiryRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"durationInHours\",\"type\":\"uint256\"}],\"name\":\"claimTemporaryPublicRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reportIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"flagInspection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getActiveRoles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCertifier\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isInspector\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAuditor\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnterprise\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCertificateFactory\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"}],\"name\":\"getEnterpriseFlaggedReports\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reportIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"inspector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"remarks\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"evidenceURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"inspectedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"flagged\",\"type\":\"bool\"}],\"internalType\":\"struct DataTypes.InspectionReport\",\"name\":\"report\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"flaggedBy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"flaggedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.FlaggedInspection[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"}],\"name\":\"getEnterpriseInspectionReports\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"inspector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"remarks\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"evidenceURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"inspectedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"flagged\",\"type\":\"bool\"}],\"internalType\":\"struct DataTypes.InspectionReport[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"}],\"name\":\"getEnterpriseInspectors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"validityPeriods\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getFlaggedInspections\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reportIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"inspector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"remarks\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"evidenceURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"inspectedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"flagged\",\"type\":\"bool\"}],\"internalType\":\"struct DataTypes.InspectionReport\",\"name\":\"report\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"flaggedBy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"flaggedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.FlaggedInspection[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inspector\",\"type\":\"address\"}],\"name\":\"getInspectorReports\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"inspector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"remarks\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"evidenceURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"inspectedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"flagged\",\"type\":\"bool\"}],\"internalType\":\"struct DataTypes.InspectionReport[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxPublicRoleDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantAuditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantCertificateFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantCertifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantEnterprise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantInspector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantPublicRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAdminRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAuditorRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasCertificateFactoryRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasCertifierRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasEnterpriseRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasInspectorRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasPublicRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"publicRoleExpiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeAuditorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeCertificateFactoryRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeCertifierRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeEnterpriseRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeInspectorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokePublicRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rolesManager\",\"outputs\":[{\"internalType\":\"contract RolesManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_enterprise\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_passed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_remarks\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_evidenceURI\",\"type\":\"string\"}],\"name\":\"submitInspectionReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"bulkGrantRoles(bytes32[],address[])\":{\"details\":\"Bulk grant roles to accounts\",\"params\":{\"accounts\":\"The array of accounts to grant roles emits BulkRolesGranted event on successful grant\",\"roles\":\"The array of roles to grant\"}},\"claimTemporaryPublicRole(uint256)\":{\"details\":\"allows users to claim temporary `PUBLIC` role for `durationInHours` hours on their visit to platform\",\"params\":{\"durationInHours\":\"The duration in hours the user will have the `PUBLIC` role\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantCertifier(address)\":{\"details\":\"Functions to grant roles to!\",\"params\":{\"account\":\"The account to grant the role to\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasAdminRole(address)\":{\"details\":\"Functions to check if a certain account has the specified role\",\"params\":{\"account\":\"The account to check \"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeCertifierRole(address)\":{\"details\":\"Functions to revoke roles\",\"params\":{\"account\":\"The account to revoke the role from\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferRole(bytes32,address,address)\":{\"details\":\"Transfers a role from one account to another\",\"params\":{\"from\":\"The account to transfer the role from\",\"role\":\"The role to transfer\",\"to\":\"The account to transfer the role to\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bulkGrantRoles(bytes32[],address[])\":{\"notice\":\"---------- # Bulk Role Grant(Auto) ------- //\"},\"claimTemporaryPublicRole(uint256)\":{\"notice\":\"----------- #claim temporary public role -------------- //`durationInHours` must be less than 24 hoursEmits PublicRoleGranted event on successful claim \"},\"getEnterpriseInspectionReports(address)\":{\"notice\":\"Simple reports getter for testing////\"},\"grantCertifier(address)\":{\"notice\":\"---------# GRANTING ROLES ---------//Emits RoleGranted event on successful grant\"},\"hasAdminRole(address)\":{\"notice\":\"--------- # CHECKING ROLES --------- //\"},\"revokeCertifierRole(address)\":{\"notice\":\"------------- # REVOKING ROLES ------------- //Emits RoleRevoked event on successful revoke\"},\"transferRole(bytes32,address,address)\":{\"notice\":\"-------- # Safe Role Transfer ------- //Emits RoleTransferred event on successful transfer\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/InspectionManager.sol\":\"InspectionManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0xb31b86c03f4677dcffa4655285d62433509513be9bafa0e04984565052d34e44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        _update(address(0), tokenId, _msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xc48434419baa510862ba4b4802bc0500ccddadd02ae2f195548af748c3206b20\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xcc6f49e0c57072d6a18eef0d5fc22a4cc20462c18f0c365d2dd9a2c732fde670\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/core/CertificationAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n\\n/**\\n* @author @0xJonaseb11\\n* @title CertificationAuthority Contract\\n* @dev Acts like a Certificate Authority main house for enterprises\\n* @dev Only the Certifier can certify enterprises\\n* @dev Allows update of NFT certificate's metadata URI\\n* @dev Automatic revocation of certificates after expiry duration\\n*/\\nimport {RolesManager} from \\\"./RolesManager.sol\\\";\\nimport {Events} from \\\"../utils/Events.sol\\\";\\nimport {DataTypes} from \\\"../utils/DataTypes.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract CertificationAuthority is RolesManager, ERC721URIStorage, ERC721Burnable {\\n    using DataTypes for DataTypes.Enterprise;\\n    using DataTypes for DataTypes.Certification;\\n    using DataTypes for DataTypes.InspectionReport;\\n\\n    mapping(address => DataTypes.Certification) public certifications;\\n    mapping(uint256 => address) private _tokenToEnterprise;\\n    uint256 private _tokenIdCounter;\\n\\n    constructor() ERC721(\\\"EnterpriseCertificate\\\", \\\"ECERT\\\") {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(CERTIFIER_ROLE, msg.sender);\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// ENTERPRISE CERTIFICATION ///////////////////\\n    //////////////////////////////////////////////////////////\\n\\n    /**\\n    * @dev This function is used to certify enterprises\\n    * @dev Only the Certifier can certify enterprises\\n    * @dev mints and assigns NFT certificate to an enterprise\\n    * @dev sets token URI to metadata URI of a certificate\\n    * @param enterpriseAddress The address of the enterprise to be certified\\n    * @param _industry The industry of the enterprise to be certified\\n    * @param _metadataURI The metadata URI of the certificate (IPFS hash)\\n    * @param validityDurationSeconds The validity duration of the certificate in seconds\\n    * @notice Emits CertificationGranted event on successful enterprise certification\\n    */\\n\\n    function certifyEnterprise(\\n        address enterpriseAddress,\\n        string memory _industry,\\n        string memory _metadataURI,\\n        uint256 validityDurationSeconds\\n    ) external onlyValidAddress(enterpriseAddress) onlyRole(CERTIFIER_ROLE) {\\n        if (certifications[enterpriseAddress].isCertified) {\\n            revert CertificationAuthority__EnterpriseAlreadyCertified();\\n        }\\n\\n        uint256 tokenId = _tokenIdCounter++;\\n        _safeMint(enterpriseAddress, tokenId);\\n        _setTokenURI(tokenId, _metadataURI);\\n\\n        certifications[enterpriseAddress] = DataTypes.Certification({\\n            industry: _industry,\\n            metadataURI: _metadataURI,\\n            certifiedAt: block.timestamp,\\n            expiryDate: block.timestamp + validityDurationSeconds, // three years\\n            isCertified: true,\\n            tokenId: tokenId\\n        });\\n\\n        _tokenToEnterprise[tokenId] = enterpriseAddress;\\n\\n        emit Events.CertificationGranted(\\n            enterpriseAddress,\\n            _industry,\\n            _metadataURI,\\n            block.timestamp + validityDurationSeconds\\n        );\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// REVOCATION & EXPIRY HANDLING //////////////\\n    //////////////////////////////////////////////////////////\\n    \\n\\n    /**\\n    * @dev allows the revocation of certifications from enterprises\\n    * @dev Only the `Certifier` or `Super Admin` can revoke certifications\\n    * @dev allows automatic destruction of NFT certificates via oppenzeppelin's`burn` function\\n    * @param enterpriseAddress The address of the enterprise to be revoked\\n    * @notice Emits CertificationRevoked event on successful enterprise revocation\\n    */\\n    function revokeCertification(address enterpriseAddress)\\n        external\\n        onlyValidAddress(enterpriseAddress)\\n        onlyRole(CERTIFIER_ROLE) onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\\n        if (!cert.isCertified) {\\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\\n        }\\n\\n        if (cert.tokenId != 0) {\\n            burn(cert.tokenId); \\n            delete _tokenToEnterprise[cert.tokenId];\\n        }\\n\\n        cert.isCertified = false;\\n        emit Events.CertificationRevoked(enterpriseAddress);\\n    }\\n    \\n\\n    /**\\n    * @dev allowes automatic revokation of NFT certificates after expiry duration \\n    * @dev callable by anyone as long as expiry date kicks in\\n    * @notice Emits CertificationRevoked event on successful enterprise revocation\\n    */\\n    function revokeIfExpired(address enterpriseAddress) external {\\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\\n\\n        if (!cert.isCertified) {\\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\\n        }\\n        if (block.timestamp < cert.expiryDate) {\\n            revert CertificationAuthority__CertificationNotExpiredYet();\\n        }\\n\\n        if (cert.tokenId != 0) {\\n            burn(cert.tokenId);\\n            delete _tokenToEnterprise[cert.tokenId];\\n        }\\n\\n        cert.isCertified = false;\\n        emit Events.CertificationRevoked(enterpriseAddress);\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// TRANSFER CONTROL ///////////////////////////\\n    //////////////////////////////////////////////////////////\\n\\n    function _update(\\n        address to,\\n        uint256 tokenId,\\n        address auth\\n    ) internal override(ERC721) returns (address) {\\n        // Block all transfers except minting (to) and burning (address(0))\\n        if (auth != address(0)) {\\n            require(to == address(0), \\\"Certificates are non-transferable\\\");\\n        }\\n        return super._update(to, tokenId, auth);\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// VALIDATION & METADATA //////////////////////\\n    //////////////////////////////////////////////////////////\\n\\n    function isCertificationValid(address enterpriseAddress)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\\n        return cert.isCertified && block.timestamp <= cert.expiryDate;\\n    }\\n\\n    function isCertificateValid(uint256 tokenId) public view returns (bool) {\\n        address enterprise = _tokenToEnterprise[tokenId];\\n        return isCertificationValid(enterprise);\\n    }\\n    \\n    \\n    /**\\n    * @dev updates the metadata URI of the NFT certificate\\n    * @dev Only the `Certifier` can update certification metadata URI\\n    * @param enterpriseAddress The address of the enterprise to be updated\\n    * @param newMetadataURI The new metadata URI of the certificate\\n    * @notice Emits CertificationUpdated event on successful metadata update\\n    */\\n    function updateCertificationMetadata(\\n        address enterpriseAddress,\\n        string calldata newMetadataURI\\n    ) external onlyValidAddress(enterpriseAddress) onlyRole(CERTIFIER_ROLE) {\\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\\n        if (!cert.isCertified) {\\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\\n        }\\n\\n        if (cert.tokenId != 0) {\\n            _setTokenURI(cert.tokenId, newMetadataURI);\\n        }\\n\\n        cert.metadataURI = newMetadataURI;\\n        emit Events.CertificationUpdated(enterpriseAddress, newMetadataURI);\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// GETTERS & OVERRIDES ////////////////////////\\n    //////////////////////////////////////////////////////////\\n\\n    function getCertification(address enterpriseAddress)\\n        public\\n        view\\n        returns (DataTypes.Certification memory)\\n    {\\n        return certifications[enterpriseAddress];\\n    }\\n\\n    function getEnterpriseByTokenId(uint256 tokenId)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return _tokenToEnterprise[tokenId];\\n    }\\n\\n    // ----- Required overrides for multiple inheritance --- //\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override(ERC721, ERC721URIStorage)\\n        returns (string memory)\\n    {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721, ERC721URIStorage, AccessControl)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xbaf289d8ec21b4365ca13f74d42d32330ded1c3dff855d0769197a90afa9331a\",\"license\":\"MIT\"},\"contracts/core/RolesManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n\\n/**\\n* @author @0xJonaseb11\\n\\n* @dev manages the roles of the whole ecosystem \\n* @dev Only Super Admin can assign roles\\n* @dev On very high roles, there's DAO voting\\n*/\\n\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { Events } from \\\"../utils/Events.sol\\\";\\nimport { Errors } from \\\"../utils/Errors.sol\\\";\\nimport { DataTypes } from \\\"../utils/DataTypes.sol\\\";\\n\\n\\ncontract RolesManager is AccessControl, Errors {\\n\\n\\n\\n    //////////////////////////////////////////////////////////\\n    // ==================================================== //\\n    /////// work on the default public role expiry period\\n    /////// Work on the logic of handling\\n    // ===================================================== //\\n    //////////////////////////////////////////////////////////\\n\\n\\n\\n    bytes32 public constant CERTIFIER_ROLE = keccak256(\\\"CERTIFYING_BODY_ROLE\\\");\\n    bytes32 public constant INSPECTOR_ROLE = keccak256(\\\"INSPECTION_MANAGER_ROLE\\\");\\n    bytes32 public constant AUDITOR_ROLE = keccak256(\\\"AUDITOR_ROLE\\\");\\n    bytes32 public constant ENTERPRISE_ROLE = keccak256(\\\"ENTERPRISE_ROLE\\\");\\n    bytes32 public constant CERTIFICATE_FACTORY_ROLE = keccak256(\\\"CERTIFICATE_FACTORY_ROLE\\\");\\n    bytes32 public constant PUBLIC_ROLE = keccak256(\\\"PUBLIC_ROLE\\\");\\n\\n    mapping(address => uint256) public publicRoleExpiry;\\n\\n    uint256 public constant DEFAULT_PUBLIC_ROLE_DURATION = 2 minutes;\\n\\n   // ----- modifiers\\n   modifier onlyValidAddress(address account) {\\n    if (account == address(0)) {\\n        revert InvalidAddress();\\n    }\\n    _;\\n   }\\n\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(CERTIFIER_ROLE,  msg.sender);\\n    }\\n\\n\\n    /** ----------- #claim temporary public role -------------- //\\n    * @dev allows users to claim temporary `PUBLIC` role for `durationInHours` hours on their visit to platform\\n    * @param durationInHours The duration in hours the user will have the `PUBLIC` role\\n    * @notice `durationInHours` must be less than 24 hours\\n    * @notice Emits PublicRoleGranted event on successful claim \\n    */\\n    function claimTemporaryPublicRole(uint256 durationInHours) external {\\n        if (hasPublicRole(msg.sender)) {\\n            revert RolesManager__AlreadyHasRole();\\n        }\\n        if (durationInHours < 0 || durationInHours > 24) {\\n            revert RolesManager__InvalidDuration();\\n        }\\n      \\n        uint256 durationInSeconds = durationInHours * 1 hours;\\n    \\n        _grantRole(PUBLIC_ROLE, msg.sender);\\n        publicRoleExpiry[msg.sender] = block.timestamp + durationInSeconds;\\n\\n        emit Events.PublicRoleGranted(msg.sender, durationInHours);\\n    }\\n\\n    // ------- helper for client ---- //\\n    function getMaxPublicRoleDuration() public pure returns (uint256) {\\n        return 24;\\n    }\\n\\n\\n    /** --------- #  Auto-expiry check (Call periodically) ------- //\\n    * @dev helper to check expiry of `PUBLIC` role\\n    * @param account The account to check for role expiry\\n    * @notice Emits PublicRoleExpired event on expiry\\n    */\\n    function _hasRawPublicRole(address account) internal view returns (bool) {\\n        return hasRole(PUBLIC_ROLE, account);\\n    }\\n    function checkExpiryRoles(address account) public {\\n        if (!_hasRawPublicRole(account)) revert RolesManager__RoleDoesNotExist();\\n        if (publicRoleExpiry[account] < block.timestamp) {\\n            _revokeRole(PUBLIC_ROLE, account);\\n\\n            emit Events.PublicRoleExpired(account);\\n        }\\n    }\\n\\n    /** ---------- # Bulk Role Grant(Auto) ------- //\\n    * @dev Bulk grant roles to accounts\\n    * @param roles The array of roles to grant\\n    * @param accounts The array of accounts to grant roles\\n    * emits BulkRolesGranted event on successful grant\\n    */\\n    function bulkGrantRoles(\\n        bytes32[] calldata roles,\\n        address[] calldata accounts\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (roles.length == 0 || accounts.length == 0) {\\n            revert RolesManager__EmptyArray();\\n        }\\n        if (roles.length != accounts.length) {\\n            revert RolesManager__ArrayLengthMismatch();\\n        }\\n        \\n        for (uint256 i = 0; i < roles.length; i++) {\\n            _grantRole(roles[i], accounts[i]);\\n        }\\n\\n        emit Events.BulkRolesGranted(roles, accounts);\\n    }\\n\\n    /** -------- # Safe Role Transfer ------- //\\n    * @dev Transfers a role from one account to another\\n    * @param role The role to transfer\\n    * @param from The account to transfer the role from\\n    * @param to The account to transfer the role to\\n    * @notice Emits RoleTransferred event on successful transfer\\n    */\\n    function transferRole(\\n        bytes32 role,\\n        address from,\\n        address to  \\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasRole(role, from)) {\\n            revert RolesManager__RoleDoesNotExist();\\n        }\\n        _revokeRole(role, from);\\n        _grantRole(role, to);\\n\\n        emit Events.RoleTransferred(role, from, to);\\n    }\\n\\n    // ---- combined role check ----- //\\n    function getActiveRoles(address account) public view returns (\\n        bool isAdmin,\\n        bool isCertifier,\\n        bool isInspector,\\n        bool isAuditor,\\n        bool isEnterprise,\\n        bool isCertificateFactory,\\n        bool isPublic\\n    ) {\\n        return (\\n            hasRole(DEFAULT_ADMIN_ROLE, account),\\n            hasRole(CERTIFIER_ROLE, account),\\n            hasRole(INSPECTOR_ROLE, account),\\n            hasRole(AUDITOR_ROLE, account),\\n            hasRole(ENTERPRISE_ROLE, account),\\n            hasRole(CERTIFICATE_FACTORY_ROLE, account),\\n            hasRole(PUBLIC_ROLE, account)\\n        );\\n    }\\n    \\n\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n    _grantRole(role, account);\\n}\\n\\n\\n    ////////////////////////////////////////////////\\n    /////// MANAUAL ROLES MANAGEMENT  ////////////////\\n    ////////////////////////////////////////////////\\n    \\n\\n    /////////////////////////////////\\n    ////// ROLE GRANTING ////////////\\n    /////////////////////////////////\\n    \\n    /** ---------# GRANTING ROLES ---------//\\n    * @dev Functions to grant roles to!\\n    * @param account The account to grant the role to\\n    * @notice Emits RoleGranted event on successful grant\\n    */\\n    function grantCertifier(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        grantRole(CERTIFIER_ROLE, account);\\n\\n        emit Events.RoleGranted(CERTIFIER_ROLE, account);\\n\\n    }\\n    \\n    function grantInspector(address account ) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        grantRole(INSPECTOR_ROLE, account);\\n        emit Events.RoleGranted(INSPECTOR_ROLE, account);\\n    }\\n\\n    function grantAuditor(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        grantRole(AUDITOR_ROLE, account);\\n        emit Events.RoleGranted(AUDITOR_ROLE, account);\\n    }\\n\\n    function grantEnterprise(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        grantRole(ENTERPRISE_ROLE, account);\\n        emit Events.RoleGranted(ENTERPRISE_ROLE, account);\\n    }\\n     \\n    function grantCertificateFactory(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        grantRole(CERTIFICATE_FACTORY_ROLE, account);\\n        emit Events.RoleGranted(CERTIFICATE_FACTORY_ROLE, account);\\n    }\\n\\n    function grantPublicRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        grantRole(PUBLIC_ROLE, account);\\n        publicRoleExpiry[msg.sender] = block.timestamp + DEFAULT_PUBLIC_ROLE_DURATION;\\n\\n        emit Events.RoleGranted(PUBLIC_ROLE, account);\\n    }\\n\\n\\n    /**\\n    * @dev Public role will be claimed instantly\\n    * On the entry of a user to our platform\\n    * Just clicking `claim public role` and user is assigned role\\n    * @notice I plan to make it a temporary role on every visit to our platform\\n    */\\n\\n    /////////////////////////////////\\n    // ROLE REVOKATION /////////////\\n    ////////////////////////////////\\n    \\n\\n    /** ------------- # REVOKING ROLES ------------- //\\n    * @dev Functions to revoke roles\\n    * @param account The account to revoke the role from\\n    * @notice Emits RoleRevoked event on successful revoke\\n    */\\n    function revokeCertifierRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        revokeRole(CERTIFIER_ROLE, account);\\n        emit Events.RoleRevoked(CERTIFIER_ROLE, account);\\n    }\\n\\n    function revokeInspectorRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        revokeRole(INSPECTOR_ROLE, account);\\n    }\\n\\n    function revokeAuditorRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n    revokeRole(AUDITOR_ROLE, account);\\n    emit Events.RoleRevoked(AUDITOR_ROLE, account);\\n    }\\n\\n    function revokeEnterpriseRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        revokeRole(ENTERPRISE_ROLE, account);\\n        emit Events.RoleRevoked(ENTERPRISE_ROLE, account);\\n    }\\n\\n    function revokeCertificateFactoryRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        revokeRole(CERTIFICATE_FACTORY_ROLE, account);\\n        emit Events.RoleRevoked(CERTIFICATE_FACTORY_ROLE, account);\\n    }\\n    \\n    function revokePublicRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        revokeRole(PUBLIC_ROLE, account);\\n        emit Events.RoleRevoked(PUBLIC_ROLE, account);\\n    }\\n\\n\\n    /////////////////////////////////////////////////\\n    //////// ROLE CHECKS //////////////////\\n    /////////////////////////////////////////////////\\n    \\n   /** --------- # CHECKING ROLES --------- //\\n   * @dev Functions to check if a certain account has the specified role\\n   * @param account The account to check \\n   */\\n    function hasAdminRole(address account) public view returns(bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    function hasCertifierRole(address account) public view returns(bool) { \\n        return hasRole(CERTIFIER_ROLE, account);\\n    }\\n\\n    function hasInspectorRole(address account) public view  returns(bool) {\\n        return hasRole(INSPECTOR_ROLE, account);\\n    }\\n\\n    function hasAuditorRole(address account) public view  returns(bool) {\\n        return hasRole(AUDITOR_ROLE, account);\\n    }\\n\\n    function hasEnterpriseRole(address account) public view  returns(bool) {\\n        return hasRole(ENTERPRISE_ROLE, account);\\n    }\\n\\n    function hasCertificateFactoryRole(address account) public view  returns(bool) {\\n        return hasRole(CERTIFICATE_FACTORY_ROLE, account);\\n    }\\n    \\n    function hasPublicRole(address account) public view returns(bool) {\\n        if (_hasRawPublicRole(account) && publicRoleExpiry[account] > block.timestamp) {\\n            return true;\\n        }\\n        return false;\\n    }\\n}\",\"keccak256\":\"0xf4709898a14dd773491392570ec0a6cc413536b0c36b1c7ce8b3ddf5252a95c6\",\"license\":\"MIT\"},\"contracts/modules/InspectionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n* @author @0xJonaseb11 \\n* @title InspectionManager Contract\\n* @dev Manages inspection process and reports\\n* @automates certification revocation when inspection is not passed\\n*/\\n\\n///////////////////////////////////////////////////////////////////\\n/////// TO-DO : : Implement Inspection Validity specification/////\\n/////// Initial 30 days atleast - can be changed by Super Admin //\\n////// ASK REGIS HOW LONG A CERTIFICATION WOULD LAST ////////////\\n////////////////////////////////////////////////////////////////\\n\\n\\n\\n\\n//// -------- Fining enterprises ----- //\\n//// Implement enteprise fining and revocation // \\n//// on chain --- fallabck contracts /// \\n\\n\\nimport { RolesManager } from \\\"../core/RolesManager.sol\\\";\\nimport { CertificationAuthority } from \\\"../core/CertificationAuthority.sol\\\";\\nimport { Events } from \\\"../utils/Events.sol\\\";\\nimport { DataTypes } from \\\"../utils/DataTypes.sol\\\";\\n\\ncontract InspectionManager is RolesManager {\\n    RolesManager public immutable rolesManager;\\n    CertificationAuthority public immutable certAuthority;\\n\\n    // Inspection relationships\\n    mapping(address => address[]) private _enterpriseInspectors;\\n    mapping(address => address[]) private _inspectorEnterprises;\\n\\n    // Inspection reports storage\\n    mapping(address => DataTypes.InspectionReport[]) private _enterpriseReports;\\n    mapping(address => mapping(address => uint256)) private _lastInspectionTimestamps;\\n\\n    // flagged inspection tracking\\n    mapping(uint256 => DataTypes.FlaggedInspection) private _flaggedInspections;\\n    mapping(address => uint256[]) private _enterpriseFlaggedReports;\\n    uint256 private _flagCounter;\\n    constructor(address _rolesManager, address _certAuthority) {\\n        rolesManager = RolesManager(_rolesManager);\\n        certAuthority = CertificationAuthority(_certAuthority);\\n    }\\n\\n\\n\\n    ////////////////////////////////////////\\n    //////// ENHANCED ACCESS CONTROL //////\\n    //////////////////////////////////////\\n\\n        modifier onlyCertifier() {\\n        if (!hasCertifierRole(msg.sender)) {\\n            revert RolesManager__NotAuthorizedCertifier();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyActiveInspector(address enterprise) {\\n\\n        if (!hasInspectorRole(msg.sender)) {\\n            revert RolesManager__NotAuthorizedInspector();\\n        }\\n\\n        if (!_isInspectorAssigned(enterprise, msg.sender)) {\\n            revert InspectionManager__NotAssignedToEnterprise();\\n        }\\n\\n        if (block.timestamp > _lastInspectionTimestamps[enterprise][msg.sender]) {\\n            revert InspectionManager__InspectionPeriodExpired();\\n        }\\n        _;\\n    }\\n\\n\\n\\n    ////////////////////////////////////////////\\n    ////////// INSPECTOR ASSIGNMENT ///////////\\n    ///////////////////////////////////////////\\n    function assignInspector(\\n        address enterprise,\\n        address inspector,\\n        uint256 validityPeriod\\n    ) external onlyCertifier {\\n\\n        if (!certAuthority.isCertificationValid(enterprise)) {\\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\\n        }\\n\\n        if (!hasInspectorRole(inspector)) {\\n            revert RolesManager__NotAuthorizedInspector();\\n        }\\n\\n        _enterpriseInspectors[enterprise].push(inspector);\\n        _inspectorEnterprises[inspector].push(enterprise);\\n        _lastInspectionTimestamps[enterprise][inspector] = block.timestamp + validityPeriod;\\n\\n        emit Events.InspectorAssigned(\\n            enterprise, inspector, validityPeriod\\n        );\\n    }\\n\\n    ///////////////////////////////////////////////\\n    /////// INSPECTION REPORTING /////////////////\\n    /////////////////////////////////////////////\\n    function submitInspectionReport (\\n        address _enterprise,\\n        bool _passed,\\n        string calldata _remarks,\\n        string calldata _evidenceURI\\n    ) external onlyActiveInspector(_enterprise) {\\n\\n        if (block.timestamp > _lastInspectionTimestamps[_enterprise][msg.sender]) {\\n            revert InspectionManager__InspectionPeriodExpired();\\n        }\\n\\n        DataTypes.InspectionReport memory report = DataTypes.InspectionReport({\\n            inspector: msg.sender,\\n            enterprise: _enterprise,\\n            remarks: _remarks,\\n            evidenceURI: _evidenceURI, // IPFS hash\\n            inspectedAt: block.timestamp,\\n            passed: _passed,\\n            flagged: false\\n        });\\n\\n        _enterpriseReports[_enterprise].push(report);\\n\\n        // Auto-revoke certification if not passed\\n        if (!_passed) {\\n            certAuthority.revokeCertification(_enterprise);\\n            \\n\\n        }\\n\\n   \\n\\n        emit Events.InspectionReportSubmitted(\\n            msg.sender,\\n            _enterprise,\\n            _passed,\\n            _remarks,\\n            _evidenceURI,\\n            block.timestamp\\n        );\\n    }\\n\\n\\n         /////////////////////////////////////////////////\\n        ////////// INSPECTION FLAGGING /////////////////\\n        ////////////////////////////////////////////////\\n        function flagInspection(\\n            address enterprise,\\n            uint256 reportIndex,\\n            string calldata reason\\n        ) external onlyRole(AUDITOR_ROLE) {\\n            if (reportIndex >_enterpriseReports[enterprise].length) {\\n                revert InspectionManager__InvalidReportIndex();\\n            }\\n            \\n            if (_enterpriseReports[enterprise][reportIndex].flagged) {\\n                revert InspectionManager__ReportAlreadyFlagged();\\n            }\\n\\n            _enterpriseReports[enterprise][reportIndex].flagged = true;\\n\\n            DataTypes.FlaggedInspection memory flagged = DataTypes.FlaggedInspection({\\n                enterprise: enterprise,\\n                reportIndex: reportIndex,\\n                report: _enterpriseReports[enterprise][reportIndex],\\n                flaggedBy: msg.sender,\\n                reason: reason,\\n                flaggedAt: block.timestamp\\n            });\\n\\n            _flaggedInspections[_flagCounter] = flagged;\\n            _enterpriseFlaggedReports[enterprise].push(_flagCounter);\\n            _flagCounter++;\\n\\n            emit Events.InspectionReportFlagged(\\n                enterprise,\\n                reportIndex,\\n                msg.sender,\\n                reason,\\n                block.timestamp\\n            );\\n\\n        }\\n\\n\\n    ////////////////////////////////////////////////\\n    /////// CROSS-CONTRACT VALIDATION /////////////\\n    //////////////////////////////////////////////\\n    function _isInspectorAssigned(address enterprise, address inspector) private view returns(bool) {\\n        for (uint256 i = 0; i < _enterpriseInspectors[enterprise].length; i++) {\\n            if (_enterpriseInspectors[enterprise][i] == inspector) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    //////////////////////////////////////////////\\n    //////// COMPEREHENSIVE GETTERS /////////////\\n    ////////////////////////////////////////////\\n    function getEnterpriseInspectors(address enterprise)\\n    public \\n    view \\n    returns(address[] memory, uint256[] memory validityPeriods)\\n     {\\n        address[] memory inspectors = _enterpriseInspectors[enterprise];\\n        uint256[] memory periods = new uint256[](inspectors.length);\\n\\n        for (uint256 i = 0; i < inspectors.length; i++) {\\n            periods[i] = _lastInspectionTimestamps[enterprise][inspectors[i]];\\n        }\\n\\n        return (inspectors, periods);\\n     }\\n\\n    function getInspectorReports(address inspector)\\n      public\\n      view \\n      returns(DataTypes.InspectionReport[] memory) {\\n\\n      address[] memory enterprises = _inspectorEnterprises[inspector];\\n      uint256 totalReports;\\n\\n      // First pass: count reports\\n      for (uint256 i = 0; i < enterprises.length; i++) {\\n        totalReports += _enterpriseReports[enterprises[i]].length;\\n      }\\n\\n     // Second pass: collect reports\\n    DataTypes.InspectionReport[] memory reports = new DataTypes.InspectionReport[](totalReports);\\n    uint256 counter;\\n\\n    for (uint256 i = 0; i < enterprises.length; i++) {\\n        for (uint256 j = 0; j <_enterpriseReports[enterprises[i]].length; j++) {\\n            if (_enterpriseReports[enterprises[i]][j].inspector == inspector) {\\n                reports[counter++] = _enterpriseReports[enterprises[i]][j];\\n            }\\n        }\\n    }    \\n\\n        return reports;\\n    }\\n\\n    /////////////////////////////////////////\\n    /// Simple reports getter for testing////\\n    /////////////////////////////////////////\\n      function getEnterpriseInspectionReports(address enterprise) external view returns(DataTypes.InspectionReport[] memory) {\\n\\n        if (_enterpriseReports[enterprise].length == 0) {\\n            revert InspectionManager__NoReportsAssociatedWithEnterprise();\\n        }\\n        return _enterpriseReports[enterprise];\\n    }\\n\\n\\n\\n    //////////////////////////////////////////\\n    ///// FLAGGED INSPECTION GETTERS ////////\\n    ////////////////////////////////////////\\n    function getFlaggedInspections(uint256 limit, uint256 offset) \\n        public view \\n        returns(DataTypes.FlaggedInspection[] memory) {\\n            uint256 resultSize = limit > _flagCounter - offset ?  _flagCounter - offset : limit;\\n            DataTypes.FlaggedInspection[] memory result = new DataTypes.FlaggedInspection[](resultSize);\\n\\n            for (uint256 i = 0; i < resultSize; i++) {\\n                result[i] = _flaggedInspections[offset + i];\\n            }\\n\\n            return result;\\n    }\\n\\n    function getEnterpriseFlaggedReports(address enterprise)\\n    public\\n    view\\n    returns(DataTypes.FlaggedInspection[] memory) {\\n        uint256[] memory flaggedIds = _enterpriseFlaggedReports[enterprise];\\n        DataTypes.FlaggedInspection[] memory result = new DataTypes.FlaggedInspection[](flaggedIds.length);\\n\\n        for (uint256 i = 0; i < flaggedIds.length; i++) {\\n            result[i] = _flaggedInspections[flaggedIds[i]];\\n        }\\n        return result;\\n    }\\n}\",\"keccak256\":\"0x3736c72f9bcd3c73321a2348209cb993e28a125686246b7ee72088ae0906e656\",\"license\":\"MIT\"},\"contracts/utils/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n* @author @0xJonaseb11\\n* @dev This library contains the data types used by the contracts\\n* @dev These structs hold a huge role in maintaining contract states\\n*/\\nlibrary DataTypes {\\n    struct Certification {\\n        string industry;\\n        string metadataURI;\\n        uint256 certifiedAt;\\n        uint256 expiryDate;\\n        bool isCertified;\\n        uint256 tokenId;\\n    }\\n\\n    struct Enterprise {\\n        address enterpriseAddress;\\n        string name;\\n        string industry;\\n        string metadataURI;\\n        bool isRegistered;\\n        uint256 registrationDate;\\n        uint256 lastUpdated;\\n        uint256 certificateId;\\n    }\\n\\n    struct InspectionReport {\\n        address inspector;\\n        address enterprise;\\n        string remarks;\\n        string evidenceURI; // IPFS hash\\n        uint256 inspectedAt;\\n        bool passed;\\n        bool flagged;\\n    }\\n\\n    struct FlaggedInspection {\\n        address enterprise;\\n        uint256 reportIndex;\\n        InspectionReport report;\\n        address flaggedBy;\\n        string reason;\\n        uint256 flaggedAt;\\n    }\\n\\n    struct NFTCertificate {\\n    address enterprise;\\n    address issuer;\\n    uint256 issuedAt;\\n    uint256 expiresAt;\\n    bool isRevoked;\\n    }\\n\\n    struct AuditCase {\\n        uint256 id;\\n        address targetEnterprise;\\n        uint256 inspectionId;\\n        address auditor;\\n        string reason;\\n        string evidenceURI;\\n        uint256 depositAmount;\\n        AuditStatus status;\\n        uint256 createdAt;\\n        uint256 resolvedAt;\\n    }\\n\\n    enum AuditStatus {\\n        Pending,\\n        Upheld,\\n        Rejected,\\n        Appealed\\n    }\\n}\",\"keccak256\":\"0xdd54b6675ea527069420c989adb49b0cd9a67ba27876feee92e0ee8a5d99fa3e\",\"license\":\"MIT\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n* @author @0xJonaseb11\\n* @dev contains the custom errors emitted by the contracts\\n@notice All the contracts inherit this to handle custom errors\\n*/\\n\\ncontract Errors {\\n    error InvalidAddress();\\n\\n    // -------- RolesManager ------------------//\\n    error RolesManager__UnauthorizedToPerformAction();\\n    error RolesManager__NotAuthorizedCertifier();\\n    error RolesManager__NotAuthorizedInspector();\\n    error RolesManager__NotAuthorizedAuditor();\\n    error RolesManager__NotAuthorizedEnterprise();\\n    error RolesManager__NotAuthorizedCertificateFactory();\\n    error RolesManager__NotAuthorizedPublicUser();\\n    error RolesManager__AlreadyHasRole();\\n    error RolesManager__InvalidDuration();\\n    error RolesManager__EmptyArray();\\n    error RolesManager__ArrayLengthMismatch();\\n    error RolesManager__RoleDoesNotExist();\\n\\n    // ------- EnterpriseRegistry --------------//\\n    error EnterpriseRegistry__EnterpriseAlreadyExists();\\n    error EnterpriseRegistry__EnterpriseDoesNotExist();\\n    error EnterpriseRegistry__InvalidStart();\\n\\n    // ------- CertificationAuthority ------- //\\n    error CertificationAuthority__EnterpriseAlreadyCertified();\\n    error CertificationAuthority__EnterpriseNotCertifiedYet();\\n    error CertificationAuthority__CertificationNotExpiredYet();\\n\\n    // -------- CertificateNFT --------- //\\n    error CertificateNFT__EnterpriseAlreadyCertified();\\n    error CertificateNFT__CertificateDoesNotExist();\\n\\n    // -------- InspectionManageer --------- //\\n    error InspectionManager__InspectorAlreadyAssigned();\\n    error InspectionManager__InspectionPeriodExpired();\\n    error InspectionManager__NotAssignedToEnterprise();\\n    error InspectionManager__InvalidReportIndex();\\n    error InspectionManager__ReportAlreadyFlagged();\\n    error InspectionManager__NoReportsAssociatedWithEnterprise();\\n\\n\\n    // ---------- InspectionReport ----------- //\\n\\n    error AuditorOversight__NotAuthorizedEnterpriseOwner();\\n    error AuditorOversight__AppealWindowClosed();\\n    error AuditorOversight__CaseNotPending();\\n\\n}\",\"keccak256\":\"0xe1870fe63ce3362913db4f28a24dd1ae1cb1044dbd327874658b71e0177f9241\",\"license\":\"MIT\"},\"contracts/utils/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n/**\\n* @author @0xJonaseb11\\n* @dev This library contains the events emitted by the contracts\\n* @dev All the contracts inherit this to handle events\\n*/\\n\\nlibrary Events {\\n    event CertificationGranted(address indexed enterprise, string industry, string metadataURI, uint256 expiryDate);\\n    event CertificationRevoked(address indexed enterprise);\\n    event CertificationUpdated(address indexed enterprise, string newMetadataURI);\\n\\n    event EnterpriseRegistered(address indexed enterprise, string name, string industry, string metadataURI, uint256 certificateId);\\n    event EnterpriseUpdated(address indexed enterprise, string newMetadataURI);\\n    event EnterpriseDeregistered(address indexed enterprise, uint256 deregisteredAt);\\n    \\n    event InspectorAssigned(address indexed enterprise, address indexed inspector, uint256 validityPeriod);\\n    event InspectionReportSubmitted(address indexed inspector, address indexed enterprise, bool passed, string remarks, string evidenceURI, uint256 ReportedAt);\\n    event InspectionReportFlagged(address indexed enterprise, uint256 indexed reportIndex, address flaggedBy, string reason, uint256 timestamp);\\n    \\n    event CertificateMinted(uint256 certificateId, address indexed enterprise, address indexed certifier, uint256 mintedAt);\\n    event CertificateRevoked(uint256 certificateId, address indexed revoker, uint256 timestamp);\\n\\n\\n    event PublicRoleGranted(address indexed user, uint256 duration);\\n    event PublicRoleExpired(address indexed user);\\n    event RoleTransferred(bytes32 indexed role, address from, address to);\\n    event BulkRolesGranted(bytes32[] roles, address[] indexed accounts);\\n    event RoleGranted(bytes32 indexed role, address indexed account);\\n    event RoleRevoked(bytes32 indexed role, address indexed account);\\n\\n    event AuditInitiated(uint256 indexed caseId, address indexed enterprise, uint256 inspectionId, address auditor, string reason, string evidenceURI);\\n    event AuditResolved(uint256 indexed caseId, address indexed enterprise, address resolvedBy, bool upheld, string remarks);\\n    event AppealFiled(uint256 indexed caseid, address indexed enterprise, string counterEvidenceURI, uint256 timestamp);\\n\\n}    \",\"keccak256\":\"0x16284b3e5d51e25be566f386cec7ad356796324565c6403c4de723411b734122\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200398838038062003988833981016040819052620000349162000162565b6200004160003362000085565b6200006d7fc41a06b26ced3a23b7bf835a0918ade784f4055ded86d18305f528f47a7260523362000085565b6001600160a01b039182166080521660a0526200019a565b62000091828262000096565b505050565b6000828152602081815260408083206001600160a01b038516845290915281205460ff166200013b576000838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055620000f23390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016200013f565b5060005b92915050565b80516001600160a01b03811681146200015d57600080fd5b919050565b600080604083850312156200017657600080fd5b620001818362000145565b9150620001916020840162000145565b90509250929050565b60805160a0516137ba620001ce60003960008181610561015281816122d001526123d1015260006105db01526137ba6000f3fe608060405234801561001057600080fd5b50600436106102d65760003560e01c80637bff097511610182578063b1ba3883116100e9578063c395fcb3116100a2578063e3a3c5221161007c578063e3a3c52214610718578063e55b4f931461072d578063f53f5e1e14610740578063fc8102861461075357600080fd5b8063c395fcb3146106df578063cc5ed5ea146106f2578063d547741f1461070557600080fd5b8063b1ba388314610677578063b1ea540e1461068a578063b5617ef71461069d578063b8ad415e146106bd578063b9bc982f146106c4578063bd7ca7ba146106cc57600080fd5b8063a1f341631161013b578063a1f34163146105bb578063a217fddf146105ce578063a3574c5b146105d6578063aa52617c146105fd578063abaa536f14610610578063b0614db31461062357600080fd5b80637bff0975146105105780637e5effa4146105235780638850845f1461053657806391d148541461054957806399eb08d61461055c5780639a98163b1461059b57600080fd5b8063456f19fc1161024157806361462f0e116101fa57806369d0b517116101d457806369d0b517146104be5780636e1d616e146104d35780637780e9c1146104e8578063784fee0e146104fb57600080fd5b806361462f0e1461048357806368b688c11461049657806368dd17a5146104a957600080fd5b8063456f19fc146104045780634e4ddb921461041757806352f84b721461043757806357c033711461044a5780635cb87d261461045d578063603765281461047057600080fd5b8063261191b711610293578063261191b7146103905780632f2ff15d146103a357806336568abe146103b65780633ca7c02a146103c95780633e251518146103de5780634308ac98146103f157600080fd5b806301ffc9a7146102db5780630443cd2a1461030357806308d0aef7146103185780631e223b2a14610339578063248a9ca31461034c57806325d5e87e1461037d575b600080fd5b6102ee6102e9366004612ddb565b610766565b60405190151581526020015b60405180910390f35b610316610311366004612e28565b61079d565b005b61032b610326366004612e28565b61081f565b6040516102fa929190612e43565b610316610347366004612e28565b61097b565b61036f61035a366004612ec7565b60009081526020819052604090206001015490565b6040519081526020016102fa565b61031661038b366004612e28565b6109fd565b61031661039e366004612e28565b610a94565b6103166103b1366004612ee0565b610b16565b6103166103c4366004612ee0565b610b41565b61036f6000805160206136c583398151915281565b6103166103ec366004612e28565b610b79565b6103166103ff366004612f55565b610bfb565b610316610412366004612e28565b6110eb565b61042a610425366004612faf565b61116d565b6040516102fa9190613094565b6102ee610445366004612e28565b6114b3565b610316610458366004612e28565b6114cd565b61031661046b366004613157565b61156b565b61031661047e366004612e28565b6115fe565b6103166104913660046131d8565b611680565b61042a6104a4366004612e28565b611793565b61036f60008051602061368583398151915281565b61036f6000805160206136e583398151915281565b61036f60008051602061372583398151915281565b6103166104f6366004612ec7565b611b24565b61036f60008051602061370583398151915281565b6102ee61051e366004612e28565b611bf2565b610316610531366004612e28565b611c0c565b6102ee610544366004612e28565b611c8e565b6102ee610557366004612ee0565b611ca4565b6105837f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102fa565b6105ae6105a9366004612e28565b611ccd565b6040516102fa9190613238565b6102ee6105c9366004612e28565b611eed565b61036f600081565b6105837f000000000000000000000000000000000000000000000000000000000000000081565b61031661060b366004612e28565b611f07565b6102ee61061e366004612e28565b611f89565b610636610631366004612e28565b611fa3565b60408051971515885295151560208801529315159486019490945290151560608501521515608084015290151560a0830152151560c082015260e0016102fa565b6103166106853660046132a8565b61205c565b61031661069836600461333b565b61238c565b61036f6106ab366004612e28565b60016020526000908152604090205481565b601861036f565b61036f607881565b6103166106da366004612e28565b61254d565b6102ee6106ed366004612e28565b612598565b6105ae610700366004612e28565b6125a4565b610316610713366004612ee0565b6129e4565b61036f60008051602061374583398151915281565b61031661073b366004612e28565b612a09565b6102ee61074e366004612e28565b612a8b565b610316610761366004612e28565b612ace565b60006001600160e01b03198216637965db0b60e01b148061079757506301ffc9a760e01b6001600160e01b03198316145b92915050565b806001600160a01b0381166107c55760405163e6c4247b60e01b815260040160405180910390fd5b60006107d081612b50565b6107e86000805160206136c5833981519152846129e4565b6040516001600160a01b038416906000805160206136c58339815191529060008051602061376583398151915290600090a3505050565b6001600160a01b038116600090815260026020908152604080832080548251818502810185019093528083526060948594909392919083018282801561088e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610870575b505050505090506000815167ffffffffffffffff8111156108b1576108b1613377565b6040519080825280602002602001820160405280156108da578160200160208202803683370190505b50905060005b8251811015610970576001600160a01b038616600090815260056020526040812084519091908590849081106109185761091861338d565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020548282815181106109535761095361338d565b602090810291909101015280610968816133b9565b9150506108e0565b509094909350915050565b806001600160a01b0381166109a35760405163e6c4247b60e01b815260040160405180910390fd5b60006109ae81612b50565b6109c660008051602061368583398151915284610b16565b6040516001600160a01b03841690600080516020613685833981519152906000805160206136a583398151915290600090a3505050565b610a0681612b5a565b610a23576040516366783c9d60e11b815260040160405180910390fd5b6001600160a01b038116600090815260016020526040902054421115610a9157610a5b6000805160206136c583398151915282612b74565b506040516001600160a01b038216907fa6f32bcbc7de829d50e1c9cbc1c5b4dafb4c7a0b8329757aee62a9b394d71c3b90600090a25b50565b806001600160a01b038116610abc5760405163e6c4247b60e01b815260040160405180910390fd5b6000610ac781612b50565b610adf600080516020613705833981519152846129e4565b6040516001600160a01b038416906000805160206137058339815191529060008051602061376583398151915290600090a3505050565b600082815260208190526040902060010154610b3181612b50565b610b3b8383612be7565b50505050565b6001600160a01b0381163314610b6a5760405163334bd91960e11b815260040160405180910390fd5b610b748282612b74565b505050565b806001600160a01b038116610ba15760405163e6c4247b60e01b815260040160405180910390fd5b6000610bac81612b50565b610bc4600080516020613725833981519152846129e4565b6040516001600160a01b038416906000805160206137258339815191529060008051602061376583398151915290600090a3505050565b600080516020613725833981519152610c1381612b50565b6001600160a01b038516600090815260046020526040902054841115610c4c576040516315c25ffd60e01b815260040160405180910390fd5b6001600160a01b0385166000908152600460205260409020805485908110610c7657610c7661338d565b906000526020600020906006020160050160019054906101000a900460ff1615610cb35760405163c2d1c49160e01b815260040160405180910390fd5b6001600160a01b038516600090815260046020526040902080546001919086908110610ce157610ce161338d565b906000526020600020906006020160050160016101000a81548160ff02191690831515021790555060006040518060c00160405280876001600160a01b0316815260200186815260200160046000896001600160a01b03166001600160a01b031681526020019081526020016000208781548110610d6157610d6161338d565b60009182526020918290206040805160e081018252600690930290910180546001600160a01b0390811684526001820154169383019390935260028301805492939291840191610db0906133d2565b80601f0160208091040260200160405190810160405280929190818152602001828054610ddc906133d2565b8015610e295780601f10610dfe57610100808354040283529160200191610e29565b820191906000526020600020905b815481529060010190602001808311610e0c57829003601f168201915b50505050508152602001600382018054610e42906133d2565b80601f0160208091040260200160405190810160405280929190818152602001828054610e6e906133d2565b8015610ebb5780601f10610e9057610100808354040283529160200191610ebb565b820191906000526020600020905b815481529060010190602001808311610e9e57829003601f168201915b5050509183525050600482015460208083019190915260059092015460ff808216151560408085019190915261010090920416151560609092019190915291835233838201528151601f880182900482028101820183528781529290910191908790879081908401838280828437600092018290525093855250504260209384015250600854815260068252604090819020835181546001600160a01b03199081166001600160a01b0392831617835585850151600184015585840151805160028501805484169185169190911781559581015160038501805490931693169290921790559182015193945084939092906004840190610fbb908261345a565b5060608201516003820190610fd0908261345a565b50608082810151600483015560a08301516005909201805460c09094015161ffff1990941692151561ff001916929092176101009315159390930292909217905560608301516008830180546001600160a01b0319166001600160a01b039092169190911790558201516009820190611049908261345a565b5060a09190910151600a909101556001600160a01b0386166000908152600760209081526040822060088054825460018101845592855292842090910191909155805491611096836133b9565b919050555084866001600160a01b03167f7b1f7b3dacb5afdc95a1242e036c2e87a67f32d97cb111111215f3305223b666338787426040516110db9493929190613543565b60405180910390a3505050505050565b806001600160a01b0381166111135760405163e6c4247b60e01b815260040160405180910390fd5b600061111e81612b50565b61113660008051602061374583398151915284610b16565b6040516001600160a01b03841690600080516020613745833981519152906000805160206136a583398151915290600090a3505050565b606060008260085461117f9190613579565b841161118b5783611199565b826008546111999190613579565b905060008167ffffffffffffffff8111156111b6576111b6613377565b6040519080825280602002602001820160405280156111ef57816020015b6111dc612d45565b8152602001906001900390816111d45790505b50905060005b828110156114aa576006600061120b838861358c565b81526020808201929092526040908101600020815160c08101835281546001600160a01b039081168252600183015482860152835160e08101855260028401805483168252600385015490921695810195909552600483018054929593948681019493908401919061127c906133d2565b80601f01602080910402602001604051908101604052809291908181526020018280546112a8906133d2565b80156112f55780601f106112ca576101008083540402835291602001916112f5565b820191906000526020600020905b8154815290600101906020018083116112d857829003601f168201915b5050505050815260200160038201805461130e906133d2565b80601f016020809104026020016040519081016040528092919081815260200182805461133a906133d2565b80156113875780601f1061135c57610100808354040283529160200191611387565b820191906000526020600020905b81548152906001019060200180831161136a57829003601f168201915b5050509183525050600482015460208083019190915260059092015460ff808216151560408085019190915261010090920416151560609092019190915291835260088401546001600160a01b03169083015260098301805492909101916113ee906133d2565b80601f016020809104026020016040519081016040528092919081815260200182805461141a906133d2565b80156114675780601f1061143c57610100808354040283529160200191611467565b820191906000526020600020905b81548152906001019060200180831161144a57829003601f168201915b50505050508152602001600a8201548152505082828151811061148c5761148c61338d565b602002602001018190525080806114a2906133b9565b9150506111f5565b50949350505050565b600061079760008051602061370583398151915283611ca4565b806001600160a01b0381166114f55760405163e6c4247b60e01b815260040160405180910390fd5b600061150081612b50565b6115186000805160206136c583398151915284610b16565b61152360784261358c565b336000908152600160205260408082209290925590516001600160a01b038516916000805160206136c5833981519152916000805160206136a58339815191529190a3505050565b600061157681612b50565b6115808484611ca4565b61159d576040516366783c9d60e11b815260040160405180910390fd5b6115a78484612b74565b506115b28483612be7565b50604080516001600160a01b0380861682528416602082015285917f274dd4127a55dcb6f6c12ed38fec5007d965d2afffa8b0bc75c3dc8f3f6b2224910160405180910390a250505050565b806001600160a01b0381166116265760405163e6c4247b60e01b815260040160405180910390fd5b600061163181612b50565b6116496000805160206136e583398151915284610b16565b6040516001600160a01b038416906000805160206136e5833981519152906000805160206136a583398151915290600090a3505050565b600061168b81612b50565b831580611696575081155b156116b457604051637d6eaf9360e01b815260040160405180910390fd5b8382146116d4576040516390a2f79360e01b815260040160405180910390fd5b60005b8481101561173a576117278686838181106116f4576116f461338d565b9050602002013585858481811061170d5761170d61338d565b90506020020160208101906117229190612e28565b612be7565b5080611732816133b9565b9150506116d7565b50828260405161174b92919061359f565b60405180910390207ff4d52c90739c68c4e82d39cfbeee6b6613784bf9b28d2cdb3a02203799cf060686866040516117849291906135d4565b60405180910390a25050505050565b6001600160a01b03811660009081526007602090815260408083208054825181850281018501909352808352606094938301828280156117f257602002820191906000526020600020905b8154815260200190600101908083116117de575b505050505090506000815167ffffffffffffffff81111561181557611815613377565b60405190808252806020026020018201604052801561184e57816020015b61183b612d45565b8152602001906001900390816118335790505b50905060005b8251811015611b1c57600660008483815181106118735761187361338d565b6020908102919091018101518252818101929092526040908101600020815160c08101835281546001600160a01b039081168252600183015482860152835160e0810185526002840180548316825260038501549092169581019590955260048301805492959394868101949390840191906118ee906133d2565b80601f016020809104026020016040519081016040528092919081815260200182805461191a906133d2565b80156119675780601f1061193c57610100808354040283529160200191611967565b820191906000526020600020905b81548152906001019060200180831161194a57829003601f168201915b50505050508152602001600382018054611980906133d2565b80601f01602080910402602001604051908101604052809291908181526020018280546119ac906133d2565b80156119f95780601f106119ce576101008083540402835291602001916119f9565b820191906000526020600020905b8154815290600101906020018083116119dc57829003601f168201915b5050509183525050600482015460208083019190915260059092015460ff808216151560408085019190915261010090920416151560609092019190915291835260088401546001600160a01b0316908301526009830180549290910191611a60906133d2565b80601f0160208091040260200160405190810160405280929190818152602001828054611a8c906133d2565b8015611ad95780601f10611aae57610100808354040283529160200191611ad9565b820191906000526020600020905b815481529060010190602001808311611abc57829003601f168201915b50505050508152602001600a82015481525050828281518110611afe57611afe61338d565b60200260200101819052508080611b14906133b9565b915050611854565b509392505050565b611b2d33612a8b565b15611b4b5760405163510a583360e01b815260040160405180910390fd5b6018811115611b6d57604051630729422160e41b815260040160405180910390fd5b6000611b7b82610e1061360d565b9050611b956000805160206136c583398151915233612be7565b50611ba0814261358c565b33600081815260016020526040908190209290925590517fc526cdae63c288ea4504281fe29b0ae3352c8a9ccae61eba8c21cd25a949e0f190611be69085815260200190565b60405180910390a25050565b60006107976000805160206136e583398151915283611ca4565b806001600160a01b038116611c345760405163e6c4247b60e01b815260040160405180910390fd5b6000611c3f81612b50565b611c57600080516020613685833981519152846129e4565b6040516001600160a01b038416906000805160206136858339815191529060008051602061376583398151915290600090a3505050565b6000610797600080516020613745833981519152835b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6001600160a01b03811660009081526004602052604081205460609103611d075760405163fc32598360e01b815260040160405180910390fd5b6001600160a01b038216600090815260046020908152604080832080548251818502810185019093528083529193909284015b82821015611ee25760008481526020908190206040805160e0810182526006860290920180546001600160a01b0390811684526001820154169383019390935260028301805492939291840191611d90906133d2565b80601f0160208091040260200160405190810160405280929190818152602001828054611dbc906133d2565b8015611e095780601f10611dde57610100808354040283529160200191611e09565b820191906000526020600020905b815481529060010190602001808311611dec57829003601f168201915b50505050508152602001600382018054611e22906133d2565b80601f0160208091040260200160405190810160405280929190818152602001828054611e4e906133d2565b8015611e9b5780601f10611e7057610100808354040283529160200191611e9b565b820191906000526020600020905b815481529060010190602001808311611e7e57829003601f168201915b5050509183525050600482015460208083019190915260059092015460ff808216151560408401526101009091041615156060909101529082526001929092019101611d3a565b505050509050919050565b600061079760008051602061368583398151915283611ca4565b806001600160a01b038116611f2f5760405163e6c4247b60e01b815260040160405180910390fd5b6000611f3a81612b50565b611f5260008051602061370583398151915284610b16565b6040516001600160a01b03841690600080516020613705833981519152906000805160206136a583398151915290600090a3505050565b600061079760008051602061372583398151915283611ca4565b6000808080808080611fb58189611ca4565b611fcd6000805160206136e58339815191528a611ca4565b611fe56000805160206137458339815191528b611ca4565b611ffd6000805160206137258339815191528c611ca4565b6120156000805160206136858339815191528d611ca4565b61202d6000805160206137058339815191528e611ca4565b6120456000805160206136c58339815191528f611ca4565b959e949d50929b5090995097509550909350915050565b8561206633611c8e565b6120835760405163e9aab75160e01b815260040160405180910390fd5b61208d8133612c71565b6120aa57604051633dec104f60e01b815260040160405180910390fd5b6001600160a01b03811660009081526005602090815260408083203384529091529020544211156120ee576040516317a7851f60e11b815260040160405180910390fd5b6001600160a01b0387166000908152600560209081526040808320338452909152902054421115612132576040516317a7851f60e11b815260040160405180910390fd5b60006040518060e00160405280336001600160a01b03168152602001896001600160a01b0316815260200187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f88018190048102820181019092528681529181019190879087908190840183828082843760009201829052509385525050426020808501919091528b151560408086019190915260609094018390526001600160a01b038d811684526004825284842080546001808201835591865294839020875160069096020180546001600160a01b031990811696841696909617815592870151908301805490951691161790925550908201519192508291600282019061225b908261345a565b5060608201516003820190612270908261345a565b506080820151600482015560a08201516005909101805460c09093015115156101000261ff00199215159290921661ffff19909316929092171790558661232d5760405163b83cc3b360e01b81526001600160a01b0389811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063b83cc3b390602401600060405180830381600087803b15801561231457600080fd5b505af1158015612328573d6000803e3d6000fd5b505050505b876001600160a01b0316336001600160a01b03167fd1b5f5f27a6c067d892d5201d9160332ad987f12ed191d83be7d4fb4dc87671689898989894260405161237a96959493929190613624565b60405180910390a35050505050505050565b61239533611bf2565b6123b2576040516336fe937160e11b815260040160405180910390fd5b60405163261e85cd60e01b81526001600160a01b0384811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063261e85cd90602401602060405180830381865afa158015612418573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243c9190613667565b612459576040516308a2227760e11b815260040160405180910390fd5b61246282611c8e565b61247f5760405163e9aab75160e01b815260040160405180910390fd5b6001600160a01b0380841660008181526002602090815260408083208054600181810183559185528385200180549689166001600160a01b0319978816811790915584526003835290832080549182018155835291200180549092161790556124e8814261358c565b6001600160a01b038481166000818152600560209081526040808320948816808452948252918290209490945551848152919290917f0eb676771c16d4fb5bc9e83f804be8ad19cd67426581c189e482796624a1ac9f910160405180910390a3505050565b806001600160a01b0381166125755760405163e6c4247b60e01b815260040160405180910390fd5b600061258081612b50565b610b74600080516020613745833981519152846129e4565b60006107978183611ca4565b6001600160a01b038116600090815260036020908152604080832080548251818502810185019093528083526060949383018282801561260d57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116125ef575b50505050509050600080600090505b8251811015612686576004600084838151811061263b5761263b61338d565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208054905082612672919061358c565b91508061267e816133b9565b91505061261c565b5060008167ffffffffffffffff8111156126a2576126a2613377565b6040519080825280602002602001820160405280156126db57816020015b6126c8612d88565b8152602001906001900390816126c05790505b5090506000805b84518110156129d95760005b600460008784815181106127045761270461338d565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020805490508110156129c657876001600160a01b0316600460008885815181106127575761275761338d565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002082815481106127905761279061338d565b60009182526020909120600690910201546001600160a01b0316036129b457600460008784815181106127c5576127c561338d565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081815481106127fe576127fe61338d565b60009182526020918290206040805160e081018252600690930290910180546001600160a01b039081168452600182015416938301939093526002830180549293929184019161284d906133d2565b80601f0160208091040260200160405190810160405280929190818152602001828054612879906133d2565b80156128c65780601f1061289b576101008083540402835291602001916128c6565b820191906000526020600020905b8154815290600101906020018083116128a957829003601f168201915b505050505081526020016003820180546128df906133d2565b80601f016020809104026020016040519081016040528092919081815260200182805461290b906133d2565b80156129585780601f1061292d57610100808354040283529160200191612958565b820191906000526020600020905b81548152906001019060200180831161293b57829003601f168201915b50505091835250506004820154602082015260059091015460ff808216151560408401526101009091041615156060909101528484612996816133b9565b9550815181106129a8576129a861338d565b60200260200101819052505b806129be816133b9565b9150506126ee565b50806129d1816133b9565b9150506126e2565b509095945050505050565b6000828152602081905260409020600101546129ff81612b50565b610b3b8383612b74565b806001600160a01b038116612a315760405163e6c4247b60e01b815260040160405180910390fd5b6000612a3c81612b50565b612a5460008051602061372583398151915284610b16565b6040516001600160a01b03841690600080516020613725833981519152906000805160206136a583398151915290600090a3505050565b6000612a9682612b5a565b8015612ab957506001600160a01b03821660009081526001602052604090205442105b15612ac657506001919050565b506000919050565b806001600160a01b038116612af65760405163e6c4247b60e01b815260040160405180910390fd5b6000612b0181612b50565b612b196000805160206136e5833981519152846129e4565b6040516001600160a01b038416906000805160206136e58339815191529060008051602061376583398151915290600090a3505050565b610a918133612d04565b60006107976000805160206136c583398151915283611ca4565b6000612b808383611ca4565b15612bdf576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610797565b506000610797565b6000612bf38383611ca4565b612bdf576000838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055612c293390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610797565b6000805b6001600160a01b038416600090815260026020526040902054811015612cfa576001600160a01b03848116600090815260026020526040902080549185169183908110612cc457612cc461338d565b6000918252602090912001546001600160a01b031603612ce8576001915050610797565b80612cf2816133b9565b915050612c75565b5060009392505050565b612d0e8282611ca4565b612d415760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440160405180910390fd5b5050565b6040805160c08101825260008082526020820152908101612d64612d88565b815260200160006001600160a01b0316815260200160608152602001600081525090565b6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016060815260200160608152602001600081526020016000151581526020016000151581525090565b600060208284031215612ded57600080fd5b81356001600160e01b031981168114612e0557600080fd5b9392505050565b80356001600160a01b0381168114612e2357600080fd5b919050565b600060208284031215612e3a57600080fd5b612e0582612e0c565b604080825283519082018190526000906020906060840190828701845b82811015612e855781516001600160a01b031684529284019290840190600101612e60565b5050508381038285015284518082528583019183019060005b81811015612eba57835183529284019291840191600101612e9e565b5090979650505050505050565b600060208284031215612ed957600080fd5b5035919050565b60008060408385031215612ef357600080fd5b82359150612f0360208401612e0c565b90509250929050565b60008083601f840112612f1e57600080fd5b50813567ffffffffffffffff811115612f3657600080fd5b602083019150836020828501011115612f4e57600080fd5b9250929050565b60008060008060608587031215612f6b57600080fd5b612f7485612e0c565b935060208501359250604085013567ffffffffffffffff811115612f9757600080fd5b612fa387828801612f0c565b95989497509550505050565b60008060408385031215612fc257600080fd5b50508035926020909101359150565b6000815180845260005b81811015612ff757602081850181015186830182015201612fdb565b506000602082860101526020601f19601f83011685010191505092915050565b600060018060a01b0380835116845280602084015116602085015250604082015160e0604085015261304c60e0850182612fd1565b9050606083015184820360608601526130658282612fd1565b9150506080830151608085015260a0830151151560a085015260c0830151151560c08501528091505092915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561314957888303603f19018552815180516001600160a01b03908116855288820151898601528782015160c089870181905291906130ff83880182613017565b9250506060818185015116818801525050608080830151868303828801526131278382612fd1565b60a09485015197909401969096525050948701949250908601906001016130bb565b509098975050505050505050565b60008060006060848603121561316c57600080fd5b8335925061317c60208501612e0c565b915061318a60408501612e0c565b90509250925092565b60008083601f8401126131a557600080fd5b50813567ffffffffffffffff8111156131bd57600080fd5b6020830191508360208260051b8501011115612f4e57600080fd5b600080600080604085870312156131ee57600080fd5b843567ffffffffffffffff8082111561320657600080fd5b61321288838901613193565b9096509450602087013591508082111561322b57600080fd5b50612fa387828801613193565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561328d57603f1988860301845261327b858351613017565b9450928501929085019060010161325f565b5092979650505050505050565b8015158114610a9157600080fd5b600080600080600080608087890312156132c157600080fd5b6132ca87612e0c565b955060208701356132da8161329a565b9450604087013567ffffffffffffffff808211156132f757600080fd5b6133038a838b01612f0c565b9096509450606089013591508082111561331c57600080fd5b5061332989828a01612f0c565b979a9699509497509295939492505050565b60008060006060848603121561335057600080fd5b61335984612e0c565b925061336760208501612e0c565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016133cb576133cb6133a3565b5060010190565b600181811c908216806133e657607f821691505b60208210810361340657634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610b7457600081815260208120601f850160051c810160208610156134335750805b601f850160051c820191505b818110156134525782815560010161343f565b505050505050565b815167ffffffffffffffff81111561347457613474613377565b6134888161348284546133d2565b8461340c565b602080601f8311600181146134bd57600084156134a55750858301515b600019600386901b1c1916600185901b178555613452565b600085815260208120601f198616915b828110156134ec578886015182559484019460019091019084016134cd565b508582101561350a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0385168152606060208201819052600090613568908301858761351a565b905082604083015295945050505050565b81810381811115610797576107976133a3565b80820180821115610797576107976133a3565b60008184825b858110156129d9576001600160a01b036135be83612e0c565b16835260209283019291909101906001016135a5565b6020808252810182905260006001600160fb1b038311156135f457600080fd5b8260051b80856040850137919091016040019392505050565b8082028115828204841417610797576107976133a3565b861515815260806020820152600061364060808301878961351a565b828103604084015261365381868861351a565b915050826060830152979650505050505050565b60006020828403121561367957600080fd5b8151612e058161329a56fe920994fc3bfe282f3f20cdccf1b7c5e46c63d963e822d98efff90abd41c12e212ae6a113c0ed5b78a53413ffbb7679881f11145ccfba4fb92e863dfcd5a1d2f3ee244ef9da0b2f89a74b208ea9fe1a639ebdf634027d9e1f092b58c39954fa37c41a06b26ced3a23b7bf835a0918ade784f4055ded86d18305f528f47a726052aa0ec51d0bf03ce5511c9ffc9de2b423d73d1faacd808abf2ac89ccea8a3ecf259a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f506fa31d7a92d9fa9a8898ac41d86ee9b13863605a361c85ae5d6010d5de4f280155aaafb6329a2098580462df33ec4b7441b19729b9601c5fc17ae1cf99a8a52a2646970667358221220b7d99f370008b64b76a7c3f18d6597055fa06cc2effeced409e3e3165fb30f3f64736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "bulkGrantRoles(bytes32[],address[])": {
        "details": "Bulk grant roles to accounts",
        "params": {
          "accounts": "The array of accounts to grant roles emits BulkRolesGranted event on successful grant",
          "roles": "The array of roles to grant"
        }
      },
      "claimTemporaryPublicRole(uint256)": {
        "details": "allows users to claim temporary `PUBLIC` role for `durationInHours` hours on their visit to platform",
        "params": {
          "durationInHours": "The duration in hours the user will have the `PUBLIC` role"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantCertifier(address)": {
        "details": "Functions to grant roles to!",
        "params": {
          "account": "The account to grant the role to"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasAdminRole(address)": {
        "details": "Functions to check if a certain account has the specified role",
        "params": {
          "account": "The account to check "
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeCertifierRole(address)": {
        "details": "Functions to revoke roles",
        "params": {
          "account": "The account to revoke the role from"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferRole(bytes32,address,address)": {
        "details": "Transfers a role from one account to another",
        "params": {
          "from": "The account to transfer the role from",
          "role": "The role to transfer",
          "to": "The account to transfer the role to"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bulkGrantRoles(bytes32[],address[])": {
        "notice": "---------- # Bulk Role Grant(Auto) ------- //"
      },
      "claimTemporaryPublicRole(uint256)": {
        "notice": "----------- #claim temporary public role -------------- //`durationInHours` must be less than 24 hoursEmits PublicRoleGranted event on successful claim "
      },
      "getEnterpriseInspectionReports(address)": {
        "notice": "Simple reports getter for testing////"
      },
      "grantCertifier(address)": {
        "notice": "---------# GRANTING ROLES ---------//Emits RoleGranted event on successful grant"
      },
      "hasAdminRole(address)": {
        "notice": "--------- # CHECKING ROLES --------- //"
      },
      "revokeCertifierRole(address)": {
        "notice": "------------- # REVOKING ROLES ------------- //Emits RoleRevoked event on successful revoke"
      },
      "transferRole(bytes32,address,address)": {
        "notice": "-------- # Safe Role Transfer ------- //Emits RoleTransferred event on successful transfer"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/modules/InspectionManager.sol:InspectionManager",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 4015,
        "contract": "contracts/modules/InspectionManager.sol:InspectionManager",
        "label": "publicRoleExpiry",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5765,
        "contract": "contracts/modules/InspectionManager.sol:InspectionManager",
        "label": "_enterpriseInspectors",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 5770,
        "contract": "contracts/modules/InspectionManager.sol:InspectionManager",
        "label": "_inspectorEnterprises",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 5776,
        "contract": "contracts/modules/InspectionManager.sol:InspectionManager",
        "label": "_enterpriseReports",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_struct(InspectionReport)6515_storage)dyn_storage)"
      },
      {
        "astId": 5782,
        "contract": "contracts/modules/InspectionManager.sol:InspectionManager",
        "label": "_lastInspectionTimestamps",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 5787,
        "contract": "contracts/modules/InspectionManager.sol:InspectionManager",
        "label": "_flaggedInspections",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(FlaggedInspection)6529_storage)"
      },
      {
        "astId": 5792,
        "contract": "contracts/modules/InspectionManager.sol:InspectionManager",
        "label": "_enterpriseFlaggedReports",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 5794,
        "contract": "contracts/modules/InspectionManager.sol:InspectionManager",
        "label": "_flagCounter",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(InspectionReport)6515_storage)dyn_storage": {
        "base": "t_struct(InspectionReport)6515_storage",
        "encoding": "dynamic_array",
        "label": "struct DataTypes.InspectionReport[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_struct(InspectionReport)6515_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DataTypes.InspectionReport[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(InspectionReport)6515_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_mapping(t_uint256,t_struct(FlaggedInspection)6529_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DataTypes.FlaggedInspection)",
        "numberOfBytes": "32",
        "value": "t_struct(FlaggedInspection)6529_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FlaggedInspection)6529_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.FlaggedInspection",
        "members": [
          {
            "astId": 6517,
            "contract": "contracts/modules/InspectionManager.sol:InspectionManager",
            "label": "enterprise",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6519,
            "contract": "contracts/modules/InspectionManager.sol:InspectionManager",
            "label": "reportIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6522,
            "contract": "contracts/modules/InspectionManager.sol:InspectionManager",
            "label": "report",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(InspectionReport)6515_storage"
          },
          {
            "astId": 6524,
            "contract": "contracts/modules/InspectionManager.sol:InspectionManager",
            "label": "flaggedBy",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 6526,
            "contract": "contracts/modules/InspectionManager.sol:InspectionManager",
            "label": "reason",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 6528,
            "contract": "contracts/modules/InspectionManager.sol:InspectionManager",
            "label": "flaggedAt",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(InspectionReport)6515_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.InspectionReport",
        "members": [
          {
            "astId": 6502,
            "contract": "contracts/modules/InspectionManager.sol:InspectionManager",
            "label": "inspector",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6504,
            "contract": "contracts/modules/InspectionManager.sol:InspectionManager",
            "label": "enterprise",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6506,
            "contract": "contracts/modules/InspectionManager.sol:InspectionManager",
            "label": "remarks",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 6508,
            "contract": "contracts/modules/InspectionManager.sol:InspectionManager",
            "label": "evidenceURI",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 6510,
            "contract": "contracts/modules/InspectionManager.sol:InspectionManager",
            "label": "inspectedAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6512,
            "contract": "contracts/modules/InspectionManager.sol:InspectionManager",
            "label": "passed",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 6514,
            "contract": "contracts/modules/InspectionManager.sol:InspectionManager",
            "label": "flagged",
            "offset": 1,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/modules/InspectionManager.sol:InspectionManager",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/modules/InspectionManager.sol:InspectionManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}