{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rolesManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_certAuthority",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_inspectionManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AuditorOversight__AppealWindowClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AuditorOversight__CaseNotPending",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AuditorOversight__NotAuthorizedEnterpriseOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CertificationAuthority__EnterpriseNotCertifiedYet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__NotAuthorizedAuditor",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "caseid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "enterprise",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "counterEvidenceURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AppealFiled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "caseId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "enterprise",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inspectionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "auditor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "evidenceURI",
          "type": "string"
        }
      ],
      "name": "AuditInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "caseId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "enterprise",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "resolvedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "upheld",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "remarks",
          "type": "string"
        }
      ],
      "name": "AuditResolved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "APPEAL_WINDOW",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AUDIT_DEPOSIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "certAuthority",
      "outputs": [
        {
          "internalType": "contract CertificationAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "caseId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "counterEvidenceURI",
          "type": "string"
        }
      ],
      "name": "fileAppeal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveAudits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "targetEnterprise",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "inspectionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "auditor",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "reason",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "evidenceURI",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "depositAmount",
              "type": "uint256"
            },
            {
              "internalType": "enum DataTypes.AuditStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resolvedAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.AuditCase[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_targetEnterprise",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_inspectionId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_reason",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_evidenceURI",
          "type": "string"
        }
      ],
      "name": "initiateAudit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inspectionManager",
      "outputs": [
        {
          "internalType": "contract InspectionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "caseId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "upholdDecision",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "remarks",
          "type": "string"
        }
      ],
      "name": "resolveAudit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rolesManager",
      "outputs": [
        {
          "internalType": "contract RolesManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa638870c3b00e7853bec715aad293397d3afe69924eeb3f023d261d73de4e580",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "1039215",
    "logsBloom": "0x
    "blockHash": "0xaf181c74c99e9f64b7799490bb48a7801304fb5a62a0237c731697cf1468c0a2",
    "transactionHash": "0xa638870c3b00e7853bec715aad293397d3afe69924eeb3f023d261d73de4e580",
    "logs": [],
    "blockNumber": 9,
    "cumulativeGasUsed": "1039215",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "9a79105cccbca1c8fcdf00bf17d246a3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rolesManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_certAuthority\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inspectionManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AuditorOversight__AppealWindowClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuditorOversight__CaseNotPending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuditorOversight__NotAuthorizedEnterpriseOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificationAuthority__EnterpriseNotCertifiedYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedAuditor\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"caseid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"counterEvidenceURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AppealFiled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"caseId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inspectionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"auditor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"evidenceURI\",\"type\":\"string\"}],\"name\":\"AuditInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"caseId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"resolvedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"upheld\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"remarks\",\"type\":\"string\"}],\"name\":\"AuditResolved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APPEAL_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUDIT_DEPOSIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"certAuthority\",\"outputs\":[{\"internalType\":\"contract CertificationAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"caseId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"counterEvidenceURI\",\"type\":\"string\"}],\"name\":\"fileAppeal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveAudits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetEnterprise\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inspectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"auditor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"evidenceURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum DataTypes.AuditStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resolvedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.AuditCase[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_targetEnterprise\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inspectionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_evidenceURI\",\"type\":\"string\"}],\"name\":\"initiateAudit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inspectionManager\",\"outputs\":[{\"internalType\":\"contract InspectionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"caseId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"upholdDecision\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"remarks\",\"type\":\"string\"}],\"name\":\"resolveAudit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rolesManager\",\"outputs\":[{\"internalType\":\"contract RolesManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/AuditorOversight.sol\":\"AuditorOversight\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0xb31b86c03f4677dcffa4655285d62433509513be9bafa0e04984565052d34e44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        _update(address(0), tokenId, _msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xc48434419baa510862ba4b4802bc0500ccddadd02ae2f195548af748c3206b20\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xcc6f49e0c57072d6a18eef0d5fc22a4cc20462c18f0c365d2dd9a2c732fde670\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/core/CertificationAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n\\n/**\\n* @author @0xJonaseb11\\n* @title CertificationAuthority Contract\\n* @dev Acts like a Certificate Authority main house for enterprises\\n* @dev Only the Certifier can certify enterprises\\n* @dev Allows update of NFT certificate's metadata URI\\n* @dev Automatic revocation of certificates after expiry duration\\n*/\\nimport {RolesManager} from \\\"./RolesManager.sol\\\";\\nimport {Events} from \\\"../utils/Events.sol\\\";\\nimport {DataTypes} from \\\"../utils/DataTypes.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract CertificationAuthority is RolesManager, ERC721URIStorage, ERC721Burnable {\\n    using DataTypes for DataTypes.Enterprise;\\n    using DataTypes for DataTypes.Certification;\\n    using DataTypes for DataTypes.InspectionReport;\\n\\n    mapping(address => DataTypes.Certification) public certifications;\\n    mapping(uint256 => address) private _tokenToEnterprise;\\n    uint256 private _tokenIdCounter;\\n\\n    constructor() ERC721(\\\"EnterpriseCertificate\\\", \\\"ECERT\\\") {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(CERTIFIER_ROLE, msg.sender);\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// ENTERPRISE CERTIFICATION ///////////////////\\n    //////////////////////////////////////////////////////////\\n\\n    /**\\n    * @dev This function is used to certify enterprises\\n    * @dev Only the Certifier can certify enterprises\\n    * @dev mints and assigns NFT certificate to an enterprise\\n    * @dev sets token URI to metadata URI of a certificate\\n    * @param enterpriseAddress The address of the enterprise to be certified\\n    * @param _industry The industry of the enterprise to be certified\\n    * @param _metadataURI The metadata URI of the certificate (IPFS hash)\\n    * @param validityDurationSeconds The validity duration of the certificate in seconds\\n    * @notice Emits CertificationGranted event on successful enterprise certification\\n    */\\n\\n    function certifyEnterprise(\\n        address enterpriseAddress,\\n        string memory _industry,\\n        string memory _metadataURI,\\n        uint256 validityDurationSeconds\\n    ) external onlyValidAddress(enterpriseAddress) onlyRole(CERTIFIER_ROLE) {\\n        if (certifications[enterpriseAddress].isCertified) {\\n            revert CertificationAuthority__EnterpriseAlreadyCertified();\\n        }\\n\\n        uint256 tokenId = _tokenIdCounter++;\\n        _safeMint(enterpriseAddress, tokenId);\\n        _setTokenURI(tokenId, _metadataURI);\\n\\n        certifications[enterpriseAddress] = DataTypes.Certification({\\n            industry: _industry,\\n            metadataURI: _metadataURI,\\n            certifiedAt: block.timestamp,\\n            expiryDate: block.timestamp + validityDurationSeconds, // three years\\n            isCertified: true,\\n            tokenId: tokenId\\n        });\\n\\n        _tokenToEnterprise[tokenId] = enterpriseAddress;\\n\\n        emit Events.CertificationGranted(\\n            enterpriseAddress,\\n            _industry,\\n            _metadataURI,\\n            block.timestamp + validityDurationSeconds\\n        );\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// REVOCATION & EXPIRY HANDLING //////////////\\n    //////////////////////////////////////////////////////////\\n    \\n\\n    /**\\n    * @dev allows the revocation of certifications from enterprises\\n    * @dev Only the `Certifier` or `Super Admin` can revoke certifications\\n    * @dev allows automatic destruction of NFT certificates via oppenzeppelin's`burn` function\\n    * @param enterpriseAddress The address of the enterprise to be revoked\\n    * @notice Emits CertificationRevoked event on successful enterprise revocation\\n    */\\n    function revokeCertification(address enterpriseAddress)\\n        external\\n        onlyValidAddress(enterpriseAddress)\\n        onlyRole(CERTIFIER_ROLE) onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\\n        if (!cert.isCertified) {\\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\\n        }\\n\\n        if (cert.tokenId != 0) {\\n            burn(cert.tokenId); \\n            delete _tokenToEnterprise[cert.tokenId];\\n        }\\n\\n        cert.isCertified = false;\\n        emit Events.CertificationRevoked(enterpriseAddress);\\n    }\\n    \\n\\n    /**\\n    * @dev allowes automatic revokation of NFT certificates after expiry duration \\n    * @dev callable by anyone as long as expiry date kicks in\\n    * @notice Emits CertificationRevoked event on successful enterprise revocation\\n    */\\n    function revokeIfExpired(address enterpriseAddress) external {\\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\\n\\n        if (!cert.isCertified) {\\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\\n        }\\n        if (block.timestamp < cert.expiryDate) {\\n            revert CertificationAuthority__CertificationNotExpiredYet();\\n        }\\n\\n        if (cert.tokenId != 0) {\\n            burn(cert.tokenId);\\n            delete _tokenToEnterprise[cert.tokenId];\\n        }\\n\\n        cert.isCertified = false;\\n        emit Events.CertificationRevoked(enterpriseAddress);\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// TRANSFER CONTROL ///////////////////////////\\n    //////////////////////////////////////////////////////////\\n\\n    function _update(\\n        address to,\\n        uint256 tokenId,\\n        address auth\\n    ) internal override(ERC721) returns (address) {\\n        // Block all transfers except minting (to) and burning (address(0))\\n        if (auth != address(0)) {\\n            require(to == address(0), \\\"Certificates are non-transferable\\\");\\n        }\\n        return super._update(to, tokenId, auth);\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// VALIDATION & METADATA //////////////////////\\n    //////////////////////////////////////////////////////////\\n\\n    function isCertificationValid(address enterpriseAddress)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\\n        return cert.isCertified && block.timestamp <= cert.expiryDate;\\n    }\\n\\n    function isCertificateValid(uint256 tokenId) public view returns (bool) {\\n        address enterprise = _tokenToEnterprise[tokenId];\\n        return isCertificationValid(enterprise);\\n    }\\n    \\n    \\n    /**\\n    * @dev updates the metadata URI of the NFT certificate\\n    * @dev Only the `Certifier` can update certification metadata URI\\n    * @param enterpriseAddress The address of the enterprise to be updated\\n    * @param newMetadataURI The new metadata URI of the certificate\\n    * @notice Emits CertificationUpdated event on successful metadata update\\n    */\\n    function updateCertificationMetadata(\\n        address enterpriseAddress,\\n        string calldata newMetadataURI\\n    ) external onlyValidAddress(enterpriseAddress) onlyRole(CERTIFIER_ROLE) {\\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\\n        if (!cert.isCertified) {\\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\\n        }\\n\\n        if (cert.tokenId != 0) {\\n            _setTokenURI(cert.tokenId, newMetadataURI);\\n        }\\n\\n        cert.metadataURI = newMetadataURI;\\n        emit Events.CertificationUpdated(enterpriseAddress, newMetadataURI);\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// GETTERS & OVERRIDES ////////////////////////\\n    //////////////////////////////////////////////////////////\\n\\n    function getCertification(address enterpriseAddress)\\n        public\\n        view\\n        returns (DataTypes.Certification memory)\\n    {\\n        return certifications[enterpriseAddress];\\n    }\\n\\n    function getEnterpriseByTokenId(uint256 tokenId)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return _tokenToEnterprise[tokenId];\\n    }\\n\\n    // ----- Required overrides for multiple inheritance --- //\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override(ERC721, ERC721URIStorage)\\n        returns (string memory)\\n    {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721, ERC721URIStorage, AccessControl)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xbaf289d8ec21b4365ca13f74d42d32330ded1c3dff855d0769197a90afa9331a\",\"license\":\"MIT\"},\"contracts/core/RolesManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n\\n/**\\n* @author @0xJonaseb11\\n\\n* @dev manages the roles of the whole ecosystem \\n* @dev Only Super Admin can assign roles\\n* @dev On very high roles, there's DAO voting\\n*/\\n\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { Events } from \\\"../utils/Events.sol\\\";\\nimport { Errors } from \\\"../utils/Errors.sol\\\";\\nimport { DataTypes } from \\\"../utils/DataTypes.sol\\\";\\n\\n\\ncontract RolesManager is AccessControl, Errors {\\n\\n\\n\\n    //////////////////////////////////////////////////////////\\n    // ==================================================== //\\n    /////// work on the default public role expiry period\\n    /////// Work on the logic of handling\\n    // ===================================================== //\\n    //////////////////////////////////////////////////////////\\n\\n\\n\\n    bytes32 public constant CERTIFIER_ROLE = keccak256(\\\"CERTIFYING_BODY_ROLE\\\");\\n    bytes32 public constant INSPECTOR_ROLE = keccak256(\\\"INSPECTION_MANAGER_ROLE\\\");\\n    bytes32 public constant AUDITOR_ROLE = keccak256(\\\"AUDITOR_ROLE\\\");\\n    bytes32 public constant ENTERPRISE_ROLE = keccak256(\\\"ENTERPRISE_ROLE\\\");\\n    bytes32 public constant CERTIFICATE_FACTORY_ROLE = keccak256(\\\"CERTIFICATE_FACTORY_ROLE\\\");\\n    bytes32 public constant PUBLIC_ROLE = keccak256(\\\"PUBLIC_ROLE\\\");\\n\\n    mapping(address => uint256) public publicRoleExpiry;\\n\\n    uint256 public constant DEFAULT_PUBLIC_ROLE_DURATION = 2 minutes;\\n\\n   // ----- modifiers\\n   modifier onlyValidAddress(address account) {\\n    if (account == address(0)) {\\n        revert InvalidAddress();\\n    }\\n    _;\\n   }\\n\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(CERTIFIER_ROLE,  msg.sender);\\n    }\\n\\n\\n    /** ----------- #claim temporary public role -------------- //\\n    * @dev allows users to claim temporary `PUBLIC` role for `durationInHours` hours on their visit to platform\\n    * @param durationInHours The duration in hours the user will have the `PUBLIC` role\\n    * @notice `durationInHours` must be less than 24 hours\\n    * @notice Emits PublicRoleGranted event on successful claim \\n    */\\n    function claimTemporaryPublicRole(uint256 durationInHours) external {\\n        if (hasPublicRole(msg.sender)) {\\n            revert RolesManager__AlreadyHasRole();\\n        }\\n        if (durationInHours < 0 || durationInHours > 24) {\\n            revert RolesManager__InvalidDuration();\\n        }\\n      \\n        uint256 durationInSeconds = durationInHours * 1 hours;\\n    \\n        _grantRole(PUBLIC_ROLE, msg.sender);\\n        publicRoleExpiry[msg.sender] = block.timestamp + durationInSeconds;\\n\\n        emit Events.PublicRoleGranted(msg.sender, durationInHours);\\n    }\\n\\n    // ------- helper for client ---- //\\n    function getMaxPublicRoleDuration() public pure returns (uint256) {\\n        return 24;\\n    }\\n\\n\\n    /** --------- #  Auto-expiry check (Call periodically) ------- //\\n    * @dev helper to check expiry of `PUBLIC` role\\n    * @param account The account to check for role expiry\\n    * @notice Emits PublicRoleExpired event on expiry\\n    */\\n    function _hasRawPublicRole(address account) internal view returns (bool) {\\n        return hasRole(PUBLIC_ROLE, account);\\n    }\\n    function checkExpiryRoles(address account) public {\\n        if (!_hasRawPublicRole(account)) revert RolesManager__RoleDoesNotExist();\\n        if (publicRoleExpiry[account] < block.timestamp) {\\n            _revokeRole(PUBLIC_ROLE, account);\\n\\n            emit Events.PublicRoleExpired(account);\\n        }\\n    }\\n\\n    /** ---------- # Bulk Role Grant(Auto) ------- //\\n    * @dev Bulk grant roles to accounts\\n    * @param roles The array of roles to grant\\n    * @param accounts The array of accounts to grant roles\\n    * emits BulkRolesGranted event on successful grant\\n    */\\n    function bulkGrantRoles(\\n        bytes32[] calldata roles,\\n        address[] calldata accounts\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (roles.length == 0 || accounts.length == 0) {\\n            revert RolesManager__EmptyArray();\\n        }\\n        if (roles.length != accounts.length) {\\n            revert RolesManager__ArrayLengthMismatch();\\n        }\\n        \\n        for (uint256 i = 0; i < roles.length; i++) {\\n            _grantRole(roles[i], accounts[i]);\\n        }\\n\\n        emit Events.BulkRolesGranted(roles, accounts);\\n    }\\n\\n    /** -------- # Safe Role Transfer ------- //\\n    * @dev Transfers a role from one account to another\\n    * @param role The role to transfer\\n    * @param from The account to transfer the role from\\n    * @param to The account to transfer the role to\\n    * @notice Emits RoleTransferred event on successful transfer\\n    */\\n    function transferRole(\\n        bytes32 role,\\n        address from,\\n        address to  \\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasRole(role, from)) {\\n            revert RolesManager__RoleDoesNotExist();\\n        }\\n        _revokeRole(role, from);\\n        _grantRole(role, to);\\n\\n        emit Events.RoleTransferred(role, from, to);\\n    }\\n\\n    // ---- combined role check ----- //\\n    function getActiveRoles(address account) public view returns (\\n        bool isAdmin,\\n        bool isCertifier,\\n        bool isInspector,\\n        bool isAuditor,\\n        bool isEnterprise,\\n        bool isCertificateFactory,\\n        bool isPublic\\n    ) {\\n        return (\\n            hasRole(DEFAULT_ADMIN_ROLE, account),\\n            hasRole(CERTIFIER_ROLE, account),\\n            hasRole(INSPECTOR_ROLE, account),\\n            hasRole(AUDITOR_ROLE, account),\\n            hasRole(ENTERPRISE_ROLE, account),\\n            hasRole(CERTIFICATE_FACTORY_ROLE, account),\\n            hasRole(PUBLIC_ROLE, account)\\n        );\\n    }\\n    \\n\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n    _grantRole(role, account);\\n}\\n\\n\\n    ////////////////////////////////////////////////\\n    /////// MANAUAL ROLES MANAGEMENT  ////////////////\\n    ////////////////////////////////////////////////\\n    \\n\\n    /////////////////////////////////\\n    ////// ROLE GRANTING ////////////\\n    /////////////////////////////////\\n    \\n    /** ---------# GRANTING ROLES ---------//\\n    * @dev Functions to grant roles to!\\n    * @param account The account to grant the role to\\n    * @notice Emits RoleGranted event on successful grant\\n    */\\n    function grantCertifier(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        grantRole(CERTIFIER_ROLE, account);\\n\\n        emit Events.RoleGranted(CERTIFIER_ROLE, account);\\n\\n    }\\n    \\n    function grantInspector(address account ) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        grantRole(INSPECTOR_ROLE, account);\\n        emit Events.RoleGranted(INSPECTOR_ROLE, account);\\n    }\\n\\n    function grantAuditor(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        grantRole(AUDITOR_ROLE, account);\\n        emit Events.RoleGranted(AUDITOR_ROLE, account);\\n    }\\n\\n    function grantEnterprise(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        grantRole(ENTERPRISE_ROLE, account);\\n        emit Events.RoleGranted(ENTERPRISE_ROLE, account);\\n    }\\n     \\n    function grantCertificateFactory(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        grantRole(CERTIFICATE_FACTORY_ROLE, account);\\n        emit Events.RoleGranted(CERTIFICATE_FACTORY_ROLE, account);\\n    }\\n\\n    function grantPublicRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        grantRole(PUBLIC_ROLE, account);\\n        publicRoleExpiry[msg.sender] = block.timestamp + DEFAULT_PUBLIC_ROLE_DURATION;\\n\\n        emit Events.RoleGranted(PUBLIC_ROLE, account);\\n    }\\n\\n\\n    /**\\n    * @dev Public role will be claimed instantly\\n    * On the entry of a user to our platform\\n    * Just clicking `claim public role` and user is assigned role\\n    * @notice I plan to make it a temporary role on every visit to our platform\\n    */\\n\\n    /////////////////////////////////\\n    // ROLE REVOKATION /////////////\\n    ////////////////////////////////\\n    \\n\\n    /** ------------- # REVOKING ROLES ------------- //\\n    * @dev Functions to revoke roles\\n    * @param account The account to revoke the role from\\n    * @notice Emits RoleRevoked event on successful revoke\\n    */\\n    function revokeCertifierRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        revokeRole(CERTIFIER_ROLE, account);\\n        emit Events.RoleRevoked(CERTIFIER_ROLE, account);\\n    }\\n\\n    function revokeInspectorRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        revokeRole(INSPECTOR_ROLE, account);\\n    }\\n\\n    function revokeAuditorRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n    revokeRole(AUDITOR_ROLE, account);\\n    emit Events.RoleRevoked(AUDITOR_ROLE, account);\\n    }\\n\\n    function revokeEnterpriseRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        revokeRole(ENTERPRISE_ROLE, account);\\n        emit Events.RoleRevoked(ENTERPRISE_ROLE, account);\\n    }\\n\\n    function revokeCertificateFactoryRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        revokeRole(CERTIFICATE_FACTORY_ROLE, account);\\n        emit Events.RoleRevoked(CERTIFICATE_FACTORY_ROLE, account);\\n    }\\n    \\n    function revokePublicRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        revokeRole(PUBLIC_ROLE, account);\\n        emit Events.RoleRevoked(PUBLIC_ROLE, account);\\n    }\\n\\n\\n    /////////////////////////////////////////////////\\n    //////// ROLE CHECKS //////////////////\\n    /////////////////////////////////////////////////\\n    \\n   /** --------- # CHECKING ROLES --------- //\\n   * @dev Functions to check if a certain account has the specified role\\n   * @param account The account to check \\n   */\\n    function hasAdminRole(address account) public view returns(bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    function hasCertifierRole(address account) public view returns(bool) { \\n        return hasRole(CERTIFIER_ROLE, account);\\n    }\\n\\n    function hasInspectorRole(address account) public view  returns(bool) {\\n        return hasRole(INSPECTOR_ROLE, account);\\n    }\\n\\n    function hasAuditorRole(address account) public view  returns(bool) {\\n        return hasRole(AUDITOR_ROLE, account);\\n    }\\n\\n    function hasEnterpriseRole(address account) public view  returns(bool) {\\n        return hasRole(ENTERPRISE_ROLE, account);\\n    }\\n\\n    function hasCertificateFactoryRole(address account) public view  returns(bool) {\\n        return hasRole(CERTIFICATE_FACTORY_ROLE, account);\\n    }\\n    \\n    function hasPublicRole(address account) public view returns(bool) {\\n        if (_hasRawPublicRole(account) && publicRoleExpiry[account] > block.timestamp) {\\n            return true;\\n        }\\n        return false;\\n    }\\n}\",\"keccak256\":\"0xf4709898a14dd773491392570ec0a6cc413536b0c36b1c7ce8b3ddf5252a95c6\",\"license\":\"MIT\"},\"contracts/modules/AuditorOversight.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { RolesManager } from \\\"../core/RolesManager.sol\\\";\\nimport { CertificationAuthority } from \\\"../core/CertificationAuthority.sol\\\";\\nimport { InspectionManager } from \\\"./InspectionManager.sol\\\";\\nimport { Events } from \\\"../utils/Events.sol\\\";\\nimport { DataTypes } from \\\"../utils/DataTypes.sol\\\";\\nimport { Errors } from \\\"../utils/Errors.sol\\\";\\n\\ncontract AuditorOversight {\\n    RolesManager public immutable rolesManager;\\n    CertificationAuthority public immutable certAuthority;\\n    InspectionManager public immutable inspectionManager;\\n\\n    // ------- #Audit cases ---- //\\n    mapping(uint256 => DataTypes.AuditCase) private _auditCases;\\n    uint256 private _caseCounter;\\n\\n    // ------- #Case parameters ------ //\\n    uint256 public constant AUDIT_DEPOSIT = 0.1 ether;\\n    uint256 public constant APPEAL_WINDOW = 7 days;\\n\\n    constructor (\\n        address _rolesManager,\\n        address _certAuthority,\\n        address _inspectionManager\\n    ) {\\n        rolesManager = RolesManager(_rolesManager);\\n        certAuthority = CertificationAuthority(_certAuthority);\\n        inspectionManager = InspectionManager(_inspectionManager);\\n\\n    }\\n\\n    modifier onlyAuditor() {\\n        if (!(rolesManager.hasAuditorRole(msg.sender))) {\\n            revert Errors.RolesManager__NotAuthorizedAuditor();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyEnterpriseOwner(uint256 caseId) {\\n        if (msg.sender != _auditCases[caseId].targetEnterprise) {\\n            revert Errors.AuditorOversight__NotAuthorizedEnterpriseOwner();\\n        }\\n        _;\\n    }\\n\\n    //////////////////////////////////////////////////\\n    /////// AUDIT CASE MANAGEMENT ///////////////////\\n    ////////////////////////////////////////////////\\n    \\n    function initiateAudit(\\n        address _targetEnterprise,\\n        uint256 _inspectionId,\\n        string calldata _reason,\\n        string calldata _evidenceURI\\n    ) external payable {\\n        if (!(certAuthority.isCertificationValid(_targetEnterprise))) {\\n            revert Errors.CertificationAuthority__EnterpriseNotCertifiedYet();\\n        }\\n\\n        _caseCounter++;\\n        _auditCases[_caseCounter] = DataTypes.AuditCase({\\n            id: _caseCounter,\\n            targetEnterprise: _targetEnterprise,\\n            inspectionId: _inspectionId,\\n            auditor: msg.sender,\\n            reason: _reason,\\n            evidenceURI: _evidenceURI,\\n            depositAmount: msg.value,\\n            status: DataTypes.AuditStatus.Pending,\\n            createdAt: block.timestamp,\\n            resolvedAt: 0\\n        });\\n\\n        emit Events.AuditInitiated(\\n            _caseCounter,\\n            _targetEnterprise,\\n            _inspectionId,\\n            msg.sender,\\n            _reason,\\n            _evidenceURI\\n        );\\n    }\\n\\n    ////////////////////////////////////////////\\n    ////////// AUDIT RESOLUTION  //////////////\\n    //////////////////////////////////////////\\n    function resolveAudit(\\n        uint256 caseId,\\n        bool upholdDecision,\\n        string calldata remarks\\n    ) external onlyAuditor {\\n        DataTypes.AuditCase storage auditCase = _auditCases[caseId];\\n\\n        if (auditCase.status != DataTypes.AuditStatus.Pending) {\\n            revert Errors.AuditorOversight__CaseNotPending();\\n        }\\n            auditCase.status = upholdDecision \\n                ? DataTypes.AuditStatus.Upheld\\n                : DataTypes.AuditStatus.Rejected;\\n            auditCase.resolvedAt = block.timestamp;\\n\\n            // -- take action if audit is upheld\\n            if (upholdDecision) {\\n                certAuthority.revokeCertification(auditCase.targetEnterprise);\\n                inspectionManager.flagInspection(auditCase.targetEnterprise, auditCase.inspectionId, remarks);\\n            }\\n\\n            // ------ return deposit to auditor\\n            payable(auditCase.auditor).transfer(auditCase.depositAmount);\\n            \\n            emit Events.AuditResolved(\\n                caseId,\\n                auditCase.targetEnterprise,\\n                msg.sender,\\n                upholdDecision,\\n                remarks\\n            );     \\n        }\\n\\n        //////////////////////////////////////////////\\n        /////// ENTERPRISE APPEAL ///////////////////\\n        ////////////////////////////////////////////\\n        function fileAppeal(\\n            uint256 caseId,\\n            string calldata counterEvidenceURI\\n        ) external onlyEnterpriseOwner(caseId) {\\n            DataTypes.AuditCase storage auditCase = _auditCases[caseId];\\n\\n            if (block.timestamp > auditCase.createdAt + APPEAL_WINDOW) {\\n                revert Errors.AuditorOversight__AppealWindowClosed();\\n            }\\n\\n            auditCase.status = DataTypes.AuditStatus.Appealed;\\n\\n            emit Events.AppealFiled(\\n                caseId,\\n                msg.sender,\\n                counterEvidenceURI,\\n                block.timestamp\\n            );\\n        }\\n\\n        ////////////////////////////////////////////\\n        ////////// CROSS-CONTRACT INTEGRATION /////\\n        //////////////////////////////////////////\\n        \\n\\n        /////////////////////////////////////////\\n        /////// COMPREHENSIVE GETTERS //////////\\n        ////////////////////////////////////////\\n        \\n        function getActiveAudits() public view returns(DataTypes.AuditCase[] memory) {\\n            uint256 activeCount;\\n\\n            for (uint256 i = 0; i <= _caseCounter; i++) {\\n                if (_auditCases[i].status == DataTypes.AuditStatus.Pending) {\\n                    activeCount++;\\n                }\\n            }\\n\\n            DataTypes.AuditCase[] memory activeAudits = new DataTypes.AuditCase[](activeCount);\\n            uint256 index;\\n\\n            for (uint256 i = 1; i <= _caseCounter; i++) {\\n                if (_auditCases[i].status == DataTypes.AuditStatus.Pending) {\\n                    activeAudits[index++] = _auditCases[i];\\n                }\\n            }\\n            return activeAudits;\\n        }\\n        \\n    }\\n\",\"keccak256\":\"0xdb73bbb514f85507b7276f67698323da1d322e4a6ed45eefab8a64a658ceb33f\",\"license\":\"MIT\"},\"contracts/modules/InspectionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n* @author @0xJonaseb11 \\n* @title InspectionManager Contract\\n* @dev Manages inspection process and reports\\n* @automates certification revocation when inspection is not passed\\n*/\\n\\n///////////////////////////////////////////////////////////////////\\n/////// TO-DO : : Implement Inspection Validity specification/////\\n/////// Initial 30 days atleast - can be changed by Super Admin //\\n////// ASK REGIS HOW LONG A CERTIFICATION WOULD LAST ////////////\\n////////////////////////////////////////////////////////////////\\n\\n\\n\\n\\n//// -------- Fining enterprises ----- //\\n//// Implement enteprise fining and revocation // \\n//// on chain --- fallabck contracts /// \\n\\n\\nimport { RolesManager } from \\\"../core/RolesManager.sol\\\";\\nimport { CertificationAuthority } from \\\"../core/CertificationAuthority.sol\\\";\\nimport { Events } from \\\"../utils/Events.sol\\\";\\nimport { DataTypes } from \\\"../utils/DataTypes.sol\\\";\\n\\ncontract InspectionManager is RolesManager {\\n    RolesManager public immutable rolesManager;\\n    CertificationAuthority public immutable certAuthority;\\n\\n    // Inspection relationships\\n    mapping(address => address[]) private _enterpriseInspectors;\\n    mapping(address => address[]) private _inspectorEnterprises;\\n\\n    // Inspection reports storage\\n    mapping(address => DataTypes.InspectionReport[]) private _enterpriseReports;\\n    mapping(address => mapping(address => uint256)) private _lastInspectionTimestamps;\\n\\n    // flagged inspection tracking\\n    mapping(uint256 => DataTypes.FlaggedInspection) private _flaggedInspections;\\n    mapping(address => uint256[]) private _enterpriseFlaggedReports;\\n    uint256 private _flagCounter;\\n    constructor(address _rolesManager, address _certAuthority) {\\n        rolesManager = RolesManager(_rolesManager);\\n        certAuthority = CertificationAuthority(_certAuthority);\\n    }\\n\\n\\n\\n    ////////////////////////////////////////\\n    //////// ENHANCED ACCESS CONTROL //////\\n    //////////////////////////////////////\\n\\n        modifier onlyCertifier() {\\n        if (!hasCertifierRole(msg.sender)) {\\n            revert RolesManager__NotAuthorizedCertifier();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyActiveInspector(address enterprise) {\\n\\n        if (!hasInspectorRole(msg.sender)) {\\n            revert RolesManager__NotAuthorizedInspector();\\n        }\\n\\n        if (!_isInspectorAssigned(enterprise, msg.sender)) {\\n            revert InspectionManager__NotAssignedToEnterprise();\\n        }\\n\\n        if (block.timestamp > _lastInspectionTimestamps[enterprise][msg.sender]) {\\n            revert InspectionManager__InspectionPeriodExpired();\\n        }\\n        _;\\n    }\\n\\n\\n\\n    ////////////////////////////////////////////\\n    ////////// INSPECTOR ASSIGNMENT ///////////\\n    ///////////////////////////////////////////\\n    function assignInspector(\\n        address enterprise,\\n        address inspector,\\n        uint256 validityPeriod\\n    ) external onlyCertifier {\\n\\n        if (!certAuthority.isCertificationValid(enterprise)) {\\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\\n        }\\n\\n        if (!hasInspectorRole(inspector)) {\\n            revert RolesManager__NotAuthorizedInspector();\\n        }\\n\\n        _enterpriseInspectors[enterprise].push(inspector);\\n        _inspectorEnterprises[inspector].push(enterprise);\\n        _lastInspectionTimestamps[enterprise][inspector] = block.timestamp + validityPeriod;\\n\\n        emit Events.InspectorAssigned(\\n            enterprise, inspector, validityPeriod\\n        );\\n    }\\n\\n    ///////////////////////////////////////////////\\n    /////// INSPECTION REPORTING /////////////////\\n    /////////////////////////////////////////////\\n    function submitInspectionReport (\\n        address _enterprise,\\n        bool _passed,\\n        string calldata _remarks,\\n        string calldata _evidenceURI\\n    ) external onlyActiveInspector(_enterprise) {\\n\\n        if (block.timestamp > _lastInspectionTimestamps[_enterprise][msg.sender]) {\\n            revert InspectionManager__InspectionPeriodExpired();\\n        }\\n\\n        DataTypes.InspectionReport memory report = DataTypes.InspectionReport({\\n            inspector: msg.sender,\\n            enterprise: _enterprise,\\n            remarks: _remarks,\\n            evidenceURI: _evidenceURI, // IPFS hash\\n            inspectedAt: block.timestamp,\\n            passed: _passed,\\n            flagged: false\\n        });\\n\\n        _enterpriseReports[_enterprise].push(report);\\n\\n        // Auto-revoke certification if not passed\\n        if (!_passed) {\\n            certAuthority.revokeCertification(_enterprise);\\n            \\n\\n        }\\n\\n   \\n\\n        emit Events.InspectionReportSubmitted(\\n            msg.sender,\\n            _enterprise,\\n            _passed,\\n            _remarks,\\n            _evidenceURI,\\n            block.timestamp\\n        );\\n    }\\n\\n\\n         /////////////////////////////////////////////////\\n        ////////// INSPECTION FLAGGING /////////////////\\n        ////////////////////////////////////////////////\\n        function flagInspection(\\n            address enterprise,\\n            uint256 reportIndex,\\n            string calldata reason\\n        ) external onlyRole(AUDITOR_ROLE) {\\n            if (reportIndex >_enterpriseReports[enterprise].length) {\\n                revert InspectionManager__InvalidReportIndex();\\n            }\\n            \\n            if (_enterpriseReports[enterprise][reportIndex].flagged) {\\n                revert InspectionManager__ReportAlreadyFlagged();\\n            }\\n\\n            _enterpriseReports[enterprise][reportIndex].flagged = true;\\n\\n            DataTypes.FlaggedInspection memory flagged = DataTypes.FlaggedInspection({\\n                enterprise: enterprise,\\n                reportIndex: reportIndex,\\n                report: _enterpriseReports[enterprise][reportIndex],\\n                flaggedBy: msg.sender,\\n                reason: reason,\\n                flaggedAt: block.timestamp\\n            });\\n\\n            _flaggedInspections[_flagCounter] = flagged;\\n            _enterpriseFlaggedReports[enterprise].push(_flagCounter);\\n            _flagCounter++;\\n\\n            emit Events.InspectionReportFlagged(\\n                enterprise,\\n                reportIndex,\\n                msg.sender,\\n                reason,\\n                block.timestamp\\n            );\\n\\n        }\\n\\n\\n    ////////////////////////////////////////////////\\n    /////// CROSS-CONTRACT VALIDATION /////////////\\n    //////////////////////////////////////////////\\n    function _isInspectorAssigned(address enterprise, address inspector) private view returns(bool) {\\n        for (uint256 i = 0; i < _enterpriseInspectors[enterprise].length; i++) {\\n            if (_enterpriseInspectors[enterprise][i] == inspector) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    //////////////////////////////////////////////\\n    //////// COMPEREHENSIVE GETTERS /////////////\\n    ////////////////////////////////////////////\\n    function getEnterpriseInspectors(address enterprise)\\n    public \\n    view \\n    returns(address[] memory, uint256[] memory validityPeriods)\\n     {\\n        address[] memory inspectors = _enterpriseInspectors[enterprise];\\n        uint256[] memory periods = new uint256[](inspectors.length);\\n\\n        for (uint256 i = 0; i < inspectors.length; i++) {\\n            periods[i] = _lastInspectionTimestamps[enterprise][inspectors[i]];\\n        }\\n\\n        return (inspectors, periods);\\n     }\\n\\n    function getInspectorReports(address inspector)\\n      public\\n      view \\n      returns(DataTypes.InspectionReport[] memory) {\\n\\n      address[] memory enterprises = _inspectorEnterprises[inspector];\\n      uint256 totalReports;\\n\\n      // First pass: count reports\\n      for (uint256 i = 0; i < enterprises.length; i++) {\\n        totalReports += _enterpriseReports[enterprises[i]].length;\\n      }\\n\\n     // Second pass: collect reports\\n    DataTypes.InspectionReport[] memory reports = new DataTypes.InspectionReport[](totalReports);\\n    uint256 counter;\\n\\n    for (uint256 i = 0; i < enterprises.length; i++) {\\n        for (uint256 j = 0; j <_enterpriseReports[enterprises[i]].length; j++) {\\n            if (_enterpriseReports[enterprises[i]][j].inspector == inspector) {\\n                reports[counter++] = _enterpriseReports[enterprises[i]][j];\\n            }\\n        }\\n    }    \\n\\n        return reports;\\n    }\\n\\n    /////////////////////////////////////////\\n    /// Simple reports getter for testing////\\n    /////////////////////////////////////////\\n      function getEnterpriseInspectionReports(address enterprise) external view returns(DataTypes.InspectionReport[] memory) {\\n\\n        if (_enterpriseReports[enterprise].length == 0) {\\n            revert InspectionManager__NoReportsAssociatedWithEnterprise();\\n        }\\n        return _enterpriseReports[enterprise];\\n    }\\n\\n\\n\\n    //////////////////////////////////////////\\n    ///// FLAGGED INSPECTION GETTERS ////////\\n    ////////////////////////////////////////\\n    function getFlaggedInspections(uint256 limit, uint256 offset) \\n        public view \\n        returns(DataTypes.FlaggedInspection[] memory) {\\n            uint256 resultSize = limit > _flagCounter - offset ?  _flagCounter - offset : limit;\\n            DataTypes.FlaggedInspection[] memory result = new DataTypes.FlaggedInspection[](resultSize);\\n\\n            for (uint256 i = 0; i < resultSize; i++) {\\n                result[i] = _flaggedInspections[offset + i];\\n            }\\n\\n            return result;\\n    }\\n\\n    function getEnterpriseFlaggedReports(address enterprise)\\n    public\\n    view\\n    returns(DataTypes.FlaggedInspection[] memory) {\\n        uint256[] memory flaggedIds = _enterpriseFlaggedReports[enterprise];\\n        DataTypes.FlaggedInspection[] memory result = new DataTypes.FlaggedInspection[](flaggedIds.length);\\n\\n        for (uint256 i = 0; i < flaggedIds.length; i++) {\\n            result[i] = _flaggedInspections[flaggedIds[i]];\\n        }\\n        return result;\\n    }\\n}\",\"keccak256\":\"0x3736c72f9bcd3c73321a2348209cb993e28a125686246b7ee72088ae0906e656\",\"license\":\"MIT\"},\"contracts/utils/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n* @author @0xJonaseb11\\n* @dev This library contains the data types used by the contracts\\n* @dev These structs hold a huge role in maintaining contract states\\n*/\\nlibrary DataTypes {\\n    struct Certification {\\n        string industry;\\n        string metadataURI;\\n        uint256 certifiedAt;\\n        uint256 expiryDate;\\n        bool isCertified;\\n        uint256 tokenId;\\n    }\\n\\n    struct Enterprise {\\n        address enterpriseAddress;\\n        string name;\\n        string industry;\\n        string metadataURI;\\n        bool isRegistered;\\n        uint256 registrationDate;\\n        uint256 lastUpdated;\\n        uint256 certificateId;\\n    }\\n\\n    struct InspectionReport {\\n        address inspector;\\n        address enterprise;\\n        string remarks;\\n        string evidenceURI; // IPFS hash\\n        uint256 inspectedAt;\\n        bool passed;\\n        bool flagged;\\n    }\\n\\n    struct FlaggedInspection {\\n        address enterprise;\\n        uint256 reportIndex;\\n        InspectionReport report;\\n        address flaggedBy;\\n        string reason;\\n        uint256 flaggedAt;\\n    }\\n\\n    struct NFTCertificate {\\n    address enterprise;\\n    address issuer;\\n    uint256 issuedAt;\\n    uint256 expiresAt;\\n    bool isRevoked;\\n    }\\n\\n    struct AuditCase {\\n        uint256 id;\\n        address targetEnterprise;\\n        uint256 inspectionId;\\n        address auditor;\\n        string reason;\\n        string evidenceURI;\\n        uint256 depositAmount;\\n        AuditStatus status;\\n        uint256 createdAt;\\n        uint256 resolvedAt;\\n    }\\n\\n    enum AuditStatus {\\n        Pending,\\n        Upheld,\\n        Rejected,\\n        Appealed\\n    }\\n}\",\"keccak256\":\"0xdd54b6675ea527069420c989adb49b0cd9a67ba27876feee92e0ee8a5d99fa3e\",\"license\":\"MIT\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n* @author @0xJonaseb11\\n* @dev contains the custom errors emitted by the contracts\\n@notice All the contracts inherit this to handle custom errors\\n*/\\n\\ncontract Errors {\\n    error InvalidAddress();\\n\\n    // -------- RolesManager ------------------//\\n    error RolesManager__UnauthorizedToPerformAction();\\n    error RolesManager__NotAuthorizedCertifier();\\n    error RolesManager__NotAuthorizedInspector();\\n    error RolesManager__NotAuthorizedAuditor();\\n    error RolesManager__NotAuthorizedEnterprise();\\n    error RolesManager__NotAuthorizedCertificateFactory();\\n    error RolesManager__NotAuthorizedPublicUser();\\n    error RolesManager__AlreadyHasRole();\\n    error RolesManager__InvalidDuration();\\n    error RolesManager__EmptyArray();\\n    error RolesManager__ArrayLengthMismatch();\\n    error RolesManager__RoleDoesNotExist();\\n\\n    // ------- EnterpriseRegistry --------------//\\n    error EnterpriseRegistry__EnterpriseAlreadyExists();\\n    error EnterpriseRegistry__EnterpriseDoesNotExist();\\n    error EnterpriseRegistry__InvalidStart();\\n\\n    // ------- CertificationAuthority ------- //\\n    error CertificationAuthority__EnterpriseAlreadyCertified();\\n    error CertificationAuthority__EnterpriseNotCertifiedYet();\\n    error CertificationAuthority__CertificationNotExpiredYet();\\n\\n    // -------- CertificateNFT --------- //\\n    error CertificateNFT__EnterpriseAlreadyCertified();\\n    error CertificateNFT__CertificateDoesNotExist();\\n\\n    // -------- InspectionManageer --------- //\\n    error InspectionManager__InspectorAlreadyAssigned();\\n    error InspectionManager__InspectionPeriodExpired();\\n    error InspectionManager__NotAssignedToEnterprise();\\n    error InspectionManager__InvalidReportIndex();\\n    error InspectionManager__ReportAlreadyFlagged();\\n    error InspectionManager__NoReportsAssociatedWithEnterprise();\\n\\n\\n    // ---------- InspectionReport ----------- //\\n\\n    error AuditorOversight__NotAuthorizedEnterpriseOwner();\\n    error AuditorOversight__AppealWindowClosed();\\n    error AuditorOversight__CaseNotPending();\\n\\n}\",\"keccak256\":\"0xe1870fe63ce3362913db4f28a24dd1ae1cb1044dbd327874658b71e0177f9241\",\"license\":\"MIT\"},\"contracts/utils/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n/**\\n* @author @0xJonaseb11\\n* @dev This library contains the events emitted by the contracts\\n* @dev All the contracts inherit this to handle events\\n*/\\n\\nlibrary Events {\\n    event CertificationGranted(address indexed enterprise, string industry, string metadataURI, uint256 expiryDate);\\n    event CertificationRevoked(address indexed enterprise);\\n    event CertificationUpdated(address indexed enterprise, string newMetadataURI);\\n\\n    event EnterpriseRegistered(address indexed enterprise, string name, string industry, string metadataURI, uint256 certificateId);\\n    event EnterpriseUpdated(address indexed enterprise, string newMetadataURI);\\n    event EnterpriseDeregistered(address indexed enterprise, uint256 deregisteredAt);\\n    \\n    event InspectorAssigned(address indexed enterprise, address indexed inspector, uint256 validityPeriod);\\n    event InspectionReportSubmitted(address indexed inspector, address indexed enterprise, bool passed, string remarks, string evidenceURI, uint256 ReportedAt);\\n    event InspectionReportFlagged(address indexed enterprise, uint256 indexed reportIndex, address flaggedBy, string reason, uint256 timestamp);\\n    \\n    event CertificateMinted(uint256 certificateId, address indexed enterprise, address indexed certifier, uint256 mintedAt);\\n    event CertificateRevoked(uint256 certificateId, address indexed revoker, uint256 timestamp);\\n\\n\\n    event PublicRoleGranted(address indexed user, uint256 duration);\\n    event PublicRoleExpired(address indexed user);\\n    event RoleTransferred(bytes32 indexed role, address from, address to);\\n    event BulkRolesGranted(bytes32[] roles, address[] indexed accounts);\\n    event RoleGranted(bytes32 indexed role, address indexed account);\\n    event RoleRevoked(bytes32 indexed role, address indexed account);\\n\\n    event AuditInitiated(uint256 indexed caseId, address indexed enterprise, uint256 inspectionId, address auditor, string reason, string evidenceURI);\\n    event AuditResolved(uint256 indexed caseId, address indexed enterprise, address resolvedBy, bool upheld, string remarks);\\n    event AppealFiled(uint256 indexed caseid, address indexed enterprise, string counterEvidenceURI, uint256 timestamp);\\n\\n}    \",\"keccak256\":\"0x16284b3e5d51e25be566f386cec7ad356796324565c6403c4de723411b734122\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b506040516112c13803806112c183398101604081905261002f91610068565b6001600160a01b0392831660805290821660a0521660c0526100ab565b80516001600160a01b038116811461006357600080fd5b919050565b60008060006060848603121561007d57600080fd5b6100868461004c565b92506100946020850161004c565b91506100a26040850161004c565b90509250925092565b60805160a05160c0516111cb6100f66000396000818161010a01526106c10152600081816101560152818161064301526108ab01526000818161018a015261050b01526111cb6000f3fe6080604052600436106100865760003560e01c806399eb08d61161005957806399eb08d614610144578063a3574c5b14610178578063b5242dcc146101ac578063f2130d49146101bf578063f269a21e146101e957600080fd5b806307f81bfc1461008b5780630c0715cc146100b65780636a206258146100d85780639418d50e146100f8575b600080fd5b34801561009757600080fd5b506100a0610200565b6040516100ad9190610c26565b60405180910390f35b3480156100c257600080fd5b506100d66100d1366004610d7d565b6104f6565b005b3480156100e457600080fd5b506100d66100f3366004610dd9565b6107c9565b34801561010457600080fd5b5061012c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100ad565b34801561015057600080fd5b5061012c7f000000000000000000000000000000000000000000000000000000000000000081565b34801561018457600080fd5b5061012c7f000000000000000000000000000000000000000000000000000000000000000081565b6100d66101ba366004610e25565b61088c565b3480156101cb57600080fd5b506101db67016345785d8a000081565b6040519081526020016100ad565b3480156101f557600080fd5b506101db62093a8081565b60606000805b600154811161025a5760008181526020819052604081206007015460ff16600381111561023557610235610bee565b03610248578161024481610ed3565b9250505b8061025281610ed3565b915050610206565b5060008167ffffffffffffffff81111561027657610276610eec565b6040519080825280602002602001820160405280156102af57816020015b61029c610b32565b8152602001906001900390816102945790505b509050600060015b60015481116104ed5760008181526020819052604081206007015460ff1660038111156102e6576102e6610bee565b036104db57600081815260208181526040918290208251610140810184528154815260018201546001600160a01b03908116938201939093526002820154938101939093526003810154909116606083015260048101805460808401919061034d90610f02565b80601f016020809104026020016040519081016040528092919081815260200182805461037990610f02565b80156103c65780601f1061039b576101008083540402835291602001916103c6565b820191906000526020600020905b8154815290600101906020018083116103a957829003601f168201915b505050505081526020016005820180546103df90610f02565b80601f016020809104026020016040519081016040528092919081815260200182805461040b90610f02565b80156104585780601f1061042d57610100808354040283529160200191610458565b820191906000526020600020905b81548152906001019060200180831161043b57829003601f168201915b505050918352505060068201546020820152600782015460409091019060ff16600381111561048957610489610bee565b600381111561049a5761049a610bee565b81526008820154602082015260099091015460409091015283836104bd81610ed3565b9450815181106104cf576104cf610f3c565b60200260200101819052505b806104e581610ed3565b9150506102b7565b50909392505050565b60405163abaa536f60e01b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063abaa536f90602401602060405180830381865afa15801561055a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057e9190610f52565b61059b5760405163ca93e5db60e01b815260040160405180910390fd5b600084815260208190526040812090600782015460ff1660038111156105c3576105c3610bee565b146105e157604051630166e13f60e71b815260040160405180910390fd5b836105ed5760026105f0565b60015b60078201805460ff1916600183600381111561060e5761060e610bee565b0217905550426009820155831561073057600181015460405163b83cc3b360e01b81526001600160a01b0391821660048201527f00000000000000000000000000000000000000000000000000000000000000009091169063b83cc3b390602401600060405180830381600087803b15801561068957600080fd5b505af115801561069d573d6000803e3d6000fd5b50505060018201546002830154604051630861159360e31b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169450634308ac98936106fd9391169188908890600401610f9f565b600060405180830381600087803b15801561071757600080fd5b505af115801561072b573d6000803e3d6000fd5b505050505b600381015460068201546040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015610770573d6000803e3d6000fd5b5060018101546040516001600160a01b039091169086907f301df41f47409571451409165715dde2b276daea32c1bdb4a82853d9a845e679906107ba903390899089908990610fd1565b60405180910390a35050505050565b60008381526020819052604090206001015483906001600160a01b031633146108045760405162d93abb60e31b815260040160405180910390fd5b600084815260208190526040902060088101546108259062093a8090610ffe565b4211156108455760405163b8e8d56f60e01b815260040160405180910390fd5b60078101805460ff19166003179055604051339086907f67a062a8c0dedbbe4c7c23d0ea74b2a2f174287b28e7ccf43dc83047a9cf2fbb906107ba90889088904290611017565b60405163261e85cd60e01b81526001600160a01b0387811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063261e85cd90602401602060405180830381865afa1580156108f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109169190610f52565b610933576040516308a2227760e11b815260040160405180910390fd5b6001805490600061094383610ed3565b91905055506040518061014001604052806001548152602001876001600160a01b03168152602001868152602001336001600160a01b0316815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f86018190048102820181019092528481529181019190859085908190840183828082843760009201829052509385525050346020840152506040909101908152426020808301919091526000604092830181905260018054825281835290839020845181559184015190820180546001600160a01b03199081166001600160a01b0393841617909155928401516002830155606084015160038301805490941691161790915560808201516004820190610a7b908261108a565b5060a08201516005820190610a90908261108a565b5060c0820151600682015560e082015160078201805460ff19166001836003811115610abe57610abe610bee565b021790555061010082015181600801556101208201518160090155905050856001600160a01b03166001547f1226c69d11817637190759da9257a6df1ff4bb6110f10ccf0255d12f8f5ea75e873388888888604051610b229695949392919061114a565b60405180910390a3505050505050565b6040518061014001604052806000815260200160006001600160a01b031681526020016000815260200160006001600160a01b0316815260200160608152602001606081526020016000815260200160006003811115610b9457610b94610bee565b815260200160008152602001600081525090565b6000815180845260005b81811015610bce57602081850181015186830182015201610bb2565b506000602082860101526020601f19601f83011685010191505092915050565b634e487b7160e01b600052602160045260246000fd5b60048110610c2257634e487b7160e01b600052602160045260246000fd5b9052565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015610d1557888303603f19018552815180518452878101516001600160a01b03811689860152610140905081880151858901526060808301516001600160a01b0381168288015250506080808301518282880152610cb083880182610ba8565b9250505060a08083015186830382880152610ccb8382610ba8565b9250505060c080830151818701525060e080830151610cec82880182610c04565b505061010082810151908601526101209182015191909401529386019390860190600101610c4d565b509098975050505050505050565b8015158114610d3157600080fd5b50565b60008083601f840112610d4657600080fd5b50813567ffffffffffffffff811115610d5e57600080fd5b602083019150836020828501011115610d7657600080fd5b9250929050565b60008060008060608587031215610d9357600080fd5b843593506020850135610da581610d23565b9250604085013567ffffffffffffffff811115610dc157600080fd5b610dcd87828801610d34565b95989497509550505050565b600080600060408486031215610dee57600080fd5b83359250602084013567ffffffffffffffff811115610e0c57600080fd5b610e1886828701610d34565b9497909650939450505050565b60008060008060008060808789031215610e3e57600080fd5b86356001600160a01b0381168114610e5557600080fd5b955060208701359450604087013567ffffffffffffffff80821115610e7957600080fd5b610e858a838b01610d34565b90965094506060890135915080821115610e9e57600080fd5b50610eab89828a01610d34565b979a9699509497509295939492505050565b634e487b7160e01b600052601160045260246000fd5b600060018201610ee557610ee5610ebd565b5060010190565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680610f1657607f821691505b602082108103610f3657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610f6457600080fd5b8151610f6f81610d23565b9392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60018060a01b0385168152836020820152606060408201526000610fc7606083018486610f76565b9695505050505050565b6001600160a01b03851681528315156020820152606060408201819052600090610fc79083018486610f76565b8082018082111561101157611011610ebd565b92915050565b60408152600061102b604083018587610f76565b9050826020830152949350505050565b601f82111561108557600081815260208120601f850160051c810160208610156110625750805b601f850160051c820191505b818110156110815782815560010161106e565b5050505b505050565b815167ffffffffffffffff8111156110a4576110a4610eec565b6110b8816110b28454610f02565b8461103b565b602080601f8311600181146110ed57600084156110d55750858301515b600019600386901b1c1916600185901b178555611081565b600085815260208120601f198616915b8281101561111c578886015182559484019460019091019084016110fd565b508582101561113a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8681526001600160a01b03861660208201526080604082018190526000906111759083018688610f76565b8281036060840152611188818587610f76565b999850505050505050505056fea26469706673582212200bc0e248b52ae324359d4ed64b49c11e9b289566079ff593323e22a2f500454064736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c806399eb08d61161005957806399eb08d614610144578063a3574c5b14610178578063b5242dcc146101ac578063f2130d49146101bf578063f269a21e146101e957600080fd5b806307f81bfc1461008b5780630c0715cc146100b65780636a206258146100d85780639418d50e146100f8575b600080fd5b34801561009757600080fd5b506100a0610200565b6040516100ad9190610c26565b60405180910390f35b3480156100c257600080fd5b506100d66100d1366004610d7d565b6104f6565b005b3480156100e457600080fd5b506100d66100f3366004610dd9565b6107c9565b34801561010457600080fd5b5061012c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100ad565b34801561015057600080fd5b5061012c7f000000000000000000000000000000000000000000000000000000000000000081565b34801561018457600080fd5b5061012c7f000000000000000000000000000000000000000000000000000000000000000081565b6100d66101ba366004610e25565b61088c565b3480156101cb57600080fd5b506101db67016345785d8a000081565b6040519081526020016100ad565b3480156101f557600080fd5b506101db62093a8081565b60606000805b600154811161025a5760008181526020819052604081206007015460ff16600381111561023557610235610bee565b03610248578161024481610ed3565b9250505b8061025281610ed3565b915050610206565b5060008167ffffffffffffffff81111561027657610276610eec565b6040519080825280602002602001820160405280156102af57816020015b61029c610b32565b8152602001906001900390816102945790505b509050600060015b60015481116104ed5760008181526020819052604081206007015460ff1660038111156102e6576102e6610bee565b036104db57600081815260208181526040918290208251610140810184528154815260018201546001600160a01b03908116938201939093526002820154938101939093526003810154909116606083015260048101805460808401919061034d90610f02565b80601f016020809104026020016040519081016040528092919081815260200182805461037990610f02565b80156103c65780601f1061039b576101008083540402835291602001916103c6565b820191906000526020600020905b8154815290600101906020018083116103a957829003601f168201915b505050505081526020016005820180546103df90610f02565b80601f016020809104026020016040519081016040528092919081815260200182805461040b90610f02565b80156104585780601f1061042d57610100808354040283529160200191610458565b820191906000526020600020905b81548152906001019060200180831161043b57829003601f168201915b505050918352505060068201546020820152600782015460409091019060ff16600381111561048957610489610bee565b600381111561049a5761049a610bee565b81526008820154602082015260099091015460409091015283836104bd81610ed3565b9450815181106104cf576104cf610f3c565b60200260200101819052505b806104e581610ed3565b9150506102b7565b50909392505050565b60405163abaa536f60e01b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063abaa536f90602401602060405180830381865afa15801561055a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057e9190610f52565b61059b5760405163ca93e5db60e01b815260040160405180910390fd5b600084815260208190526040812090600782015460ff1660038111156105c3576105c3610bee565b146105e157604051630166e13f60e71b815260040160405180910390fd5b836105ed5760026105f0565b60015b60078201805460ff1916600183600381111561060e5761060e610bee565b0217905550426009820155831561073057600181015460405163b83cc3b360e01b81526001600160a01b0391821660048201527f00000000000000000000000000000000000000000000000000000000000000009091169063b83cc3b390602401600060405180830381600087803b15801561068957600080fd5b505af115801561069d573d6000803e3d6000fd5b50505060018201546002830154604051630861159360e31b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169450634308ac98936106fd9391169188908890600401610f9f565b600060405180830381600087803b15801561071757600080fd5b505af115801561072b573d6000803e3d6000fd5b505050505b600381015460068201546040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015610770573d6000803e3d6000fd5b5060018101546040516001600160a01b039091169086907f301df41f47409571451409165715dde2b276daea32c1bdb4a82853d9a845e679906107ba903390899089908990610fd1565b60405180910390a35050505050565b60008381526020819052604090206001015483906001600160a01b031633146108045760405162d93abb60e31b815260040160405180910390fd5b600084815260208190526040902060088101546108259062093a8090610ffe565b4211156108455760405163b8e8d56f60e01b815260040160405180910390fd5b60078101805460ff19166003179055604051339086907f67a062a8c0dedbbe4c7c23d0ea74b2a2f174287b28e7ccf43dc83047a9cf2fbb906107ba90889088904290611017565b60405163261e85cd60e01b81526001600160a01b0387811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063261e85cd90602401602060405180830381865afa1580156108f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109169190610f52565b610933576040516308a2227760e11b815260040160405180910390fd5b6001805490600061094383610ed3565b91905055506040518061014001604052806001548152602001876001600160a01b03168152602001868152602001336001600160a01b0316815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f86018190048102820181019092528481529181019190859085908190840183828082843760009201829052509385525050346020840152506040909101908152426020808301919091526000604092830181905260018054825281835290839020845181559184015190820180546001600160a01b03199081166001600160a01b0393841617909155928401516002830155606084015160038301805490941691161790915560808201516004820190610a7b908261108a565b5060a08201516005820190610a90908261108a565b5060c0820151600682015560e082015160078201805460ff19166001836003811115610abe57610abe610bee565b021790555061010082015181600801556101208201518160090155905050856001600160a01b03166001547f1226c69d11817637190759da9257a6df1ff4bb6110f10ccf0255d12f8f5ea75e873388888888604051610b229695949392919061114a565b60405180910390a3505050505050565b6040518061014001604052806000815260200160006001600160a01b031681526020016000815260200160006001600160a01b0316815260200160608152602001606081526020016000815260200160006003811115610b9457610b94610bee565b815260200160008152602001600081525090565b6000815180845260005b81811015610bce57602081850181015186830182015201610bb2565b506000602082860101526020601f19601f83011685010191505092915050565b634e487b7160e01b600052602160045260246000fd5b60048110610c2257634e487b7160e01b600052602160045260246000fd5b9052565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015610d1557888303603f19018552815180518452878101516001600160a01b03811689860152610140905081880151858901526060808301516001600160a01b0381168288015250506080808301518282880152610cb083880182610ba8565b9250505060a08083015186830382880152610ccb8382610ba8565b9250505060c080830151818701525060e080830151610cec82880182610c04565b505061010082810151908601526101209182015191909401529386019390860190600101610c4d565b509098975050505050505050565b8015158114610d3157600080fd5b50565b60008083601f840112610d4657600080fd5b50813567ffffffffffffffff811115610d5e57600080fd5b602083019150836020828501011115610d7657600080fd5b9250929050565b60008060008060608587031215610d9357600080fd5b843593506020850135610da581610d23565b9250604085013567ffffffffffffffff811115610dc157600080fd5b610dcd87828801610d34565b95989497509550505050565b600080600060408486031215610dee57600080fd5b83359250602084013567ffffffffffffffff811115610e0c57600080fd5b610e1886828701610d34565b9497909650939450505050565b60008060008060008060808789031215610e3e57600080fd5b86356001600160a01b0381168114610e5557600080fd5b955060208701359450604087013567ffffffffffffffff80821115610e7957600080fd5b610e858a838b01610d34565b90965094506060890135915080821115610e9e57600080fd5b50610eab89828a01610d34565b979a9699509497509295939492505050565b634e487b7160e01b600052601160045260246000fd5b600060018201610ee557610ee5610ebd565b5060010190565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680610f1657607f821691505b602082108103610f3657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610f6457600080fd5b8151610f6f81610d23565b9392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60018060a01b0385168152836020820152606060408201526000610fc7606083018486610f76565b9695505050505050565b6001600160a01b03851681528315156020820152606060408201819052600090610fc79083018486610f76565b8082018082111561101157611011610ebd565b92915050565b60408152600061102b604083018587610f76565b9050826020830152949350505050565b601f82111561108557600081815260208120601f850160051c810160208610156110625750805b601f850160051c820191505b818110156110815782815560010161106e565b5050505b505050565b815167ffffffffffffffff8111156110a4576110a4610eec565b6110b8816110b28454610f02565b8461103b565b602080601f8311600181146110ed57600084156110d55750858301515b600019600386901b1c1916600185901b178555611081565b600085815260208120601f198616915b8281101561111c578886015182559484019460019091019084016110fd565b508582101561113a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8681526001600160a01b03861660208201526080604082018190526000906111759083018688610f76565b8281036060840152611188818587610f76565b999850505050505050505056fea26469706673582212200bc0e248b52ae324359d4ed64b49c11e9b289566079ff593323e22a2f500454064736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4761,
        "contract": "contracts/modules/AuditorOversight.sol:AuditorOversight",
        "label": "_auditCases",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(AuditCase)6562_storage)"
      },
      {
        "astId": 4763,
        "contract": "contracts/modules/AuditorOversight.sol:AuditorOversight",
        "label": "_caseCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_enum(AuditStatus)6567": {
        "encoding": "inplace",
        "label": "enum DataTypes.AuditStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(AuditCase)6562_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DataTypes.AuditCase)",
        "numberOfBytes": "32",
        "value": "t_struct(AuditCase)6562_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AuditCase)6562_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.AuditCase",
        "members": [
          {
            "astId": 6542,
            "contract": "contracts/modules/AuditorOversight.sol:AuditorOversight",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6544,
            "contract": "contracts/modules/AuditorOversight.sol:AuditorOversight",
            "label": "targetEnterprise",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6546,
            "contract": "contracts/modules/AuditorOversight.sol:AuditorOversight",
            "label": "inspectionId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6548,
            "contract": "contracts/modules/AuditorOversight.sol:AuditorOversight",
            "label": "auditor",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 6550,
            "contract": "contracts/modules/AuditorOversight.sol:AuditorOversight",
            "label": "reason",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 6552,
            "contract": "contracts/modules/AuditorOversight.sol:AuditorOversight",
            "label": "evidenceURI",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 6554,
            "contract": "contracts/modules/AuditorOversight.sol:AuditorOversight",
            "label": "depositAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6557,
            "contract": "contracts/modules/AuditorOversight.sol:AuditorOversight",
            "label": "status",
            "offset": 0,
            "slot": "7",
            "type": "t_enum(AuditStatus)6567"
          },
          {
            "astId": 6559,
            "contract": "contracts/modules/AuditorOversight.sol:AuditorOversight",
            "label": "createdAt",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 6561,
            "contract": "contracts/modules/AuditorOversight.sol:AuditorOversight",
            "label": "resolvedAt",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}