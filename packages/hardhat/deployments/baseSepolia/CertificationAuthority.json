{
  "address": "0x34ac9Df22279cf18F3f9d7606878D283A0B75e8B",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CertificateNFT__CertificateDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CertificateNFT__EnterpriseAlreadyCertified",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CertificationAuthority__CertificationNotExpiredYet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CertificationAuthority__EnterpriseAlreadyCertified",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CertificationAuthority__EnterpriseNotCertifiedYet",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721IncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721InsufficientApproval",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721NonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnterpriseRegistry__EnterpriseAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnterpriseRegistry__EnterpriseDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnterpriseRegistry__InvalidStart",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InspectionManager__InspectionPeriodExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InspectionManager__InspectorAlreadyAssigned",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InspectionManager__NoReportsAssociatedWithEnterprise",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InspectionManager__NotAssignedToEnterprise",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__AlreadyHasRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__ArrayLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__EmptyArray",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidDuration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__NotAuthorizedAuditor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__NotAuthorizedCertificateFactory",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__NotAuthorizedCertifier",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__NotAuthorizedEnterprise",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__NotAuthorizedInspector",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__NotAuthorizedPublicUser",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__RoleDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__UnauthorizedToPerformAction",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "roles",
          "type": "bytes32[]"
        },
        {
          "indexed": true,
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "BulkRolesGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "enterprise",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "industry",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiryDate",
          "type": "uint256"
        }
      ],
      "name": "CertificationGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "enterprise",
          "type": "address"
        }
      ],
      "name": "CertificationRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "enterprise",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newMetadataURI",
          "type": "string"
        }
      ],
      "name": "CertificationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "PublicRoleExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "PublicRoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "RoleTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AUDITOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CERTIFICATE_FACTORY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CERTIFIER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ENTERPRISE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INSPECTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "roles",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "bulkGrantRoles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "certifications",
      "outputs": [
        {
          "internalType": "string",
          "name": "industry",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "certifiedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiryDate",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isCertified",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "enterpriseAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_industry",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "validityDurationSeconds",
          "type": "uint256"
        }
      ],
      "name": "certifyEnterprise",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "checkExpiryRoles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "durationInHours",
          "type": "uint256"
        }
      ],
      "name": "claimTemporaryPublicRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getActiveRoles",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAdmin",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isCertifier",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isInspector",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isAuditor",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isEnterprise",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isCertificateFactory",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isPublic",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "enterpriseAddress",
          "type": "address"
        }
      ],
      "name": "getCertification",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "industry",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "certifiedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryDate",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isCertified",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.Certification",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getEnterpriseByTokenId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxPublicRoleDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantAuditor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantCertificateFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantCertifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantEnterprise",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantInspector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantPublicRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasAdminRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasAuditorRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasCertificateFactoryRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasCertifierRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasEnterpriseRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasInspectorRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasPublicRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isCertificateValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "enterpriseAddress",
          "type": "address"
        }
      ],
      "name": "isCertificationValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "publicRoleExpiry",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeAuditorRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeCertificateFactoryRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "enterpriseAddress",
          "type": "address"
        }
      ],
      "name": "revokeCertification",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeCertifierRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeEnterpriseRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "enterpriseAddress",
          "type": "address"
        }
      ],
      "name": "revokeIfExpired",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeInspectorRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokePublicRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "enterpriseAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "newMetadataURI",
          "type": "string"
        }
      ],
      "name": "updateCertificationMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x41bdf91fc5e51bf8807031e1d4807f3720106582f8b03b3817bc9cff558a762b",
  "receipt": {
    "to": null,
    "from": "0x0dfDb5bBaEeCE3871f826DF1C6Fe24a2772f5d38",
    "contractAddress": "0x34ac9Df22279cf18F3f9d7606878D283A0B75e8B",
    "transactionIndex": 150,
    "gasUsed": "3049852",
    "logsBloom": "0x
    "blockHash": "0x2ef964752237f32ed0fff36a5da22c1d449f54b4358981c7e7715811fb21eec3",
    "transactionHash": "0x41bdf91fc5e51bf8807031e1d4807f3720106582f8b03b3817bc9cff558a762b",
    "logs": [
      {
        "transactionIndex": 150,
        "blockNumber": 26289637,
        "transactionHash": "0x41bdf91fc5e51bf8807031e1d4807f3720106582f8b03b3817bc9cff558a762b",
        "address": "0x34ac9Df22279cf18F3f9d7606878D283A0B75e8B",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 60,
        "blockHash": "0x2ef964752237f32ed0fff36a5da22c1d449f54b4358981c7e7715811fb21eec3"
      },
      {
        "transactionIndex": 150,
        "blockNumber": 26289637,
        "transactionHash": "0x41bdf91fc5e51bf8807031e1d4807f3720106582f8b03b3817bc9cff558a762b",
        "address": "0x34ac9Df22279cf18F3f9d7606878D283A0B75e8B",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xc41a06b26ced3a23b7bf835a0918ade784f4055ded86d18305f528f47a726052",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 61,
        "blockHash": "0x2ef964752237f32ed0fff36a5da22c1d449f54b4358981c7e7715811fb21eec3"
      }
    ],
    "blockNumber": 26289637,
    "cumulativeGasUsed": "11483122",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "654b6f1015d7db0de73c4aea9a0f35b2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificateNFT__CertificateDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificateNFT__EnterpriseAlreadyCertified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificationAuthority__CertificationNotExpiredYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificationAuthority__EnterpriseAlreadyCertified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificationAuthority__EnterpriseNotCertifiedYet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnterpriseRegistry__EnterpriseAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnterpriseRegistry__EnterpriseDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnterpriseRegistry__InvalidStart\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__InspectionPeriodExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__InspectorAlreadyAssigned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__NoReportsAssociatedWithEnterprise\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__NotAssignedToEnterprise\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__AlreadyHasRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__EmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedAuditor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedCertificateFactory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedCertifier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedEnterprise\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedInspector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedPublicUser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__RoleDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__UnauthorizedToPerformAction\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"roles\",\"type\":\"bytes32[]\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"BulkRolesGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"industry\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiryDate\",\"type\":\"uint256\"}],\"name\":\"CertificationGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"}],\"name\":\"CertificationRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newMetadataURI\",\"type\":\"string\"}],\"name\":\"CertificationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"PublicRoleExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"PublicRoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RoleTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUDITOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CERTIFICATE_FACTORY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CERTIFIER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENTERPRISE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INSPECTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"roles\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"bulkGrantRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"certifications\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"industry\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"certifiedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isCertified\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_industry\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"validityDurationSeconds\",\"type\":\"uint256\"}],\"name\":\"certifyEnterprise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkExpiryRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"durationInHours\",\"type\":\"uint256\"}],\"name\":\"claimTemporaryPublicRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getActiveRoles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCertifier\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isInspector\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAuditor\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnterprise\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCertificateFactory\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enterpriseAddress\",\"type\":\"address\"}],\"name\":\"getCertification\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"industry\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"certifiedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isCertified\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.Certification\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getEnterpriseByTokenId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxPublicRoleDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantAuditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantCertificateFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantCertifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantEnterprise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantInspector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantPublicRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAdminRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAuditorRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasCertificateFactoryRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasCertifierRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasEnterpriseRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasInspectorRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasPublicRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isCertificateValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enterpriseAddress\",\"type\":\"address\"}],\"name\":\"isCertificationValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"publicRoleExpiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeAuditorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeCertificateFactoryRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enterpriseAddress\",\"type\":\"address\"}],\"name\":\"revokeCertification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeCertifierRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeEnterpriseRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enterpriseAddress\",\"type\":\"address\"}],\"name\":\"revokeIfExpired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeInspectorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokePublicRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newMetadataURI\",\"type\":\"string\"}],\"name\":\"updateCertificationMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"bulkGrantRoles(bytes32[],address[])\":{\"details\":\"Bulk grant roles to accounts\",\"params\":{\"accounts\":\"The array of accounts to grant roles emits BulkRolesGranted event on successful grant\",\"roles\":\"The array of roles to grant\"}},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"certifyEnterprise(address,string,string,uint256)\":{\"details\":\"This function is used to certify enterprisesOnly the Certifier can certify enterprisesmints and assigns NFT certificate to an enterprisesets token URI to metadata URI of a certificate\",\"params\":{\"_industry\":\"The industry of the enterprise to be certified\",\"_metadataURI\":\"The metadata URI of the certificate (IPFS hash)\",\"enterpriseAddress\":\"The address of the enterprise to be certified\",\"validityDurationSeconds\":\"The validity duration of the certificate in seconds\"}},\"checkExpiryRoles(address)\":{\"details\":\"helper to check expiry of `PUBLIC` role\",\"params\":{\"account\":\"The account to check for role expiry\"}},\"claimTemporaryPublicRole(uint256)\":{\"details\":\"allows users to claim temporary `PUBLIC` role for `durationInHours` hours on their visit to platform\",\"params\":{\"durationInHours\":\"The duration in hours the user will have the `PUBLIC` role\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantCertifier(address)\":{\"details\":\"Functions to grant roles to!\",\"params\":{\"account\":\"The account to grant the role to\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasAdminRole(address)\":{\"details\":\"Functions to check if a certain account has the specified role\",\"params\":{\"account\":\"The account to check \"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeCertification(address)\":{\"details\":\"allows the revocation of certifications from enterprisesOnly the `Certifier` or `Super Admin` can revoke certificationsallows automatic destruction of NFT certificates via oppenzeppelin's`burn` function\",\"params\":{\"enterpriseAddress\":\"The address of the enterprise to be revoked\"}},\"revokeCertifierRole(address)\":{\"details\":\"Functions to revoke roles\",\"params\":{\"account\":\"The account to revoke the role from\"}},\"revokeIfExpired(address)\":{\"details\":\"alloes automatic revokation of NFT certificates after expiry duration callable by anyone as long as expiry date kicks in\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferRole(bytes32,address,address)\":{\"details\":\"Transfers a role from one account to another\",\"params\":{\"from\":\"The account to transfer the role from\",\"role\":\"The role to transfer\",\"to\":\"The account to transfer the role to\"}},\"updateCertificationMetadata(address,string)\":{\"details\":\"updates the metadata URI of the NFT certificateOnly the `Certifier` can update certification metadata URI\",\"params\":{\"enterpriseAddress\":\"The address of the enterprise to be updated\",\"newMetadataURI\":\"The new metadata URI of the certificate\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bulkGrantRoles(bytes32[],address[])\":{\"notice\":\"---------- # Bulk Role Grant(Auto) ------- //\"},\"certifyEnterprise(address,string,string,uint256)\":{\"notice\":\"Emits CertificationGranted event on successful enterprise certification\"},\"checkExpiryRoles(address)\":{\"notice\":\"--------- #  Auto-expiry check (Call periodically) ------- //Emits PublicRoleExpired event on expiry\"},\"claimTemporaryPublicRole(uint256)\":{\"notice\":\"----------- #claim temporary public role -------------- //`durationInHours` must be less than 24 hoursEmits PublicRoleGranted event on successful claim \"},\"grantCertifier(address)\":{\"notice\":\"---------# GRANTING ROLES ---------//Emits RoleGranted event on successful grant\"},\"hasAdminRole(address)\":{\"notice\":\"--------- # CHECKING ROLES --------- //\"},\"revokeCertification(address)\":{\"notice\":\"Emits CertificationRevoked event on successful enterprise revocation\"},\"revokeCertifierRole(address)\":{\"notice\":\"------------- # REVOKING ROLES ------------- //Emits RoleRevoked event on successful revoke\"},\"revokeIfExpired(address)\":{\"notice\":\"Emits CertificationRevoked event on successful enterprise revocation\"},\"transferRole(bytes32,address,address)\":{\"notice\":\"-------- # Safe Role Transfer ------- //Emits RoleTransferred event on successful transfer\"},\"updateCertificationMetadata(address,string)\":{\"notice\":\"Emits CertificationUpdated event on successful metadata update\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/CertificationAuthority.sol\":\"CertificationAuthority\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0xb31b86c03f4677dcffa4655285d62433509513be9bafa0e04984565052d34e44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        _update(address(0), tokenId, _msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xc48434419baa510862ba4b4802bc0500ccddadd02ae2f195548af748c3206b20\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xcc6f49e0c57072d6a18eef0d5fc22a4cc20462c18f0c365d2dd9a2c732fde670\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/core/CertificationAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n\\n/**\\n* @author @0xJonaseb11\\n* @title CertificationAuthority Contract\\n* @dev Acts like a Certificate Authority main house for enterprises\\n* @dev Only the Certifier can certify enterprises\\n* @dev Allows update of NFT certificate's metadata URI\\n* @dev Automatic revocation of certificates after expiry duration\\n*/\\nimport {RolesManager} from \\\"./RolesManager.sol\\\";\\nimport {Events} from \\\"../utils/Events.sol\\\";\\nimport {DataTypes} from \\\"../utils/DataTypes.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract CertificationAuthority is RolesManager, ERC721URIStorage, ERC721Burnable {\\n    using DataTypes for DataTypes.Enterprise;\\n    using DataTypes for DataTypes.Certification;\\n    using DataTypes for DataTypes.InspectionReport;\\n\\n    mapping(address => DataTypes.Certification) public certifications;\\n    mapping(uint256 => address) private _tokenToEnterprise;\\n    uint256 private _tokenIdCounter;\\n\\n    constructor() ERC721(\\\"EnterpriseCertificate\\\", \\\"ECERT\\\") {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(CERTIFIER_ROLE, msg.sender);\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// ENTERPRISE CERTIFICATION ///////////////////\\n    //////////////////////////////////////////////////////////\\n\\n    /**\\n    * @dev This function is used to certify enterprises\\n    * @dev Only the Certifier can certify enterprises\\n    * @dev mints and assigns NFT certificate to an enterprise\\n    * @dev sets token URI to metadata URI of a certificate\\n    * @param enterpriseAddress The address of the enterprise to be certified\\n    * @param _industry The industry of the enterprise to be certified\\n    * @param _metadataURI The metadata URI of the certificate (IPFS hash)\\n    * @param validityDurationSeconds The validity duration of the certificate in seconds\\n    * @notice Emits CertificationGranted event on successful enterprise certification\\n    */\\n\\n    function certifyEnterprise(\\n        address enterpriseAddress,\\n        string memory _industry,\\n        string memory _metadataURI,\\n        uint256 validityDurationSeconds\\n    ) external onlyValidAddress(enterpriseAddress) onlyRole(CERTIFIER_ROLE) {\\n        if (certifications[enterpriseAddress].isCertified) {\\n            revert CertificationAuthority__EnterpriseAlreadyCertified();\\n        }\\n\\n        uint256 tokenId = _tokenIdCounter++;\\n        _safeMint(enterpriseAddress, tokenId);\\n        _setTokenURI(tokenId, _metadataURI);\\n\\n        certifications[enterpriseAddress] = DataTypes.Certification({\\n            industry: _industry,\\n            metadataURI: _metadataURI,\\n            certifiedAt: block.timestamp,\\n            expiryDate: block.timestamp + validityDurationSeconds,\\n            isCertified: true,\\n            tokenId: tokenId\\n        });\\n\\n        _tokenToEnterprise[tokenId] = enterpriseAddress;\\n\\n        emit Events.CertificationGranted(\\n            enterpriseAddress,\\n            _industry,\\n            _metadataURI,\\n            block.timestamp + validityDurationSeconds\\n        );\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// REVOCATION & EXPIRY HANDLING //////////////\\n    //////////////////////////////////////////////////////////\\n    \\n\\n    /**\\n    * @dev allows the revocation of certifications from enterprises\\n    * @dev Only the `Certifier` or `Super Admin` can revoke certifications\\n    * @dev allows automatic destruction of NFT certificates via oppenzeppelin's`burn` function\\n    * @param enterpriseAddress The address of the enterprise to be revoked\\n    * @notice Emits CertificationRevoked event on successful enterprise revocation\\n    */\\n    function revokeCertification(address enterpriseAddress)\\n        external\\n        onlyValidAddress(enterpriseAddress)\\n        onlyRole(CERTIFIER_ROLE) onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\\n        if (!cert.isCertified) {\\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\\n        }\\n\\n        if (cert.tokenId != 0) {\\n            burn(cert.tokenId); \\n            delete _tokenToEnterprise[cert.tokenId];\\n        }\\n\\n        cert.isCertified = false;\\n        emit Events.CertificationRevoked(enterpriseAddress);\\n    }\\n    \\n\\n    /**\\n    * @dev alloes automatic revokation of NFT certificates after expiry duration \\n    * @dev callable by anyone as long as expiry date kicks in\\n    * @notice Emits CertificationRevoked event on successful enterprise revocation\\n    */\\n    function revokeIfExpired(address enterpriseAddress) external {\\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\\n\\n        if (!cert.isCertified) {\\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\\n        }\\n        if (block.timestamp < cert.expiryDate) {\\n            revert CertificationAuthority__CertificationNotExpiredYet();\\n        }\\n\\n        if (cert.tokenId != 0) {\\n            burn(cert.tokenId);\\n            delete _tokenToEnterprise[cert.tokenId];\\n        }\\n\\n        cert.isCertified = false;\\n        emit Events.CertificationRevoked(enterpriseAddress);\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// TRANSFER CONTROL ///////////////////////////\\n    //////////////////////////////////////////////////////////\\n\\n    function _update(\\n        address to,\\n        uint256 tokenId,\\n        address auth\\n    ) internal override(ERC721) returns (address) {\\n        // Block all transfers except minting (to) and burning (address(0))\\n        if (auth != address(0)) {\\n            require(to == address(0), \\\"Certificates are non-transferable\\\");\\n        }\\n        return super._update(to, tokenId, auth);\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// VALIDATION & METADATA //////////////////////\\n    //////////////////////////////////////////////////////////\\n\\n    function isCertificationValid(address enterpriseAddress)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\\n        return cert.isCertified && block.timestamp <= cert.expiryDate;\\n    }\\n\\n    function isCertificateValid(uint256 tokenId) public view returns (bool) {\\n        address enterprise = _tokenToEnterprise[tokenId];\\n        return isCertificationValid(enterprise);\\n    }\\n    \\n    \\n    /**\\n    * @dev updates the metadata URI of the NFT certificate\\n    * @dev Only the `Certifier` can update certification metadata URI\\n    * @param enterpriseAddress The address of the enterprise to be updated\\n    * @param newMetadataURI The new metadata URI of the certificate\\n    * @notice Emits CertificationUpdated event on successful metadata update\\n    */\\n    function updateCertificationMetadata(\\n        address enterpriseAddress,\\n        string calldata newMetadataURI\\n    ) external onlyValidAddress(enterpriseAddress) onlyRole(CERTIFIER_ROLE) {\\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\\n        if (!cert.isCertified) {\\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\\n        }\\n\\n        if (cert.tokenId != 0) {\\n            _setTokenURI(cert.tokenId, newMetadataURI);\\n        }\\n\\n        cert.metadataURI = newMetadataURI;\\n        emit Events.CertificationUpdated(enterpriseAddress, newMetadataURI);\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// GETTERS & OVERRIDES ////////////////////////\\n    //////////////////////////////////////////////////////////\\n\\n    function getCertification(address enterpriseAddress)\\n        public\\n        view\\n        returns (DataTypes.Certification memory)\\n    {\\n        return certifications[enterpriseAddress];\\n    }\\n\\n    function getEnterpriseByTokenId(uint256 tokenId)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return _tokenToEnterprise[tokenId];\\n    }\\n\\n    // ----- Required overrides for multiple inheritance --- //\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override(ERC721, ERC721URIStorage)\\n        returns (string memory)\\n    {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721, ERC721URIStorage, AccessControl)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x164ee8ef3581d2569d9d769b4c38912e3fa51b07b7db5e1a51b4e125ba40b5d6\",\"license\":\"MIT\"},\"contracts/core/RolesManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n\\n/**\\n* @author @0xJonaseb11\\n\\n* @dev manages the roles of the whole ecosystem \\n* @dev Only Super Admin can assign roles\\n* @dev On very high roles, there's DAO voting\\n*/\\n\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { Events } from \\\"../utils/Events.sol\\\";\\nimport { Errors } from \\\"../utils/Errors.sol\\\";\\nimport { DataTypes } from \\\"../utils/DataTypes.sol\\\";\\n\\n\\ncontract RolesManager is AccessControl, Errors {\\n\\n    bytes32 public constant CERTIFIER_ROLE = keccak256(\\\"CERTIFYING_BODY_ROLE\\\");\\n    bytes32 public constant INSPECTOR_ROLE = keccak256(\\\"INSPECTION_MANAGER_ROLE\\\");\\n    bytes32 public constant AUDITOR_ROLE = keccak256(\\\"AUDITOR_ROLE\\\");\\n    bytes32 public constant ENTERPRISE_ROLE = keccak256(\\\"ENTERPRISE_ROLE\\\");\\n    bytes32 public constant CERTIFICATE_FACTORY_ROLE = keccak256(\\\"CERTIFICATE_FACTORY_ROLE\\\");\\n    bytes32 public constant PUBLIC_ROLE = keccak256(\\\"PUBLIC_ROLE\\\");\\n\\n    mapping(address => uint256) public publicRoleExpiry;\\n\\n   // ----- modifiers\\n   modifier onlyValidAddress(address account) {\\n    if (account == address(0)) {\\n        revert InvalidAddress();\\n    }\\n    _;\\n   }\\n\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(CERTIFIER_ROLE,  msg.sender);\\n    }\\n\\n\\n    /** ----------- #claim temporary public role -------------- //\\n    * @dev allows users to claim temporary `PUBLIC` role for `durationInHours` hours on their visit to platform\\n    * @param durationInHours The duration in hours the user will have the `PUBLIC` role\\n    * @notice `durationInHours` must be less than 24 hours\\n    * @notice Emits PublicRoleGranted event on successful claim \\n    */\\n    function claimTemporaryPublicRole(uint256 durationInHours) external {\\n        if (hasPublicRole(msg.sender)) {\\n            revert RolesManager__AlreadyHasRole();\\n        }\\n        if (durationInHours > 0) {\\n            revert RolesManager__InvalidDuration();\\n        }\\n         if (durationInHours > 24 /*hours */) {\\n            revert RolesManager__InvalidDuration();\\n         }\\n        uint256 durationInSeconds = durationInHours * 1 hours;\\n    \\n        _grantRole(PUBLIC_ROLE, msg.sender);\\n        publicRoleExpiry[msg.sender] = block.timestamp + durationInSeconds;\\n\\n        emit Events.PublicRoleGranted(msg.sender, durationInHours);\\n    }\\n\\n    // ------- helper for client ---- //\\n    function getMaxPublicRoleDuration() public pure returns (uint256) {\\n        return 24;\\n    }\\n\\n\\n    /** --------- #  Auto-expiry check (Call periodically) ------- //\\n    * @dev helper to check expiry of `PUBLIC` role\\n    * @param account The account to check for role expiry\\n    * @notice Emits PublicRoleExpired event on expiry\\n    */\\n    function checkExpiryRoles(address account) public {\\n        if (hasPublicRole(account) && publicRoleExpiry[account] < block.timestamp) {\\n            _revokeRole(PUBLIC_ROLE, account);\\n\\n            emit Events.PublicRoleExpired(account);\\n        }\\n    }\\n\\n    /** ---------- # Bulk Role Grant(Auto) ------- //\\n    * @dev Bulk grant roles to accounts\\n    * @param roles The array of roles to grant\\n    * @param accounts The array of accounts to grant roles\\n    * emits BulkRolesGranted event on successful grant\\n    */\\n    function bulkGrantRoles(\\n        bytes32[] calldata roles,\\n        address[] calldata accounts\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (roles.length == 0 || accounts.length == 0) {\\n            revert RolesManager__EmptyArray();\\n        }\\n        if (roles.length != accounts.length) {\\n            revert RolesManager__ArrayLengthMismatch();\\n        }\\n        \\n        for (uint256 i = 0; i < roles.length; i++) {\\n            _grantRole(roles[i], accounts[i]);\\n        }\\n\\n        emit Events.BulkRolesGranted(roles, accounts);\\n    }\\n\\n    /** -------- # Safe Role Transfer ------- //\\n    * @dev Transfers a role from one account to another\\n    * @param role The role to transfer\\n    * @param from The account to transfer the role from\\n    * @param to The account to transfer the role to\\n    * @notice Emits RoleTransferred event on successful transfer\\n    */\\n    function transferRole(\\n        bytes32 role,\\n        address from,\\n        address to  \\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasRole(role, from)) {\\n            revert RolesManager__RoleDoesNotExist();\\n        }\\n        _revokeRole(role, from);\\n        _grantRole(role, to);\\n\\n        emit Events.RoleTransferred(role, from, to);\\n    }\\n\\n    // ---- combined role check ----- //\\n    function getActiveRoles(address account) public view returns (\\n        bool isAdmin,\\n        bool isCertifier,\\n        bool isInspector,\\n        bool isAuditor,\\n        bool isEnterprise,\\n        bool isCertificateFactory,\\n        bool isPublic\\n    ) {\\n        return (\\n            hasRole(DEFAULT_ADMIN_ROLE, account),\\n            hasRole(CERTIFIER_ROLE, account),\\n            hasRole(INSPECTOR_ROLE, account),\\n            hasRole(AUDITOR_ROLE, account),\\n            hasRole(ENTERPRISE_ROLE, account),\\n            hasRole(CERTIFICATE_FACTORY_ROLE, account),\\n            hasRole(PUBLIC_ROLE, account)\\n        );\\n    }\\n    \\n\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n    _grantRole(role, account);\\n}\\n\\n\\n    ////////////////////////////////////////////////\\n    /////// MANAUAL ROLES MANAGEMENT  ////////////////\\n    ////////////////////////////////////////////////\\n    \\n\\n    /////////////////////////////////\\n    ////// ROLE GRANTING ////////////\\n    /////////////////////////////////\\n    \\n    /** ---------# GRANTING ROLES ---------//\\n    * @dev Functions to grant roles to!\\n    * @param account The account to grant the role to\\n    * @notice Emits RoleGranted event on successful grant\\n    */\\n    function grantCertifier(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        grantRole(CERTIFIER_ROLE, account);\\n\\n        emit Events.RoleGranted(CERTIFIER_ROLE, account);\\n\\n    }\\n    \\n    function grantInspector(address account ) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        grantRole(INSPECTOR_ROLE, account);\\n        emit Events.RoleGranted(INSPECTOR_ROLE, account);\\n    }\\n\\n    function grantAuditor(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        grantRole(AUDITOR_ROLE, account);\\n        emit Events.RoleGranted(AUDITOR_ROLE, account);\\n    }\\n\\n    function grantEnterprise(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        grantRole(ENTERPRISE_ROLE, account);\\n        emit Events.RoleGranted(ENTERPRISE_ROLE, account);\\n    }\\n     \\n    function grantCertificateFactory(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        grantRole(CERTIFICATE_FACTORY_ROLE, account);\\n        emit Events.RoleGranted(CERTIFICATE_FACTORY_ROLE, account);\\n    }\\n\\n    function grantPublicRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        grantRole(PUBLIC_ROLE, account);\\n        emit Events.RoleGranted(PUBLIC_ROLE, account);\\n    }\\n\\n\\n    /**\\n    * @dev Public role will be claimed instantly\\n    * On the entry of a user to our platform\\n    * Just clicking `claim public role` and user is assigned role\\n    * @notice I plan to make it a temporary role on every visit to our platform\\n    */\\n\\n    /////////////////////////////////\\n    // ROLE REVOKATION /////////////\\n    ////////////////////////////////\\n    \\n\\n    /** ------------- # REVOKING ROLES ------------- //\\n    * @dev Functions to revoke roles\\n    * @param account The account to revoke the role from\\n    * @notice Emits RoleRevoked event on successful revoke\\n    */\\n    function revokeCertifierRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        revokeRole(CERTIFIER_ROLE, account);\\n        emit Events.RoleRevoked(CERTIFIER_ROLE, account);\\n    }\\n\\n    function revokeInspectorRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        revokeRole(INSPECTOR_ROLE, account);\\n    }\\n\\n    function revokeAuditorRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n    revokeRole(AUDITOR_ROLE, account);\\n    emit Events.RoleRevoked(AUDITOR_ROLE, account);\\n    }\\n\\n    function revokeEnterpriseRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        revokeRole(ENTERPRISE_ROLE, account);\\n        emit Events.RoleRevoked(ENTERPRISE_ROLE, account);\\n    }\\n\\n    function revokeCertificateFactoryRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        revokeRole(CERTIFICATE_FACTORY_ROLE, account);\\n        emit Events.RoleRevoked(CERTIFICATE_FACTORY_ROLE, account);\\n    }\\n    \\n    function revokePublicRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        revokeRole(PUBLIC_ROLE, account);\\n        emit Events.RoleRevoked(PUBLIC_ROLE, account);\\n    }\\n\\n\\n    /////////////////////////////////////////////////\\n    //////// ROLE CHECKS //////////////////\\n    /////////////////////////////////////////////////\\n    \\n   /** --------- # CHECKING ROLES --------- //\\n   * @dev Functions to check if a certain account has the specified role\\n   * @param account The account to check \\n   */\\n    function hasAdminRole(address account) public view returns(bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    function hasCertifierRole(address account) public view returns(bool) { \\n        return hasRole(CERTIFIER_ROLE, account);\\n    }\\n\\n    function hasInspectorRole(address account) public view  returns(bool) {\\n        return hasRole(INSPECTOR_ROLE, account);\\n    }\\n\\n    function hasAuditorRole(address account) public view  returns(bool) {\\n        return hasRole(AUDITOR_ROLE, account);\\n    }\\n\\n    function hasEnterpriseRole(address account) public view  returns(bool) {\\n        return hasRole(ENTERPRISE_ROLE, account);\\n    }\\n\\n    function hasCertificateFactoryRole(address account) public view  returns(bool) {\\n        return hasRole(CERTIFICATE_FACTORY_ROLE, account);\\n    }\\n    \\n    function hasPublicRole(address account) public view  returns(bool) {\\n        return hasRole(PUBLIC_ROLE, account);\\n    }\\n}\",\"keccak256\":\"0xa05e7e551d2a2566e2248a6044cf96d7913b4382bedc4c1920f8149c90b5e1ca\",\"license\":\"MIT\"},\"contracts/utils/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n* @author @0xJonaseb11\\n* @dev This library contains the data types used by the contracts\\n* @dev These structs hold a huge role in maintaining contract states\\n*/\\nlibrary DataTypes {\\n    struct Certification {\\n        string industry;\\n        string metadataURI;\\n        uint256 certifiedAt;\\n        uint256 expiryDate;\\n        bool isCertified;\\n        uint256 tokenId;\\n    }\\n\\n    struct Enterprise {\\n        address enterpriseAddress;\\n        string name;\\n        string industry;\\n        string metadataURI;\\n        bool isRegistered;\\n        uint256 registrationDate;\\n        uint256 lastUpdated;\\n        uint256 certificateId;\\n    }\\n\\n    struct InspectionReport {\\n        address inspector;\\n        address enterprise;\\n        string remarks;\\n        string evidenceURI; // IPFS hash\\n        uint256 inspectedAt;\\n        bool passed;\\n    }\\n\\n    struct NFTCertificate {\\n    address enterprise;\\n    address issuer;\\n    uint256 issuedAt;\\n    uint256 expiresAt;\\n    bool isRevoked;\\n}\\n\\n    \\n}\",\"keccak256\":\"0x5de0214662b52157167449375280c16b3cee9c0c2797528246ac7584208b1bbf\",\"license\":\"MIT\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n* @author @0xJonaseb11\\n* @dev contains the custom errors emitted by the contracts\\n@notice All the contracts inherit this to handle custom errors\\n*/\\n\\ncontract Errors {\\n    error InvalidAddress();\\n\\n    // -------- RolesManager ------------------//\\n    error RolesManager__UnauthorizedToPerformAction();\\n    error RolesManager__NotAuthorizedCertifier();\\n    error RolesManager__NotAuthorizedInspector();\\n    error RolesManager__NotAuthorizedAuditor();\\n    error RolesManager__NotAuthorizedEnterprise();\\n    error RolesManager__NotAuthorizedCertificateFactory();\\n    error RolesManager__NotAuthorizedPublicUser();\\n    error RolesManager__AlreadyHasRole();\\n    error RolesManager__InvalidDuration();\\n    error RolesManager__EmptyArray();\\n    error RolesManager__ArrayLengthMismatch();\\n    error RolesManager__RoleDoesNotExist();\\n\\n    // ------- EnterpriseRegistry --------------//\\n    error EnterpriseRegistry__EnterpriseAlreadyExists();\\n    error EnterpriseRegistry__EnterpriseDoesNotExist();\\n    error EnterpriseRegistry__InvalidStart();\\n\\n    // ------- CertificationAuthority ------- //\\n    error CertificationAuthority__EnterpriseAlreadyCertified();\\n    error CertificationAuthority__EnterpriseNotCertifiedYet();\\n    error CertificationAuthority__CertificationNotExpiredYet();\\n\\n    // -------- CertificateNFT --------- //\\n    error CertificateNFT__EnterpriseAlreadyCertified();\\n    error CertificateNFT__CertificateDoesNotExist();\\n\\n    // -------- InspectionManageer --------- //\\n    error InspectionManager__InspectorAlreadyAssigned();\\n    error InspectionManager__InspectionPeriodExpired();\\n    error InspectionManager__NotAssignedToEnterprise();\\n\\n    // ---------- InspectionReport ----------- //\\n    error InspectionManager__NoReportsAssociatedWithEnterprise();\\n\\n}\",\"keccak256\":\"0x0ba1a339f3010aa26a3f89c0a5ed7cbc990994b35eba633b5771acc028925ffb\",\"license\":\"MIT\"},\"contracts/utils/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n/**\\n* @author @0xJonaseb11\\n* @dev This library contains the events emitted by the contracts\\n* @dev All the contracts inherit this to handle events\\n*/\\n\\nlibrary Events {\\n    event CertificationGranted(address indexed enterprise, string industry, string metadataURI, uint256 expiryDate);\\n    event CertificationRevoked(address indexed enterprise);\\n    event CertificationUpdated(address indexed enterprise, string newMetadataURI);\\n\\n    event EnterpriseRegistered(address indexed enterprise, string name, string industry, string metadataURI, uint256 certificateId);\\n    event EnterpriseUpdated(address indexed enterprise, string newMetadataURI);\\n    event EnterpriseDeregistered(address indexed enterprise, uint256 deregisteredAt);\\n    \\n    event InspectorAssigned(address indexed enterprise, address indexed inspector, uint256 validityPeriod);\\n    event InspectionReportSubmitted(address indexed inspector, address indexed enterprise, bool passed, string remarks, string evidenceURI, uint256 ReportedAt);\\n    \\n    event CertificateMinted(uint256 certificateId, address indexed enterprise, address indexed certifier, uint256 mintedAt);\\n    event CertificateRevoked(uint256 certificateId, address indexed revoker, uint256 timestamp);\\n\\n\\n    event PublicRoleGranted(address indexed user, uint256 duration);\\n    event PublicRoleExpired(address indexed user);\\n    event RoleTransferred(bytes32 indexed role, address from, address to);\\n    event BulkRolesGranted(bytes32[] roles, address[] indexed accounts);\\n    event RoleGranted(bytes32 indexed role, address indexed account);\\n    event RoleRevoked(bytes32 indexed role, address indexed account);\\n\\n}\",\"keccak256\":\"0xd10b55133f532526aae704f4b6a010480de62a9b4e5c3a94dabb4cef6a5fe0c2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604080518082018252601581527f456e746572707269736543657274696669636174650000000000000000000000602080830191909152825180840190935260058352641150d1549560da1b908301529062000070600033620000db565b6200008b6000805160206200375d83398151915233620000db565b60026200009983826200023f565b506003620000a882826200023f565b50620000ba91506000905033620000db565b620000d56000805160206200375d83398151915233620000db565b6200030b565b620000e78282620000ec565b505050565b6000828152602081815260408083206001600160a01b038516845290915281205460ff1662000191576000838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055620001483390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600162000195565b5060005b92915050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620001c657607f821691505b602082108103620001e757634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620000e757600081815260208120601f850160051c81016020861015620002165750805b601f850160051c820191505b81811015620002375782815560010162000222565b505050505050565b81516001600160401b038111156200025b576200025b6200019b565b62000273816200026c8454620001b1565b84620001ed565b602080601f831160018114620002ab5760008415620002925750858301515b600019600386901b1c1916600185901b17855562000237565b600085815260208120601f198616915b82811015620002dc57888601518255948401946001909101908401620002bb565b5085821015620002fb5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b613442806200031b6000396000f3fe608060405234801561001057600080fd5b50600436106103af5760003560e01c80637780e9c1116101f4578063abaa536f1161011a578063c87b56dd116100ad578063e55b4f931161007c578063e55b4f93146108ab578063e985e9c5146108be578063f53f5e1e146108d1578063fc810286146108e457600080fd5b8063c87b56dd14610850578063c88cc6ac14610863578063d547741f14610883578063e3a3c5221461089657600080fd5b8063b88d4fde116100e9578063b88d4fde14610810578063b8ad415e14610823578063bd7ca7ba1461082a578063c395fcb31461083d57600080fd5b8063abaa536f14610776578063b0614db314610789578063b5617ef7146107dd578063b83cc3b3146107fd57600080fd5b806390f201be11610192578063a217fddf11610161578063a217fddf14610735578063a22cb4651461073d578063a5ce413a14610750578063aa52617c1461076357600080fd5b806390f201be146106f457806391d148541461070757806395d89b411461071a578063a1f341631461072257600080fd5b80637e5effa4116101ce5780637e5effa414610692578063808b0557146106a55780638850845f146106b857806389a912e0146106cb57600080fd5b80637780e9c114610657578063784fee0e1461066a5780637bff09751461067f57600080fd5b80633ca7c02a116102d95780635cb87d261161027757806368dd17a51161024657806368dd17a51461060557806369d0b5171461061a5780636e1d616e1461062f57806370a082311461064457600080fd5b80635cb87d26146105b957806360376528146105cc57806361462f0e146105df5780636352211e146105f257600080fd5b806342966c68116102b357806342966c681461056d578063456f19fc1461058057806352f84b721461059357806357c03371146105a657600080fd5b80633ca7c02a146105325780633e2515181461054757806342842e0e1461055a57600080fd5b8063236e092911610351578063261191b711610320578063261191b7146104e6578063261e85cd146104f95780632f2ff15d1461050c57806336568abe1461051f57600080fd5b8063236e09291461046a57806323b872dd1461048f578063248a9ca3146104a257806325d5e87e146104d357600080fd5b8063081812fc1161038d578063081812fc14610406578063095ea7b3146104315780630bcce45b146104445780631e223b2a1461045757600080fd5b806301ffc9a7146103b45780630443cd2a146103dc57806306fdde03146103f1575b600080fd5b6103c76103c2366004612990565b6108f7565b60405190151581526020015b60405180910390f35b6103ef6103ea3660046129c9565b610908565b005b6103f961098a565b6040516103d39190612a34565b610419610414366004612a47565b610a1c565b6040516001600160a01b0390911681526020016103d3565b6103ef61043f366004612a60565b610a45565b6103ef610452366004612b36565b610a54565b6103ef6104653660046129c9565b610c20565b61047d6104783660046129c9565b610ca2565b6040516103d396959493929190612bb2565b6103ef61049d366004612bfd565b610ded565b6104c56104b0366004612a47565b60009081526020819052604090206001015490565b6040519081526020016103d3565b6103ef6104e13660046129c9565b610e7d565b6103ef6104f43660046129c9565b610eff565b6103c76105073660046129c9565b610f81565b6103ef61051a366004612c39565b610fb8565b6103ef61052d366004612c39565b610fdd565b6104c560008051602061334d83398151915281565b6103ef6105553660046129c9565b611015565b6103ef610568366004612bfd565b611097565b6103ef61057b366004612a47565b6110b2565b6103ef61058e3660046129c9565b6110be565b6103c76105a13660046129c9565b611140565b6103ef6105b43660046129c9565b61115a565b6103ef6105c7366004612c65565b6111dc565b6103ef6105da3660046129c9565b61126f565b6103ef6105ed366004612ced565b6112f1565b610419610600366004612a47565b611404565b6104c560008051602061330d83398151915281565b6104c560008051602061336d83398151915281565b6104c56000805160206133ad83398151915281565b6104c56106523660046129c9565b61140f565b6103ef610665366004612a47565b611457565b6104c560008051602061338d83398151915281565b6103c761068d3660046129c9565b611544565b6103ef6106a03660046129c9565b61155e565b6103ef6106b33660046129c9565b6115e0565b6103c76106c63660046129c9565b6116bf565b6104196106d9366004612a47565b6000908152600a60205260409020546001600160a01b031690565b6103ef610702366004612d59565b6116d9565b6103c7610715366004612c39565b6117ff565b6103f9611828565b6103c76107303660046129c9565b611837565b6104c5600081565b6103ef61074b366004612ddc565b611851565b6103c761075e366004612a47565b61185c565b6103ef6107713660046129c9565b61187d565b6103c76107843660046129c9565b6118ff565b61079c6107973660046129c9565b611919565b60408051971515885295151560208801529315159486019490945290151560608501521515608084015290151560a0830152151560c082015260e0016103d3565b6104c56107eb3660046129c9565b60016020526000908152604090205481565b6103ef61080b3660046129c9565b6119d2565b6103ef61081e366004612e18565b611ada565b60186104c5565b6103ef6108383660046129c9565b611af1565b6103c761084b3660046129c9565b611b3c565b6103f961085e366004612a47565b611b48565b6108766108713660046129c9565b611b53565b6040516103d39190612e94565b6103ef610891366004612c39565b611d08565b6104c56000805160206133cd83398151915281565b6103ef6108b93660046129c9565b611d2d565b6103c76108cc366004612f04565b611daf565b6103c76108df3660046129c9565b611ddd565b6103ef6108f23660046129c9565b611df7565b600061090282611e79565b92915050565b806001600160a01b0381166109305760405163e6c4247b60e01b815260040160405180910390fd5b600061093b81611e9e565b61095360008051602061334d83398151915284611d08565b6040516001600160a01b0384169060008051602061334d833981519152906000805160206133ed83398151915290600090a3505050565b60606002805461099990612f2e565b80601f01602080910402602001604051908101604052809291908181526020018280546109c590612f2e565b8015610a125780601f106109e757610100808354040283529160200191610a12565b820191906000526020600020905b8154815290600101906020018083116109f557829003601f168201915b5050505050905090565b6000610a2782611ea8565b506000828152600660205260409020546001600160a01b0316610902565b610a50828233611ee1565b5050565b836001600160a01b038116610a7c5760405163e6c4247b60e01b815260040160405180910390fd5b60008051602061336d833981519152610a9481611e9e565b6001600160a01b03861660009081526009602052604090206004015460ff1615610ad1576040516369136c8160e01b815260040160405180910390fd5b600b805460009182610ae283612f7e565b919050559050610af28782611eee565b610afc8186611f08565b6040518060c001604052808781526020018681526020014281526020018542610b259190612f97565b8152600160208083019190915260409182018490526001600160a01b038a16600090815260099091522081518190610b5d9082612ff8565b5060208201516001820190610b729082612ff8565b50604082810151600283015560608301516003830155608083015160048301805460ff191691151591909117905560a0909201516005909101556000828152600a6020522080546001600160a01b0319166001600160a01b0389169081179091557f56a1f3fa57a4cc6a9be7aaa185ba31c140ea18678a1b45900756c2e5e1ba8dd28787610c008842612f97565b604051610c0f939291906130b8565b60405180910390a250505050505050565b806001600160a01b038116610c485760405163e6c4247b60e01b815260040160405180910390fd5b6000610c5381611e9e565b610c6b60008051602061330d83398151915284610fb8565b6040516001600160a01b0384169060008051602061330d8339815191529060008051602061332d83398151915290600090a3505050565b600960205260009081526040902080548190610cbd90612f2e565b80601f0160208091040260200160405190810160405280929190818152602001828054610ce990612f2e565b8015610d365780601f10610d0b57610100808354040283529160200191610d36565b820191906000526020600020905b815481529060010190602001808311610d1957829003601f168201915b505050505090806001018054610d4b90612f2e565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7790612f2e565b8015610dc45780601f10610d9957610100808354040283529160200191610dc4565b820191906000526020600020905b815481529060010190602001808311610da757829003601f168201915b5050506002840154600385015460048601546005909601549495919490935060ff909116915086565b6001600160a01b038216610e1c57604051633250574960e11b8152600060048201526024015b60405180910390fd5b6000610e29838333611f58565b9050836001600160a01b0316816001600160a01b031614610e77576040516364283d7b60e01b81526001600160a01b0380861660048301526024820184905282166044820152606401610e13565b50505050565b610e8681611ddd565b8015610ea957506001600160a01b03811660009081526001602052604090205442115b15610efc57610ec660008051602061334d83398151915282611fdd565b506040516001600160a01b038216907fa6f32bcbc7de829d50e1c9cbc1c5b4dafb4c7a0b8329757aee62a9b394d71c3b90600090a25b50565b806001600160a01b038116610f275760405163e6c4247b60e01b815260040160405180910390fd5b6000610f3281611e9e565b610f4a60008051602061338d83398151915284611d08565b6040516001600160a01b0384169060008051602061338d833981519152906000805160206133ed83398151915290600090a3505050565b6001600160a01b0381166000908152600960205260408120600481015460ff168015610fb1575080600301544211155b9392505050565b600082815260208190526040902060010154610fd381611e9e565b610e778383612050565b6001600160a01b03811633146110065760405163334bd91960e11b815260040160405180910390fd5b6110108282611fdd565b505050565b806001600160a01b03811661103d5760405163e6c4247b60e01b815260040160405180910390fd5b600061104881611e9e565b6110606000805160206133ad83398151915284611d08565b6040516001600160a01b038416906000805160206133ad833981519152906000805160206133ed83398151915290600090a3505050565b61101083838360405180602001604052806000815250611ada565b610a5060008233611f58565b806001600160a01b0381166110e65760405163e6c4247b60e01b815260040160405180910390fd5b60006110f181611e9e565b6111096000805160206133cd83398151915284610fb8565b6040516001600160a01b038416906000805160206133cd8339815191529060008051602061332d83398151915290600090a3505050565b600061090260008051602061338d833981519152836117ff565b806001600160a01b0381166111825760405163e6c4247b60e01b815260040160405180910390fd5b600061118d81611e9e565b6111a560008051602061334d83398151915284610fb8565b6040516001600160a01b0384169060008051602061334d8339815191529060008051602061332d83398151915290600090a3505050565b60006111e781611e9e565b6111f184846117ff565b61120e576040516366783c9d60e11b815260040160405180910390fd5b6112188484611fdd565b506112238483612050565b50604080516001600160a01b0380861682528416602082015285917f274dd4127a55dcb6f6c12ed38fec5007d965d2afffa8b0bc75c3dc8f3f6b2224910160405180910390a250505050565b806001600160a01b0381166112975760405163e6c4247b60e01b815260040160405180910390fd5b60006112a281611e9e565b6112ba60008051602061336d83398151915284610fb8565b6040516001600160a01b0384169060008051602061336d8339815191529060008051602061332d83398151915290600090a3505050565b60006112fc81611e9e565b831580611307575081155b1561132557604051637d6eaf9360e01b815260040160405180910390fd5b838214611345576040516390a2f79360e01b815260040160405180910390fd5b60005b848110156113ab57611398868683818110611365576113656130ee565b9050602002013585858481811061137e5761137e6130ee565b905060200201602081019061139391906129c9565b612050565b50806113a381612f7e565b915050611348565b5082826040516113bc929190613104565b60405180910390207ff4d52c90739c68c4e82d39cfbeee6b6613784bf9b28d2cdb3a02203799cf060686866040516113f5929190613144565b60405180910390a25050505050565b600061090282611ea8565b60006001600160a01b03821661143b576040516322718ad960e21b815260006004820152602401610e13565b506001600160a01b031660009081526005602052604090205490565b61146033611ddd565b1561147e5760405163510a583360e01b815260040160405180910390fd5b801561149d57604051630729422160e41b815260040160405180910390fd5b60188111156114bf57604051630729422160e41b815260040160405180910390fd5b60006114cd82610e1061317d565b90506114e760008051602061334d83398151915233612050565b506114f28142612f97565b33600081815260016020526040908190209290925590517fc526cdae63c288ea4504281fe29b0ae3352c8a9ccae61eba8c21cd25a949e0f1906115389085815260200190565b60405180910390a25050565b600061090260008051602061336d833981519152836117ff565b806001600160a01b0381166115865760405163e6c4247b60e01b815260040160405180910390fd5b600061159181611e9e565b6115a960008051602061330d83398151915284611d08565b6040516001600160a01b0384169060008051602061330d833981519152906000805160206133ed83398151915290600090a3505050565b6001600160a01b0381166000908152600960205260409020600481015460ff1661161d576040516308a2227760e11b815260040160405180910390fd5b8060030154421015611642576040516360ad99d960e11b815260040160405180910390fd5b60058101541561167b5761165981600501546110b2565b60058101546000908152600a6020526040902080546001600160a01b03191690555b60048101805460ff191690556040516001600160a01b038316907fddbc5d6ff23c8e382806a60af54f0614adddcbcb9b76b279a95a318414d7635b90600090a25050565b60006109026000805160206133cd833981519152836117ff565b826001600160a01b0381166117015760405163e6c4247b60e01b815260040160405180910390fd5b60008051602061336d83398151915261171981611e9e565b6001600160a01b0385166000908152600960205260409020600481015460ff16611756576040516308a2227760e11b815260040160405180910390fd5b6005810154156117a4576117a4816005015486868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611f0892505050565b600181016117b3858783613194565b50856001600160a01b03167f4a9038a38263b38736ddc315c982f0f7ba9999b67c66a31efc9e1efb3677f4c286866040516117ef929190613254565b60405180910390a2505050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60606003805461099990612f2e565b600061090260008051602061330d833981519152836117ff565b610a503383836120da565b6000818152600a60205260408120546001600160a01b0316610fb181610f81565b806001600160a01b0381166118a55760405163e6c4247b60e01b815260040160405180910390fd5b60006118b081611e9e565b6118c860008051602061338d83398151915284610fb8565b6040516001600160a01b0384169060008051602061338d8339815191529060008051602061332d83398151915290600090a3505050565b60006109026000805160206133ad833981519152836117ff565b600080808080808061192b81896117ff565b61194360008051602061336d8339815191528a6117ff565b61195b6000805160206133cd8339815191528b6117ff565b6119736000805160206133ad8339815191528c6117ff565b61198b60008051602061330d8339815191528d6117ff565b6119a360008051602061338d8339815191528e6117ff565b6119bb60008051602061334d8339815191528f6117ff565b959e949d50929b5090995097509550909350915050565b806001600160a01b0381166119fa5760405163e6c4247b60e01b815260040160405180910390fd5b60008051602061336d833981519152611a1281611e9e565b6000611a1d81611e9e565b6001600160a01b0384166000908152600960205260409020600481015460ff16611a5a576040516308a2227760e11b815260040160405180910390fd5b600581015415611a9357611a7181600501546110b2565b60058101546000908152600a6020526040902080546001600160a01b03191690555b60048101805460ff191690556040516001600160a01b038616907fddbc5d6ff23c8e382806a60af54f0614adddcbcb9b76b279a95a318414d7635b90600090a25050505050565b611ae5848484610ded565b610e7784848484612179565b806001600160a01b038116611b195760405163e6c4247b60e01b815260040160405180910390fd5b6000611b2481611e9e565b6110106000805160206133cd83398151915284611d08565b600061090281836117ff565b6060610902826122a2565b611b8e6040518060c0016040528060608152602001606081526020016000815260200160008152602001600015158152602001600081525090565b6001600160a01b03821660009081526009602052604090819020815160c08101909252805482908290611bc090612f2e565b80601f0160208091040260200160405190810160405280929190818152602001828054611bec90612f2e565b8015611c395780601f10611c0e57610100808354040283529160200191611c39565b820191906000526020600020905b815481529060010190602001808311611c1c57829003601f168201915b50505050508152602001600182018054611c5290612f2e565b80601f0160208091040260200160405190810160405280929190818152602001828054611c7e90612f2e565b8015611ccb5780601f10611ca057610100808354040283529160200191611ccb565b820191906000526020600020905b815481529060010190602001808311611cae57829003601f168201915b50505091835250506002820154602082015260038201546040820152600482015460ff161515606082015260059091015460809091015292915050565b600082815260208190526040902060010154611d2381611e9e565b610e778383611fdd565b806001600160a01b038116611d555760405163e6c4247b60e01b815260040160405180910390fd5b6000611d6081611e9e565b611d786000805160206133ad83398151915284610fb8565b6040516001600160a01b038416906000805160206133ad8339815191529060008051602061332d83398151915290600090a3505050565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b600061090260008051602061334d833981519152836117ff565b806001600160a01b038116611e1f5760405163e6c4247b60e01b815260040160405180910390fd5b6000611e2a81611e9e565b611e4260008051602061336d83398151915284611d08565b6040516001600160a01b0384169060008051602061336d833981519152906000805160206133ed83398151915290600090a3505050565b60006001600160e01b03198216632483248360e11b14806109025750610902826123ab565b610efc81336123eb565b6000818152600460205260408120546001600160a01b03168061090257604051637e27328960e01b815260048101849052602401610e13565b6110108383836001612424565b610a5082826040518060200160405280600081525061252a565b6000828152600860205260409020611f208282612ff8565b506040518281527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce79060200160405180910390a15050565b60006001600160a01b03821615611fca576001600160a01b03841615611fca5760405162461bcd60e51b815260206004820152602160248201527f43657274696669636174657320617265206e6f6e2d7472616e7366657261626c6044820152606560f81b6064820152608401610e13565b611fd5848484612541565b949350505050565b6000611fe983836117ff565b15612048576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610902565b506000610902565b600061205c83836117ff565b612048576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556120923390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610902565b6001600160a01b03821661210c57604051630b61174360e31b81526001600160a01b0383166004820152602401610e13565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b15610e7757604051630a85bd0160e11b81526001600160a01b0384169063150b7a02906121bb903390889087908790600401613283565b6020604051808303816000875af19250505080156121f6575060408051601f3d908101601f191682019092526121f3918101906132c0565b60015b61225f573d808015612224576040519150601f19603f3d011682016040523d82523d6000602084013e612229565b606091505b50805160000361225757604051633250574960e11b81526001600160a01b0385166004820152602401610e13565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b1461229b57604051633250574960e11b81526001600160a01b0385166004820152602401610e13565b5050505050565b60606122ad82611ea8565b50600082815260086020526040812080546122c790612f2e565b80601f01602080910402602001604051908101604052809291908181526020018280546122f390612f2e565b80156123405780601f1061231557610100808354040283529160200191612340565b820191906000526020600020905b81548152906001019060200180831161232357829003601f168201915b50505050509050600061235e60408051602081019091526000815290565b90508051600003612370575092915050565b8151156123a257808260405160200161238a9291906132dd565b60405160208183030381529060405292505050919050565b611fd58461263a565b60006001600160e01b031982166380ac58cd60e01b14806123dc57506001600160e01b03198216635b5e139f60e01b145b806109025750610902826126ae565b6123f582826117ff565b610a505760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610e13565b808061243857506001600160a01b03821615155b156124fa57600061244884611ea8565b90506001600160a01b038316158015906124745750826001600160a01b0316816001600160a01b031614155b801561248757506124858184611daf565b155b156124b05760405163a9fbf51f60e01b81526001600160a01b0384166004820152602401610e13565b81156124f85783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260066020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b61253483836126e3565b6110106000848484612179565b6000828152600460205260408120546001600160a01b039081169083161561256e5761256e818486612748565b6001600160a01b038116156125ac5761258b600085600080612424565b6001600160a01b038116600090815260056020526040902080546000190190555b6001600160a01b038516156125db576001600160a01b0385166000908152600560205260409020805460010190555b60008481526004602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b606061264582611ea8565b50600061265d60408051602081019091526000815290565b9050600081511161267d5760405180602001604052806000815250610fb1565b80612687846127ac565b6040516020016126989291906132dd565b6040516020818303038152906040529392505050565b60006001600160e01b03198216637965db0b60e01b148061090257506301ffc9a760e01b6001600160e01b0319831614610902565b6001600160a01b03821661270d57604051633250574960e11b815260006004820152602401610e13565b600061271b83836000611f58565b90506001600160a01b03811615611010576040516339e3563760e11b815260006004820152602401610e13565b61275383838361283f565b611010576001600160a01b03831661278157604051637e27328960e01b815260048101829052602401610e13565b60405163177e802f60e01b81526001600160a01b038316600482015260248101829052604401610e13565b606060006127b9836128a2565b600101905060008167ffffffffffffffff8111156127d9576127d9612a8a565b6040519080825280601f01601f191660200182016040528015612803576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461280d57509392505050565b60006001600160a01b03831615801590611fd55750826001600160a01b0316846001600160a01b0316148061287957506128798484611daf565b80611fd55750506000908152600660205260409020546001600160a01b03908116911614919050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106128e15772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061290d576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061292b57662386f26fc10000830492506010015b6305f5e1008310612943576305f5e100830492506008015b612710831061295757612710830492506004015b60648310612969576064830492506002015b600a83106109025760010192915050565b6001600160e01b031981168114610efc57600080fd5b6000602082840312156129a257600080fd5b8135610fb18161297a565b80356001600160a01b03811681146129c457600080fd5b919050565b6000602082840312156129db57600080fd5b610fb1826129ad565b60005b838110156129ff5781810151838201526020016129e7565b50506000910152565b60008151808452612a208160208601602086016129e4565b601f01601f19169290920160200192915050565b602081526000610fb16020830184612a08565b600060208284031215612a5957600080fd5b5035919050565b60008060408385031215612a7357600080fd5b612a7c836129ad565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115612abb57612abb612a8a565b604051601f8501601f19908116603f01168101908282118183101715612ae357612ae3612a8a565b81604052809350858152868686011115612afc57600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112612b2757600080fd5b610fb183833560208501612aa0565b60008060008060808587031215612b4c57600080fd5b612b55856129ad565b9350602085013567ffffffffffffffff80821115612b7257600080fd5b612b7e88838901612b16565b94506040870135915080821115612b9457600080fd5b50612ba187828801612b16565b949793965093946060013593505050565b60c081526000612bc560c0830189612a08565b8281036020840152612bd78189612a08565b604084019790975250506060810193909352901515608083015260a09091015292915050565b600080600060608486031215612c1257600080fd5b612c1b846129ad565b9250612c29602085016129ad565b9150604084013590509250925092565b60008060408385031215612c4c57600080fd5b82359150612c5c602084016129ad565b90509250929050565b600080600060608486031215612c7a57600080fd5b83359250612c8a602085016129ad565b9150612c98604085016129ad565b90509250925092565b60008083601f840112612cb357600080fd5b50813567ffffffffffffffff811115612ccb57600080fd5b6020830191508360208260051b8501011115612ce657600080fd5b9250929050565b60008060008060408587031215612d0357600080fd5b843567ffffffffffffffff80821115612d1b57600080fd5b612d2788838901612ca1565b90965094506020870135915080821115612d4057600080fd5b50612d4d87828801612ca1565b95989497509550505050565b600080600060408486031215612d6e57600080fd5b612d77846129ad565b9250602084013567ffffffffffffffff80821115612d9457600080fd5b818601915086601f830112612da857600080fd5b813581811115612db757600080fd5b876020828501011115612dc957600080fd5b6020830194508093505050509250925092565b60008060408385031215612def57600080fd5b612df8836129ad565b915060208301358015158114612e0d57600080fd5b809150509250929050565b60008060008060808587031215612e2e57600080fd5b612e37856129ad565b9350612e45602086016129ad565b925060408501359150606085013567ffffffffffffffff811115612e6857600080fd5b8501601f81018713612e7957600080fd5b612e8887823560208401612aa0565b91505092959194509250565b602081526000825160c06020840152612eb060e0840182612a08565b90506020840151601f19848303016040850152612ecd8282612a08565b91505060408401516060840152606084015160808401526080840151151560a084015260a084015160c08401528091505092915050565b60008060408385031215612f1757600080fd5b612f20836129ad565b9150612c5c602084016129ad565b600181811c90821680612f4257607f821691505b602082108103612f6257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600060018201612f9057612f90612f68565b5060010190565b8082018082111561090257610902612f68565b601f82111561101057600081815260208120601f850160051c81016020861015612fd15750805b601f850160051c820191505b81811015612ff057828155600101612fdd565b505050505050565b815167ffffffffffffffff81111561301257613012612a8a565b613026816130208454612f2e565b84612faa565b602080601f83116001811461305b57600084156130435750858301515b600019600386901b1c1916600185901b178555612ff0565b600085815260208120601f198616915b8281101561308a5788860151825594840194600190910190840161306b565b50858210156130a85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6060815260006130cb6060830186612a08565b82810360208401526130dd8186612a08565b915050826040830152949350505050565b634e487b7160e01b600052603260045260246000fd5b60008184825b85811015613139576001600160a01b03613123836129ad565b168352602092830192919091019060010161310a565b509095945050505050565b6020808252810182905260006001600160fb1b0383111561316457600080fd5b8260051b80856040850137919091016040019392505050565b808202811582820484141761090257610902612f68565b67ffffffffffffffff8311156131ac576131ac612a8a565b6131c0836131ba8354612f2e565b83612faa565b6000601f8411600181146131f457600085156131dc5750838201355b600019600387901b1c1916600186901b17835561229b565b600083815260209020601f19861690835b828110156132255786850135825560209485019460019092019101613205565b50868210156132425760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906132b690830184612a08565b9695505050505050565b6000602082840312156132d257600080fd5b8151610fb18161297a565b600083516132ef8184602088016129e4565b8351908301906133038183602088016129e4565b0194935050505056fe920994fc3bfe282f3f20cdccf1b7c5e46c63d963e822d98efff90abd41c12e212ae6a113c0ed5b78a53413ffbb7679881f11145ccfba4fb92e863dfcd5a1d2f3ee244ef9da0b2f89a74b208ea9fe1a639ebdf634027d9e1f092b58c39954fa37c41a06b26ced3a23b7bf835a0918ade784f4055ded86d18305f528f47a726052aa0ec51d0bf03ce5511c9ffc9de2b423d73d1faacd808abf2ac89ccea8a3ecf259a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f506fa31d7a92d9fa9a8898ac41d86ee9b13863605a361c85ae5d6010d5de4f280155aaafb6329a2098580462df33ec4b7441b19729b9601c5fc17ae1cf99a8a52a264697066735822122097d7ef5d72c0ad224c0683370583f917230ee4be4cc5a2de14b952f966790e0d64736f6c63430008140033c41a06b26ced3a23b7bf835a0918ade784f4055ded86d18305f528f47a726052",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103af5760003560e01c80637780e9c1116101f4578063abaa536f1161011a578063c87b56dd116100ad578063e55b4f931161007c578063e55b4f93146108ab578063e985e9c5146108be578063f53f5e1e146108d1578063fc810286146108e457600080fd5b8063c87b56dd14610850578063c88cc6ac14610863578063d547741f14610883578063e3a3c5221461089657600080fd5b8063b88d4fde116100e9578063b88d4fde14610810578063b8ad415e14610823578063bd7ca7ba1461082a578063c395fcb31461083d57600080fd5b8063abaa536f14610776578063b0614db314610789578063b5617ef7146107dd578063b83cc3b3146107fd57600080fd5b806390f201be11610192578063a217fddf11610161578063a217fddf14610735578063a22cb4651461073d578063a5ce413a14610750578063aa52617c1461076357600080fd5b806390f201be146106f457806391d148541461070757806395d89b411461071a578063a1f341631461072257600080fd5b80637e5effa4116101ce5780637e5effa414610692578063808b0557146106a55780638850845f146106b857806389a912e0146106cb57600080fd5b80637780e9c114610657578063784fee0e1461066a5780637bff09751461067f57600080fd5b80633ca7c02a116102d95780635cb87d261161027757806368dd17a51161024657806368dd17a51461060557806369d0b5171461061a5780636e1d616e1461062f57806370a082311461064457600080fd5b80635cb87d26146105b957806360376528146105cc57806361462f0e146105df5780636352211e146105f257600080fd5b806342966c68116102b357806342966c681461056d578063456f19fc1461058057806352f84b721461059357806357c03371146105a657600080fd5b80633ca7c02a146105325780633e2515181461054757806342842e0e1461055a57600080fd5b8063236e092911610351578063261191b711610320578063261191b7146104e6578063261e85cd146104f95780632f2ff15d1461050c57806336568abe1461051f57600080fd5b8063236e09291461046a57806323b872dd1461048f578063248a9ca3146104a257806325d5e87e146104d357600080fd5b8063081812fc1161038d578063081812fc14610406578063095ea7b3146104315780630bcce45b146104445780631e223b2a1461045757600080fd5b806301ffc9a7146103b45780630443cd2a146103dc57806306fdde03146103f1575b600080fd5b6103c76103c2366004612990565b6108f7565b60405190151581526020015b60405180910390f35b6103ef6103ea3660046129c9565b610908565b005b6103f961098a565b6040516103d39190612a34565b610419610414366004612a47565b610a1c565b6040516001600160a01b0390911681526020016103d3565b6103ef61043f366004612a60565b610a45565b6103ef610452366004612b36565b610a54565b6103ef6104653660046129c9565b610c20565b61047d6104783660046129c9565b610ca2565b6040516103d396959493929190612bb2565b6103ef61049d366004612bfd565b610ded565b6104c56104b0366004612a47565b60009081526020819052604090206001015490565b6040519081526020016103d3565b6103ef6104e13660046129c9565b610e7d565b6103ef6104f43660046129c9565b610eff565b6103c76105073660046129c9565b610f81565b6103ef61051a366004612c39565b610fb8565b6103ef61052d366004612c39565b610fdd565b6104c560008051602061334d83398151915281565b6103ef6105553660046129c9565b611015565b6103ef610568366004612bfd565b611097565b6103ef61057b366004612a47565b6110b2565b6103ef61058e3660046129c9565b6110be565b6103c76105a13660046129c9565b611140565b6103ef6105b43660046129c9565b61115a565b6103ef6105c7366004612c65565b6111dc565b6103ef6105da3660046129c9565b61126f565b6103ef6105ed366004612ced565b6112f1565b610419610600366004612a47565b611404565b6104c560008051602061330d83398151915281565b6104c560008051602061336d83398151915281565b6104c56000805160206133ad83398151915281565b6104c56106523660046129c9565b61140f565b6103ef610665366004612a47565b611457565b6104c560008051602061338d83398151915281565b6103c761068d3660046129c9565b611544565b6103ef6106a03660046129c9565b61155e565b6103ef6106b33660046129c9565b6115e0565b6103c76106c63660046129c9565b6116bf565b6104196106d9366004612a47565b6000908152600a60205260409020546001600160a01b031690565b6103ef610702366004612d59565b6116d9565b6103c7610715366004612c39565b6117ff565b6103f9611828565b6103c76107303660046129c9565b611837565b6104c5600081565b6103ef61074b366004612ddc565b611851565b6103c761075e366004612a47565b61185c565b6103ef6107713660046129c9565b61187d565b6103c76107843660046129c9565b6118ff565b61079c6107973660046129c9565b611919565b60408051971515885295151560208801529315159486019490945290151560608501521515608084015290151560a0830152151560c082015260e0016103d3565b6104c56107eb3660046129c9565b60016020526000908152604090205481565b6103ef61080b3660046129c9565b6119d2565b6103ef61081e366004612e18565b611ada565b60186104c5565b6103ef6108383660046129c9565b611af1565b6103c761084b3660046129c9565b611b3c565b6103f961085e366004612a47565b611b48565b6108766108713660046129c9565b611b53565b6040516103d39190612e94565b6103ef610891366004612c39565b611d08565b6104c56000805160206133cd83398151915281565b6103ef6108b93660046129c9565b611d2d565b6103c76108cc366004612f04565b611daf565b6103c76108df3660046129c9565b611ddd565b6103ef6108f23660046129c9565b611df7565b600061090282611e79565b92915050565b806001600160a01b0381166109305760405163e6c4247b60e01b815260040160405180910390fd5b600061093b81611e9e565b61095360008051602061334d83398151915284611d08565b6040516001600160a01b0384169060008051602061334d833981519152906000805160206133ed83398151915290600090a3505050565b60606002805461099990612f2e565b80601f01602080910402602001604051908101604052809291908181526020018280546109c590612f2e565b8015610a125780601f106109e757610100808354040283529160200191610a12565b820191906000526020600020905b8154815290600101906020018083116109f557829003601f168201915b5050505050905090565b6000610a2782611ea8565b506000828152600660205260409020546001600160a01b0316610902565b610a50828233611ee1565b5050565b836001600160a01b038116610a7c5760405163e6c4247b60e01b815260040160405180910390fd5b60008051602061336d833981519152610a9481611e9e565b6001600160a01b03861660009081526009602052604090206004015460ff1615610ad1576040516369136c8160e01b815260040160405180910390fd5b600b805460009182610ae283612f7e565b919050559050610af28782611eee565b610afc8186611f08565b6040518060c001604052808781526020018681526020014281526020018542610b259190612f97565b8152600160208083019190915260409182018490526001600160a01b038a16600090815260099091522081518190610b5d9082612ff8565b5060208201516001820190610b729082612ff8565b50604082810151600283015560608301516003830155608083015160048301805460ff191691151591909117905560a0909201516005909101556000828152600a6020522080546001600160a01b0319166001600160a01b0389169081179091557f56a1f3fa57a4cc6a9be7aaa185ba31c140ea18678a1b45900756c2e5e1ba8dd28787610c008842612f97565b604051610c0f939291906130b8565b60405180910390a250505050505050565b806001600160a01b038116610c485760405163e6c4247b60e01b815260040160405180910390fd5b6000610c5381611e9e565b610c6b60008051602061330d83398151915284610fb8565b6040516001600160a01b0384169060008051602061330d8339815191529060008051602061332d83398151915290600090a3505050565b600960205260009081526040902080548190610cbd90612f2e565b80601f0160208091040260200160405190810160405280929190818152602001828054610ce990612f2e565b8015610d365780601f10610d0b57610100808354040283529160200191610d36565b820191906000526020600020905b815481529060010190602001808311610d1957829003601f168201915b505050505090806001018054610d4b90612f2e565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7790612f2e565b8015610dc45780601f10610d9957610100808354040283529160200191610dc4565b820191906000526020600020905b815481529060010190602001808311610da757829003601f168201915b5050506002840154600385015460048601546005909601549495919490935060ff909116915086565b6001600160a01b038216610e1c57604051633250574960e11b8152600060048201526024015b60405180910390fd5b6000610e29838333611f58565b9050836001600160a01b0316816001600160a01b031614610e77576040516364283d7b60e01b81526001600160a01b0380861660048301526024820184905282166044820152606401610e13565b50505050565b610e8681611ddd565b8015610ea957506001600160a01b03811660009081526001602052604090205442115b15610efc57610ec660008051602061334d83398151915282611fdd565b506040516001600160a01b038216907fa6f32bcbc7de829d50e1c9cbc1c5b4dafb4c7a0b8329757aee62a9b394d71c3b90600090a25b50565b806001600160a01b038116610f275760405163e6c4247b60e01b815260040160405180910390fd5b6000610f3281611e9e565b610f4a60008051602061338d83398151915284611d08565b6040516001600160a01b0384169060008051602061338d833981519152906000805160206133ed83398151915290600090a3505050565b6001600160a01b0381166000908152600960205260408120600481015460ff168015610fb1575080600301544211155b9392505050565b600082815260208190526040902060010154610fd381611e9e565b610e778383612050565b6001600160a01b03811633146110065760405163334bd91960e11b815260040160405180910390fd5b6110108282611fdd565b505050565b806001600160a01b03811661103d5760405163e6c4247b60e01b815260040160405180910390fd5b600061104881611e9e565b6110606000805160206133ad83398151915284611d08565b6040516001600160a01b038416906000805160206133ad833981519152906000805160206133ed83398151915290600090a3505050565b61101083838360405180602001604052806000815250611ada565b610a5060008233611f58565b806001600160a01b0381166110e65760405163e6c4247b60e01b815260040160405180910390fd5b60006110f181611e9e565b6111096000805160206133cd83398151915284610fb8565b6040516001600160a01b038416906000805160206133cd8339815191529060008051602061332d83398151915290600090a3505050565b600061090260008051602061338d833981519152836117ff565b806001600160a01b0381166111825760405163e6c4247b60e01b815260040160405180910390fd5b600061118d81611e9e565b6111a560008051602061334d83398151915284610fb8565b6040516001600160a01b0384169060008051602061334d8339815191529060008051602061332d83398151915290600090a3505050565b60006111e781611e9e565b6111f184846117ff565b61120e576040516366783c9d60e11b815260040160405180910390fd5b6112188484611fdd565b506112238483612050565b50604080516001600160a01b0380861682528416602082015285917f274dd4127a55dcb6f6c12ed38fec5007d965d2afffa8b0bc75c3dc8f3f6b2224910160405180910390a250505050565b806001600160a01b0381166112975760405163e6c4247b60e01b815260040160405180910390fd5b60006112a281611e9e565b6112ba60008051602061336d83398151915284610fb8565b6040516001600160a01b0384169060008051602061336d8339815191529060008051602061332d83398151915290600090a3505050565b60006112fc81611e9e565b831580611307575081155b1561132557604051637d6eaf9360e01b815260040160405180910390fd5b838214611345576040516390a2f79360e01b815260040160405180910390fd5b60005b848110156113ab57611398868683818110611365576113656130ee565b9050602002013585858481811061137e5761137e6130ee565b905060200201602081019061139391906129c9565b612050565b50806113a381612f7e565b915050611348565b5082826040516113bc929190613104565b60405180910390207ff4d52c90739c68c4e82d39cfbeee6b6613784bf9b28d2cdb3a02203799cf060686866040516113f5929190613144565b60405180910390a25050505050565b600061090282611ea8565b60006001600160a01b03821661143b576040516322718ad960e21b815260006004820152602401610e13565b506001600160a01b031660009081526005602052604090205490565b61146033611ddd565b1561147e5760405163510a583360e01b815260040160405180910390fd5b801561149d57604051630729422160e41b815260040160405180910390fd5b60188111156114bf57604051630729422160e41b815260040160405180910390fd5b60006114cd82610e1061317d565b90506114e760008051602061334d83398151915233612050565b506114f28142612f97565b33600081815260016020526040908190209290925590517fc526cdae63c288ea4504281fe29b0ae3352c8a9ccae61eba8c21cd25a949e0f1906115389085815260200190565b60405180910390a25050565b600061090260008051602061336d833981519152836117ff565b806001600160a01b0381166115865760405163e6c4247b60e01b815260040160405180910390fd5b600061159181611e9e565b6115a960008051602061330d83398151915284611d08565b6040516001600160a01b0384169060008051602061330d833981519152906000805160206133ed83398151915290600090a3505050565b6001600160a01b0381166000908152600960205260409020600481015460ff1661161d576040516308a2227760e11b815260040160405180910390fd5b8060030154421015611642576040516360ad99d960e11b815260040160405180910390fd5b60058101541561167b5761165981600501546110b2565b60058101546000908152600a6020526040902080546001600160a01b03191690555b60048101805460ff191690556040516001600160a01b038316907fddbc5d6ff23c8e382806a60af54f0614adddcbcb9b76b279a95a318414d7635b90600090a25050565b60006109026000805160206133cd833981519152836117ff565b826001600160a01b0381166117015760405163e6c4247b60e01b815260040160405180910390fd5b60008051602061336d83398151915261171981611e9e565b6001600160a01b0385166000908152600960205260409020600481015460ff16611756576040516308a2227760e11b815260040160405180910390fd5b6005810154156117a4576117a4816005015486868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611f0892505050565b600181016117b3858783613194565b50856001600160a01b03167f4a9038a38263b38736ddc315c982f0f7ba9999b67c66a31efc9e1efb3677f4c286866040516117ef929190613254565b60405180910390a2505050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60606003805461099990612f2e565b600061090260008051602061330d833981519152836117ff565b610a503383836120da565b6000818152600a60205260408120546001600160a01b0316610fb181610f81565b806001600160a01b0381166118a55760405163e6c4247b60e01b815260040160405180910390fd5b60006118b081611e9e565b6118c860008051602061338d83398151915284610fb8565b6040516001600160a01b0384169060008051602061338d8339815191529060008051602061332d83398151915290600090a3505050565b60006109026000805160206133ad833981519152836117ff565b600080808080808061192b81896117ff565b61194360008051602061336d8339815191528a6117ff565b61195b6000805160206133cd8339815191528b6117ff565b6119736000805160206133ad8339815191528c6117ff565b61198b60008051602061330d8339815191528d6117ff565b6119a360008051602061338d8339815191528e6117ff565b6119bb60008051602061334d8339815191528f6117ff565b959e949d50929b5090995097509550909350915050565b806001600160a01b0381166119fa5760405163e6c4247b60e01b815260040160405180910390fd5b60008051602061336d833981519152611a1281611e9e565b6000611a1d81611e9e565b6001600160a01b0384166000908152600960205260409020600481015460ff16611a5a576040516308a2227760e11b815260040160405180910390fd5b600581015415611a9357611a7181600501546110b2565b60058101546000908152600a6020526040902080546001600160a01b03191690555b60048101805460ff191690556040516001600160a01b038616907fddbc5d6ff23c8e382806a60af54f0614adddcbcb9b76b279a95a318414d7635b90600090a25050505050565b611ae5848484610ded565b610e7784848484612179565b806001600160a01b038116611b195760405163e6c4247b60e01b815260040160405180910390fd5b6000611b2481611e9e565b6110106000805160206133cd83398151915284611d08565b600061090281836117ff565b6060610902826122a2565b611b8e6040518060c0016040528060608152602001606081526020016000815260200160008152602001600015158152602001600081525090565b6001600160a01b03821660009081526009602052604090819020815160c08101909252805482908290611bc090612f2e565b80601f0160208091040260200160405190810160405280929190818152602001828054611bec90612f2e565b8015611c395780601f10611c0e57610100808354040283529160200191611c39565b820191906000526020600020905b815481529060010190602001808311611c1c57829003601f168201915b50505050508152602001600182018054611c5290612f2e565b80601f0160208091040260200160405190810160405280929190818152602001828054611c7e90612f2e565b8015611ccb5780601f10611ca057610100808354040283529160200191611ccb565b820191906000526020600020905b815481529060010190602001808311611cae57829003601f168201915b50505091835250506002820154602082015260038201546040820152600482015460ff161515606082015260059091015460809091015292915050565b600082815260208190526040902060010154611d2381611e9e565b610e778383611fdd565b806001600160a01b038116611d555760405163e6c4247b60e01b815260040160405180910390fd5b6000611d6081611e9e565b611d786000805160206133ad83398151915284610fb8565b6040516001600160a01b038416906000805160206133ad8339815191529060008051602061332d83398151915290600090a3505050565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b600061090260008051602061334d833981519152836117ff565b806001600160a01b038116611e1f5760405163e6c4247b60e01b815260040160405180910390fd5b6000611e2a81611e9e565b611e4260008051602061336d83398151915284611d08565b6040516001600160a01b0384169060008051602061336d833981519152906000805160206133ed83398151915290600090a3505050565b60006001600160e01b03198216632483248360e11b14806109025750610902826123ab565b610efc81336123eb565b6000818152600460205260408120546001600160a01b03168061090257604051637e27328960e01b815260048101849052602401610e13565b6110108383836001612424565b610a5082826040518060200160405280600081525061252a565b6000828152600860205260409020611f208282612ff8565b506040518281527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce79060200160405180910390a15050565b60006001600160a01b03821615611fca576001600160a01b03841615611fca5760405162461bcd60e51b815260206004820152602160248201527f43657274696669636174657320617265206e6f6e2d7472616e7366657261626c6044820152606560f81b6064820152608401610e13565b611fd5848484612541565b949350505050565b6000611fe983836117ff565b15612048576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610902565b506000610902565b600061205c83836117ff565b612048576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556120923390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610902565b6001600160a01b03821661210c57604051630b61174360e31b81526001600160a01b0383166004820152602401610e13565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b15610e7757604051630a85bd0160e11b81526001600160a01b0384169063150b7a02906121bb903390889087908790600401613283565b6020604051808303816000875af19250505080156121f6575060408051601f3d908101601f191682019092526121f3918101906132c0565b60015b61225f573d808015612224576040519150601f19603f3d011682016040523d82523d6000602084013e612229565b606091505b50805160000361225757604051633250574960e11b81526001600160a01b0385166004820152602401610e13565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b1461229b57604051633250574960e11b81526001600160a01b0385166004820152602401610e13565b5050505050565b60606122ad82611ea8565b50600082815260086020526040812080546122c790612f2e565b80601f01602080910402602001604051908101604052809291908181526020018280546122f390612f2e565b80156123405780601f1061231557610100808354040283529160200191612340565b820191906000526020600020905b81548152906001019060200180831161232357829003601f168201915b50505050509050600061235e60408051602081019091526000815290565b90508051600003612370575092915050565b8151156123a257808260405160200161238a9291906132dd565b60405160208183030381529060405292505050919050565b611fd58461263a565b60006001600160e01b031982166380ac58cd60e01b14806123dc57506001600160e01b03198216635b5e139f60e01b145b806109025750610902826126ae565b6123f582826117ff565b610a505760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610e13565b808061243857506001600160a01b03821615155b156124fa57600061244884611ea8565b90506001600160a01b038316158015906124745750826001600160a01b0316816001600160a01b031614155b801561248757506124858184611daf565b155b156124b05760405163a9fbf51f60e01b81526001600160a01b0384166004820152602401610e13565b81156124f85783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260066020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b61253483836126e3565b6110106000848484612179565b6000828152600460205260408120546001600160a01b039081169083161561256e5761256e818486612748565b6001600160a01b038116156125ac5761258b600085600080612424565b6001600160a01b038116600090815260056020526040902080546000190190555b6001600160a01b038516156125db576001600160a01b0385166000908152600560205260409020805460010190555b60008481526004602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b606061264582611ea8565b50600061265d60408051602081019091526000815290565b9050600081511161267d5760405180602001604052806000815250610fb1565b80612687846127ac565b6040516020016126989291906132dd565b6040516020818303038152906040529392505050565b60006001600160e01b03198216637965db0b60e01b148061090257506301ffc9a760e01b6001600160e01b0319831614610902565b6001600160a01b03821661270d57604051633250574960e11b815260006004820152602401610e13565b600061271b83836000611f58565b90506001600160a01b03811615611010576040516339e3563760e11b815260006004820152602401610e13565b61275383838361283f565b611010576001600160a01b03831661278157604051637e27328960e01b815260048101829052602401610e13565b60405163177e802f60e01b81526001600160a01b038316600482015260248101829052604401610e13565b606060006127b9836128a2565b600101905060008167ffffffffffffffff8111156127d9576127d9612a8a565b6040519080825280601f01601f191660200182016040528015612803576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461280d57509392505050565b60006001600160a01b03831615801590611fd55750826001600160a01b0316846001600160a01b0316148061287957506128798484611daf565b80611fd55750506000908152600660205260409020546001600160a01b03908116911614919050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106128e15772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061290d576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061292b57662386f26fc10000830492506010015b6305f5e1008310612943576305f5e100830492506008015b612710831061295757612710830492506004015b60648310612969576064830492506002015b600a83106109025760010192915050565b6001600160e01b031981168114610efc57600080fd5b6000602082840312156129a257600080fd5b8135610fb18161297a565b80356001600160a01b03811681146129c457600080fd5b919050565b6000602082840312156129db57600080fd5b610fb1826129ad565b60005b838110156129ff5781810151838201526020016129e7565b50506000910152565b60008151808452612a208160208601602086016129e4565b601f01601f19169290920160200192915050565b602081526000610fb16020830184612a08565b600060208284031215612a5957600080fd5b5035919050565b60008060408385031215612a7357600080fd5b612a7c836129ad565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115612abb57612abb612a8a565b604051601f8501601f19908116603f01168101908282118183101715612ae357612ae3612a8a565b81604052809350858152868686011115612afc57600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112612b2757600080fd5b610fb183833560208501612aa0565b60008060008060808587031215612b4c57600080fd5b612b55856129ad565b9350602085013567ffffffffffffffff80821115612b7257600080fd5b612b7e88838901612b16565b94506040870135915080821115612b9457600080fd5b50612ba187828801612b16565b949793965093946060013593505050565b60c081526000612bc560c0830189612a08565b8281036020840152612bd78189612a08565b604084019790975250506060810193909352901515608083015260a09091015292915050565b600080600060608486031215612c1257600080fd5b612c1b846129ad565b9250612c29602085016129ad565b9150604084013590509250925092565b60008060408385031215612c4c57600080fd5b82359150612c5c602084016129ad565b90509250929050565b600080600060608486031215612c7a57600080fd5b83359250612c8a602085016129ad565b9150612c98604085016129ad565b90509250925092565b60008083601f840112612cb357600080fd5b50813567ffffffffffffffff811115612ccb57600080fd5b6020830191508360208260051b8501011115612ce657600080fd5b9250929050565b60008060008060408587031215612d0357600080fd5b843567ffffffffffffffff80821115612d1b57600080fd5b612d2788838901612ca1565b90965094506020870135915080821115612d4057600080fd5b50612d4d87828801612ca1565b95989497509550505050565b600080600060408486031215612d6e57600080fd5b612d77846129ad565b9250602084013567ffffffffffffffff80821115612d9457600080fd5b818601915086601f830112612da857600080fd5b813581811115612db757600080fd5b876020828501011115612dc957600080fd5b6020830194508093505050509250925092565b60008060408385031215612def57600080fd5b612df8836129ad565b915060208301358015158114612e0d57600080fd5b809150509250929050565b60008060008060808587031215612e2e57600080fd5b612e37856129ad565b9350612e45602086016129ad565b925060408501359150606085013567ffffffffffffffff811115612e6857600080fd5b8501601f81018713612e7957600080fd5b612e8887823560208401612aa0565b91505092959194509250565b602081526000825160c06020840152612eb060e0840182612a08565b90506020840151601f19848303016040850152612ecd8282612a08565b91505060408401516060840152606084015160808401526080840151151560a084015260a084015160c08401528091505092915050565b60008060408385031215612f1757600080fd5b612f20836129ad565b9150612c5c602084016129ad565b600181811c90821680612f4257607f821691505b602082108103612f6257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600060018201612f9057612f90612f68565b5060010190565b8082018082111561090257610902612f68565b601f82111561101057600081815260208120601f850160051c81016020861015612fd15750805b601f850160051c820191505b81811015612ff057828155600101612fdd565b505050505050565b815167ffffffffffffffff81111561301257613012612a8a565b613026816130208454612f2e565b84612faa565b602080601f83116001811461305b57600084156130435750858301515b600019600386901b1c1916600185901b178555612ff0565b600085815260208120601f198616915b8281101561308a5788860151825594840194600190910190840161306b565b50858210156130a85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6060815260006130cb6060830186612a08565b82810360208401526130dd8186612a08565b915050826040830152949350505050565b634e487b7160e01b600052603260045260246000fd5b60008184825b85811015613139576001600160a01b03613123836129ad565b168352602092830192919091019060010161310a565b509095945050505050565b6020808252810182905260006001600160fb1b0383111561316457600080fd5b8260051b80856040850137919091016040019392505050565b808202811582820484141761090257610902612f68565b67ffffffffffffffff8311156131ac576131ac612a8a565b6131c0836131ba8354612f2e565b83612faa565b6000601f8411600181146131f457600085156131dc5750838201355b600019600387901b1c1916600186901b17835561229b565b600083815260209020601f19861690835b828110156132255786850135825560209485019460019092019101613205565b50868210156132425760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906132b690830184612a08565b9695505050505050565b6000602082840312156132d257600080fd5b8151610fb18161297a565b600083516132ef8184602088016129e4565b8351908301906133038183602088016129e4565b0194935050505056fe920994fc3bfe282f3f20cdccf1b7c5e46c63d963e822d98efff90abd41c12e212ae6a113c0ed5b78a53413ffbb7679881f11145ccfba4fb92e863dfcd5a1d2f3ee244ef9da0b2f89a74b208ea9fe1a639ebdf634027d9e1f092b58c39954fa37c41a06b26ced3a23b7bf835a0918ade784f4055ded86d18305f528f47a726052aa0ec51d0bf03ce5511c9ffc9de2b423d73d1faacd808abf2ac89ccea8a3ecf259a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f506fa31d7a92d9fa9a8898ac41d86ee9b13863605a361c85ae5d6010d5de4f280155aaafb6329a2098580462df33ec4b7441b19729b9601c5fc17ae1cf99a8a52a264697066735822122097d7ef5d72c0ad224c0683370583f917230ee4be4cc5a2de14b952f966790e0d64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "ERC721IncorrectOwner(address,uint256,address)": [
        {
          "details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
          "params": {
            "owner": "Address of the current owner of a token.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InsufficientApproval(address,uint256)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC721InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC721InvalidOwner(address)": [
        {
          "details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
          "params": {
            "owner": "Address of the current owner of a token."
          }
        }
      ],
      "ERC721InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC721InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC721NonexistentToken(uint256)": [
        {
          "details": "Indicates a `tokenId` whose `owner` is the zero address.",
          "params": {
            "tokenId": "Identifier number of a token."
          }
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "BatchMetadataUpdate(uint256,uint256)": {
        "details": "This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."
      },
      "MetadataUpdate(uint256)": {
        "details": "This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "bulkGrantRoles(bytes32[],address[])": {
        "details": "Bulk grant roles to accounts",
        "params": {
          "accounts": "The array of accounts to grant roles emits BulkRolesGranted event on successful grant",
          "roles": "The array of roles to grant"
        }
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
      },
      "certifyEnterprise(address,string,string,uint256)": {
        "details": "This function is used to certify enterprisesOnly the Certifier can certify enterprisesmints and assigns NFT certificate to an enterprisesets token URI to metadata URI of a certificate",
        "params": {
          "_industry": "The industry of the enterprise to be certified",
          "_metadataURI": "The metadata URI of the certificate (IPFS hash)",
          "enterpriseAddress": "The address of the enterprise to be certified",
          "validityDurationSeconds": "The validity duration of the certificate in seconds"
        }
      },
      "checkExpiryRoles(address)": {
        "details": "helper to check expiry of `PUBLIC` role",
        "params": {
          "account": "The account to check for role expiry"
        }
      },
      "claimTemporaryPublicRole(uint256)": {
        "details": "allows users to claim temporary `PUBLIC` role for `durationInHours` hours on their visit to platform",
        "params": {
          "durationInHours": "The duration in hours the user will have the `PUBLIC` role"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantCertifier(address)": {
        "details": "Functions to grant roles to!",
        "params": {
          "account": "The account to grant the role to"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasAdminRole(address)": {
        "details": "Functions to check if a certain account has the specified role",
        "params": {
          "account": "The account to check "
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeCertification(address)": {
        "details": "allows the revocation of certifications from enterprisesOnly the `Certifier` or `Super Admin` can revoke certificationsallows automatic destruction of NFT certificates via oppenzeppelin's`burn` function",
        "params": {
          "enterpriseAddress": "The address of the enterprise to be revoked"
        }
      },
      "revokeCertifierRole(address)": {
        "details": "Functions to revoke roles",
        "params": {
          "account": "The account to revoke the role from"
        }
      },
      "revokeIfExpired(address)": {
        "details": "alloes automatic revokation of NFT certificates after expiry duration callable by anyone as long as expiry date kicks in"
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferRole(bytes32,address,address)": {
        "details": "Transfers a role from one account to another",
        "params": {
          "from": "The account to transfer the role from",
          "role": "The role to transfer",
          "to": "The account to transfer the role to"
        }
      },
      "updateCertificationMetadata(address,string)": {
        "details": "updates the metadata URI of the NFT certificateOnly the `Certifier` can update certification metadata URI",
        "params": {
          "enterpriseAddress": "The address of the enterprise to be updated",
          "newMetadataURI": "The new metadata URI of the certificate"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bulkGrantRoles(bytes32[],address[])": {
        "notice": "---------- # Bulk Role Grant(Auto) ------- //"
      },
      "certifyEnterprise(address,string,string,uint256)": {
        "notice": "Emits CertificationGranted event on successful enterprise certification"
      },
      "checkExpiryRoles(address)": {
        "notice": "--------- #  Auto-expiry check (Call periodically) ------- //Emits PublicRoleExpired event on expiry"
      },
      "claimTemporaryPublicRole(uint256)": {
        "notice": "----------- #claim temporary public role -------------- //`durationInHours` must be less than 24 hoursEmits PublicRoleGranted event on successful claim "
      },
      "grantCertifier(address)": {
        "notice": "---------# GRANTING ROLES ---------//Emits RoleGranted event on successful grant"
      },
      "hasAdminRole(address)": {
        "notice": "--------- # CHECKING ROLES --------- //"
      },
      "revokeCertification(address)": {
        "notice": "Emits CertificationRevoked event on successful enterprise revocation"
      },
      "revokeCertifierRole(address)": {
        "notice": "------------- # REVOKING ROLES ------------- //Emits RoleRevoked event on successful revoke"
      },
      "revokeIfExpired(address)": {
        "notice": "Emits CertificationRevoked event on successful enterprise revocation"
      },
      "transferRole(bytes32,address,address)": {
        "notice": "-------- # Safe Role Transfer ------- //Emits RoleTransferred event on successful transfer"
      },
      "updateCertificationMetadata(address,string)": {
        "notice": "Emits CertificationUpdated event on successful metadata update"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/core/CertificationAuthority.sol:CertificationAuthority",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 4015,
        "contract": "contracts/core/CertificationAuthority.sol:CertificationAuthority",
        "label": "publicRoleExpiry",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 728,
        "contract": "contracts/core/CertificationAuthority.sol:CertificationAuthority",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 730,
        "contract": "contracts/core/CertificationAuthority.sol:CertificationAuthority",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 734,
        "contract": "contracts/core/CertificationAuthority.sol:CertificationAuthority",
        "label": "_owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 738,
        "contract": "contracts/core/CertificationAuthority.sol:CertificationAuthority",
        "label": "_balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 742,
        "contract": "contracts/core/CertificationAuthority.sol:CertificationAuthority",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 748,
        "contract": "contracts/core/CertificationAuthority.sol:CertificationAuthority",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1896,
        "contract": "contracts/core/CertificationAuthority.sol:CertificationAuthority",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 3538,
        "contract": "contracts/core/CertificationAuthority.sol:CertificationAuthority",
        "label": "certifications",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(Certification)5935_storage)"
      },
      {
        "astId": 3542,
        "contract": "contracts/core/CertificationAuthority.sol:CertificationAuthority",
        "label": "_tokenToEnterprise",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3544,
        "contract": "contracts/core/CertificationAuthority.sol:CertificationAuthority",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(Certification)5935_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DataTypes.Certification)",
        "numberOfBytes": "32",
        "value": "t_struct(Certification)5935_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Certification)5935_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.Certification",
        "members": [
          {
            "astId": 5924,
            "contract": "contracts/core/CertificationAuthority.sol:CertificationAuthority",
            "label": "industry",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5926,
            "contract": "contracts/core/CertificationAuthority.sol:CertificationAuthority",
            "label": "metadataURI",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 5928,
            "contract": "contracts/core/CertificationAuthority.sol:CertificationAuthority",
            "label": "certifiedAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5930,
            "contract": "contracts/core/CertificationAuthority.sol:CertificationAuthority",
            "label": "expiryDate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5932,
            "contract": "contracts/core/CertificationAuthority.sol:CertificationAuthority",
            "label": "isCertified",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 5934,
            "contract": "contracts/core/CertificationAuthority.sol:CertificationAuthority",
            "label": "tokenId",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/core/CertificationAuthority.sol:CertificationAuthority",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/core/CertificationAuthority.sol:CertificationAuthority",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}