{
  "address": "0x6726846a5a82f7d2817645a4cA7F08e511939265",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AuditorOversight__AppealWindowClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AuditorOversight__CaseNotPending",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AuditorOversight__NotAuthorizedEnterpriseOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CertificateNFT__CertificateDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CertificateNFT__EnterpriseAlreadyCertified",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CertificationAuthority__CertificationNotExpiredYet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CertificationAuthority__EnterpriseAlreadyCertified",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CertificationAuthority__EnterpriseNotCertifiedYet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnterpriseRegistry__EnterpriseAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnterpriseRegistry__EnterpriseDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnterpriseRegistry__InvalidStart",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InspectionManager__InspectionPeriodExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InspectionManager__InspectorAlreadyAssigned",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InspectionManager__InvalidReportIndex",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InspectionManager__NoReportsAssociatedWithEnterprise",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InspectionManager__NotAssignedToEnterprise",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InspectionManager__ReportAlreadyFlagged",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__AlreadyHasRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__ArrayLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__EmptyArray",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidDuration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__NotAuthorizedAuditor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__NotAuthorizedCertificateFactory",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__NotAuthorizedCertifier",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__NotAuthorizedEnterprise",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__NotAuthorizedInspector",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__NotAuthorizedPublicUser",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__RoleDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__UnauthorizedToPerformAction",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "roles",
          "type": "bytes32[]"
        },
        {
          "indexed": true,
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "BulkRolesGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "PublicRoleExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "PublicRoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "RoleTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AUDITOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CERTIFICATE_FACTORY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CERTIFIER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_PUBLIC_ROLE_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ENTERPRISE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INSPECTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "roles",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "bulkGrantRoles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "checkExpiryRoles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "durationInHours",
          "type": "uint256"
        }
      ],
      "name": "claimTemporaryPublicRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getActiveRoles",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAdmin",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isCertifier",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isInspector",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isAuditor",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isEnterprise",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isCertificateFactory",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isPublic",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxPublicRoleDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantAuditor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantCertificateFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantCertifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantEnterprise",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantInspector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantPublicRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasAdminRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasAuditorRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasCertificateFactoryRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasCertifierRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasEnterpriseRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasInspectorRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasPublicRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "publicRoleExpiry",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeAuditorRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeCertificateFactoryRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeCertifierRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeEnterpriseRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeInspectorRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokePublicRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9db10c71dc0e247fc0b6179cc395fe84c8d54ceb82b337ddea3667a57bca6a88",
  "receipt": {
    "to": null,
    "from": "0x0dfDb5bBaEeCE3871f826DF1C6Fe24a2772f5d38",
    "contractAddress": "0x6726846a5a82f7d2817645a4cA7F08e511939265",
    "transactionIndex": 15,
    "gasUsed": "1338435",
    "logsBloom": "0x
    "blockHash": "0x171422d12d9d1970a9a7041a77a83db5997e0dddc109800906f420b1f223f1bf",
    "transactionHash": "0x9db10c71dc0e247fc0b6179cc395fe84c8d54ceb82b337ddea3667a57bca6a88",
    "logs": [
      {
        "transactionIndex": 15,
        "blockNumber": 28499372,
        "transactionHash": "0x9db10c71dc0e247fc0b6179cc395fe84c8d54ceb82b337ddea3667a57bca6a88",
        "address": "0x6726846a5a82f7d2817645a4cA7F08e511939265",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 74,
        "blockHash": "0x171422d12d9d1970a9a7041a77a83db5997e0dddc109800906f420b1f223f1bf"
      },
      {
        "transactionIndex": 15,
        "blockNumber": 28499372,
        "transactionHash": "0x9db10c71dc0e247fc0b6179cc395fe84c8d54ceb82b337ddea3667a57bca6a88",
        "address": "0x6726846a5a82f7d2817645a4cA7F08e511939265",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xc41a06b26ced3a23b7bf835a0918ade784f4055ded86d18305f528f47a726052",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 75,
        "blockHash": "0x171422d12d9d1970a9a7041a77a83db5997e0dddc109800906f420b1f223f1bf"
      }
    ],
    "blockNumber": 28499372,
    "cumulativeGasUsed": "3508755",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "3c81b483ed5bcb59bb4e01ced78484b1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuditorOversight__AppealWindowClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuditorOversight__CaseNotPending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuditorOversight__NotAuthorizedEnterpriseOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificateNFT__CertificateDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificateNFT__EnterpriseAlreadyCertified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificationAuthority__CertificationNotExpiredYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificationAuthority__EnterpriseAlreadyCertified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificationAuthority__EnterpriseNotCertifiedYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnterpriseRegistry__EnterpriseAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnterpriseRegistry__EnterpriseDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnterpriseRegistry__InvalidStart\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__InspectionPeriodExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__InspectorAlreadyAssigned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__InvalidReportIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__NoReportsAssociatedWithEnterprise\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__NotAssignedToEnterprise\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__ReportAlreadyFlagged\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__AlreadyHasRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__EmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedAuditor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedCertificateFactory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedCertifier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedEnterprise\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedInspector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedPublicUser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__RoleDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__UnauthorizedToPerformAction\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"roles\",\"type\":\"bytes32[]\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"BulkRolesGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"PublicRoleExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"PublicRoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RoleTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUDITOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CERTIFICATE_FACTORY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CERTIFIER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_PUBLIC_ROLE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENTERPRISE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INSPECTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"roles\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"bulkGrantRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkExpiryRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"durationInHours\",\"type\":\"uint256\"}],\"name\":\"claimTemporaryPublicRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getActiveRoles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCertifier\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isInspector\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAuditor\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnterprise\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCertificateFactory\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxPublicRoleDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantAuditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantCertificateFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantCertifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantEnterprise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantInspector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantPublicRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAdminRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAuditorRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasCertificateFactoryRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasCertifierRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasEnterpriseRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasInspectorRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasPublicRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"publicRoleExpiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeAuditorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeCertificateFactoryRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeCertifierRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeEnterpriseRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeInspectorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokePublicRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"bulkGrantRoles(bytes32[],address[])\":{\"details\":\"Bulk grant roles to accounts\",\"params\":{\"accounts\":\"The array of accounts to grant roles emits BulkRolesGranted event on successful grant\",\"roles\":\"The array of roles to grant\"}},\"claimTemporaryPublicRole(uint256)\":{\"details\":\"allows users to claim temporary `PUBLIC` role for `durationInHours` hours on their visit to platform\",\"params\":{\"durationInHours\":\"The duration in hours the user will have the `PUBLIC` role\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantCertifier(address)\":{\"details\":\"Functions to grant roles to!\",\"params\":{\"account\":\"The account to grant the role to\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasAdminRole(address)\":{\"details\":\"Functions to check if a certain account has the specified role\",\"params\":{\"account\":\"The account to check \"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeCertifierRole(address)\":{\"details\":\"Functions to revoke roles\",\"params\":{\"account\":\"The account to revoke the role from\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferRole(bytes32,address,address)\":{\"details\":\"Transfers a role from one account to another\",\"params\":{\"from\":\"The account to transfer the role from\",\"role\":\"The role to transfer\",\"to\":\"The account to transfer the role to\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bulkGrantRoles(bytes32[],address[])\":{\"notice\":\"---------- # Bulk Role Grant(Auto) ------- //\"},\"claimTemporaryPublicRole(uint256)\":{\"notice\":\"----------- #claim temporary public role -------------- //`durationInHours` must be less than 24 hoursEmits PublicRoleGranted event on successful claim \"},\"grantCertifier(address)\":{\"notice\":\"---------# GRANTING ROLES ---------//Emits RoleGranted event on successful grant\"},\"hasAdminRole(address)\":{\"notice\":\"--------- # CHECKING ROLES --------- //\"},\"revokeCertifierRole(address)\":{\"notice\":\"------------- # REVOKING ROLES ------------- //Emits RoleRevoked event on successful revoke\"},\"transferRole(bytes32,address,address)\":{\"notice\":\"-------- # Safe Role Transfer ------- //Emits RoleTransferred event on successful transfer\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/RolesManager.sol\":\"RolesManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/core/RolesManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n\\n/**\\n* @author @0xJonaseb11\\n\\n* @dev manages the roles of the whole ecosystem \\n* @dev Only Super Admin can assign roles\\n* @dev On very high roles, there's DAO voting\\n*/\\n\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { Events } from \\\"../utils/Events.sol\\\";\\nimport { Errors } from \\\"../utils/Errors.sol\\\";\\nimport { DataTypes } from \\\"../utils/DataTypes.sol\\\";\\n\\n\\ncontract RolesManager is AccessControl, Errors {\\n\\n\\n\\n    //////////////////////////////////////////////////////////\\n    // ==================================================== //\\n    /////// work on the default public role expiry period\\n    /////// Work on the logic of handling\\n    // ===================================================== //\\n    //////////////////////////////////////////////////////////\\n\\n\\n\\n    bytes32 public constant CERTIFIER_ROLE = keccak256(\\\"CERTIFYING_BODY_ROLE\\\");\\n    bytes32 public constant INSPECTOR_ROLE = keccak256(\\\"INSPECTION_MANAGER_ROLE\\\");\\n    bytes32 public constant AUDITOR_ROLE = keccak256(\\\"AUDITOR_ROLE\\\");\\n    bytes32 public constant ENTERPRISE_ROLE = keccak256(\\\"ENTERPRISE_ROLE\\\");\\n    bytes32 public constant CERTIFICATE_FACTORY_ROLE = keccak256(\\\"CERTIFICATE_FACTORY_ROLE\\\");\\n    bytes32 public constant PUBLIC_ROLE = keccak256(\\\"PUBLIC_ROLE\\\");\\n\\n    mapping(address => uint256) public publicRoleExpiry;\\n\\n    uint256 public constant DEFAULT_PUBLIC_ROLE_DURATION = 2 minutes;\\n\\n   // ----- modifiers\\n   modifier onlyValidAddress(address account) {\\n    if (account == address(0)) {\\n        revert InvalidAddress();\\n    }\\n    _;\\n   }\\n\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(CERTIFIER_ROLE,  msg.sender);\\n    }\\n\\n\\n    /** ----------- #claim temporary public role -------------- //\\n    * @dev allows users to claim temporary `PUBLIC` role for `durationInHours` hours on their visit to platform\\n    * @param durationInHours The duration in hours the user will have the `PUBLIC` role\\n    * @notice `durationInHours` must be less than 24 hours\\n    * @notice Emits PublicRoleGranted event on successful claim \\n    */\\n    function claimTemporaryPublicRole(uint256 durationInHours) external {\\n        if (hasPublicRole(msg.sender)) {\\n            revert RolesManager__AlreadyHasRole();\\n        }\\n        if (durationInHours < 0 || durationInHours > 24) {\\n            revert RolesManager__InvalidDuration();\\n        }\\n      \\n        uint256 durationInSeconds = durationInHours * 1 hours;\\n    \\n        _grantRole(PUBLIC_ROLE, msg.sender);\\n        publicRoleExpiry[msg.sender] = block.timestamp + durationInSeconds;\\n\\n        emit Events.PublicRoleGranted(msg.sender, durationInHours);\\n    }\\n\\n    // ------- helper for client ---- //\\n    function getMaxPublicRoleDuration() public pure returns (uint256) {\\n        return 24;\\n    }\\n\\n\\n    /** --------- #  Auto-expiry check (Call periodically) ------- //\\n    * @dev helper to check expiry of `PUBLIC` role\\n    * @param account The account to check for role expiry\\n    * @notice Emits PublicRoleExpired event on expiry\\n    */\\n    function _hasRawPublicRole(address account) internal view returns (bool) {\\n        return hasRole(PUBLIC_ROLE, account);\\n    }\\n    function checkExpiryRoles(address account) public {\\n        if (!_hasRawPublicRole(account)) revert RolesManager__RoleDoesNotExist();\\n        if (publicRoleExpiry[account] < block.timestamp) {\\n            _revokeRole(PUBLIC_ROLE, account);\\n\\n            emit Events.PublicRoleExpired(account);\\n        }\\n    }\\n\\n    /** ---------- # Bulk Role Grant(Auto) ------- //\\n    * @dev Bulk grant roles to accounts\\n    * @param roles The array of roles to grant\\n    * @param accounts The array of accounts to grant roles\\n    * emits BulkRolesGranted event on successful grant\\n    */\\n    function bulkGrantRoles(\\n        bytes32[] calldata roles,\\n        address[] calldata accounts\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (roles.length == 0 || accounts.length == 0) {\\n            revert RolesManager__EmptyArray();\\n        }\\n        if (roles.length != accounts.length) {\\n            revert RolesManager__ArrayLengthMismatch();\\n        }\\n        \\n        for (uint256 i = 0; i < roles.length; i++) {\\n            _grantRole(roles[i], accounts[i]);\\n        }\\n\\n        emit Events.BulkRolesGranted(roles, accounts);\\n    }\\n\\n    /** -------- # Safe Role Transfer ------- //\\n    * @dev Transfers a role from one account to another\\n    * @param role The role to transfer\\n    * @param from The account to transfer the role from\\n    * @param to The account to transfer the role to\\n    * @notice Emits RoleTransferred event on successful transfer\\n    */\\n    function transferRole(\\n        bytes32 role,\\n        address from,\\n        address to  \\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasRole(role, from)) {\\n            revert RolesManager__RoleDoesNotExist();\\n        }\\n        _revokeRole(role, from);\\n        _grantRole(role, to);\\n\\n        emit Events.RoleTransferred(role, from, to);\\n    }\\n\\n    // ---- combined role check ----- //\\n    function getActiveRoles(address account) public view returns (\\n        bool isAdmin,\\n        bool isCertifier,\\n        bool isInspector,\\n        bool isAuditor,\\n        bool isEnterprise,\\n        bool isCertificateFactory,\\n        bool isPublic\\n    ) {\\n        return (\\n            hasRole(DEFAULT_ADMIN_ROLE, account),\\n            hasRole(CERTIFIER_ROLE, account),\\n            hasRole(INSPECTOR_ROLE, account),\\n            hasRole(AUDITOR_ROLE, account),\\n            hasRole(ENTERPRISE_ROLE, account),\\n            hasRole(CERTIFICATE_FACTORY_ROLE, account),\\n            hasRole(PUBLIC_ROLE, account)\\n        );\\n    }\\n    \\n\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n    _grantRole(role, account);\\n}\\n\\n\\n    ////////////////////////////////////////////////\\n    /////// MANAUAL ROLES MANAGEMENT  ////////////////\\n    ////////////////////////////////////////////////\\n    \\n\\n    /////////////////////////////////\\n    ////// ROLE GRANTING ////////////\\n    /////////////////////////////////\\n    \\n    /** ---------# GRANTING ROLES ---------//\\n    * @dev Functions to grant roles to!\\n    * @param account The account to grant the role to\\n    * @notice Emits RoleGranted event on successful grant\\n    */\\n    function grantCertifier(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        grantRole(CERTIFIER_ROLE, account);\\n\\n        emit Events.RoleGranted(CERTIFIER_ROLE, account);\\n\\n    }\\n    \\n    function grantInspector(address account ) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        grantRole(INSPECTOR_ROLE, account);\\n        emit Events.RoleGranted(INSPECTOR_ROLE, account);\\n    }\\n\\n    function grantAuditor(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        grantRole(AUDITOR_ROLE, account);\\n        emit Events.RoleGranted(AUDITOR_ROLE, account);\\n    }\\n\\n    function grantEnterprise(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        grantRole(ENTERPRISE_ROLE, account);\\n        emit Events.RoleGranted(ENTERPRISE_ROLE, account);\\n    }\\n     \\n    function grantCertificateFactory(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        grantRole(CERTIFICATE_FACTORY_ROLE, account);\\n        emit Events.RoleGranted(CERTIFICATE_FACTORY_ROLE, account);\\n    }\\n\\n    function grantPublicRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        grantRole(PUBLIC_ROLE, account);\\n        publicRoleExpiry[msg.sender] = block.timestamp + DEFAULT_PUBLIC_ROLE_DURATION;\\n\\n        emit Events.RoleGranted(PUBLIC_ROLE, account);\\n    }\\n\\n\\n    /**\\n    * @dev Public role will be claimed instantly\\n    * On the entry of a user to our platform\\n    * Just clicking `claim public role` and user is assigned role\\n    * @notice I plan to make it a temporary role on every visit to our platform\\n    */\\n\\n    /////////////////////////////////\\n    // ROLE REVOKATION /////////////\\n    ////////////////////////////////\\n    \\n\\n    /** ------------- # REVOKING ROLES ------------- //\\n    * @dev Functions to revoke roles\\n    * @param account The account to revoke the role from\\n    * @notice Emits RoleRevoked event on successful revoke\\n    */\\n    function revokeCertifierRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        revokeRole(CERTIFIER_ROLE, account);\\n        emit Events.RoleRevoked(CERTIFIER_ROLE, account);\\n    }\\n\\n    function revokeInspectorRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        revokeRole(INSPECTOR_ROLE, account);\\n    }\\n\\n    function revokeAuditorRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n    revokeRole(AUDITOR_ROLE, account);\\n    emit Events.RoleRevoked(AUDITOR_ROLE, account);\\n    }\\n\\n    function revokeEnterpriseRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        revokeRole(ENTERPRISE_ROLE, account);\\n        emit Events.RoleRevoked(ENTERPRISE_ROLE, account);\\n    }\\n\\n    function revokeCertificateFactoryRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        revokeRole(CERTIFICATE_FACTORY_ROLE, account);\\n        emit Events.RoleRevoked(CERTIFICATE_FACTORY_ROLE, account);\\n    }\\n    \\n    function revokePublicRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        revokeRole(PUBLIC_ROLE, account);\\n        emit Events.RoleRevoked(PUBLIC_ROLE, account);\\n    }\\n\\n\\n    /////////////////////////////////////////////////\\n    //////// ROLE CHECKS //////////////////\\n    /////////////////////////////////////////////////\\n    \\n   /** --------- # CHECKING ROLES --------- //\\n   * @dev Functions to check if a certain account has the specified role\\n   * @param account The account to check \\n   */\\n    function hasAdminRole(address account) public view returns(bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    function hasCertifierRole(address account) public view returns(bool) { \\n        return hasRole(CERTIFIER_ROLE, account);\\n    }\\n\\n    function hasInspectorRole(address account) public view  returns(bool) {\\n        return hasRole(INSPECTOR_ROLE, account);\\n    }\\n\\n    function hasAuditorRole(address account) public view  returns(bool) {\\n        return hasRole(AUDITOR_ROLE, account);\\n    }\\n\\n    function hasEnterpriseRole(address account) public view  returns(bool) {\\n        return hasRole(ENTERPRISE_ROLE, account);\\n    }\\n\\n    function hasCertificateFactoryRole(address account) public view  returns(bool) {\\n        return hasRole(CERTIFICATE_FACTORY_ROLE, account);\\n    }\\n    \\n    function hasPublicRole(address account) public view returns(bool) {\\n        if (_hasRawPublicRole(account) && publicRoleExpiry[account] > block.timestamp) {\\n            return true;\\n        }\\n        return false;\\n    }\\n}\",\"keccak256\":\"0xf4709898a14dd773491392570ec0a6cc413536b0c36b1c7ce8b3ddf5252a95c6\",\"license\":\"MIT\"},\"contracts/utils/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n* @author @0xJonaseb11\\n* @dev This library contains the data types used by the contracts\\n* @dev These structs hold a huge role in maintaining contract states\\n*/\\nlibrary DataTypes {\\n    struct Certification {\\n        string industry;\\n        string metadataURI;\\n        uint256 certifiedAt;\\n        uint256 expiryDate;\\n        bool isCertified;\\n        uint256 tokenId;\\n    }\\n\\n    struct Enterprise {\\n        address enterpriseAddress;\\n        string name;\\n        string industry;\\n        string metadataURI;\\n        bool isRegistered;\\n        uint256 registrationDate;\\n        uint256 lastUpdated;\\n        uint256 certificateId;\\n    }\\n\\n    struct InspectionReport {\\n        address inspector;\\n        address enterprise;\\n        string remarks;\\n        string evidenceURI; // IPFS hash\\n        uint256 inspectedAt;\\n        bool passed;\\n        bool flagged;\\n    }\\n\\n    struct FlaggedInspection {\\n        address enterprise;\\n        uint256 reportIndex;\\n        InspectionReport report;\\n        address flaggedBy;\\n        string reason;\\n        uint256 flaggedAt;\\n    }\\n\\n    struct NFTCertificate {\\n    address enterprise;\\n    address issuer;\\n    uint256 issuedAt;\\n    uint256 expiresAt;\\n    bool isRevoked;\\n    }\\n\\n    struct AuditCase {\\n        uint256 id;\\n        address targetEnterprise;\\n        uint256 inspectionId;\\n        address auditor;\\n        string reason;\\n        string evidenceURI;\\n        uint256 depositAmount;\\n        AuditStatus status;\\n        uint256 createdAt;\\n        uint256 resolvedAt;\\n    }\\n\\n    enum AuditStatus {\\n        Pending,\\n        Upheld,\\n        Rejected,\\n        Appealed\\n    }\\n}\",\"keccak256\":\"0xdd54b6675ea527069420c989adb49b0cd9a67ba27876feee92e0ee8a5d99fa3e\",\"license\":\"MIT\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n* @author @0xJonaseb11\\n* @dev contains the custom errors emitted by the contracts\\n@notice All the contracts inherit this to handle custom errors\\n*/\\n\\ncontract Errors {\\n    error InvalidAddress();\\n\\n    // -------- RolesManager ------------------//\\n    error RolesManager__UnauthorizedToPerformAction();\\n    error RolesManager__NotAuthorizedCertifier();\\n    error RolesManager__NotAuthorizedInspector();\\n    error RolesManager__NotAuthorizedAuditor();\\n    error RolesManager__NotAuthorizedEnterprise();\\n    error RolesManager__NotAuthorizedCertificateFactory();\\n    error RolesManager__NotAuthorizedPublicUser();\\n    error RolesManager__AlreadyHasRole();\\n    error RolesManager__InvalidDuration();\\n    error RolesManager__EmptyArray();\\n    error RolesManager__ArrayLengthMismatch();\\n    error RolesManager__RoleDoesNotExist();\\n\\n    // ------- EnterpriseRegistry --------------//\\n    error EnterpriseRegistry__EnterpriseAlreadyExists();\\n    error EnterpriseRegistry__EnterpriseDoesNotExist();\\n    error EnterpriseRegistry__InvalidStart();\\n\\n    // ------- CertificationAuthority ------- //\\n    error CertificationAuthority__EnterpriseAlreadyCertified();\\n    error CertificationAuthority__EnterpriseNotCertifiedYet();\\n    error CertificationAuthority__CertificationNotExpiredYet();\\n\\n    // -------- CertificateNFT --------- //\\n    error CertificateNFT__EnterpriseAlreadyCertified();\\n    error CertificateNFT__CertificateDoesNotExist();\\n\\n    // -------- InspectionManageer --------- //\\n    error InspectionManager__InspectorAlreadyAssigned();\\n    error InspectionManager__InspectionPeriodExpired();\\n    error InspectionManager__NotAssignedToEnterprise();\\n    error InspectionManager__InvalidReportIndex();\\n    error InspectionManager__ReportAlreadyFlagged();\\n    error InspectionManager__NoReportsAssociatedWithEnterprise();\\n\\n\\n    // ---------- InspectionReport ----------- //\\n\\n    error AuditorOversight__NotAuthorizedEnterpriseOwner();\\n    error AuditorOversight__AppealWindowClosed();\\n    error AuditorOversight__CaseNotPending();\\n\\n}\",\"keccak256\":\"0xe1870fe63ce3362913db4f28a24dd1ae1cb1044dbd327874658b71e0177f9241\",\"license\":\"MIT\"},\"contracts/utils/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n/**\\n* @author @0xJonaseb11\\n* @dev This library contains the events emitted by the contracts\\n* @dev All the contracts inherit this to handle events\\n*/\\n\\nlibrary Events {\\n    event CertificationGranted(address indexed enterprise, string industry, string metadataURI, uint256 expiryDate);\\n    event CertificationRevoked(address indexed enterprise);\\n    event CertificationUpdated(address indexed enterprise, string newMetadataURI);\\n\\n    event EnterpriseRegistered(address indexed enterprise, string name, string industry, string metadataURI, uint256 certificateId);\\n    event EnterpriseUpdated(address indexed enterprise, string newMetadataURI);\\n    event EnterpriseDeregistered(address indexed enterprise, uint256 deregisteredAt);\\n    \\n    event InspectorAssigned(address indexed enterprise, address indexed inspector, uint256 validityPeriod);\\n    event InspectionReportSubmitted(address indexed inspector, address indexed enterprise, bool passed, string remarks, string evidenceURI, uint256 ReportedAt);\\n    event InspectionReportFlagged(address indexed enterprise, uint256 indexed reportIndex, address flaggedBy, string reason, uint256 timestamp);\\n    \\n    event CertificateMinted(uint256 certificateId, address indexed enterprise, address indexed certifier, uint256 mintedAt);\\n    event CertificateRevoked(uint256 certificateId, address indexed revoker, uint256 timestamp);\\n\\n\\n    event PublicRoleGranted(address indexed user, uint256 duration);\\n    event PublicRoleExpired(address indexed user);\\n    event RoleTransferred(bytes32 indexed role, address from, address to);\\n    event BulkRolesGranted(bytes32[] roles, address[] indexed accounts);\\n    event RoleGranted(bytes32 indexed role, address indexed account);\\n    event RoleRevoked(bytes32 indexed role, address indexed account);\\n\\n    event AuditInitiated(uint256 indexed caseId, address indexed enterprise, uint256 inspectionId, address auditor, string reason, string evidenceURI);\\n    event AuditResolved(uint256 indexed caseId, address indexed enterprise, address resolvedBy, bool upheld, string remarks);\\n    event AppealFiled(uint256 indexed caseid, address indexed enterprise, string counterEvidenceURI, uint256 timestamp);\\n\\n}    \",\"keccak256\":\"0x16284b3e5d51e25be566f386cec7ad356796324565c6403c4de723411b734122\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102485760003560e01c8063784fee0e1161013b578063b5617ef7116100b8578063d547741f1161007c578063d547741f14610551578063e3a3c52214610564578063e55b4f9314610579578063f53f5e1e1461058c578063fc8102861461059f57600080fd5b8063b5617ef7146104fc578063b8ad415e1461051c578063b9bc982f14610523578063bd7ca7ba1461052b578063c395fcb31461053e57600080fd5b8063a1f34163116100ff578063a1f3416314610467578063a217fddf1461047a578063aa52617c14610482578063abaa536f14610495578063b0614db3146104a857600080fd5b8063784fee0e146104065780637bff09751461041b5780637e5effa41461042e5780638850845f1461044157806391d148541461045457600080fd5b8063456f19fc116101c957806361462f0e1161018d57806361462f0e146103a157806368dd17a5146103b457806369d0b517146103c95780636e1d616e146103de5780637780e9c1146103f357600080fd5b8063456f19fc1461034257806352f84b721461035557806357c03371146103685780635cb87d261461037b578063603765281461038e57600080fd5b8063261191b711610210578063261191b7146102e15780632f2ff15d146102f457806336568abe146103075780633ca7c02a1461031a5780633e2515181461032f57600080fd5b806301ffc9a71461024d5780630443cd2a146102755780631e223b2a1461028a578063248a9ca31461029d57806325d5e87e146102ce575b600080fd5b61026061025b36600461128a565b6105b2565b60405190151581526020015b60405180910390f35b6102886102833660046112d7565b6105e9565b005b6102886102983660046112d7565b61066b565b6102c06102ab3660046112f2565b60009081526020819052604090206001015490565b60405190815260200161026c565b6102886102dc3660046112d7565b6106ed565b6102886102ef3660046112d7565b610784565b61028861030236600461130b565b610806565b61028861031536600461130b565b610831565b6102c060008051602061155483398151915281565b61028861033d3660046112d7565b610869565b6102886103503660046112d7565b6108eb565b6102606103633660046112d7565b61096d565b6102886103763660046112d7565b610987565b610288610389366004611337565b610a25565b61028861039c3660046112d7565b610ab8565b6102886103af3660046113bf565b610b3a565b6102c060008051602061151483398151915281565b6102c060008051602061157483398151915281565b6102c06000805160206115b483398151915281565b6102886104013660046112f2565b610c4d565b6102c060008051602061159483398151915281565b6102606104293660046112d7565b610d1b565b61028861043c3660046112d7565b610d35565b61026061044f3660046112d7565b610db7565b61026061046236600461130b565b610dcd565b6102606104753660046112d7565b610df6565b6102c0600081565b6102886104903660046112d7565b610e10565b6102606104a33660046112d7565b610e92565b6104bb6104b63660046112d7565b610eac565b60408051971515885295151560208801529315159486019490945290151560608501521515608084015290151560a0830152151560c082015260e00161026c565b6102c061050a3660046112d7565b60016020526000908152604090205481565b60186102c0565b6102c0607881565b6102886105393660046112d7565b610f65565b61026061054c3660046112d7565b610fb0565b61028861055f36600461130b565b610fbc565b6102c06000805160206115d483398151915281565b6102886105873660046112d7565b610fe1565b61026061059a3660046112d7565b611063565b6102886105ad3660046112d7565b6110a6565b60006001600160e01b03198216637965db0b60e01b14806105e357506301ffc9a760e01b6001600160e01b03198316145b92915050565b806001600160a01b0381166106115760405163e6c4247b60e01b815260040160405180910390fd5b600061061c81611128565b61063460008051602061155483398151915284610fbc565b6040516001600160a01b03841690600080516020611554833981519152906000805160206115f483398151915290600090a3505050565b806001600160a01b0381166106935760405163e6c4247b60e01b815260040160405180910390fd5b600061069e81611128565b6106b660008051602061151483398151915284610806565b6040516001600160a01b038416906000805160206115148339815191529060008051602061153483398151915290600090a3505050565b6106f681611132565b610713576040516366783c9d60e11b815260040160405180910390fd5b6001600160a01b0381166000908152600160205260409020544211156107815761074b6000805160206115548339815191528261114c565b506040516001600160a01b038216907fa6f32bcbc7de829d50e1c9cbc1c5b4dafb4c7a0b8329757aee62a9b394d71c3b90600090a25b50565b806001600160a01b0381166107ac5760405163e6c4247b60e01b815260040160405180910390fd5b60006107b781611128565b6107cf60008051602061159483398151915284610fbc565b6040516001600160a01b03841690600080516020611594833981519152906000805160206115f483398151915290600090a3505050565b60008281526020819052604090206001015461082181611128565b61082b83836111bf565b50505050565b6001600160a01b038116331461085a5760405163334bd91960e11b815260040160405180910390fd5b610864828261114c565b505050565b806001600160a01b0381166108915760405163e6c4247b60e01b815260040160405180910390fd5b600061089c81611128565b6108b46000805160206115b483398151915284610fbc565b6040516001600160a01b038416906000805160206115b4833981519152906000805160206115f483398151915290600090a3505050565b806001600160a01b0381166109135760405163e6c4247b60e01b815260040160405180910390fd5b600061091e81611128565b6109366000805160206115d483398151915284610806565b6040516001600160a01b038416906000805160206115d48339815191529060008051602061153483398151915290600090a3505050565b60006105e360008051602061159483398151915283610dcd565b806001600160a01b0381166109af5760405163e6c4247b60e01b815260040160405180910390fd5b60006109ba81611128565b6109d260008051602061155483398151915284610806565b6109dd607842611441565b336000908152600160205260408082209290925590516001600160a01b03851691600080516020611554833981519152916000805160206115348339815191529190a3505050565b6000610a3081611128565b610a3a8484610dcd565b610a57576040516366783c9d60e11b815260040160405180910390fd5b610a61848461114c565b50610a6c84836111bf565b50604080516001600160a01b0380861682528416602082015285917f274dd4127a55dcb6f6c12ed38fec5007d965d2afffa8b0bc75c3dc8f3f6b2224910160405180910390a250505050565b806001600160a01b038116610ae05760405163e6c4247b60e01b815260040160405180910390fd5b6000610aeb81611128565b610b0360008051602061157483398151915284610806565b6040516001600160a01b038416906000805160206115748339815191529060008051602061153483398151915290600090a3505050565b6000610b4581611128565b831580610b50575081155b15610b6e57604051637d6eaf9360e01b815260040160405180910390fd5b838214610b8e576040516390a2f79360e01b815260040160405180910390fd5b60005b84811015610bf457610be1868683818110610bae57610bae611454565b90506020020135858584818110610bc757610bc7611454565b9050602002016020810190610bdc91906112d7565b6111bf565b5080610bec8161146a565b915050610b91565b508282604051610c05929190611483565b60405180910390207ff4d52c90739c68c4e82d39cfbeee6b6613784bf9b28d2cdb3a02203799cf06068686604051610c3e9291906114c3565b60405180910390a25050505050565b610c5633611063565b15610c745760405163510a583360e01b815260040160405180910390fd5b6018811115610c9657604051630729422160e41b815260040160405180910390fd5b6000610ca482610e106114fc565b9050610cbe600080516020611554833981519152336111bf565b50610cc98142611441565b33600081815260016020526040908190209290925590517fc526cdae63c288ea4504281fe29b0ae3352c8a9ccae61eba8c21cd25a949e0f190610d0f9085815260200190565b60405180910390a25050565b60006105e360008051602061157483398151915283610dcd565b806001600160a01b038116610d5d5760405163e6c4247b60e01b815260040160405180910390fd5b6000610d6881611128565b610d8060008051602061151483398151915284610fbc565b6040516001600160a01b03841690600080516020611514833981519152906000805160206115f483398151915290600090a3505050565b60006105e36000805160206115d4833981519152835b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60006105e360008051602061151483398151915283610dcd565b806001600160a01b038116610e385760405163e6c4247b60e01b815260040160405180910390fd5b6000610e4381611128565b610e5b60008051602061159483398151915284610806565b6040516001600160a01b038416906000805160206115948339815191529060008051602061153483398151915290600090a3505050565b60006105e36000805160206115b483398151915283610dcd565b6000808080808080610ebe8189610dcd565b610ed66000805160206115748339815191528a610dcd565b610eee6000805160206115d48339815191528b610dcd565b610f066000805160206115b48339815191528c610dcd565b610f1e6000805160206115148339815191528d610dcd565b610f366000805160206115948339815191528e610dcd565b610f4e6000805160206115548339815191528f610dcd565b959e949d50929b5090995097509550909350915050565b806001600160a01b038116610f8d5760405163e6c4247b60e01b815260040160405180910390fd5b6000610f9881611128565b6108646000805160206115d483398151915284610fbc565b60006105e38183610dcd565b600082815260208190526040902060010154610fd781611128565b61082b838361114c565b806001600160a01b0381166110095760405163e6c4247b60e01b815260040160405180910390fd5b600061101481611128565b61102c6000805160206115b483398151915284610806565b6040516001600160a01b038416906000805160206115b48339815191529060008051602061153483398151915290600090a3505050565b600061106e82611132565b801561109157506001600160a01b03821660009081526001602052604090205442105b1561109e57506001919050565b506000919050565b806001600160a01b0381166110ce5760405163e6c4247b60e01b815260040160405180910390fd5b60006110d981611128565b6110f160008051602061157483398151915284610fbc565b6040516001600160a01b03841690600080516020611574833981519152906000805160206115f483398151915290600090a3505050565b6107818133611249565b60006105e360008051602061155483398151915283610dcd565b60006111588383610dcd565b156111b7576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016105e3565b5060006105e3565b60006111cb8383610dcd565b6111b7576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556112013390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016105e3565b6112538282610dcd565b6112865760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440160405180910390fd5b5050565b60006020828403121561129c57600080fd5b81356001600160e01b0319811681146112b457600080fd5b9392505050565b80356001600160a01b03811681146112d257600080fd5b919050565b6000602082840312156112e957600080fd5b6112b4826112bb565b60006020828403121561130457600080fd5b5035919050565b6000806040838503121561131e57600080fd5b8235915061132e602084016112bb565b90509250929050565b60008060006060848603121561134c57600080fd5b8335925061135c602085016112bb565b915061136a604085016112bb565b90509250925092565b60008083601f84011261138557600080fd5b50813567ffffffffffffffff81111561139d57600080fd5b6020830191508360208260051b85010111156113b857600080fd5b9250929050565b600080600080604085870312156113d557600080fd5b843567ffffffffffffffff808211156113ed57600080fd5b6113f988838901611373565b9096509450602087013591508082111561141257600080fd5b5061141f87828801611373565b95989497509550505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156105e3576105e361142b565b634e487b7160e01b600052603260045260246000fd5b60006001820161147c5761147c61142b565b5060010190565b60008184825b858110156114b8576001600160a01b036114a2836112bb565b1683526020928301929190910190600101611489565b509095945050505050565b6020808252810182905260006001600160fb1b038311156114e357600080fd5b8260051b80856040850137919091016040019392505050565b80820281158282048414176105e3576105e361142b56fe920994fc3bfe282f3f20cdccf1b7c5e46c63d963e822d98efff90abd41c12e212ae6a113c0ed5b78a53413ffbb7679881f11145ccfba4fb92e863dfcd5a1d2f3ee244ef9da0b2f89a74b208ea9fe1a639ebdf634027d9e1f092b58c39954fa37c41a06b26ced3a23b7bf835a0918ade784f4055ded86d18305f528f47a726052aa0ec51d0bf03ce5511c9ffc9de2b423d73d1faacd808abf2ac89ccea8a3ecf259a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f506fa31d7a92d9fa9a8898ac41d86ee9b13863605a361c85ae5d6010d5de4f280155aaafb6329a2098580462df33ec4b7441b19729b9601c5fc17ae1cf99a8a52a26469706673582212204a27b796644963b4a70c5041d61f7a992129a55cfb23a5a76f9bb4b2bd6201b964736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "bulkGrantRoles(bytes32[],address[])": {
        "details": "Bulk grant roles to accounts",
        "params": {
          "accounts": "The array of accounts to grant roles emits BulkRolesGranted event on successful grant",
          "roles": "The array of roles to grant"
        }
      },
      "claimTemporaryPublicRole(uint256)": {
        "details": "allows users to claim temporary `PUBLIC` role for `durationInHours` hours on their visit to platform",
        "params": {
          "durationInHours": "The duration in hours the user will have the `PUBLIC` role"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantCertifier(address)": {
        "details": "Functions to grant roles to!",
        "params": {
          "account": "The account to grant the role to"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasAdminRole(address)": {
        "details": "Functions to check if a certain account has the specified role",
        "params": {
          "account": "The account to check "
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeCertifierRole(address)": {
        "details": "Functions to revoke roles",
        "params": {
          "account": "The account to revoke the role from"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferRole(bytes32,address,address)": {
        "details": "Transfers a role from one account to another",
        "params": {
          "from": "The account to transfer the role from",
          "role": "The role to transfer",
          "to": "The account to transfer the role to"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bulkGrantRoles(bytes32[],address[])": {
        "notice": "---------- # Bulk Role Grant(Auto) ------- //"
      },
      "claimTemporaryPublicRole(uint256)": {
        "notice": "----------- #claim temporary public role -------------- //`durationInHours` must be less than 24 hoursEmits PublicRoleGranted event on successful claim "
      },
      "grantCertifier(address)": {
        "notice": "---------# GRANTING ROLES ---------//Emits RoleGranted event on successful grant"
      },
      "hasAdminRole(address)": {
        "notice": "--------- # CHECKING ROLES --------- //"
      },
      "revokeCertifierRole(address)": {
        "notice": "------------- # REVOKING ROLES ------------- //Emits RoleRevoked event on successful revoke"
      },
      "transferRole(bytes32,address,address)": {
        "notice": "-------- # Safe Role Transfer ------- //Emits RoleTransferred event on successful transfer"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/core/RolesManager.sol:RolesManager",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 4346,
        "contract": "contracts/core/RolesManager.sol:RolesManager",
        "label": "publicRoleExpiry",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/core/RolesManager.sol:RolesManager",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/core/RolesManager.sol:RolesManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}