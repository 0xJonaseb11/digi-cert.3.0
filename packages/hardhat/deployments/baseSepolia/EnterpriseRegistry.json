{
  "address": "0xC9d8bC4075677f7CBd7b700F0147900abFae1Ad9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rolesManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_certNFT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_certAuthority",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CertificateNFT__CertificateDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CertificateNFT__EnterpriseAlreadyCertified",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CertificationAuthority__CertificationNotExpiredYet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CertificationAuthority__EnterpriseAlreadyCertified",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CertificationAuthority__EnterpriseNotCertifiedYet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnterpriseRegistry__EnterpriseAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnterpriseRegistry__EnterpriseDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnterpriseRegistry__InvalidStart",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InspectionManager__InspectionPeriodExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InspectionManager__InspectorAlreadyAssigned",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InspectionManager__NoReportsAssociatedWithEnterprise",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InspectionManager__NotAssignedToEnterprise",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__AlreadyHasRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__ArrayLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__EmptyArray",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__InvalidDuration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__NotAuthorizedAuditor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__NotAuthorizedCertificateFactory",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__NotAuthorizedCertifier",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__NotAuthorizedEnterprise",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__NotAuthorizedInspector",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__NotAuthorizedPublicUser",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__RoleDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RolesManager__UnauthorizedToPerformAction",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "roles",
          "type": "bytes32[]"
        },
        {
          "indexed": true,
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "BulkRolesGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "enterprise",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deregisteredAt",
          "type": "uint256"
        }
      ],
      "name": "EnterpriseDeregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "enterprise",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "industry",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "certificateId",
          "type": "uint256"
        }
      ],
      "name": "EnterpriseRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "enterprise",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newMetadataURI",
          "type": "string"
        }
      ],
      "name": "EnterpriseUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "PublicRoleExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "PublicRoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "RoleTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AUDITOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CERTIFICATE_FACTORY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CERTIFIER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ENTERPRISE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INSPECTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allEnterprises",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "roles",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "bulkGrantRoles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "certAuthority",
      "outputs": [
        {
          "internalType": "contract CertificationAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "certificateNFT",
      "outputs": [
        {
          "internalType": "contract CertificateNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "checkExpiryRoles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "durationInHours",
          "type": "uint256"
        }
      ],
      "name": "claimTemporaryPublicRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_enterprise",
          "type": "address"
        }
      ],
      "name": "deRegisterEnterprise",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getActiveRoles",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAdmin",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isCertifier",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isInspector",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isAuditor",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isEnterprise",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isCertificateFactory",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isPublic",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "enterpriseAddress",
          "type": "address"
        }
      ],
      "name": "getEnterprise",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "enterpriseAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "industry",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isRegistered",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "registrationDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "certificateId",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.Enterprise",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_enterprise",
          "type": "address"
        }
      ],
      "name": "getEnterpriseWithStatus",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "enterpriseAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "industry",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isRegistered",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "registrationDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "certificateId",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.Enterprise",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxPublicRoleDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantAuditor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantCertificateFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantCertifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantEnterprise",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantInspector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantPublicRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasAdminRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasAuditorRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasCertificateFactoryRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasCertifierRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasEnterpriseRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasInspectorRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasPublicRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_enterprise",
          "type": "address"
        }
      ],
      "name": "isEnterpriseActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "lisEnterprisesPaginated",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listEnterprises",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "publicRoleExpiry",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_enterpriseAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_industry",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_initialCertDuration",
          "type": "uint256"
        }
      ],
      "name": "registerEnterprise",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeAuditorRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeCertificateFactoryRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeCertifierRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeEnterpriseRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeInspectorRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokePublicRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rolesManager",
      "outputs": [
        {
          "internalType": "contract RolesManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newMetadataURI",
          "type": "string"
        }
      ],
      "name": "updateEnterpriseMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x24764463d5e77bebf80c46436be01c9f3dc4991bb8c73eaabbc79355a4c50a8a",
  "receipt": {
    "to": null,
    "from": "0x0dfDb5bBaEeCE3871f826DF1C6Fe24a2772f5d38",
    "contractAddress": "0xC9d8bC4075677f7CBd7b700F0147900abFae1Ad9",
    "transactionIndex": 68,
    "gasUsed": "2553543",
    "logsBloom": "0x
    "blockHash": "0x6636b2e2e8eba2b76146c8b4cfb08ab25ebeb48b873e839da0c11665bf5dff51",
    "transactionHash": "0x24764463d5e77bebf80c46436be01c9f3dc4991bb8c73eaabbc79355a4c50a8a",
    "logs": [
      {
        "transactionIndex": 68,
        "blockNumber": 26289716,
        "transactionHash": "0x24764463d5e77bebf80c46436be01c9f3dc4991bb8c73eaabbc79355a4c50a8a",
        "address": "0xC9d8bC4075677f7CBd7b700F0147900abFae1Ad9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6636b2e2e8eba2b76146c8b4cfb08ab25ebeb48b873e839da0c11665bf5dff51"
      },
      {
        "transactionIndex": 68,
        "blockNumber": 26289716,
        "transactionHash": "0x24764463d5e77bebf80c46436be01c9f3dc4991bb8c73eaabbc79355a4c50a8a",
        "address": "0xC9d8bC4075677f7CBd7b700F0147900abFae1Ad9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xc41a06b26ced3a23b7bf835a0918ade784f4055ded86d18305f528f47a726052",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38",
          "0x0000000000000000000000000dfdb5bbaeece3871f826df1c6fe24a2772f5d38"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x6636b2e2e8eba2b76146c8b4cfb08ab25ebeb48b873e839da0c11665bf5dff51"
      }
    ],
    "blockNumber": 26289716,
    "cumulativeGasUsed": "5650518",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x55482cFfBA4AC511245Dd4C7bE1AA4f9c6b91782",
    "0x34ac9Df22279cf18F3f9d7606878D283A0B75e8B",
    "0x117Defebd04d121E1A1Bf1Bc02f429e870C4D911"
  ],
  "numDeployments": 1,
  "solcInputHash": "654b6f1015d7db0de73c4aea9a0f35b2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rolesManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_certNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_certAuthority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificateNFT__CertificateDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificateNFT__EnterpriseAlreadyCertified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificationAuthority__CertificationNotExpiredYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificationAuthority__EnterpriseAlreadyCertified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificationAuthority__EnterpriseNotCertifiedYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnterpriseRegistry__EnterpriseAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnterpriseRegistry__EnterpriseDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnterpriseRegistry__InvalidStart\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__InspectionPeriodExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__InspectorAlreadyAssigned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__NoReportsAssociatedWithEnterprise\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__NotAssignedToEnterprise\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__AlreadyHasRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__EmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedAuditor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedCertificateFactory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedCertifier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedEnterprise\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedInspector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedPublicUser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__RoleDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__UnauthorizedToPerformAction\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"roles\",\"type\":\"bytes32[]\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"BulkRolesGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deregisteredAt\",\"type\":\"uint256\"}],\"name\":\"EnterpriseDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"industry\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"certificateId\",\"type\":\"uint256\"}],\"name\":\"EnterpriseRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newMetadataURI\",\"type\":\"string\"}],\"name\":\"EnterpriseUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"PublicRoleExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"PublicRoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RoleTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUDITOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CERTIFICATE_FACTORY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CERTIFIER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENTERPRISE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INSPECTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allEnterprises\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"roles\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"bulkGrantRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"certAuthority\",\"outputs\":[{\"internalType\":\"contract CertificationAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"certificateNFT\",\"outputs\":[{\"internalType\":\"contract CertificateNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkExpiryRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"durationInHours\",\"type\":\"uint256\"}],\"name\":\"claimTemporaryPublicRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_enterprise\",\"type\":\"address\"}],\"name\":\"deRegisterEnterprise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getActiveRoles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCertifier\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isInspector\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAuditor\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnterprise\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCertificateFactory\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enterpriseAddress\",\"type\":\"address\"}],\"name\":\"getEnterprise\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"industry\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"registrationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"certificateId\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.Enterprise\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_enterprise\",\"type\":\"address\"}],\"name\":\"getEnterpriseWithStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"industry\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"registrationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"certificateId\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.Enterprise\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxPublicRoleDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantAuditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantCertificateFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantCertifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantEnterprise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantInspector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantPublicRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAdminRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAuditorRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasCertificateFactoryRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasCertifierRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasEnterpriseRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasInspectorRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasPublicRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_enterprise\",\"type\":\"address\"}],\"name\":\"isEnterpriseActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"lisEnterprisesPaginated\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listEnterprises\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"publicRoleExpiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_enterpriseAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_industry\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_initialCertDuration\",\"type\":\"uint256\"}],\"name\":\"registerEnterprise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeAuditorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeCertificateFactoryRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeCertifierRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeEnterpriseRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeInspectorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokePublicRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rolesManager\",\"outputs\":[{\"internalType\":\"contract RolesManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newMetadataURI\",\"type\":\"string\"}],\"name\":\"updateEnterpriseMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"bulkGrantRoles(bytes32[],address[])\":{\"details\":\"Bulk grant roles to accounts\",\"params\":{\"accounts\":\"The array of accounts to grant roles emits BulkRolesGranted event on successful grant\",\"roles\":\"The array of roles to grant\"}},\"checkExpiryRoles(address)\":{\"details\":\"helper to check expiry of `PUBLIC` role\",\"params\":{\"account\":\"The account to check for role expiry\"}},\"claimTemporaryPublicRole(uint256)\":{\"details\":\"allows users to claim temporary `PUBLIC` role for `durationInHours` hours on their visit to platform\",\"params\":{\"durationInHours\":\"The duration in hours the user will have the `PUBLIC` role\"}},\"deRegisterEnterprise(address)\":{\"details\":\"Deregisters an enterprise from the platformOnly the Super Admin can deregister an enterpriseRevokes the certification and NFT certificate of the enterprise\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantCertifier(address)\":{\"details\":\"Functions to grant roles to!\",\"params\":{\"account\":\"The account to grant the role to\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasAdminRole(address)\":{\"details\":\"Functions to check if a certain account has the specified role\",\"params\":{\"account\":\"The account to check \"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isEnterpriseActive(address)\":{\"details\":\"Checks if an enterprise is active An enterprise is active if it is registered, has a valid certification and has a valid NFT certificateReturns true if the enterprise is active\",\"params\":{\"_enterprise\":\"The address of the enterprise\"},\"returns\":{\"_0\":\"bool true if the enterprise is active\"}},\"lisEnterprisesPaginated(uint256,uint256)\":{\"details\":\"Returns a paginated list of enterprisesThe list is paginated by start and limit\",\"params\":{\"limit\":\"The number of enterprises to return\",\"start\":\"The start index of the list\"},\"returns\":{\"_0\":\"address[] The list of enterprises\"}},\"registerEnterprise(address,string,string,string,uint256)\":{\"details\":\"Registers a new enterprise to the platformAutomatically creates a certification for the enterpriseAutomatically mints a NFT certificate for the enterprise\",\"params\":{\"_enterpriseAddress\":\"The address of the enterprise\",\"_industry\":\"The industry of the enterprise\",\"_initialCertDuration\":\"The duration of the initial certification\",\"_metadataURI\":\"The metadata URI(IPFS hash) of the enterprise\",\"_name\":\"The name of the enterprise\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeCertifierRole(address)\":{\"details\":\"Functions to revoke roles\",\"params\":{\"account\":\"The account to revoke the role from\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferRole(bytes32,address,address)\":{\"details\":\"Transfers a role from one account to another\",\"params\":{\"from\":\"The account to transfer the role from\",\"role\":\"The role to transfer\",\"to\":\"The account to transfer the role to\"}},\"updateEnterpriseMetadata(string)\":{\"details\":\"Updates the metadata URI of an enterpriseOnly the owner of the enterprise can update the metadata URI\",\"params\":{\"newMetadataURI\":\"The new metadata URI(IPFS hash) of the enterprise\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bulkGrantRoles(bytes32[],address[])\":{\"notice\":\"---------- # Bulk Role Grant(Auto) ------- //\"},\"checkExpiryRoles(address)\":{\"notice\":\"--------- #  Auto-expiry check (Call periodically) ------- //Emits PublicRoleExpired event on expiry\"},\"claimTemporaryPublicRole(uint256)\":{\"notice\":\"----------- #claim temporary public role -------------- //`durationInHours` must be less than 24 hoursEmits PublicRoleGranted event on successful claim \"},\"deRegisterEnterprise(address)\":{\"notice\":\"Emits EnterpriseDeregistered event when an enterprise is deregistered\"},\"getEnterprise(address)\":{\"notice\":\"------ Simple getters approach ---- //\"},\"grantCertifier(address)\":{\"notice\":\"---------# GRANTING ROLES ---------//Emits RoleGranted event on successful grant\"},\"hasAdminRole(address)\":{\"notice\":\"--------- # CHECKING ROLES --------- //\"},\"registerEnterprise(address,string,string,string,uint256)\":{\"notice\":\"Emits EnterpriseRegistered event when a new enterprise is registered\"},\"revokeCertifierRole(address)\":{\"notice\":\"------------- # REVOKING ROLES ------------- //Emits RoleRevoked event on successful revoke\"},\"transferRole(bytes32,address,address)\":{\"notice\":\"-------- # Safe Role Transfer ------- //Emits RoleTransferred event on successful transfer\"},\"updateEnterpriseMetadata(string)\":{\"notice\":\"Emits EnterpriseUpdated event when the metadata URI is updated\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/EnterpriseRegistry.sol\":\"EnterpriseRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0xb31b86c03f4677dcffa4655285d62433509513be9bafa0e04984565052d34e44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        _update(address(0), tokenId, _msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xc48434419baa510862ba4b4802bc0500ccddadd02ae2f195548af748c3206b20\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xcc6f49e0c57072d6a18eef0d5fc22a4cc20462c18f0c365d2dd9a2c732fde670\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/core/CertificationAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n\\n/**\\n* @author @0xJonaseb11\\n* @title CertificationAuthority Contract\\n* @dev Acts like a Certificate Authority main house for enterprises\\n* @dev Only the Certifier can certify enterprises\\n* @dev Allows update of NFT certificate's metadata URI\\n* @dev Automatic revocation of certificates after expiry duration\\n*/\\nimport {RolesManager} from \\\"./RolesManager.sol\\\";\\nimport {Events} from \\\"../utils/Events.sol\\\";\\nimport {DataTypes} from \\\"../utils/DataTypes.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract CertificationAuthority is RolesManager, ERC721URIStorage, ERC721Burnable {\\n    using DataTypes for DataTypes.Enterprise;\\n    using DataTypes for DataTypes.Certification;\\n    using DataTypes for DataTypes.InspectionReport;\\n\\n    mapping(address => DataTypes.Certification) public certifications;\\n    mapping(uint256 => address) private _tokenToEnterprise;\\n    uint256 private _tokenIdCounter;\\n\\n    constructor() ERC721(\\\"EnterpriseCertificate\\\", \\\"ECERT\\\") {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(CERTIFIER_ROLE, msg.sender);\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// ENTERPRISE CERTIFICATION ///////////////////\\n    //////////////////////////////////////////////////////////\\n\\n    /**\\n    * @dev This function is used to certify enterprises\\n    * @dev Only the Certifier can certify enterprises\\n    * @dev mints and assigns NFT certificate to an enterprise\\n    * @dev sets token URI to metadata URI of a certificate\\n    * @param enterpriseAddress The address of the enterprise to be certified\\n    * @param _industry The industry of the enterprise to be certified\\n    * @param _metadataURI The metadata URI of the certificate (IPFS hash)\\n    * @param validityDurationSeconds The validity duration of the certificate in seconds\\n    * @notice Emits CertificationGranted event on successful enterprise certification\\n    */\\n\\n    function certifyEnterprise(\\n        address enterpriseAddress,\\n        string memory _industry,\\n        string memory _metadataURI,\\n        uint256 validityDurationSeconds\\n    ) external onlyValidAddress(enterpriseAddress) onlyRole(CERTIFIER_ROLE) {\\n        if (certifications[enterpriseAddress].isCertified) {\\n            revert CertificationAuthority__EnterpriseAlreadyCertified();\\n        }\\n\\n        uint256 tokenId = _tokenIdCounter++;\\n        _safeMint(enterpriseAddress, tokenId);\\n        _setTokenURI(tokenId, _metadataURI);\\n\\n        certifications[enterpriseAddress] = DataTypes.Certification({\\n            industry: _industry,\\n            metadataURI: _metadataURI,\\n            certifiedAt: block.timestamp,\\n            expiryDate: block.timestamp + validityDurationSeconds,\\n            isCertified: true,\\n            tokenId: tokenId\\n        });\\n\\n        _tokenToEnterprise[tokenId] = enterpriseAddress;\\n\\n        emit Events.CertificationGranted(\\n            enterpriseAddress,\\n            _industry,\\n            _metadataURI,\\n            block.timestamp + validityDurationSeconds\\n        );\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// REVOCATION & EXPIRY HANDLING //////////////\\n    //////////////////////////////////////////////////////////\\n    \\n\\n    /**\\n    * @dev allows the revocation of certifications from enterprises\\n    * @dev Only the `Certifier` or `Super Admin` can revoke certifications\\n    * @dev allows automatic destruction of NFT certificates via oppenzeppelin's`burn` function\\n    * @param enterpriseAddress The address of the enterprise to be revoked\\n    * @notice Emits CertificationRevoked event on successful enterprise revocation\\n    */\\n    function revokeCertification(address enterpriseAddress)\\n        external\\n        onlyValidAddress(enterpriseAddress)\\n        onlyRole(CERTIFIER_ROLE) onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\\n        if (!cert.isCertified) {\\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\\n        }\\n\\n        if (cert.tokenId != 0) {\\n            burn(cert.tokenId); \\n            delete _tokenToEnterprise[cert.tokenId];\\n        }\\n\\n        cert.isCertified = false;\\n        emit Events.CertificationRevoked(enterpriseAddress);\\n    }\\n    \\n\\n    /**\\n    * @dev alloes automatic revokation of NFT certificates after expiry duration \\n    * @dev callable by anyone as long as expiry date kicks in\\n    * @notice Emits CertificationRevoked event on successful enterprise revocation\\n    */\\n    function revokeIfExpired(address enterpriseAddress) external {\\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\\n\\n        if (!cert.isCertified) {\\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\\n        }\\n        if (block.timestamp < cert.expiryDate) {\\n            revert CertificationAuthority__CertificationNotExpiredYet();\\n        }\\n\\n        if (cert.tokenId != 0) {\\n            burn(cert.tokenId);\\n            delete _tokenToEnterprise[cert.tokenId];\\n        }\\n\\n        cert.isCertified = false;\\n        emit Events.CertificationRevoked(enterpriseAddress);\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// TRANSFER CONTROL ///////////////////////////\\n    //////////////////////////////////////////////////////////\\n\\n    function _update(\\n        address to,\\n        uint256 tokenId,\\n        address auth\\n    ) internal override(ERC721) returns (address) {\\n        // Block all transfers except minting (to) and burning (address(0))\\n        if (auth != address(0)) {\\n            require(to == address(0), \\\"Certificates are non-transferable\\\");\\n        }\\n        return super._update(to, tokenId, auth);\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// VALIDATION & METADATA //////////////////////\\n    //////////////////////////////////////////////////////////\\n\\n    function isCertificationValid(address enterpriseAddress)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\\n        return cert.isCertified && block.timestamp <= cert.expiryDate;\\n    }\\n\\n    function isCertificateValid(uint256 tokenId) public view returns (bool) {\\n        address enterprise = _tokenToEnterprise[tokenId];\\n        return isCertificationValid(enterprise);\\n    }\\n    \\n    \\n    /**\\n    * @dev updates the metadata URI of the NFT certificate\\n    * @dev Only the `Certifier` can update certification metadata URI\\n    * @param enterpriseAddress The address of the enterprise to be updated\\n    * @param newMetadataURI The new metadata URI of the certificate\\n    * @notice Emits CertificationUpdated event on successful metadata update\\n    */\\n    function updateCertificationMetadata(\\n        address enterpriseAddress,\\n        string calldata newMetadataURI\\n    ) external onlyValidAddress(enterpriseAddress) onlyRole(CERTIFIER_ROLE) {\\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\\n        if (!cert.isCertified) {\\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\\n        }\\n\\n        if (cert.tokenId != 0) {\\n            _setTokenURI(cert.tokenId, newMetadataURI);\\n        }\\n\\n        cert.metadataURI = newMetadataURI;\\n        emit Events.CertificationUpdated(enterpriseAddress, newMetadataURI);\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// GETTERS & OVERRIDES ////////////////////////\\n    //////////////////////////////////////////////////////////\\n\\n    function getCertification(address enterpriseAddress)\\n        public\\n        view\\n        returns (DataTypes.Certification memory)\\n    {\\n        return certifications[enterpriseAddress];\\n    }\\n\\n    function getEnterpriseByTokenId(uint256 tokenId)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return _tokenToEnterprise[tokenId];\\n    }\\n\\n    // ----- Required overrides for multiple inheritance --- //\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override(ERC721, ERC721URIStorage)\\n        returns (string memory)\\n    {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721, ERC721URIStorage, AccessControl)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x164ee8ef3581d2569d9d769b4c38912e3fa51b07b7db5e1a51b4e125ba40b5d6\",\"license\":\"MIT\"},\"contracts/core/RolesManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n\\n/**\\n* @author @0xJonaseb11\\n\\n* @dev manages the roles of the whole ecosystem \\n* @dev Only Super Admin can assign roles\\n* @dev On very high roles, there's DAO voting\\n*/\\n\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { Events } from \\\"../utils/Events.sol\\\";\\nimport { Errors } from \\\"../utils/Errors.sol\\\";\\nimport { DataTypes } from \\\"../utils/DataTypes.sol\\\";\\n\\n\\ncontract RolesManager is AccessControl, Errors {\\n\\n    bytes32 public constant CERTIFIER_ROLE = keccak256(\\\"CERTIFYING_BODY_ROLE\\\");\\n    bytes32 public constant INSPECTOR_ROLE = keccak256(\\\"INSPECTION_MANAGER_ROLE\\\");\\n    bytes32 public constant AUDITOR_ROLE = keccak256(\\\"AUDITOR_ROLE\\\");\\n    bytes32 public constant ENTERPRISE_ROLE = keccak256(\\\"ENTERPRISE_ROLE\\\");\\n    bytes32 public constant CERTIFICATE_FACTORY_ROLE = keccak256(\\\"CERTIFICATE_FACTORY_ROLE\\\");\\n    bytes32 public constant PUBLIC_ROLE = keccak256(\\\"PUBLIC_ROLE\\\");\\n\\n    mapping(address => uint256) public publicRoleExpiry;\\n\\n   // ----- modifiers\\n   modifier onlyValidAddress(address account) {\\n    if (account == address(0)) {\\n        revert InvalidAddress();\\n    }\\n    _;\\n   }\\n\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(CERTIFIER_ROLE,  msg.sender);\\n    }\\n\\n\\n    /** ----------- #claim temporary public role -------------- //\\n    * @dev allows users to claim temporary `PUBLIC` role for `durationInHours` hours on their visit to platform\\n    * @param durationInHours The duration in hours the user will have the `PUBLIC` role\\n    * @notice `durationInHours` must be less than 24 hours\\n    * @notice Emits PublicRoleGranted event on successful claim \\n    */\\n    function claimTemporaryPublicRole(uint256 durationInHours) external {\\n        if (hasPublicRole(msg.sender)) {\\n            revert RolesManager__AlreadyHasRole();\\n        }\\n        if (durationInHours > 0) {\\n            revert RolesManager__InvalidDuration();\\n        }\\n         if (durationInHours > 24 /*hours */) {\\n            revert RolesManager__InvalidDuration();\\n         }\\n        uint256 durationInSeconds = durationInHours * 1 hours;\\n    \\n        _grantRole(PUBLIC_ROLE, msg.sender);\\n        publicRoleExpiry[msg.sender] = block.timestamp + durationInSeconds;\\n\\n        emit Events.PublicRoleGranted(msg.sender, durationInHours);\\n    }\\n\\n    // ------- helper for client ---- //\\n    function getMaxPublicRoleDuration() public pure returns (uint256) {\\n        return 24;\\n    }\\n\\n\\n    /** --------- #  Auto-expiry check (Call periodically) ------- //\\n    * @dev helper to check expiry of `PUBLIC` role\\n    * @param account The account to check for role expiry\\n    * @notice Emits PublicRoleExpired event on expiry\\n    */\\n    function checkExpiryRoles(address account) public {\\n        if (hasPublicRole(account) && publicRoleExpiry[account] < block.timestamp) {\\n            _revokeRole(PUBLIC_ROLE, account);\\n\\n            emit Events.PublicRoleExpired(account);\\n        }\\n    }\\n\\n    /** ---------- # Bulk Role Grant(Auto) ------- //\\n    * @dev Bulk grant roles to accounts\\n    * @param roles The array of roles to grant\\n    * @param accounts The array of accounts to grant roles\\n    * emits BulkRolesGranted event on successful grant\\n    */\\n    function bulkGrantRoles(\\n        bytes32[] calldata roles,\\n        address[] calldata accounts\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (roles.length == 0 || accounts.length == 0) {\\n            revert RolesManager__EmptyArray();\\n        }\\n        if (roles.length != accounts.length) {\\n            revert RolesManager__ArrayLengthMismatch();\\n        }\\n        \\n        for (uint256 i = 0; i < roles.length; i++) {\\n            _grantRole(roles[i], accounts[i]);\\n        }\\n\\n        emit Events.BulkRolesGranted(roles, accounts);\\n    }\\n\\n    /** -------- # Safe Role Transfer ------- //\\n    * @dev Transfers a role from one account to another\\n    * @param role The role to transfer\\n    * @param from The account to transfer the role from\\n    * @param to The account to transfer the role to\\n    * @notice Emits RoleTransferred event on successful transfer\\n    */\\n    function transferRole(\\n        bytes32 role,\\n        address from,\\n        address to  \\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasRole(role, from)) {\\n            revert RolesManager__RoleDoesNotExist();\\n        }\\n        _revokeRole(role, from);\\n        _grantRole(role, to);\\n\\n        emit Events.RoleTransferred(role, from, to);\\n    }\\n\\n    // ---- combined role check ----- //\\n    function getActiveRoles(address account) public view returns (\\n        bool isAdmin,\\n        bool isCertifier,\\n        bool isInspector,\\n        bool isAuditor,\\n        bool isEnterprise,\\n        bool isCertificateFactory,\\n        bool isPublic\\n    ) {\\n        return (\\n            hasRole(DEFAULT_ADMIN_ROLE, account),\\n            hasRole(CERTIFIER_ROLE, account),\\n            hasRole(INSPECTOR_ROLE, account),\\n            hasRole(AUDITOR_ROLE, account),\\n            hasRole(ENTERPRISE_ROLE, account),\\n            hasRole(CERTIFICATE_FACTORY_ROLE, account),\\n            hasRole(PUBLIC_ROLE, account)\\n        );\\n    }\\n    \\n\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n    _grantRole(role, account);\\n}\\n\\n\\n    ////////////////////////////////////////////////\\n    /////// MANAUAL ROLES MANAGEMENT  ////////////////\\n    ////////////////////////////////////////////////\\n    \\n\\n    /////////////////////////////////\\n    ////// ROLE GRANTING ////////////\\n    /////////////////////////////////\\n    \\n    /** ---------# GRANTING ROLES ---------//\\n    * @dev Functions to grant roles to!\\n    * @param account The account to grant the role to\\n    * @notice Emits RoleGranted event on successful grant\\n    */\\n    function grantCertifier(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        grantRole(CERTIFIER_ROLE, account);\\n\\n        emit Events.RoleGranted(CERTIFIER_ROLE, account);\\n\\n    }\\n    \\n    function grantInspector(address account ) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        grantRole(INSPECTOR_ROLE, account);\\n        emit Events.RoleGranted(INSPECTOR_ROLE, account);\\n    }\\n\\n    function grantAuditor(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        grantRole(AUDITOR_ROLE, account);\\n        emit Events.RoleGranted(AUDITOR_ROLE, account);\\n    }\\n\\n    function grantEnterprise(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        grantRole(ENTERPRISE_ROLE, account);\\n        emit Events.RoleGranted(ENTERPRISE_ROLE, account);\\n    }\\n     \\n    function grantCertificateFactory(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        grantRole(CERTIFICATE_FACTORY_ROLE, account);\\n        emit Events.RoleGranted(CERTIFICATE_FACTORY_ROLE, account);\\n    }\\n\\n    function grantPublicRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        grantRole(PUBLIC_ROLE, account);\\n        emit Events.RoleGranted(PUBLIC_ROLE, account);\\n    }\\n\\n\\n    /**\\n    * @dev Public role will be claimed instantly\\n    * On the entry of a user to our platform\\n    * Just clicking `claim public role` and user is assigned role\\n    * @notice I plan to make it a temporary role on every visit to our platform\\n    */\\n\\n    /////////////////////////////////\\n    // ROLE REVOKATION /////////////\\n    ////////////////////////////////\\n    \\n\\n    /** ------------- # REVOKING ROLES ------------- //\\n    * @dev Functions to revoke roles\\n    * @param account The account to revoke the role from\\n    * @notice Emits RoleRevoked event on successful revoke\\n    */\\n    function revokeCertifierRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        revokeRole(CERTIFIER_ROLE, account);\\n        emit Events.RoleRevoked(CERTIFIER_ROLE, account);\\n    }\\n\\n    function revokeInspectorRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        revokeRole(INSPECTOR_ROLE, account);\\n    }\\n\\n    function revokeAuditorRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n    revokeRole(AUDITOR_ROLE, account);\\n    emit Events.RoleRevoked(AUDITOR_ROLE, account);\\n    }\\n\\n    function revokeEnterpriseRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        revokeRole(ENTERPRISE_ROLE, account);\\n        emit Events.RoleRevoked(ENTERPRISE_ROLE, account);\\n    }\\n\\n    function revokeCertificateFactoryRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        revokeRole(CERTIFICATE_FACTORY_ROLE, account);\\n        emit Events.RoleRevoked(CERTIFICATE_FACTORY_ROLE, account);\\n    }\\n    \\n    function revokePublicRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        revokeRole(PUBLIC_ROLE, account);\\n        emit Events.RoleRevoked(PUBLIC_ROLE, account);\\n    }\\n\\n\\n    /////////////////////////////////////////////////\\n    //////// ROLE CHECKS //////////////////\\n    /////////////////////////////////////////////////\\n    \\n   /** --------- # CHECKING ROLES --------- //\\n   * @dev Functions to check if a certain account has the specified role\\n   * @param account The account to check \\n   */\\n    function hasAdminRole(address account) public view returns(bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    function hasCertifierRole(address account) public view returns(bool) { \\n        return hasRole(CERTIFIER_ROLE, account);\\n    }\\n\\n    function hasInspectorRole(address account) public view  returns(bool) {\\n        return hasRole(INSPECTOR_ROLE, account);\\n    }\\n\\n    function hasAuditorRole(address account) public view  returns(bool) {\\n        return hasRole(AUDITOR_ROLE, account);\\n    }\\n\\n    function hasEnterpriseRole(address account) public view  returns(bool) {\\n        return hasRole(ENTERPRISE_ROLE, account);\\n    }\\n\\n    function hasCertificateFactoryRole(address account) public view  returns(bool) {\\n        return hasRole(CERTIFICATE_FACTORY_ROLE, account);\\n    }\\n    \\n    function hasPublicRole(address account) public view  returns(bool) {\\n        return hasRole(PUBLIC_ROLE, account);\\n    }\\n}\",\"keccak256\":\"0xa05e7e551d2a2566e2248a6044cf96d7913b4382bedc4c1920f8149c90b5e1ca\",\"license\":\"MIT\"},\"contracts/modules/CertificateNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n\\n/**\\n* @author @0xJonaseb11\\n* @title CertificateNFT Contract\\n* @dev This contract is used to mint NFT certificates for enterprises\\n* @dev Only the Certifier can mint certificates\\n* @dev Only the Certifier can revoke certificates\\n* @notice It allows integration with  `CertificationAuthority` contract for smooth certifiation mage't\\n*/\\nimport { ERC721URIStorage } from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport { ERC721 } from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { RolesManager } from \\\"../core/RolesManager.sol\\\";\\nimport { Events } from \\\"../utils/Events.sol\\\";\\nimport { DataTypes } from \\\"../utils/DataTypes.sol\\\";\\n\\ncontract CertificateNFT is RolesManager, ERC721URIStorage, Ownable {\\n    RolesManager public rolesManager;\\n    uint256 public nextCertificateId;\\n\\n    mapping(address => uint256) public enterpriseCertificate;\\n    mapping(uint256 => bool) public validCertificates;\\n\\n    constructor(address _rolesManager) ERC721(\\\"Enterprise Certificate\\\", \\\"DIGI-CERT\\\") Ownable(msg.sender){\\n        rolesManager = RolesManager(_rolesManager);\\n    }\\n\\n\\n    /////////////////////////////////////////////\\n    //////// CERTIFICATENFT FUNCTIONS ///////////\\n    /////////////////////////////////////////////\\n    \\n    /**\\n    * @dev Mints a new certificate for an enterprise\\n    * @dev Only the Super Admin can mint a certificate\\n    * @param enterprise The address of the enterprise to mint a certificate for\\n    * @param metadataURI The metadata URI of the certificate\\n    * @notice Emits CertificateMinted event when a certificate is minted\\n    * @return uint256 The certificate ID\\n    */\\n    function mintCertificate(address enterprise, string memory metadataURI /*, uint256 initialCertificateDuration*/) external onlyValidAddress(enterprise) onlyRole(CERTIFIER_ROLE)  returns(uint256) {\\n\\n        if (enterpriseCertificate[enterprise] != 0) {\\n            revert CertificateNFT__EnterpriseAlreadyCertified();\\n        }\\n\\n\\n        uint256 certId = ++nextCertificateId;\\n\\n        _mint(enterprise, certId);\\n        _setTokenURI(certId, metadataURI);\\n\\n        enterpriseCertificate[enterprise] = certId;\\n        validCertificates[certId] = true;\\n        \\n        emit Events.CertificateMinted(certId, enterprise, msg.sender, block.timestamp);\\n\\n        return certId;\\n    }\\n\\n    /////////////////////////////\\n    ////// revoke certificate //\\n    ////////////////////////////\\n\\n    /**\\n    * @dev Revokes a certificate from an enterprise\\n    * @dev Only the Super Admin can revoke a certificate\\n    * @param certId The ID of the certificate to revoke\\n    * @notice Emits CertificateRevoked event on successful certificate revocation\\n    */\\n    function revokeCertificate(uint256 certId) external  onlyRole(CERTIFIER_ROLE) onlyRole(DEFAULT_ADMIN_ROLE)  {\\n        \\n        if (validCertificates[certId] == false) {\\n            revert CertificateNFT__CertificateDoesNotExist();\\n        }\\n        validCertificates[certId] = false;\\n\\n        emit Events.CertificateRevoked(certId, msg.sender, block.timestamp);\\n    }\\n\\n    /////////////////////////////\\n    /// some helpers / getters ///\\n    //////////////////////////////\\n\\n    function isCertificateValid(uint256 certId) external view returns(bool) {\\n        return validCertificates[certId];\\n    }\\n\\n    function getCertificateId(address enterprise) external view onlyValidAddress(enterprise) returns(uint256) {\\n        return enterpriseCertificate[enterprise];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) \\n    public view override(AccessControl, ERC721URIStorage) \\n    returns (bool) {\\n        return \\n        AccessControl.supportsInterface(interfaceId) || \\n        ERC721URIStorage.supportsInterface(interfaceId);\\n    } \\n\\n}    \\n\",\"keccak256\":\"0x5c9bc30b3e5b9f043d994a19e03552ad4790b3bf01222ce1b19ab4064cf9c705\",\"license\":\"MIT\"},\"contracts/modules/EnterpriseRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n\\n/**\\n* @author @0xJonaseb11\\n* @title EnterpriseRegistry Contract\\n* @dev This contract is used to register enterprises to the platform\\n* @dev Only the Super Admin can register enterprises\\n* @dev Only the Super Admin can deregister enterprises\\n* @dev Only the owner of the enterprise can update the metadata URI\\n* @notice It allows integration with  `CertificationAuthority`, `CertificateNFT` and `RolesManager contracts for smooth certification mage't\\n*/\\nimport { DataTypes } from \\\"../utils/DataTypes.sol\\\";\\nimport { Events } from \\\"../utils/Events.sol\\\";\\nimport { RolesManager } from \\\"../core/RolesManager.sol\\\";\\nimport { CertificateNFT } from \\\"../modules/CertificateNFT.sol\\\";\\nimport { CertificationAuthority } from \\\"../core/CertificationAuthority.sol\\\";\\n\\ncontract EnterpriseRegistry is RolesManager {\\n    RolesManager public rolesManager;\\n    CertificateNFT public certificateNFT;\\n    CertificationAuthority public certAuthority;\\n\\n\\n    mapping (address => DataTypes.Enterprise) private enterprises;\\n    address[] public allEnterprises;\\n\\n    constructor(address _rolesManager, address _certNFT, address _certAuthority) {\\n        rolesManager = RolesManager(_rolesManager);\\n        certificateNFT = CertificateNFT(_certNFT);\\n        certAuthority = CertificationAuthority(_certAuthority);\\n\\n\\n    }\\n\\n    modifier onlyEnterprise() {\\n\\n        if (!hasEnterpriseRole(msg.sender)) {\\n            revert RolesManager__NotAuthorizedEnterprise();\\n        }\\n        _;\\n    }\\n\\n\\n    //////////////////////////////////////////////\\n    /////// MINERAL REGISTRY FUNCTIONS ///////////\\n    //////////////////////////////////////////////\\n    \\n    /** \\n    * @dev Registers a new enterprise to the platform\\n    * @dev Automatically creates a certification for the enterprise\\n    * @dev Automatically mints a NFT certificate for the enterprise\\n    * @param _enterpriseAddress The address of the enterprise\\n    * @param _name The name of the enterprise\\n    * @param _industry The industry of the enterprise\\n    * @param _metadataURI The metadata URI(IPFS hash) of the enterprise\\n    * @param _initialCertDuration The duration of the initial certification\\n    * @notice Emits EnterpriseRegistered event when a new enterprise is registered\\n    */\\n    function registerEnterprise(\\n        address _enterpriseAddress,\\n        string calldata _name,\\n        string calldata _industry,\\n        string calldata _metadataURI,\\n        uint256 _initialCertDuration\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\n        if (enterprises[_enterpriseAddress].isRegistered) {\\n            revert EnterpriseRegistry__EnterpriseAlreadyExists();\\n        }\\n\\n        enterprises[_enterpriseAddress] = DataTypes.Enterprise({\\n            enterpriseAddress: _enterpriseAddress,\\n            name: _name,\\n            industry: _industry,\\n            metadataURI: _metadataURI,\\n            isRegistered: true,\\n            registrationDate: block.timestamp,\\n            lastUpdated: block.timestamp,\\n            certificateId: 0\\n        });\\n\\n        // Enable auto-certificatoin in CertificationAuthority contract\\n        certAuthority.certifyEnterprise(_enterpriseAddress, _industry, _metadataURI, _initialCertDuration);\\n\\n        // mint NFT Certificate\\n        uint256 certId = certificateNFT.mintCertificate(_enterpriseAddress, _metadataURI /*, _initialCertDuration*/);\\n        enterprises[_enterpriseAddress].certificateId = certId;\\n\\n        allEnterprises.push(_enterpriseAddress);\\n\\n        emit Events.EnterpriseRegistered(_enterpriseAddress, _name, _industry, _metadataURI, certId);\\n    }\\n    \\n    /** \\n    * @dev Updates the metadata URI of an enterprise\\n    * @dev Only the owner of the enterprise can update the metadata URI\\n    * @param newMetadataURI The new metadata URI(IPFS hash) of the enterprise\\n    * @notice Emits EnterpriseUpdated event when the metadata URI is updated\\n    */\\n    function updateEnterpriseMetadata(string memory newMetadataURI) external onlyEnterprise {\\n        \\n        if (enterprises[msg.sender].isRegistered == false) {\\n            revert EnterpriseRegistry__EnterpriseDoesNotExist();\\n        }\\n        enterprises[msg.sender].metadataURI = newMetadataURI;\\n\\n        emit Events.EnterpriseUpdated(msg.sender, newMetadataURI);\\n    }  \\n\\n    ///////////////////////////////////////////\\n    ///////////   Essential helpers //////////\\n    //////////////////////////////////////////\\n\\n    /**\\n    * @dev Checks if an enterprise is active \\n    * @dev An enterprise is active if it is registered, has a valid certification and has a valid NFT certificate\\n    * @dev Returns true if the enterprise is active\\n    * @param _enterprise The address of the enterprise\\n    * @return bool true if the enterprise is active\\n     */\\n    function isEnterpriseActive(address _enterprise) public view returns(bool) {\\n        return \\n            enterprises[_enterprise].isRegistered &&\\n            certAuthority.isCertificationValid(_enterprise) &&\\n            certificateNFT.isCertificateValid(enterprises[_enterprise].certificateId);\\n    }\\n\\n    /**\\n    * @dev Deregisters an enterprise from the platform\\n    * @dev Only the Super Admin can deregister an enterprise\\n    * @dev Revokes the certification and NFT certificate of the enterprise\\n    * @notice Emits EnterpriseDeregistered event when an enterprise is deregistered\\n    */\\n\\n    function deRegisterEnterprise(address _enterprise) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!enterprises[_enterprise].isRegistered) {\\n            revert EnterpriseRegistry__EnterpriseDoesNotExist();\\n        }\\n            // revoke in all systems\\n            certAuthority.revokeCertification(_enterprise);\\n            certificateNFT.revokeCertificate(enterprises[_enterprise].certificateId);\\n\\n            enterprises[_enterprise].isRegistered = false;\\n\\n            emit Events.EnterpriseDeregistered(_enterprise, block.timestamp);\\n    }\\n\\n\\n    ////////////////////////\\n    ////// getters /////////\\n    ////////////////////////\\n\\n    /// ------ Simple getters approach ---- //\\n     function getEnterprise(address enterpriseAddress) external view onlyValidAddress(enterpriseAddress) returns (DataTypes.Enterprise memory) {\\n        return enterprises[enterpriseAddress];\\n    }\\n\\n    function listEnterprises() external view returns(address[] memory) {\\n        return allEnterprises;\\n    }\\n\\n\\n    function getEnterpriseWithStatus(address _enterprise)\\n    external view\\n    returns(DataTypes.Enterprise memory, bool isActive) {\\n        DataTypes.Enterprise memory ent = enterprises[_enterprise];\\n        return (ent, isEnterpriseActive(_enterprise));\\n    }\\n\\n    // paginated enterprise listing\\n    // --- added pagination for formatted output\\n    /**\\n    * @dev Returns a paginated list of enterprises\\n    * @dev The list is paginated by start and limit\\n    * @param start The start index of the list\\n    * @param limit The number of enterprises to return\\n    * @return address[] The list of enterprises\\n    */\\n    function lisEnterprisesPaginated(uint256 start, uint256 limit) \\n    external view returns(address[] memory) {\\n        \\n        if (start > allEnterprises.length) {\\n            revert EnterpriseRegistry__InvalidStart();\\n        }   uint256 end = start + limit > allEnterprises.length ? allEnterprises.length : start + limit;\\n            address[] memory result = new address[] (end - start);\\n\\n            for (uint256 i = start; i < end; i++) {\\n                result[i - start] = allEnterprises[i];\\n            }\\n            return result;\\n    }\\n\\n}\",\"keccak256\":\"0x105c37014f4ae82368957d2783614d7c392bdd24862d6bde53d639f9e3ec1498\",\"license\":\"MIT\"},\"contracts/utils/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n* @author @0xJonaseb11\\n* @dev This library contains the data types used by the contracts\\n* @dev These structs hold a huge role in maintaining contract states\\n*/\\nlibrary DataTypes {\\n    struct Certification {\\n        string industry;\\n        string metadataURI;\\n        uint256 certifiedAt;\\n        uint256 expiryDate;\\n        bool isCertified;\\n        uint256 tokenId;\\n    }\\n\\n    struct Enterprise {\\n        address enterpriseAddress;\\n        string name;\\n        string industry;\\n        string metadataURI;\\n        bool isRegistered;\\n        uint256 registrationDate;\\n        uint256 lastUpdated;\\n        uint256 certificateId;\\n    }\\n\\n    struct InspectionReport {\\n        address inspector;\\n        address enterprise;\\n        string remarks;\\n        string evidenceURI; // IPFS hash\\n        uint256 inspectedAt;\\n        bool passed;\\n    }\\n\\n    struct NFTCertificate {\\n    address enterprise;\\n    address issuer;\\n    uint256 issuedAt;\\n    uint256 expiresAt;\\n    bool isRevoked;\\n}\\n\\n    \\n}\",\"keccak256\":\"0x5de0214662b52157167449375280c16b3cee9c0c2797528246ac7584208b1bbf\",\"license\":\"MIT\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n* @author @0xJonaseb11\\n* @dev contains the custom errors emitted by the contracts\\n@notice All the contracts inherit this to handle custom errors\\n*/\\n\\ncontract Errors {\\n    error InvalidAddress();\\n\\n    // -------- RolesManager ------------------//\\n    error RolesManager__UnauthorizedToPerformAction();\\n    error RolesManager__NotAuthorizedCertifier();\\n    error RolesManager__NotAuthorizedInspector();\\n    error RolesManager__NotAuthorizedAuditor();\\n    error RolesManager__NotAuthorizedEnterprise();\\n    error RolesManager__NotAuthorizedCertificateFactory();\\n    error RolesManager__NotAuthorizedPublicUser();\\n    error RolesManager__AlreadyHasRole();\\n    error RolesManager__InvalidDuration();\\n    error RolesManager__EmptyArray();\\n    error RolesManager__ArrayLengthMismatch();\\n    error RolesManager__RoleDoesNotExist();\\n\\n    // ------- EnterpriseRegistry --------------//\\n    error EnterpriseRegistry__EnterpriseAlreadyExists();\\n    error EnterpriseRegistry__EnterpriseDoesNotExist();\\n    error EnterpriseRegistry__InvalidStart();\\n\\n    // ------- CertificationAuthority ------- //\\n    error CertificationAuthority__EnterpriseAlreadyCertified();\\n    error CertificationAuthority__EnterpriseNotCertifiedYet();\\n    error CertificationAuthority__CertificationNotExpiredYet();\\n\\n    // -------- CertificateNFT --------- //\\n    error CertificateNFT__EnterpriseAlreadyCertified();\\n    error CertificateNFT__CertificateDoesNotExist();\\n\\n    // -------- InspectionManageer --------- //\\n    error InspectionManager__InspectorAlreadyAssigned();\\n    error InspectionManager__InspectionPeriodExpired();\\n    error InspectionManager__NotAssignedToEnterprise();\\n\\n    // ---------- InspectionReport ----------- //\\n    error InspectionManager__NoReportsAssociatedWithEnterprise();\\n\\n}\",\"keccak256\":\"0x0ba1a339f3010aa26a3f89c0a5ed7cbc990994b35eba633b5771acc028925ffb\",\"license\":\"MIT\"},\"contracts/utils/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n/**\\n* @author @0xJonaseb11\\n* @dev This library contains the events emitted by the contracts\\n* @dev All the contracts inherit this to handle events\\n*/\\n\\nlibrary Events {\\n    event CertificationGranted(address indexed enterprise, string industry, string metadataURI, uint256 expiryDate);\\n    event CertificationRevoked(address indexed enterprise);\\n    event CertificationUpdated(address indexed enterprise, string newMetadataURI);\\n\\n    event EnterpriseRegistered(address indexed enterprise, string name, string industry, string metadataURI, uint256 certificateId);\\n    event EnterpriseUpdated(address indexed enterprise, string newMetadataURI);\\n    event EnterpriseDeregistered(address indexed enterprise, uint256 deregisteredAt);\\n    \\n    event InspectorAssigned(address indexed enterprise, address indexed inspector, uint256 validityPeriod);\\n    event InspectionReportSubmitted(address indexed inspector, address indexed enterprise, bool passed, string remarks, string evidenceURI, uint256 ReportedAt);\\n    \\n    event CertificateMinted(uint256 certificateId, address indexed enterprise, address indexed certifier, uint256 mintedAt);\\n    event CertificateRevoked(uint256 certificateId, address indexed revoker, uint256 timestamp);\\n\\n\\n    event PublicRoleGranted(address indexed user, uint256 duration);\\n    event PublicRoleExpired(address indexed user);\\n    event RoleTransferred(bytes32 indexed role, address from, address to);\\n    event BulkRolesGranted(bytes32[] roles, address[] indexed accounts);\\n    event RoleGranted(bytes32 indexed role, address indexed account);\\n    event RoleRevoked(bytes32 indexed role, address indexed account);\\n\\n}\",\"keccak256\":\"0xd10b55133f532526aae704f4b6a010480de62a9b4e5c3a94dabb4cef6a5fe0c2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002ce138038062002ce183398101604081905262000034916200018d565b62000041600033620000b0565b6200006d7fc41a06b26ced3a23b7bf835a0918ade784f4055ded86d18305f528f47a72605233620000b0565b600280546001600160a01b039485166001600160a01b031991821617909155600380549385169382169390931790925560048054919093169116179055620001d7565b620000bc8282620000c1565b505050565b6000828152602081815260408083206001600160a01b038516845290915281205460ff1662000166576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556200011d3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016200016a565b5060005b92915050565b80516001600160a01b03811681146200018857600080fd5b919050565b600080600060608486031215620001a357600080fd5b620001ae8462000170565b9250620001be6020850162000170565b9150620001ce6040850162000170565b90509250925092565b612afa80620001e76000396000f3fe608060405234801561001057600080fd5b50600436106102f15760003560e01c80637780e9c11161019d578063a3574c5b116100e9578063bd7ca7ba116100a2578063e3a3c5221161007c578063e3a3c5221461071e578063e55b4f9314610733578063f53f5e1e14610746578063fc8102861461075957600080fd5b8063bd7ca7ba146106e5578063c395fcb3146106f8578063d547741f1461070b57600080fd5b8063a3574c5b14610631578063aa52617c14610644578063abaa536f14610657578063b0614db31461066a578063b5617ef7146106be578063b8ad415e146106de57600080fd5b80638d8a6ac81161015657806399eb08d61161013057806399eb08d6146105f05780639fcf431114610603578063a1f3416314610616578063a217fddf1461062957600080fd5b80638d8a6ac8146105b757806391aec72a146105ca57806391d14854146105dd57600080fd5b80637780e9c114610536578063784fee0e146105495780637bff09751461055e5780637e5effa4146105715780638850845f14610584578063889cd2531461059757600080fd5b80633e2515181161025c578063603765281161021557806369d0b517116101ef57806369d0b517146104e65780636bad671a146104fb5780636e1d616e1461050e578063728d4e2f1461052357600080fd5b806360376528146104ab57806361462f0e146104be57806368dd17a5146104d157600080fd5b80633e25151814610437578063456f19fc1461044a57806352ed0cff1461045d57806352f84b721461047257806357c03371146104855780635cb87d261461049857600080fd5b806325d5e87e116102ae57806325d5e87e146103b5578063261191b7146103c85780632d0a9fd3146103db5780632f2ff15d146103fc57806336568abe1461040f5780633ca7c02a1461042257600080fd5b806301ffc9a7146102f65780630244677b1461031e578063035a7122146103335780630443cd2a1461035e5780631e223b2a14610371578063248a9ca314610384575b600080fd5b610309610304366004612162565b61076c565b60405190151581526020015b60405180910390f35b61033161032c3660046121af565b6107a3565b005b6103466103413660046121ca565b61091b565b6040516001600160a01b039091168152602001610315565b61033161036c3660046121af565b610945565b61033161037f3660046121af565b6109c7565b6103a76103923660046121ca565b60009081526020819052604090206001015490565b604051908152602001610315565b6103316103c33660046121af565b610a49565b6103316103d63660046121af565b610acb565b6103ee6103e93660046121af565b610b4d565b6040516103159291906122c4565b61033161040a3660046122e8565b610d88565b61033161041d3660046122e8565b610db3565b6103a7600080516020612a0583398151915281565b6103316104453660046121af565b610deb565b6103316104583660046121af565b610e6d565b610465610eef565b6040516103159190612314565b6103096104803660046121af565b610f51565b6103316104933660046121af565b610f6b565b6103316104a6366004612361565b610fed565b6103316104b93660046121af565b611080565b6103316104cc3660046123e9565b611102565b6103a76000805160206129c583398151915281565b6103a7600080516020612a2583398151915281565b610331610509366004612497565b611215565b6103a7600080516020612a6583398151915281565b610465610531366004612549565b6115b2565b6103316105443660046121ca565b6116d2565b6103a7600080516020612a4583398151915281565b61030961056c3660046121af565b6117b3565b61033161057f3660046121af565b6117cd565b6103096105923660046121af565b61184f565b6105aa6105a53660046121af565b611869565b604051610315919061256b565b6103096105c53660046121af565b611aba565b600354610346906001600160a01b031681565b6103096105eb3660046122e8565b611bda565b600454610346906001600160a01b031681565b610331610611366004612594565b611c03565b6103096106243660046121af565b611cc1565b6103a7600081565b600254610346906001600160a01b031681565b6103316106523660046121af565b611cdb565b6103096106653660046121af565b611d5d565b61067d6106783660046121af565b611d77565b60408051971515885295151560208801529315159486019490945290151560608501521515608084015290151560a0830152151560c082015260e001610315565b6103a76106cc3660046121af565b60016020526000908152604090205481565b60186103a7565b6103316106f33660046121af565b611e30565b6103096107063660046121af565b611e7b565b6103316107193660046122e8565b611e87565b6103a7600080516020612a8583398151915281565b6103316107413660046121af565b611eac565b6103096107543660046121af565b611f2e565b6103316107673660046121af565b611f48565b60006001600160e01b03198216637965db0b60e01b148061079d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006107ae81611fca565b6001600160a01b03821660009081526005602052604090206004015460ff166107ea576040516302bdbd0960e01b815260040160405180910390fd5b6004805460405163b83cc3b360e01b81526001600160a01b038581169382019390935291169063b83cc3b390602401600060405180830381600087803b15801561083357600080fd5b505af1158015610847573d6000803e3d6000fd5b50506003546001600160a01b038581166000908152600560205260409081902060070154905163037aa4bf60e11b81526004810191909152911692506306f5497e9150602401600060405180830381600087803b1580156108a757600080fd5b505af11580156108bb573d6000803e3d6000fd5b505050506001600160a01b038216600081815260056020908152604091829020600401805460ff1916905590514281527faa4851f4db5fea12fcb0c52afc6bc6387f0aa8f3545624fdbd04c9ba85fb651e91015b60405180910390a25050565b6006818154811061092b57600080fd5b6000918252602090912001546001600160a01b0316905081565b806001600160a01b03811661096d5760405163e6c4247b60e01b815260040160405180910390fd5b600061097881611fca565b610990600080516020612a0583398151915284611e87565b6040516001600160a01b03841690600080516020612a0583398151915290600080516020612aa583398151915290600090a3505050565b806001600160a01b0381166109ef5760405163e6c4247b60e01b815260040160405180910390fd5b60006109fa81611fca565b610a126000805160206129c583398151915284610d88565b6040516001600160a01b038416906000805160206129c5833981519152906000805160206129e583398151915290600090a3505050565b610a5281611f2e565b8015610a7557506001600160a01b03811660009081526001602052604090205442115b15610ac857610a92600080516020612a0583398151915282611fd4565b506040516001600160a01b038216907fa6f32bcbc7de829d50e1c9cbc1c5b4dafb4c7a0b8329757aee62a9b394d71c3b90600090a25b50565b806001600160a01b038116610af35760405163e6c4247b60e01b815260040160405180910390fd5b6000610afe81611fca565b610b16600080516020612a4583398151915284611e87565b6040516001600160a01b03841690600080516020612a4583398151915290600080516020612aa583398151915290600090a3505050565b610b55612112565b6001600160a01b038083166000908152600560209081526040808320815161010081019092528054909416815260018401805493948594929390929084019190610b9e90612645565b80601f0160208091040260200160405190810160405280929190818152602001828054610bca90612645565b8015610c175780601f10610bec57610100808354040283529160200191610c17565b820191906000526020600020905b815481529060010190602001808311610bfa57829003601f168201915b50505050508152602001600282018054610c3090612645565b80601f0160208091040260200160405190810160405280929190818152602001828054610c5c90612645565b8015610ca95780601f10610c7e57610100808354040283529160200191610ca9565b820191906000526020600020905b815481529060010190602001808311610c8c57829003601f168201915b50505050508152602001600382018054610cc290612645565b80601f0160208091040260200160405190810160405280929190818152602001828054610cee90612645565b8015610d3b5780601f10610d1057610100808354040283529160200191610d3b565b820191906000526020600020905b815481529060010190602001808311610d1e57829003601f168201915b5050509183525050600482015460ff16151560208201526005820154604082015260068201546060820152600790910154608090910152905080610d7e85611aba565b9250925050915091565b600082815260208190526040902060010154610da381611fca565b610dad8383612047565b50505050565b6001600160a01b0381163314610ddc5760405163334bd91960e11b815260040160405180910390fd5b610de68282611fd4565b505050565b806001600160a01b038116610e135760405163e6c4247b60e01b815260040160405180910390fd5b6000610e1e81611fca565b610e36600080516020612a6583398151915284611e87565b6040516001600160a01b03841690600080516020612a6583398151915290600080516020612aa583398151915290600090a3505050565b806001600160a01b038116610e955760405163e6c4247b60e01b815260040160405180910390fd5b6000610ea081611fca565b610eb8600080516020612a8583398151915284610d88565b6040516001600160a01b03841690600080516020612a85833981519152906000805160206129e583398151915290600090a3505050565b60606006805480602002602001604051908101604052809291908181526020018280548015610f4757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f29575b5050505050905090565b600061079d600080516020612a4583398151915283611bda565b806001600160a01b038116610f935760405163e6c4247b60e01b815260040160405180910390fd5b6000610f9e81611fca565b610fb6600080516020612a0583398151915284610d88565b6040516001600160a01b03841690600080516020612a05833981519152906000805160206129e583398151915290600090a3505050565b6000610ff881611fca565b6110028484611bda565b61101f576040516366783c9d60e11b815260040160405180910390fd5b6110298484611fd4565b506110348483612047565b50604080516001600160a01b0380861682528416602082015285917f274dd4127a55dcb6f6c12ed38fec5007d965d2afffa8b0bc75c3dc8f3f6b2224910160405180910390a250505050565b806001600160a01b0381166110a85760405163e6c4247b60e01b815260040160405180910390fd5b60006110b381611fca565b6110cb600080516020612a2583398151915284610d88565b6040516001600160a01b03841690600080516020612a25833981519152906000805160206129e583398151915290600090a3505050565b600061110d81611fca565b831580611118575081155b1561113657604051637d6eaf9360e01b815260040160405180910390fd5b838214611156576040516390a2f79360e01b815260040160405180910390fd5b60005b848110156111bc576111a986868381811061117657611176612679565b9050602002013585858481811061118f5761118f612679565b90506020020160208101906111a491906121af565b612047565b50806111b4816126a5565b915050611159565b5082826040516111cd9291906126be565b60405180910390207ff4d52c90739c68c4e82d39cfbeee6b6613784bf9b28d2cdb3a02203799cf060686866040516112069291906126fe565b60405180910390a25050505050565b600061122081611fca565b6001600160a01b03891660009081526005602052604090206004015460ff161561125d5760405163994ced1560e01b815260040160405180910390fd5b6040518061010001604052808a6001600160a01b0316815260200189898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f8a0181900481028201810190925288815291810191908990899081908401838280828437600092019190915250505090825250604080516020601f880181900481028201810190925286815291810191908790879081908401838280828437600081840152601f19601f8201169050808301925050505050505081526020016001151581526020014281526020014281526020016000815250600560008b6001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010190816113b99190612785565b50604082015160028201906113ce9082612785565b50606082015160038201906113e39082612785565b5060808201516004828101805460ff19169215159290921790915560a0830151600583015560c0830151600683015560e0909201516007909101558054604051630bcce45b60e01b81526001600160a01b0390911691630bcce45b91611455918d918b918b918b918b918b910161286e565b600060405180830381600087803b15801561146f57600080fd5b505af1158015611483573d6000803e3d6000fd5b5050600354604051630712249f60e01b8152600093506001600160a01b039091169150630712249f906114be908d90899089906004016128ba565b6020604051808303816000875af11580156114dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150191906128e8565b6001600160a01b038b166000818152600560205260408082206007018490556006805460018101825592527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f90910180546001600160a01b0319168317905551919250907fb50e304bc7ed3e883d934fa4433b1f296fa9a8d5631659d4f61cb6581335ee039061159e908c908c908c908c908c908c908a90612901565b60405180910390a250505050505050505050565b6006546060908311156115d857604051634c512b8360e01b815260040160405180910390fd5b6006546000906115e88486612952565b116115fc576115f78385612952565b611600565b6006545b9050600061160e8583612965565b67ffffffffffffffff8111156116265761162661257e565b60405190808252806020026020018201604052801561164f578160200160208202803683370190505b509050845b828110156116c9576006818154811061166f5761166f612679565b6000918252602090912001546001600160a01b03168261168f8884612965565b8151811061169f5761169f612679565b6001600160a01b0390921660209283029190910190910152806116c1816126a5565b915050611654565b50949350505050565b6116db33611f2e565b156116f95760405163510a583360e01b815260040160405180910390fd5b801561171857604051630729422160e41b815260040160405180910390fd5b601881111561173a57604051630729422160e41b815260040160405180910390fd5b600061174882610e10612978565b9050611762600080516020612a0583398151915233612047565b5061176d8142612952565b33600081815260016020526040908190209290925590517fc526cdae63c288ea4504281fe29b0ae3352c8a9ccae61eba8c21cd25a949e0f19061090f9085815260200190565b600061079d600080516020612a2583398151915283611bda565b806001600160a01b0381166117f55760405163e6c4247b60e01b815260040160405180910390fd5b600061180081611fca565b6118186000805160206129c583398151915284611e87565b6040516001600160a01b038416906000805160206129c583398151915290600080516020612aa583398151915290600090a3505050565b600061079d600080516020612a8583398151915283611bda565b611871612112565b816001600160a01b0381166118995760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b038084166000908152600560209081526040918290208251610100810190935280549093168252600183018054929392918401916118dd90612645565b80601f016020809104026020016040519081016040528092919081815260200182805461190990612645565b80156119565780601f1061192b57610100808354040283529160200191611956565b820191906000526020600020905b81548152906001019060200180831161193957829003601f168201915b5050505050815260200160028201805461196f90612645565b80601f016020809104026020016040519081016040528092919081815260200182805461199b90612645565b80156119e85780601f106119bd576101008083540402835291602001916119e8565b820191906000526020600020905b8154815290600101906020018083116119cb57829003601f168201915b50505050508152602001600382018054611a0190612645565b80601f0160208091040260200160405190810160405280929190818152602001828054611a2d90612645565b8015611a7a5780601f10611a4f57610100808354040283529160200191611a7a565b820191906000526020600020905b815481529060010190602001808311611a5d57829003601f168201915b5050509183525050600482015460ff1615156020820152600582015460408201526006820154606082015260079091015460809091015291505b50919050565b6001600160a01b03811660009081526005602052604081206004015460ff168015611b5057506004805460405163261e85cd60e01b81526001600160a01b038581169382019390935291169063261e85cd90602401602060405180830381865afa158015611b2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b50919061298f565b801561079d57506003546001600160a01b03838116600090815260056020526040908190206007015490516352e7209d60e11b8152600481019190915291169063a5ce413a90602401602060405180830381865afa158015611bb6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079d919061298f565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b611c0c33611cc1565b611c29576040516363eea8f360e11b815260040160405180910390fd5b3360009081526005602052604081206004015460ff1615159003611c60576040516302bdbd0960e01b815260040160405180910390fd5b336000908152600560205260409020600301611c7c8282612785565b50336001600160a01b03167f5ac4129413bed9cf9afb0946b31ca2bc15f2e714a7cf6ec2ef4aa6ebdbbc59f982604051611cb691906129b1565b60405180910390a250565b600061079d6000805160206129c583398151915283611bda565b806001600160a01b038116611d035760405163e6c4247b60e01b815260040160405180910390fd5b6000611d0e81611fca565b611d26600080516020612a4583398151915284610d88565b6040516001600160a01b03841690600080516020612a45833981519152906000805160206129e583398151915290600090a3505050565b600061079d600080516020612a6583398151915283611bda565b6000808080808080611d898189611bda565b611da1600080516020612a258339815191528a611bda565b611db9600080516020612a858339815191528b611bda565b611dd1600080516020612a658339815191528c611bda565b611de96000805160206129c58339815191528d611bda565b611e01600080516020612a458339815191528e611bda565b611e19600080516020612a058339815191528f611bda565b959e949d50929b5090995097509550909350915050565b806001600160a01b038116611e585760405163e6c4247b60e01b815260040160405180910390fd5b6000611e6381611fca565b610de6600080516020612a8583398151915284611e87565b600061079d8183611bda565b600082815260208190526040902060010154611ea281611fca565b610dad8383611fd4565b806001600160a01b038116611ed45760405163e6c4247b60e01b815260040160405180910390fd5b6000611edf81611fca565b611ef7600080516020612a6583398151915284610d88565b6040516001600160a01b03841690600080516020612a65833981519152906000805160206129e583398151915290600090a3505050565b600061079d600080516020612a0583398151915283611bda565b806001600160a01b038116611f705760405163e6c4247b60e01b815260040160405180910390fd5b6000611f7b81611fca565b611f93600080516020612a2583398151915284611e87565b6040516001600160a01b03841690600080516020612a2583398151915290600080516020612aa583398151915290600090a3505050565b610ac881336120d1565b6000611fe08383611bda565b1561203f576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a450600161079d565b50600061079d565b60006120538383611bda565b61203f576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556120893390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600161079d565b6120db8282611bda565b61210e5760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440160405180910390fd5b5050565b60405180610100016040528060006001600160a01b031681526020016060815260200160608152602001606081526020016000151581526020016000815260200160008152602001600081525090565b60006020828403121561217457600080fd5b81356001600160e01b03198116811461218c57600080fd5b9392505050565b80356001600160a01b03811681146121aa57600080fd5b919050565b6000602082840312156121c157600080fd5b61218c82612193565b6000602082840312156121dc57600080fd5b5035919050565b6000815180845260005b81811015612209576020818501810151868301820152016121ed565b506000602082860101526020601f19601f83011685010191505092915050565b600061010060018060a01b0383511684526020830151816020860152612251828601826121e3565b9150506040830151848203604086015261226b82826121e3565b9150506060830151848203606086015261228582826121e3565b915050608083015161229b608086018215159052565b5060a083015160a085015260c083015160c085015260e083015160e08501528091505092915050565b6040815260006122d76040830185612229565b905082151560208301529392505050565b600080604083850312156122fb57600080fd5b8235915061230b60208401612193565b90509250929050565b6020808252825182820181905260009190848201906040850190845b818110156123555783516001600160a01b031683529284019291840191600101612330565b50909695505050505050565b60008060006060848603121561237657600080fd5b8335925061238660208501612193565b915061239460408501612193565b90509250925092565b60008083601f8401126123af57600080fd5b50813567ffffffffffffffff8111156123c757600080fd5b6020830191508360208260051b85010111156123e257600080fd5b9250929050565b600080600080604085870312156123ff57600080fd5b843567ffffffffffffffff8082111561241757600080fd5b6124238883890161239d565b9096509450602087013591508082111561243c57600080fd5b506124498782880161239d565b95989497509550505050565b60008083601f84011261246757600080fd5b50813567ffffffffffffffff81111561247f57600080fd5b6020830191508360208285010111156123e257600080fd5b60008060008060008060008060a0898b0312156124b357600080fd5b6124bc89612193565b9750602089013567ffffffffffffffff808211156124d957600080fd5b6124e58c838d01612455565b909950975060408b01359150808211156124fe57600080fd5b61250a8c838d01612455565b909750955060608b013591508082111561252357600080fd5b506125308b828c01612455565b999c989b50969995989497949560800135949350505050565b6000806040838503121561255c57600080fd5b50508035926020909101359150565b60208152600061218c6020830184612229565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156125a657600080fd5b813567ffffffffffffffff808211156125be57600080fd5b818401915084601f8301126125d257600080fd5b8135818111156125e4576125e461257e565b604051601f8201601f19908116603f0116810190838211818310171561260c5761260c61257e565b8160405282815287602084870101111561262557600080fd5b826020860160208301376000928101602001929092525095945050505050565b600181811c9082168061265957607f821691505b602082108103611ab457634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016126b7576126b761268f565b5060010190565b60008184825b858110156126f3576001600160a01b036126dd83612193565b16835260209283019291909101906001016126c4565b509095945050505050565b6020808252810182905260006001600160fb1b0383111561271e57600080fd5b8260051b80856040850137919091016040019392505050565b601f821115610de657600081815260208120601f850160051c8101602086101561275e5750805b601f850160051c820191505b8181101561277d5782815560010161276a565b505050505050565b815167ffffffffffffffff81111561279f5761279f61257e565b6127b3816127ad8454612645565b84612737565b602080601f8311600181146127e857600084156127d05750858301515b600019600386901b1c1916600185901b17855561277d565b600085815260208120601f198616915b82811015612817578886015182559484019460019091019084016127f8565b50858210156128355787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b03871681526080602082018190526000906128939083018789612845565b82810360408401526128a6818688612845565b915050826060830152979650505050505050565b6001600160a01b03841681526040602082018190526000906128df9083018486612845565b95945050505050565b6000602082840312156128fa57600080fd5b5051919050565b60808152600061291560808301898b612845565b828103602084015261292881888a612845565b9050828103604084015261293d818688612845565b91505082606083015298975050505050505050565b8082018082111561079d5761079d61268f565b8181038181111561079d5761079d61268f565b808202811582820484141761079d5761079d61268f565b6000602082840312156129a157600080fd5b8151801515811461218c57600080fd5b60208152600061218c60208301846121e356fe920994fc3bfe282f3f20cdccf1b7c5e46c63d963e822d98efff90abd41c12e212ae6a113c0ed5b78a53413ffbb7679881f11145ccfba4fb92e863dfcd5a1d2f3ee244ef9da0b2f89a74b208ea9fe1a639ebdf634027d9e1f092b58c39954fa37c41a06b26ced3a23b7bf835a0918ade784f4055ded86d18305f528f47a726052aa0ec51d0bf03ce5511c9ffc9de2b423d73d1faacd808abf2ac89ccea8a3ecf259a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f506fa31d7a92d9fa9a8898ac41d86ee9b13863605a361c85ae5d6010d5de4f280155aaafb6329a2098580462df33ec4b7441b19729b9601c5fc17ae1cf99a8a52a2646970667358221220473eb558ea054b763bd15ae365ba95eb2f9888987943e0bd7773dbe840a1912c64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102f15760003560e01c80637780e9c11161019d578063a3574c5b116100e9578063bd7ca7ba116100a2578063e3a3c5221161007c578063e3a3c5221461071e578063e55b4f9314610733578063f53f5e1e14610746578063fc8102861461075957600080fd5b8063bd7ca7ba146106e5578063c395fcb3146106f8578063d547741f1461070b57600080fd5b8063a3574c5b14610631578063aa52617c14610644578063abaa536f14610657578063b0614db31461066a578063b5617ef7146106be578063b8ad415e146106de57600080fd5b80638d8a6ac81161015657806399eb08d61161013057806399eb08d6146105f05780639fcf431114610603578063a1f3416314610616578063a217fddf1461062957600080fd5b80638d8a6ac8146105b757806391aec72a146105ca57806391d14854146105dd57600080fd5b80637780e9c114610536578063784fee0e146105495780637bff09751461055e5780637e5effa4146105715780638850845f14610584578063889cd2531461059757600080fd5b80633e2515181161025c578063603765281161021557806369d0b517116101ef57806369d0b517146104e65780636bad671a146104fb5780636e1d616e1461050e578063728d4e2f1461052357600080fd5b806360376528146104ab57806361462f0e146104be57806368dd17a5146104d157600080fd5b80633e25151814610437578063456f19fc1461044a57806352ed0cff1461045d57806352f84b721461047257806357c03371146104855780635cb87d261461049857600080fd5b806325d5e87e116102ae57806325d5e87e146103b5578063261191b7146103c85780632d0a9fd3146103db5780632f2ff15d146103fc57806336568abe1461040f5780633ca7c02a1461042257600080fd5b806301ffc9a7146102f65780630244677b1461031e578063035a7122146103335780630443cd2a1461035e5780631e223b2a14610371578063248a9ca314610384575b600080fd5b610309610304366004612162565b61076c565b60405190151581526020015b60405180910390f35b61033161032c3660046121af565b6107a3565b005b6103466103413660046121ca565b61091b565b6040516001600160a01b039091168152602001610315565b61033161036c3660046121af565b610945565b61033161037f3660046121af565b6109c7565b6103a76103923660046121ca565b60009081526020819052604090206001015490565b604051908152602001610315565b6103316103c33660046121af565b610a49565b6103316103d63660046121af565b610acb565b6103ee6103e93660046121af565b610b4d565b6040516103159291906122c4565b61033161040a3660046122e8565b610d88565b61033161041d3660046122e8565b610db3565b6103a7600080516020612a0583398151915281565b6103316104453660046121af565b610deb565b6103316104583660046121af565b610e6d565b610465610eef565b6040516103159190612314565b6103096104803660046121af565b610f51565b6103316104933660046121af565b610f6b565b6103316104a6366004612361565b610fed565b6103316104b93660046121af565b611080565b6103316104cc3660046123e9565b611102565b6103a76000805160206129c583398151915281565b6103a7600080516020612a2583398151915281565b610331610509366004612497565b611215565b6103a7600080516020612a6583398151915281565b610465610531366004612549565b6115b2565b6103316105443660046121ca565b6116d2565b6103a7600080516020612a4583398151915281565b61030961056c3660046121af565b6117b3565b61033161057f3660046121af565b6117cd565b6103096105923660046121af565b61184f565b6105aa6105a53660046121af565b611869565b604051610315919061256b565b6103096105c53660046121af565b611aba565b600354610346906001600160a01b031681565b6103096105eb3660046122e8565b611bda565b600454610346906001600160a01b031681565b610331610611366004612594565b611c03565b6103096106243660046121af565b611cc1565b6103a7600081565b600254610346906001600160a01b031681565b6103316106523660046121af565b611cdb565b6103096106653660046121af565b611d5d565b61067d6106783660046121af565b611d77565b60408051971515885295151560208801529315159486019490945290151560608501521515608084015290151560a0830152151560c082015260e001610315565b6103a76106cc3660046121af565b60016020526000908152604090205481565b60186103a7565b6103316106f33660046121af565b611e30565b6103096107063660046121af565b611e7b565b6103316107193660046122e8565b611e87565b6103a7600080516020612a8583398151915281565b6103316107413660046121af565b611eac565b6103096107543660046121af565b611f2e565b6103316107673660046121af565b611f48565b60006001600160e01b03198216637965db0b60e01b148061079d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006107ae81611fca565b6001600160a01b03821660009081526005602052604090206004015460ff166107ea576040516302bdbd0960e01b815260040160405180910390fd5b6004805460405163b83cc3b360e01b81526001600160a01b038581169382019390935291169063b83cc3b390602401600060405180830381600087803b15801561083357600080fd5b505af1158015610847573d6000803e3d6000fd5b50506003546001600160a01b038581166000908152600560205260409081902060070154905163037aa4bf60e11b81526004810191909152911692506306f5497e9150602401600060405180830381600087803b1580156108a757600080fd5b505af11580156108bb573d6000803e3d6000fd5b505050506001600160a01b038216600081815260056020908152604091829020600401805460ff1916905590514281527faa4851f4db5fea12fcb0c52afc6bc6387f0aa8f3545624fdbd04c9ba85fb651e91015b60405180910390a25050565b6006818154811061092b57600080fd5b6000918252602090912001546001600160a01b0316905081565b806001600160a01b03811661096d5760405163e6c4247b60e01b815260040160405180910390fd5b600061097881611fca565b610990600080516020612a0583398151915284611e87565b6040516001600160a01b03841690600080516020612a0583398151915290600080516020612aa583398151915290600090a3505050565b806001600160a01b0381166109ef5760405163e6c4247b60e01b815260040160405180910390fd5b60006109fa81611fca565b610a126000805160206129c583398151915284610d88565b6040516001600160a01b038416906000805160206129c5833981519152906000805160206129e583398151915290600090a3505050565b610a5281611f2e565b8015610a7557506001600160a01b03811660009081526001602052604090205442115b15610ac857610a92600080516020612a0583398151915282611fd4565b506040516001600160a01b038216907fa6f32bcbc7de829d50e1c9cbc1c5b4dafb4c7a0b8329757aee62a9b394d71c3b90600090a25b50565b806001600160a01b038116610af35760405163e6c4247b60e01b815260040160405180910390fd5b6000610afe81611fca565b610b16600080516020612a4583398151915284611e87565b6040516001600160a01b03841690600080516020612a4583398151915290600080516020612aa583398151915290600090a3505050565b610b55612112565b6001600160a01b038083166000908152600560209081526040808320815161010081019092528054909416815260018401805493948594929390929084019190610b9e90612645565b80601f0160208091040260200160405190810160405280929190818152602001828054610bca90612645565b8015610c175780601f10610bec57610100808354040283529160200191610c17565b820191906000526020600020905b815481529060010190602001808311610bfa57829003601f168201915b50505050508152602001600282018054610c3090612645565b80601f0160208091040260200160405190810160405280929190818152602001828054610c5c90612645565b8015610ca95780601f10610c7e57610100808354040283529160200191610ca9565b820191906000526020600020905b815481529060010190602001808311610c8c57829003601f168201915b50505050508152602001600382018054610cc290612645565b80601f0160208091040260200160405190810160405280929190818152602001828054610cee90612645565b8015610d3b5780601f10610d1057610100808354040283529160200191610d3b565b820191906000526020600020905b815481529060010190602001808311610d1e57829003601f168201915b5050509183525050600482015460ff16151560208201526005820154604082015260068201546060820152600790910154608090910152905080610d7e85611aba565b9250925050915091565b600082815260208190526040902060010154610da381611fca565b610dad8383612047565b50505050565b6001600160a01b0381163314610ddc5760405163334bd91960e11b815260040160405180910390fd5b610de68282611fd4565b505050565b806001600160a01b038116610e135760405163e6c4247b60e01b815260040160405180910390fd5b6000610e1e81611fca565b610e36600080516020612a6583398151915284611e87565b6040516001600160a01b03841690600080516020612a6583398151915290600080516020612aa583398151915290600090a3505050565b806001600160a01b038116610e955760405163e6c4247b60e01b815260040160405180910390fd5b6000610ea081611fca565b610eb8600080516020612a8583398151915284610d88565b6040516001600160a01b03841690600080516020612a85833981519152906000805160206129e583398151915290600090a3505050565b60606006805480602002602001604051908101604052809291908181526020018280548015610f4757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f29575b5050505050905090565b600061079d600080516020612a4583398151915283611bda565b806001600160a01b038116610f935760405163e6c4247b60e01b815260040160405180910390fd5b6000610f9e81611fca565b610fb6600080516020612a0583398151915284610d88565b6040516001600160a01b03841690600080516020612a05833981519152906000805160206129e583398151915290600090a3505050565b6000610ff881611fca565b6110028484611bda565b61101f576040516366783c9d60e11b815260040160405180910390fd5b6110298484611fd4565b506110348483612047565b50604080516001600160a01b0380861682528416602082015285917f274dd4127a55dcb6f6c12ed38fec5007d965d2afffa8b0bc75c3dc8f3f6b2224910160405180910390a250505050565b806001600160a01b0381166110a85760405163e6c4247b60e01b815260040160405180910390fd5b60006110b381611fca565b6110cb600080516020612a2583398151915284610d88565b6040516001600160a01b03841690600080516020612a25833981519152906000805160206129e583398151915290600090a3505050565b600061110d81611fca565b831580611118575081155b1561113657604051637d6eaf9360e01b815260040160405180910390fd5b838214611156576040516390a2f79360e01b815260040160405180910390fd5b60005b848110156111bc576111a986868381811061117657611176612679565b9050602002013585858481811061118f5761118f612679565b90506020020160208101906111a491906121af565b612047565b50806111b4816126a5565b915050611159565b5082826040516111cd9291906126be565b60405180910390207ff4d52c90739c68c4e82d39cfbeee6b6613784bf9b28d2cdb3a02203799cf060686866040516112069291906126fe565b60405180910390a25050505050565b600061122081611fca565b6001600160a01b03891660009081526005602052604090206004015460ff161561125d5760405163994ced1560e01b815260040160405180910390fd5b6040518061010001604052808a6001600160a01b0316815260200189898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f8a0181900481028201810190925288815291810191908990899081908401838280828437600092019190915250505090825250604080516020601f880181900481028201810190925286815291810191908790879081908401838280828437600081840152601f19601f8201169050808301925050505050505081526020016001151581526020014281526020014281526020016000815250600560008b6001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010190816113b99190612785565b50604082015160028201906113ce9082612785565b50606082015160038201906113e39082612785565b5060808201516004828101805460ff19169215159290921790915560a0830151600583015560c0830151600683015560e0909201516007909101558054604051630bcce45b60e01b81526001600160a01b0390911691630bcce45b91611455918d918b918b918b918b918b910161286e565b600060405180830381600087803b15801561146f57600080fd5b505af1158015611483573d6000803e3d6000fd5b5050600354604051630712249f60e01b8152600093506001600160a01b039091169150630712249f906114be908d90899089906004016128ba565b6020604051808303816000875af11580156114dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150191906128e8565b6001600160a01b038b166000818152600560205260408082206007018490556006805460018101825592527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f90910180546001600160a01b0319168317905551919250907fb50e304bc7ed3e883d934fa4433b1f296fa9a8d5631659d4f61cb6581335ee039061159e908c908c908c908c908c908c908a90612901565b60405180910390a250505050505050505050565b6006546060908311156115d857604051634c512b8360e01b815260040160405180910390fd5b6006546000906115e88486612952565b116115fc576115f78385612952565b611600565b6006545b9050600061160e8583612965565b67ffffffffffffffff8111156116265761162661257e565b60405190808252806020026020018201604052801561164f578160200160208202803683370190505b509050845b828110156116c9576006818154811061166f5761166f612679565b6000918252602090912001546001600160a01b03168261168f8884612965565b8151811061169f5761169f612679565b6001600160a01b0390921660209283029190910190910152806116c1816126a5565b915050611654565b50949350505050565b6116db33611f2e565b156116f95760405163510a583360e01b815260040160405180910390fd5b801561171857604051630729422160e41b815260040160405180910390fd5b601881111561173a57604051630729422160e41b815260040160405180910390fd5b600061174882610e10612978565b9050611762600080516020612a0583398151915233612047565b5061176d8142612952565b33600081815260016020526040908190209290925590517fc526cdae63c288ea4504281fe29b0ae3352c8a9ccae61eba8c21cd25a949e0f19061090f9085815260200190565b600061079d600080516020612a2583398151915283611bda565b806001600160a01b0381166117f55760405163e6c4247b60e01b815260040160405180910390fd5b600061180081611fca565b6118186000805160206129c583398151915284611e87565b6040516001600160a01b038416906000805160206129c583398151915290600080516020612aa583398151915290600090a3505050565b600061079d600080516020612a8583398151915283611bda565b611871612112565b816001600160a01b0381166118995760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b038084166000908152600560209081526040918290208251610100810190935280549093168252600183018054929392918401916118dd90612645565b80601f016020809104026020016040519081016040528092919081815260200182805461190990612645565b80156119565780601f1061192b57610100808354040283529160200191611956565b820191906000526020600020905b81548152906001019060200180831161193957829003601f168201915b5050505050815260200160028201805461196f90612645565b80601f016020809104026020016040519081016040528092919081815260200182805461199b90612645565b80156119e85780601f106119bd576101008083540402835291602001916119e8565b820191906000526020600020905b8154815290600101906020018083116119cb57829003601f168201915b50505050508152602001600382018054611a0190612645565b80601f0160208091040260200160405190810160405280929190818152602001828054611a2d90612645565b8015611a7a5780601f10611a4f57610100808354040283529160200191611a7a565b820191906000526020600020905b815481529060010190602001808311611a5d57829003601f168201915b5050509183525050600482015460ff1615156020820152600582015460408201526006820154606082015260079091015460809091015291505b50919050565b6001600160a01b03811660009081526005602052604081206004015460ff168015611b5057506004805460405163261e85cd60e01b81526001600160a01b038581169382019390935291169063261e85cd90602401602060405180830381865afa158015611b2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b50919061298f565b801561079d57506003546001600160a01b03838116600090815260056020526040908190206007015490516352e7209d60e11b8152600481019190915291169063a5ce413a90602401602060405180830381865afa158015611bb6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079d919061298f565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b611c0c33611cc1565b611c29576040516363eea8f360e11b815260040160405180910390fd5b3360009081526005602052604081206004015460ff1615159003611c60576040516302bdbd0960e01b815260040160405180910390fd5b336000908152600560205260409020600301611c7c8282612785565b50336001600160a01b03167f5ac4129413bed9cf9afb0946b31ca2bc15f2e714a7cf6ec2ef4aa6ebdbbc59f982604051611cb691906129b1565b60405180910390a250565b600061079d6000805160206129c583398151915283611bda565b806001600160a01b038116611d035760405163e6c4247b60e01b815260040160405180910390fd5b6000611d0e81611fca565b611d26600080516020612a4583398151915284610d88565b6040516001600160a01b03841690600080516020612a45833981519152906000805160206129e583398151915290600090a3505050565b600061079d600080516020612a6583398151915283611bda565b6000808080808080611d898189611bda565b611da1600080516020612a258339815191528a611bda565b611db9600080516020612a858339815191528b611bda565b611dd1600080516020612a658339815191528c611bda565b611de96000805160206129c58339815191528d611bda565b611e01600080516020612a458339815191528e611bda565b611e19600080516020612a058339815191528f611bda565b959e949d50929b5090995097509550909350915050565b806001600160a01b038116611e585760405163e6c4247b60e01b815260040160405180910390fd5b6000611e6381611fca565b610de6600080516020612a8583398151915284611e87565b600061079d8183611bda565b600082815260208190526040902060010154611ea281611fca565b610dad8383611fd4565b806001600160a01b038116611ed45760405163e6c4247b60e01b815260040160405180910390fd5b6000611edf81611fca565b611ef7600080516020612a6583398151915284610d88565b6040516001600160a01b03841690600080516020612a65833981519152906000805160206129e583398151915290600090a3505050565b600061079d600080516020612a0583398151915283611bda565b806001600160a01b038116611f705760405163e6c4247b60e01b815260040160405180910390fd5b6000611f7b81611fca565b611f93600080516020612a2583398151915284611e87565b6040516001600160a01b03841690600080516020612a2583398151915290600080516020612aa583398151915290600090a3505050565b610ac881336120d1565b6000611fe08383611bda565b1561203f576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a450600161079d565b50600061079d565b60006120538383611bda565b61203f576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556120893390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600161079d565b6120db8282611bda565b61210e5760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440160405180910390fd5b5050565b60405180610100016040528060006001600160a01b031681526020016060815260200160608152602001606081526020016000151581526020016000815260200160008152602001600081525090565b60006020828403121561217457600080fd5b81356001600160e01b03198116811461218c57600080fd5b9392505050565b80356001600160a01b03811681146121aa57600080fd5b919050565b6000602082840312156121c157600080fd5b61218c82612193565b6000602082840312156121dc57600080fd5b5035919050565b6000815180845260005b81811015612209576020818501810151868301820152016121ed565b506000602082860101526020601f19601f83011685010191505092915050565b600061010060018060a01b0383511684526020830151816020860152612251828601826121e3565b9150506040830151848203604086015261226b82826121e3565b9150506060830151848203606086015261228582826121e3565b915050608083015161229b608086018215159052565b5060a083015160a085015260c083015160c085015260e083015160e08501528091505092915050565b6040815260006122d76040830185612229565b905082151560208301529392505050565b600080604083850312156122fb57600080fd5b8235915061230b60208401612193565b90509250929050565b6020808252825182820181905260009190848201906040850190845b818110156123555783516001600160a01b031683529284019291840191600101612330565b50909695505050505050565b60008060006060848603121561237657600080fd5b8335925061238660208501612193565b915061239460408501612193565b90509250925092565b60008083601f8401126123af57600080fd5b50813567ffffffffffffffff8111156123c757600080fd5b6020830191508360208260051b85010111156123e257600080fd5b9250929050565b600080600080604085870312156123ff57600080fd5b843567ffffffffffffffff8082111561241757600080fd5b6124238883890161239d565b9096509450602087013591508082111561243c57600080fd5b506124498782880161239d565b95989497509550505050565b60008083601f84011261246757600080fd5b50813567ffffffffffffffff81111561247f57600080fd5b6020830191508360208285010111156123e257600080fd5b60008060008060008060008060a0898b0312156124b357600080fd5b6124bc89612193565b9750602089013567ffffffffffffffff808211156124d957600080fd5b6124e58c838d01612455565b909950975060408b01359150808211156124fe57600080fd5b61250a8c838d01612455565b909750955060608b013591508082111561252357600080fd5b506125308b828c01612455565b999c989b50969995989497949560800135949350505050565b6000806040838503121561255c57600080fd5b50508035926020909101359150565b60208152600061218c6020830184612229565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156125a657600080fd5b813567ffffffffffffffff808211156125be57600080fd5b818401915084601f8301126125d257600080fd5b8135818111156125e4576125e461257e565b604051601f8201601f19908116603f0116810190838211818310171561260c5761260c61257e565b8160405282815287602084870101111561262557600080fd5b826020860160208301376000928101602001929092525095945050505050565b600181811c9082168061265957607f821691505b602082108103611ab457634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016126b7576126b761268f565b5060010190565b60008184825b858110156126f3576001600160a01b036126dd83612193565b16835260209283019291909101906001016126c4565b509095945050505050565b6020808252810182905260006001600160fb1b0383111561271e57600080fd5b8260051b80856040850137919091016040019392505050565b601f821115610de657600081815260208120601f850160051c8101602086101561275e5750805b601f850160051c820191505b8181101561277d5782815560010161276a565b505050505050565b815167ffffffffffffffff81111561279f5761279f61257e565b6127b3816127ad8454612645565b84612737565b602080601f8311600181146127e857600084156127d05750858301515b600019600386901b1c1916600185901b17855561277d565b600085815260208120601f198616915b82811015612817578886015182559484019460019091019084016127f8565b50858210156128355787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b03871681526080602082018190526000906128939083018789612845565b82810360408401526128a6818688612845565b915050826060830152979650505050505050565b6001600160a01b03841681526040602082018190526000906128df9083018486612845565b95945050505050565b6000602082840312156128fa57600080fd5b5051919050565b60808152600061291560808301898b612845565b828103602084015261292881888a612845565b9050828103604084015261293d818688612845565b91505082606083015298975050505050505050565b8082018082111561079d5761079d61268f565b8181038181111561079d5761079d61268f565b808202811582820484141761079d5761079d61268f565b6000602082840312156129a157600080fd5b8151801515811461218c57600080fd5b60208152600061218c60208301846121e356fe920994fc3bfe282f3f20cdccf1b7c5e46c63d963e822d98efff90abd41c12e212ae6a113c0ed5b78a53413ffbb7679881f11145ccfba4fb92e863dfcd5a1d2f3ee244ef9da0b2f89a74b208ea9fe1a639ebdf634027d9e1f092b58c39954fa37c41a06b26ced3a23b7bf835a0918ade784f4055ded86d18305f528f47a726052aa0ec51d0bf03ce5511c9ffc9de2b423d73d1faacd808abf2ac89ccea8a3ecf259a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f506fa31d7a92d9fa9a8898ac41d86ee9b13863605a361c85ae5d6010d5de4f280155aaafb6329a2098580462df33ec4b7441b19729b9601c5fc17ae1cf99a8a52a2646970667358221220473eb558ea054b763bd15ae365ba95eb2f9888987943e0bd7773dbe840a1912c64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "bulkGrantRoles(bytes32[],address[])": {
        "details": "Bulk grant roles to accounts",
        "params": {
          "accounts": "The array of accounts to grant roles emits BulkRolesGranted event on successful grant",
          "roles": "The array of roles to grant"
        }
      },
      "checkExpiryRoles(address)": {
        "details": "helper to check expiry of `PUBLIC` role",
        "params": {
          "account": "The account to check for role expiry"
        }
      },
      "claimTemporaryPublicRole(uint256)": {
        "details": "allows users to claim temporary `PUBLIC` role for `durationInHours` hours on their visit to platform",
        "params": {
          "durationInHours": "The duration in hours the user will have the `PUBLIC` role"
        }
      },
      "deRegisterEnterprise(address)": {
        "details": "Deregisters an enterprise from the platformOnly the Super Admin can deregister an enterpriseRevokes the certification and NFT certificate of the enterprise"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantCertifier(address)": {
        "details": "Functions to grant roles to!",
        "params": {
          "account": "The account to grant the role to"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasAdminRole(address)": {
        "details": "Functions to check if a certain account has the specified role",
        "params": {
          "account": "The account to check "
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isEnterpriseActive(address)": {
        "details": "Checks if an enterprise is active An enterprise is active if it is registered, has a valid certification and has a valid NFT certificateReturns true if the enterprise is active",
        "params": {
          "_enterprise": "The address of the enterprise"
        },
        "returns": {
          "_0": "bool true if the enterprise is active"
        }
      },
      "lisEnterprisesPaginated(uint256,uint256)": {
        "details": "Returns a paginated list of enterprisesThe list is paginated by start and limit",
        "params": {
          "limit": "The number of enterprises to return",
          "start": "The start index of the list"
        },
        "returns": {
          "_0": "address[] The list of enterprises"
        }
      },
      "registerEnterprise(address,string,string,string,uint256)": {
        "details": "Registers a new enterprise to the platformAutomatically creates a certification for the enterpriseAutomatically mints a NFT certificate for the enterprise",
        "params": {
          "_enterpriseAddress": "The address of the enterprise",
          "_industry": "The industry of the enterprise",
          "_initialCertDuration": "The duration of the initial certification",
          "_metadataURI": "The metadata URI(IPFS hash) of the enterprise",
          "_name": "The name of the enterprise"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeCertifierRole(address)": {
        "details": "Functions to revoke roles",
        "params": {
          "account": "The account to revoke the role from"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferRole(bytes32,address,address)": {
        "details": "Transfers a role from one account to another",
        "params": {
          "from": "The account to transfer the role from",
          "role": "The role to transfer",
          "to": "The account to transfer the role to"
        }
      },
      "updateEnterpriseMetadata(string)": {
        "details": "Updates the metadata URI of an enterpriseOnly the owner of the enterprise can update the metadata URI",
        "params": {
          "newMetadataURI": "The new metadata URI(IPFS hash) of the enterprise"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bulkGrantRoles(bytes32[],address[])": {
        "notice": "---------- # Bulk Role Grant(Auto) ------- //"
      },
      "checkExpiryRoles(address)": {
        "notice": "--------- #  Auto-expiry check (Call periodically) ------- //Emits PublicRoleExpired event on expiry"
      },
      "claimTemporaryPublicRole(uint256)": {
        "notice": "----------- #claim temporary public role -------------- //`durationInHours` must be less than 24 hoursEmits PublicRoleGranted event on successful claim "
      },
      "deRegisterEnterprise(address)": {
        "notice": "Emits EnterpriseDeregistered event when an enterprise is deregistered"
      },
      "getEnterprise(address)": {
        "notice": "------ Simple getters approach ---- //"
      },
      "grantCertifier(address)": {
        "notice": "---------# GRANTING ROLES ---------//Emits RoleGranted event on successful grant"
      },
      "hasAdminRole(address)": {
        "notice": "--------- # CHECKING ROLES --------- //"
      },
      "registerEnterprise(address,string,string,string,uint256)": {
        "notice": "Emits EnterpriseRegistered event when a new enterprise is registered"
      },
      "revokeCertifierRole(address)": {
        "notice": "------------- # REVOKING ROLES ------------- //Emits RoleRevoked event on successful revoke"
      },
      "transferRole(bytes32,address,address)": {
        "notice": "-------- # Safe Role Transfer ------- //Emits RoleTransferred event on successful transfer"
      },
      "updateEnterpriseMetadata(string)": {
        "notice": "Emits EnterpriseUpdated event when the metadata URI is updated"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/modules/EnterpriseRegistry.sol:EnterpriseRegistry",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 4015,
        "contract": "contracts/modules/EnterpriseRegistry.sol:EnterpriseRegistry",
        "label": "publicRoleExpiry",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5039,
        "contract": "contracts/modules/EnterpriseRegistry.sol:EnterpriseRegistry",
        "label": "rolesManager",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(RolesManager)4696"
      },
      {
        "astId": 5042,
        "contract": "contracts/modules/EnterpriseRegistry.sol:EnterpriseRegistry",
        "label": "certificateNFT",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(CertificateNFT)5022"
      },
      {
        "astId": 5045,
        "contract": "contracts/modules/EnterpriseRegistry.sol:EnterpriseRegistry",
        "label": "certAuthority",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(CertificationAuthority)3967"
      },
      {
        "astId": 5050,
        "contract": "contracts/modules/EnterpriseRegistry.sol:EnterpriseRegistry",
        "label": "enterprises",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Enterprise)5952_storage)"
      },
      {
        "astId": 5053,
        "contract": "contracts/modules/EnterpriseRegistry.sol:EnterpriseRegistry",
        "label": "allEnterprises",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(CertificateNFT)5022": {
        "encoding": "inplace",
        "label": "contract CertificateNFT",
        "numberOfBytes": "20"
      },
      "t_contract(CertificationAuthority)3967": {
        "encoding": "inplace",
        "label": "contract CertificationAuthority",
        "numberOfBytes": "20"
      },
      "t_contract(RolesManager)4696": {
        "encoding": "inplace",
        "label": "contract RolesManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Enterprise)5952_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DataTypes.Enterprise)",
        "numberOfBytes": "32",
        "value": "t_struct(Enterprise)5952_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Enterprise)5952_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.Enterprise",
        "members": [
          {
            "astId": 5937,
            "contract": "contracts/modules/EnterpriseRegistry.sol:EnterpriseRegistry",
            "label": "enterpriseAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5939,
            "contract": "contracts/modules/EnterpriseRegistry.sol:EnterpriseRegistry",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 5941,
            "contract": "contracts/modules/EnterpriseRegistry.sol:EnterpriseRegistry",
            "label": "industry",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 5943,
            "contract": "contracts/modules/EnterpriseRegistry.sol:EnterpriseRegistry",
            "label": "metadataURI",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 5945,
            "contract": "contracts/modules/EnterpriseRegistry.sol:EnterpriseRegistry",
            "label": "isRegistered",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 5947,
            "contract": "contracts/modules/EnterpriseRegistry.sol:EnterpriseRegistry",
            "label": "registrationDate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5949,
            "contract": "contracts/modules/EnterpriseRegistry.sol:EnterpriseRegistry",
            "label": "lastUpdated",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 5951,
            "contract": "contracts/modules/EnterpriseRegistry.sol:EnterpriseRegistry",
            "label": "certificateId",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/modules/EnterpriseRegistry.sol:EnterpriseRegistry",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/modules/EnterpriseRegistry.sol:EnterpriseRegistry",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}