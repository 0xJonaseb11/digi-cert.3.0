{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC4906.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\nimport {IERC721} from \"./IERC721.sol\";\n\n/// @title EIP-721 Metadata Update Extension\ninterface IERC4906 is IERC165, IERC721 {\n    /// @dev This event emits when the metadata of a token is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFT.\n    event MetadataUpdate(uint256 _tokenId);\n\n    /// @dev This event emits when the metadata of a range of tokens is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFTs.\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../token/ERC721/IERC721.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"./IERC721.sol\";\nimport {IERC721Receiver} from \"./IERC721Receiver.sol\";\nimport {IERC721Metadata} from \"./extensions/IERC721Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {Strings} from \"../../utils/Strings.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {IERC721Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    mapping(uint256 tokenId => address) private _owners;\n\n    mapping(address owner => uint256) private _balances;\n\n    mapping(uint256 tokenId => address) private _tokenApprovals;\n\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        if (owner == address(0)) {\n            revert ERC721InvalidOwner(address(0));\n        }\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return _requireOwned(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual {\n        _approve(to, tokenId, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\n        _requireOwned(tokenId);\n\n        return _getApproved(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        address previousOwner = _update(to, tokenId, _msgSender());\n        if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\n        transferFrom(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n     * the `spender` for the specific `tokenId`.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n     *\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n     * remain consistent with one another.\n     */\n    function _increaseBalance(address account, uint128 value) internal virtual {\n        unchecked {\n            _balances[account] += value;\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }\n\n    /**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        _checkOnERC721Received(address(0), to, tokenId, data);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        } else if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `tokenId` token must exist and be owned by `from`.\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\n        _safeTransfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }\n\n    /**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Requirements:\n     * - operator can't be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC721InvalidOperator(operator);\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n     * Returns the owner.\n     *\n     * Overrides to ownership logic should be done to {_ownerOf}.\n     */\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                if (retval != IERC721Receiver.onERC721Received.selector) {\n                    revert ERC721InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert ERC721InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Burnable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC721} from \"../ERC721.sol\";\nimport {Context} from \"../../../utils/Context.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be burned (destroyed).\n */\nabstract contract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        _update(address(0), tokenId, _msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC721} from \"../ERC721.sol\";\nimport {Strings} from \"../../../utils/Strings.sol\";\nimport {IERC4906} from \"../../../interfaces/IERC4906.sol\";\nimport {IERC165} from \"../../../interfaces/IERC165.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\n    using Strings for uint256;\n\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\n    // defines events and does not include any external function.\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\n\n    // Optional mapping for token URIs\n    mapping(uint256 tokenId => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC165-supportsInterface}\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\n        if (bytes(_tokenURI).length > 0) {\n            return string.concat(base, _tokenURI);\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Emits {MetadataUpdate}.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        _tokenURIs[tokenId] = _tokenURI;\n        emit MetadataUpdate(tokenId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/core/CertificationAuthority.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n\n/**\n* @author @0xJonaseb11\n* @title CertificationAuthority Contract\n* @dev Acts like a Certificate Authority main house for enterprises\n* @dev Only the Certifier can certify enterprises\n* @dev Allows update of NFT certificate's metadata URI\n* @dev Automatic revocation of certificates after expiry duration\n*/\nimport {RolesManager} from \"./RolesManager.sol\";\nimport {Events} from \"../utils/Events.sol\";\nimport {DataTypes} from \"../utils/DataTypes.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\";\nimport { AccessControl } from \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ncontract CertificationAuthority is RolesManager, ERC721URIStorage, ERC721Burnable {\n    using DataTypes for DataTypes.Enterprise;\n    using DataTypes for DataTypes.Certification;\n    using DataTypes for DataTypes.InspectionReport;\n\n    mapping(address => DataTypes.Certification) public certifications;\n    mapping(uint256 => address) private _tokenToEnterprise;\n    uint256 private _tokenIdCounter;\n\n    constructor() ERC721(\"EnterpriseCertificate\", \"ECERT\") {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setupRole(CERTIFIER_ROLE, msg.sender);\n    }\n\n    //////////////////////////////////////////////////////////\n    ///////////// ENTERPRISE CERTIFICATION ///////////////////\n    //////////////////////////////////////////////////////////\n\n    /**\n    * @dev This function is used to certify enterprises\n    * @dev Only the Certifier can certify enterprises\n    * @dev mints and assigns NFT certificate to an enterprise\n    * @dev sets token URI to metadata URI of a certificate\n    * @param enterpriseAddress The address of the enterprise to be certified\n    * @param _industry The industry of the enterprise to be certified\n    * @param _metadataURI The metadata URI of the certificate (IPFS hash)\n    * @param validityDurationSeconds The validity duration of the certificate in seconds\n    * @notice Emits CertificationGranted event on successful enterprise certification\n    */\n\n    function certifyEnterprise(\n        address enterpriseAddress,\n        string memory _industry,\n        string memory _metadataURI,\n        uint256 validityDurationSeconds\n    ) external onlyValidAddress(enterpriseAddress) onlyRole(CERTIFIER_ROLE) {\n        if (certifications[enterpriseAddress].isCertified) {\n            revert CertificationAuthority__EnterpriseAlreadyCertified();\n        }\n\n        uint256 tokenId = _tokenIdCounter++;\n        _safeMint(enterpriseAddress, tokenId);\n        _setTokenURI(tokenId, _metadataURI);\n\n        certifications[enterpriseAddress] = DataTypes.Certification({\n            industry: _industry,\n            metadataURI: _metadataURI,\n            certifiedAt: block.timestamp,\n            expiryDate: block.timestamp + validityDurationSeconds,\n            isCertified: true,\n            tokenId: tokenId\n        });\n\n        _tokenToEnterprise[tokenId] = enterpriseAddress;\n\n        emit Events.CertificationGranted(\n            enterpriseAddress,\n            _industry,\n            _metadataURI,\n            block.timestamp + validityDurationSeconds\n        );\n    }\n\n    //////////////////////////////////////////////////////////\n    ///////////// REVOCATION & EXPIRY HANDLING //////////////\n    //////////////////////////////////////////////////////////\n    \n\n    /**\n    * @dev allows the revocation of certifications from enterprises\n    * @dev Only the `Certifier` or `Super Admin` can revoke certifications\n    * @dev allows automatic destruction of NFT certificates via oppenzeppelin's`burn` function\n    * @param enterpriseAddress The address of the enterprise to be revoked\n    * @notice Emits CertificationRevoked event on successful enterprise revocation\n    */\n    function revokeCertification(address enterpriseAddress)\n        external\n        onlyValidAddress(enterpriseAddress)\n        onlyRole(CERTIFIER_ROLE) onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\n        if (!cert.isCertified) {\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\n        }\n\n        if (cert.tokenId != 0) {\n            burn(cert.tokenId); \n            delete _tokenToEnterprise[cert.tokenId];\n        }\n\n        cert.isCertified = false;\n        emit Events.CertificationRevoked(enterpriseAddress);\n    }\n    \n\n    /**\n    * @dev alloes automatic revokation of NFT certificates after expiry duration \n    * @dev callable by anyone as long as expiry date kicks in\n    * @notice Emits CertificationRevoked event on successful enterprise revocation\n    */\n    function revokeIfExpired(address enterpriseAddress) external {\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\n\n        if (!cert.isCertified) {\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\n        }\n        if (block.timestamp < cert.expiryDate) {\n            revert CertificationAuthority__CertificationNotExpiredYet();\n        }\n\n        if (cert.tokenId != 0) {\n            burn(cert.tokenId);\n            delete _tokenToEnterprise[cert.tokenId];\n        }\n\n        cert.isCertified = false;\n        emit Events.CertificationRevoked(enterpriseAddress);\n    }\n\n    //////////////////////////////////////////////////////////\n    ///////////// TRANSFER CONTROL ///////////////////////////\n    //////////////////////////////////////////////////////////\n\n    function _update(\n        address to,\n        uint256 tokenId,\n        address auth\n    ) internal override(ERC721) returns (address) {\n        // Block all transfers except minting (to) and burning (address(0))\n        if (auth != address(0)) {\n            require(to == address(0), \"Certificates are non-transferable\");\n        }\n        return super._update(to, tokenId, auth);\n    }\n\n    //////////////////////////////////////////////////////////\n    ///////////// VALIDATION & METADATA //////////////////////\n    //////////////////////////////////////////////////////////\n\n    function isCertificationValid(address enterpriseAddress)\n        public\n        view\n        returns (bool)\n    {\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\n        return cert.isCertified && block.timestamp <= cert.expiryDate;\n    }\n\n    function isCertificateValid(uint256 tokenId) public view returns (bool) {\n        address enterprise = _tokenToEnterprise[tokenId];\n        return isCertificationValid(enterprise);\n    }\n    \n    \n    /**\n    * @dev updates the metadata URI of the NFT certificate\n    * @dev Only the `Certifier` can update certification metadata URI\n    * @param enterpriseAddress The address of the enterprise to be updated\n    * @param newMetadataURI The new metadata URI of the certificate\n    * @notice Emits CertificationUpdated event on successful metadata update\n    */\n    function updateCertificationMetadata(\n        address enterpriseAddress,\n        string calldata newMetadataURI\n    ) external onlyValidAddress(enterpriseAddress) onlyRole(CERTIFIER_ROLE) {\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\n        if (!cert.isCertified) {\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\n        }\n\n        if (cert.tokenId != 0) {\n            _setTokenURI(cert.tokenId, newMetadataURI);\n        }\n\n        cert.metadataURI = newMetadataURI;\n        emit Events.CertificationUpdated(enterpriseAddress, newMetadataURI);\n    }\n\n    //////////////////////////////////////////////////////////\n    ///////////// GETTERS & OVERRIDES ////////////////////////\n    //////////////////////////////////////////////////////////\n\n    function getCertification(address enterpriseAddress)\n        public\n        view\n        returns (DataTypes.Certification memory)\n    {\n        return certifications[enterpriseAddress];\n    }\n\n    function getEnterpriseByTokenId(uint256 tokenId)\n        public\n        view\n        returns (address)\n    {\n        return _tokenToEnterprise[tokenId];\n    }\n\n    // ----- Required overrides for multiple inheritance --- //\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        override(ERC721, ERC721URIStorage)\n        returns (string memory)\n    {\n        return super.tokenURI(tokenId);\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(ERC721, ERC721URIStorage, AccessControl)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/core/Predevelopment.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {RolesManager} from \"../core/RolesManager.sol\";\nimport {CertificationAuthority} from \"../core/CertificationAuthority.sol\";\nimport {InspectionManager} from \"../modules/InspectionManager.sol\";\nimport {Events} from \"../utils/Events.sol\";\nimport {DataTypes} from \"../utils/DataTypes.sol\";\n\ncontract AuditorOversight {\n   \n\n}"
    },
    "contracts/core/RolesManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n\n/**\n* @author @0xJonaseb11\n\n* @dev manages the roles of the whole ecosystem \n* @dev Only Super Admin can assign roles\n* @dev On very high roles, there's DAO voting\n*/\n\n\nimport { AccessControl } from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport { Events } from \"../utils/Events.sol\";\nimport { Errors } from \"../utils/Errors.sol\";\nimport { DataTypes } from \"../utils/DataTypes.sol\";\n\n\ncontract RolesManager is AccessControl, Errors {\n\n    bytes32 public constant CERTIFIER_ROLE = keccak256(\"CERTIFYING_BODY_ROLE\");\n    bytes32 public constant INSPECTOR_ROLE = keccak256(\"INSPECTION_MANAGER_ROLE\");\n    bytes32 public constant AUDITOR_ROLE = keccak256(\"AUDITOR_ROLE\");\n    bytes32 public constant ENTERPRISE_ROLE = keccak256(\"ENTERPRISE_ROLE\");\n    bytes32 public constant CERTIFICATE_FACTORY_ROLE = keccak256(\"CERTIFICATE_FACTORY_ROLE\");\n    bytes32 public constant PUBLIC_ROLE = keccak256(\"PUBLIC_ROLE\");\n\n    mapping(address => uint256) public publicRoleExpiry;\n\n   // ----- modifiers\n   modifier onlyValidAddress(address account) {\n    if (account == address(0)) {\n        revert InvalidAddress();\n    }\n    _;\n   }\n\n\n    constructor() {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setupRole(CERTIFIER_ROLE,  msg.sender);\n    }\n\n\n    /** ----------- #claim temporary public role -------------- //\n    * @dev allows users to claim temporary `PUBLIC` role for `durationInHours` hours on their visit to platform\n    * @param durationInHours The duration in hours the user will have the `PUBLIC` role\n    * @notice `durationInHours` must be less than 24 hours\n    * @notice Emits PublicRoleGranted event on successful claim \n    */\n    function claimTemporaryPublicRole(uint256 durationInHours) external {\n        if (hasPublicRole(msg.sender)) {\n            revert RolesManager__AlreadyHasRole();\n        }\n        if (durationInHours > 0) {\n            revert RolesManager__InvalidDuration();\n        }\n         if (durationInHours > 24 /*hours */) {\n            revert RolesManager__InvalidDuration();\n         }\n        uint256 durationInSeconds = durationInHours * 1 hours;\n    \n        _grantRole(PUBLIC_ROLE, msg.sender);\n        publicRoleExpiry[msg.sender] = block.timestamp + durationInSeconds;\n\n        emit Events.PublicRoleGranted(msg.sender, durationInHours);\n    }\n\n    // ------- helper for client ---- //\n    function getMaxPublicRoleDuration() public pure returns (uint256) {\n        return 24;\n    }\n\n\n    /** --------- #  Auto-expiry check (Call periodically) ------- //\n    * @dev helper to check expiry of `PUBLIC` role\n    * @param account The account to check for role expiry\n    * @notice Emits PublicRoleExpired event on expiry\n    */\n    function checkExpiryRoles(address account) public {\n        if (hasPublicRole(account) && publicRoleExpiry[account] < block.timestamp) {\n            _revokeRole(PUBLIC_ROLE, account);\n\n            emit Events.PublicRoleExpired(account);\n        }\n    }\n\n    /** ---------- # Bulk Role Grant(Auto) ------- //\n    * @dev Bulk grant roles to accounts\n    * @param roles The array of roles to grant\n    * @param accounts The array of accounts to grant roles\n    * emits BulkRolesGranted event on successful grant\n    */\n    function bulkGrantRoles(\n        bytes32[] calldata roles,\n        address[] calldata accounts\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (roles.length == 0 || accounts.length == 0) {\n            revert RolesManager__EmptyArray();\n        }\n        if (roles.length != accounts.length) {\n            revert RolesManager__ArrayLengthMismatch();\n        }\n        \n        for (uint256 i = 0; i < roles.length; i++) {\n            _grantRole(roles[i], accounts[i]);\n        }\n\n        emit Events.BulkRolesGranted(roles, accounts);\n    }\n\n    /** -------- # Safe Role Transfer ------- //\n    * @dev Transfers a role from one account to another\n    * @param role The role to transfer\n    * @param from The account to transfer the role from\n    * @param to The account to transfer the role to\n    * @notice Emits RoleTransferred event on successful transfer\n    */\n    function transferRole(\n        bytes32 role,\n        address from,\n        address to  \n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (!hasRole(role, from)) {\n            revert RolesManager__RoleDoesNotExist();\n        }\n        _revokeRole(role, from);\n        _grantRole(role, to);\n\n        emit Events.RoleTransferred(role, from, to);\n    }\n\n    // ---- combined role check ----- //\n    function getActiveRoles(address account) public view returns (\n        bool isAdmin,\n        bool isCertifier,\n        bool isInspector,\n        bool isAuditor,\n        bool isEnterprise,\n        bool isCertificateFactory,\n        bool isPublic\n    ) {\n        return (\n            hasRole(DEFAULT_ADMIN_ROLE, account),\n            hasRole(CERTIFIER_ROLE, account),\n            hasRole(INSPECTOR_ROLE, account),\n            hasRole(AUDITOR_ROLE, account),\n            hasRole(ENTERPRISE_ROLE, account),\n            hasRole(CERTIFICATE_FACTORY_ROLE, account),\n            hasRole(PUBLIC_ROLE, account)\n        );\n    }\n    \n\n    function _setupRole(bytes32 role, address account) internal virtual {\n    _grantRole(role, account);\n}\n\n\n    ////////////////////////////////////////////////\n    /////// MANAUAL ROLES MANAGEMENT  ////////////////\n    ////////////////////////////////////////////////\n    \n\n    /////////////////////////////////\n    ////// ROLE GRANTING ////////////\n    /////////////////////////////////\n    \n    /** ---------# GRANTING ROLES ---------//\n    * @dev Functions to grant roles to!\n    * @param account The account to grant the role to\n    * @notice Emits RoleGranted event on successful grant\n    */\n    function grantCertifier(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\n        grantRole(CERTIFIER_ROLE, account);\n\n        emit Events.RoleGranted(CERTIFIER_ROLE, account);\n\n    }\n    \n    function grantInspector(address account ) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\n        grantRole(INSPECTOR_ROLE, account);\n        emit Events.RoleGranted(INSPECTOR_ROLE, account);\n    }\n\n    function grantAuditor(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\n        grantRole(AUDITOR_ROLE, account);\n        emit Events.RoleGranted(AUDITOR_ROLE, account);\n    }\n\n    function grantEnterprise(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\n        grantRole(ENTERPRISE_ROLE, account);\n        emit Events.RoleGranted(ENTERPRISE_ROLE, account);\n    }\n     \n    function grantCertificateFactory(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\n        grantRole(CERTIFICATE_FACTORY_ROLE, account);\n        emit Events.RoleGranted(CERTIFICATE_FACTORY_ROLE, account);\n    }\n\n    function grantPublicRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\n        grantRole(PUBLIC_ROLE, account);\n        emit Events.RoleGranted(PUBLIC_ROLE, account);\n    }\n\n\n    /**\n    * @dev Public role will be claimed instantly\n    * On the entry of a user to our platform\n    * Just clicking `claim public role` and user is assigned role\n    * @notice I plan to make it a temporary role on every visit to our platform\n    */\n\n    /////////////////////////////////\n    // ROLE REVOKATION /////////////\n    ////////////////////////////////\n    \n\n    /** ------------- # REVOKING ROLES ------------- //\n    * @dev Functions to revoke roles\n    * @param account The account to revoke the role from\n    * @notice Emits RoleRevoked event on successful revoke\n    */\n    function revokeCertifierRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\n        revokeRole(CERTIFIER_ROLE, account);\n        emit Events.RoleRevoked(CERTIFIER_ROLE, account);\n    }\n\n    function revokeInspectorRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\n        revokeRole(INSPECTOR_ROLE, account);\n    }\n\n    function revokeAuditorRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\n    revokeRole(AUDITOR_ROLE, account);\n    emit Events.RoleRevoked(AUDITOR_ROLE, account);\n    }\n\n    function revokeEnterpriseRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\n        revokeRole(ENTERPRISE_ROLE, account);\n        emit Events.RoleRevoked(ENTERPRISE_ROLE, account);\n    }\n\n    function revokeCertificateFactoryRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\n        revokeRole(CERTIFICATE_FACTORY_ROLE, account);\n        emit Events.RoleRevoked(CERTIFICATE_FACTORY_ROLE, account);\n    }\n    \n    function revokePublicRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\n        revokeRole(PUBLIC_ROLE, account);\n        emit Events.RoleRevoked(PUBLIC_ROLE, account);\n    }\n\n\n    /////////////////////////////////////////////////\n    //////// ROLE CHECKS //////////////////\n    /////////////////////////////////////////////////\n    \n   /** --------- # CHECKING ROLES --------- //\n   * @dev Functions to check if a certain account has the specified role\n   * @param account The account to check \n   */\n    function hasAdminRole(address account) public view returns(bool) {\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\n    }\n\n    function hasCertifierRole(address account) public view returns(bool) { \n        return hasRole(CERTIFIER_ROLE, account);\n    }\n\n    function hasInspectorRole(address account) public view  returns(bool) {\n        return hasRole(INSPECTOR_ROLE, account);\n    }\n\n    function hasAuditorRole(address account) public view  returns(bool) {\n        return hasRole(AUDITOR_ROLE, account);\n    }\n\n    function hasEnterpriseRole(address account) public view  returns(bool) {\n        return hasRole(ENTERPRISE_ROLE, account);\n    }\n\n    function hasCertificateFactoryRole(address account) public view  returns(bool) {\n        return hasRole(CERTIFICATE_FACTORY_ROLE, account);\n    }\n    \n    function hasPublicRole(address account) public view  returns(bool) {\n        return hasRole(PUBLIC_ROLE, account);\n    }\n}"
    },
    "contracts/modules/AuditorOversight.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { RolesManager } from \"../core/RolesManager.sol\";\nimport { CertificationAuthority } from \"../core/CertificationAuthority.sol\";\nimport { InspectionManager } from \"./InspectionManager.sol\";\nimport { Events } from \"../utils/Events.sol\";\nimport { DataTypes } from \"../utils/DataTypes.sol\";\nimport { Errors } from \"../utils/Errors.sol\";\n\ncontract AuditorOversight {\n    RolesManager public immutable rolesManager;\n    CertificationAuthority public immutable certAuthority;\n    InspectionManager public immutable inspectionManager;\n\n    // ------- #Audit cases ---- //\n    mapping(uint256 => DataTypes.AuditCase) private _auditCases;\n    uint256 private _caseCounter;\n\n    // ------- #Case parameters ------ //\n    uint256 public constant AUDIT_DEPOSIT = 0.1 ether;\n    uint256 public constant APPEAL_WINDOW = 7 days;\n\n    constructor (\n        address _rolesManager,\n        address _certAuthority,\n        address _inspectionManager\n    ) {\n        rolesManager = RolesManager(_rolesManager);\n        certAuthority = CertificationAuthority(_certAuthority);\n        inspectionManager = InspectionManager(_inspectionManager);\n\n    }\n\n    modifier onlyAuditor() {\n        if (!(rolesManager.hasAuditorRole(msg.sender))) {\n            revert Errors.RolesManager__NotAuthorizedAuditor();\n        }\n        _;\n    }\n\n    modifier onlyEnterpriseOwner(uint256 caseId) {\n        if (msg.sender != _auditCases[caseId].targetEnterprise) {\n            revert Errors.AuditorOversight__NotAuthorizedEnterpriseOwner();\n        }\n        _;\n    }\n\n    //////////////////////////////////////////////////\n    /////// AUDIT CASE MANAGEMENT ///////////////////\n    ////////////////////////////////////////////////\n    \n    function initiateAudit(\n        address _targetEnterprise,\n        uint256 _inspectionId,\n        string calldata _reason,\n        string calldata _evidenceURI\n    ) external payable {\n        if (!(certAuthority.isCertificationValid(_targetEnterprise))) {\n            revert Errors.CertificationAuthority__EnterpriseNotCertifiedYet();\n        }\n\n        _caseCounter++;\n        _auditCases[_caseCounter] = DataTypes.AuditCase({\n            id: _caseCounter,\n            targetEnterprise: _targetEnterprise,\n            inspectionId: _inspectionId,\n            auditor: msg.sender,\n            reason: _reason,\n            evidenceURI: _evidenceURI,\n            depositAmount: msg.value,\n            status: DataTypes.AuditStatus.Pending,\n            createdAt: block.timestamp,\n            resolvedAt: 0\n        });\n\n        emit Events.AuditInitiated(\n            _caseCounter,\n            _targetEnterprise,\n            _inspectionId,\n            msg.sender,\n            _reason,\n            _evidenceURI\n        );\n    }\n\n    ////////////////////////////////////////////\n    ////////// AUDIT RESOLUTION  //////////////\n    //////////////////////////////////////////\n    function resolveAudit(\n        uint256 caseId,\n        bool upholdDecision,\n        string calldata remarks\n    ) external onlyAuditor {\n        DataTypes.AuditCase storage auditCase = _auditCases[caseId];\n\n        if (auditCase.status != DataTypes.AuditStatus.Pending) {\n            revert Errors.AuditorOversight__CaseNotPending();\n        }\n            auditCase.status = upholdDecision \n                ? DataTypes.AuditStatus.Upheld\n                : DataTypes.AuditStatus.Rejected;\n            auditCase.resolvedAt = block.timestamp;\n\n            // -- take action if audit is upheld\n            if (upholdDecision) {\n                certAuthority.revokeCertification(auditCase.targetEnterprise);\n                inspectionManager.flagInspection(auditCase.targetEnterprise, auditCase.inspectionId, remarks);\n            }\n\n            // ------ return deposit to auditor\n            payable(auditCase.auditor).transfer(auditCase.depositAmount);\n            \n            emit Events.AuditResolved(\n                caseId,\n                auditCase.targetEnterprise,\n                msg.sender,\n                upholdDecision,\n                remarks\n            );     \n        }\n\n        //////////////////////////////////////////////\n        /////// ENTERPRISE APPEAL ///////////////////\n        ////////////////////////////////////////////\n        function fileAppeal(\n            uint256 caseId,\n            string calldata counterEvidenceURI\n        ) external onlyEnterpriseOwner(caseId) {\n            DataTypes.AuditCase storage auditCase = _auditCases[caseId];\n\n            if (block.timestamp > auditCase.createdAt + APPEAL_WINDOW) {\n                revert Errors.AuditorOversight__AppealWindowClosed();\n            }\n\n            auditCase.status = DataTypes.AuditStatus.Appealed;\n\n            emit Events.AppealFiled(\n                caseId,\n                msg.sender,\n                counterEvidenceURI,\n                block.timestamp\n            );\n        }\n\n        ////////////////////////////////////////////\n        ////////// CROSS-CONTRACT INTEGRATION /////\n        //////////////////////////////////////////\n        \n\n        /////////////////////////////////////////\n        /////// COMPREHENSIVE GETTERS //////////\n        ////////////////////////////////////////\n        \n        function getActiveAudits() public view returns(DataTypes.AuditCase[] memory) {\n            uint256 activeCount;\n\n            for (uint256 i = 0; i <= _caseCounter; i++) {\n                if (_auditCases[i].status == DataTypes.AuditStatus.Pending) {\n                    activeCount++;\n                }\n            }\n\n            DataTypes.AuditCase[] memory activeAudits = new DataTypes.AuditCase[](activeCount);\n            uint256 index;\n\n            for (uint256 i = 1; i <= _caseCounter; i++) {\n                if (_auditCases[i].status == DataTypes.AuditStatus.Pending) {\n                    activeAudits[index++] = _auditCases[i];\n                }\n            }\n            return activeAudits;\n        }\n        \n    }\n"
    },
    "contracts/modules/CertificateNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n\n/**\n* @author @0xJonaseb11\n* @title CertificateNFT Contract\n* @dev This contract is used to mint NFT certificates for enterprises\n* @dev Only the Certifier can mint certificates\n* @dev Only the Certifier can revoke certificates\n* @notice It allows integration with  `CertificationAuthority` contract for smooth certifiation mage't\n*/\nimport { ERC721URIStorage } from \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport { ERC721 } from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport { AccessControl } from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { RolesManager } from \"../core/RolesManager.sol\";\nimport { Events } from \"../utils/Events.sol\";\nimport { DataTypes } from \"../utils/DataTypes.sol\";\n\ncontract CertificateNFT is RolesManager, ERC721URIStorage, Ownable {\n    RolesManager public rolesManager;\n    uint256 public nextCertificateId;\n\n    mapping(address => uint256) public enterpriseCertificate;\n    mapping(uint256 => bool) public validCertificates;\n\n    constructor(address _rolesManager) ERC721(\"Enterprise Certificate\", \"DIGI-CERT\") Ownable(msg.sender){\n        rolesManager = RolesManager(_rolesManager);\n    }\n\n\n    /////////////////////////////////////////////\n    //////// CERTIFICATENFT FUNCTIONS ///////////\n    /////////////////////////////////////////////\n    \n    /**\n    * @dev Mints a new certificate for an enterprise\n    * @dev Only the Super Admin can mint a certificate\n    * @param enterprise The address of the enterprise to mint a certificate for\n    * @param metadataURI The metadata URI of the certificate\n    * @notice Emits CertificateMinted event when a certificate is minted\n    * @return uint256 The certificate ID\n    */\n    function mintCertificate(address enterprise, string memory metadataURI /*, uint256 initialCertificateDuration*/) external onlyValidAddress(enterprise) onlyRole(CERTIFIER_ROLE)  returns(uint256) {\n\n        if (enterpriseCertificate[enterprise] != 0) {\n            revert CertificateNFT__EnterpriseAlreadyCertified();\n        }\n\n\n        uint256 certId = ++nextCertificateId;\n\n        _mint(enterprise, certId);\n        _setTokenURI(certId, metadataURI);\n\n        enterpriseCertificate[enterprise] = certId;\n        validCertificates[certId] = true;\n        \n        emit Events.CertificateMinted(certId, enterprise, msg.sender, block.timestamp);\n\n        return certId;\n    }\n\n    /////////////////////////////\n    ////// revoke certificate //\n    ////////////////////////////\n\n    /**\n    * @dev Revokes a certificate from an enterprise\n    * @dev Only the Super Admin can revoke a certificate\n    * @param certId The ID of the certificate to revoke\n    * @notice Emits CertificateRevoked event on successful certificate revocation\n    */\n    function revokeCertificate(uint256 certId) external  onlyRole(CERTIFIER_ROLE) onlyRole(DEFAULT_ADMIN_ROLE)  {\n        \n        if (validCertificates[certId] == false) {\n            revert CertificateNFT__CertificateDoesNotExist();\n        }\n        validCertificates[certId] = false;\n\n        emit Events.CertificateRevoked(certId, msg.sender, block.timestamp);\n    }\n\n    /////////////////////////////\n    /// some helpers / getters ///\n    //////////////////////////////\n\n    function isCertificateValid(uint256 certId) external view returns(bool) {\n        return validCertificates[certId];\n    }\n\n    function getCertificateId(address enterprise) external view onlyValidAddress(enterprise) returns(uint256) {\n        return enterpriseCertificate[enterprise];\n    }\n\n    function supportsInterface(bytes4 interfaceId) \n    public view override(AccessControl, ERC721URIStorage) \n    returns (bool) {\n        return \n        AccessControl.supportsInterface(interfaceId) || \n        ERC721URIStorage.supportsInterface(interfaceId);\n    } \n\n}    \n"
    },
    "contracts/modules/EnterpriseRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n\n/**\n* @author @0xJonaseb11\n* @title EnterpriseRegistry Contract\n* @dev This contract is used to register enterprises to the platform\n* @dev Only the Super Admin can register enterprises\n* @dev Only the Super Admin can deregister enterprises\n* @dev Only the owner of the enterprise can update the metadata URI\n* @notice It allows integration with  `CertificationAuthority`, `CertificateNFT` and `RolesManager contracts for smooth certification mage't\n*/\nimport { DataTypes } from \"../utils/DataTypes.sol\";\nimport { Events } from \"../utils/Events.sol\";\nimport { RolesManager } from \"../core/RolesManager.sol\";\nimport { CertificateNFT } from \"../modules/CertificateNFT.sol\";\nimport { CertificationAuthority } from \"../core/CertificationAuthority.sol\";\n\ncontract EnterpriseRegistry is RolesManager {\n    RolesManager public rolesManager;\n    CertificateNFT public certificateNFT;\n    CertificationAuthority public certAuthority;\n\n\n    mapping (address => DataTypes.Enterprise) private enterprises;\n    address[] public allEnterprises;\n\n    constructor(address _rolesManager, address _certNFT, address _certAuthority) {\n        rolesManager = RolesManager(_rolesManager);\n        certificateNFT = CertificateNFT(_certNFT);\n        certAuthority = CertificationAuthority(_certAuthority);\n\n\n    }\n\n    modifier onlyEnterprise() {\n\n        if (!hasEnterpriseRole(msg.sender)) {\n            revert RolesManager__NotAuthorizedEnterprise();\n        }\n        _;\n    }\n\n\n    //////////////////////////////////////////////\n    /////// MINERAL REGISTRY FUNCTIONS ///////////\n    //////////////////////////////////////////////\n    \n    /** \n    * @dev Registers a new enterprise to the platform\n    * @dev Automatically creates a certification for the enterprise\n    * @dev Automatically mints a NFT certificate for the enterprise\n    * @param _enterpriseAddress The address of the enterprise\n    * @param _name The name of the enterprise\n    * @param _industry The industry of the enterprise\n    * @param _metadataURI The metadata URI(IPFS hash) of the enterprise\n    * @param _initialCertDuration The duration of the initial certification\n    * @notice Emits EnterpriseRegistered event when a new enterprise is registered\n    */\n    function registerEnterprise(\n        address _enterpriseAddress,\n        string calldata _name,\n        string calldata _industry,\n        string calldata _metadataURI,\n        uint256 _initialCertDuration\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n\n        if (enterprises[_enterpriseAddress].isRegistered) {\n            revert EnterpriseRegistry__EnterpriseAlreadyExists();\n        }\n\n        enterprises[_enterpriseAddress] = DataTypes.Enterprise({\n            enterpriseAddress: _enterpriseAddress,\n            name: _name,\n            industry: _industry,\n            metadataURI: _metadataURI,\n            isRegistered: true,\n            registrationDate: block.timestamp,\n            lastUpdated: block.timestamp,\n            certificateId: 0\n        });\n\n        // Enable auto-certificatoin in CertificationAuthority contract\n        certAuthority.certifyEnterprise(_enterpriseAddress, _industry, _metadataURI, _initialCertDuration);\n\n        // mint NFT Certificate\n        uint256 certId = certificateNFT.mintCertificate(_enterpriseAddress, _metadataURI /*, _initialCertDuration*/);\n        enterprises[_enterpriseAddress].certificateId = certId;\n\n        allEnterprises.push(_enterpriseAddress);\n\n        emit Events.EnterpriseRegistered(_enterpriseAddress, _name, _industry, _metadataURI, certId);\n    }\n    \n    /** \n    * @dev Updates the metadata URI of an enterprise\n    * @dev Only the owner of the enterprise can update the metadata URI\n    * @param newMetadataURI The new metadata URI(IPFS hash) of the enterprise\n    * @notice Emits EnterpriseUpdated event when the metadata URI is updated\n    */\n    function updateEnterpriseMetadata(string memory newMetadataURI) external onlyEnterprise {\n        \n        if (enterprises[msg.sender].isRegistered == false) {\n            revert EnterpriseRegistry__EnterpriseDoesNotExist();\n        }\n        enterprises[msg.sender].metadataURI = newMetadataURI;\n\n        emit Events.EnterpriseUpdated(msg.sender, newMetadataURI);\n    }  \n\n    ///////////////////////////////////////////\n    ///////////   Essential helpers //////////\n    //////////////////////////////////////////\n\n    /**\n    * @dev Checks if an enterprise is active \n    * @dev An enterprise is active if it is registered, has a valid certification and has a valid NFT certificate\n    * @dev Returns true if the enterprise is active\n    * @param _enterprise The address of the enterprise\n    * @return bool true if the enterprise is active\n     */\n    function isEnterpriseActive(address _enterprise) public view returns(bool) {\n        return \n            enterprises[_enterprise].isRegistered &&\n            certAuthority.isCertificationValid(_enterprise) &&\n            certificateNFT.isCertificateValid(enterprises[_enterprise].certificateId);\n    }\n\n    /**\n    * @dev Deregisters an enterprise from the platform\n    * @dev Only the Super Admin can deregister an enterprise\n    * @dev Revokes the certification and NFT certificate of the enterprise\n    * @notice Emits EnterpriseDeregistered event when an enterprise is deregistered\n    */\n\n    function deRegisterEnterprise(address _enterprise) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (!enterprises[_enterprise].isRegistered) {\n            revert EnterpriseRegistry__EnterpriseDoesNotExist();\n        }\n            // revoke in all systems\n            certAuthority.revokeCertification(_enterprise);\n            certificateNFT.revokeCertificate(enterprises[_enterprise].certificateId);\n\n            enterprises[_enterprise].isRegistered = false;\n\n            emit Events.EnterpriseDeregistered(_enterprise, block.timestamp);\n    }\n\n\n    ////////////////////////\n    ////// getters /////////\n    ////////////////////////\n\n    /// ------ Simple getters approach ---- //\n     function getEnterprise(address enterpriseAddress) external view onlyValidAddress(enterpriseAddress) returns (DataTypes.Enterprise memory) {\n        return enterprises[enterpriseAddress];\n    }\n\n    function listEnterprises() external view returns(address[] memory) {\n        return allEnterprises;\n    }\n\n\n    function getEnterpriseWithStatus(address _enterprise)\n    external view\n    returns(DataTypes.Enterprise memory, bool isActive) {\n        DataTypes.Enterprise memory ent = enterprises[_enterprise];\n        return (ent, isEnterpriseActive(_enterprise));\n    }\n\n    // paginated enterprise listing\n    // --- added pagination for formatted output\n    /**\n    * @dev Returns a paginated list of enterprises\n    * @dev The list is paginated by start and limit\n    * @param start The start index of the list\n    * @param limit The number of enterprises to return\n    * @return address[] The list of enterprises\n    */\n    function lisEnterprisesPaginated(uint256 start, uint256 limit) \n    external view returns(address[] memory) {\n        \n        if (start > allEnterprises.length) {\n            revert EnterpriseRegistry__InvalidStart();\n        }   uint256 end = start + limit > allEnterprises.length ? allEnterprises.length : start + limit;\n            address[] memory result = new address[] (end - start);\n\n            for (uint256 i = start; i < end; i++) {\n                result[i - start] = allEnterprises[i];\n            }\n            return result;\n    }\n\n}"
    },
    "contracts/modules/InspectionManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n* @author @0xJonaseb11 \n* @title InspectionManager Contract\n* @dev Manages inspection process and reports\n* @automates certification revocation when inspection is not passed\n*/\n\n///////////////////////////////////////////////////////////////////\n/////// TO-DO : : Implement Inspection Validity specification/////\n/////// Initial 30 days atleast - can be changed by Super Admin //\n////// ASK REGIS HOW LONG A CERTIFICATION WOULD LAST ////////////\n////////////////////////////////////////////////////////////////\n\n\nimport { RolesManager } from \"../core/RolesManager.sol\";\nimport { CertificationAuthority } from \"../core/CertificationAuthority.sol\";\nimport { Events } from \"../utils/Events.sol\";\nimport { DataTypes } from \"../utils/DataTypes.sol\";\n\ncontract InspectionManager is RolesManager {\n    RolesManager public immutable rolesManager;\n    CertificationAuthority public immutable certAuthority;\n\n    // Inspection relationships\n    mapping(address => address[]) private _enterpriseInspectors;\n    mapping(address => address[]) private _inspectorEnterprises;\n\n    // Inspection reports storage\n    mapping(address => DataTypes.InspectionReport[]) private _enterpriseReports;\n    mapping(address => mapping(address => uint256)) private _lastInspectionTimestamps;\n\n    // flagged inspection tracking\n    mapping(uint256 => DataTypes.FlaggedInspection) private _flaggedInspections;\n    mapping(address => uint256[]) private _enterpriseFlaggedReports;\n    uint256 private _flagCounter;\n    constructor(address _rolesManager, address _certAuthority) {\n        rolesManager = RolesManager(_rolesManager);\n        certAuthority = CertificationAuthority(_certAuthority);\n    }\n\n\n\n    ////////////////////////////////////////\n    //////// ENHANCED ACCESS CONTROL //////\n    //////////////////////////////////////\n\n        modifier onlyCertifier() {\n        if (!hasCertifierRole(msg.sender)) {\n            revert RolesManager__NotAuthorizedCertifier();\n        }\n        _;\n    }\n\n    modifier onlyActiveInspector(address enterprise) {\n\n        if (!hasInspectorRole(msg.sender)) {\n            revert RolesManager__NotAuthorizedInspector();\n        }\n\n        if (!_isInspectorAssigned(enterprise, msg.sender)) {\n            revert InspectionManager__NotAssignedToEnterprise();\n        }\n\n        if (block.timestamp > _lastInspectionTimestamps[enterprise][msg.sender]) {\n            revert InspectionManager__InspectionPeriodExpired();\n        }\n        _;\n    }\n\n\n\n    ////////////////////////////////////////////\n    ////////// INSPECTOR ASSIGNMENT ///////////\n    ///////////////////////////////////////////\n    function assignInspector(\n        address enterprise,\n        address inspector,\n        uint256 validityPeriod\n    ) external onlyCertifier {\n\n        if (!certAuthority.isCertificationValid(enterprise)) {\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\n        }\n\n        if (!hasInspectorRole(inspector)) {\n            revert RolesManager__NotAuthorizedInspector();\n        }\n\n        _enterpriseInspectors[enterprise].push(inspector);\n        _inspectorEnterprises[inspector].push(enterprise);\n        _lastInspectionTimestamps[enterprise][inspector] = block.timestamp + validityPeriod;\n\n        emit Events.InspectorAssigned(\n            enterprise, inspector, validityPeriod\n        );\n    }\n\n    ///////////////////////////////////////////////\n    /////// INSPECTION REPORTING /////////////////\n    /////////////////////////////////////////////\n    function submitInspectionReport (\n        address _enterprise,\n        bool _passed,\n        string calldata _remarks,\n        string calldata _evidenceURI\n    ) external onlyActiveInspector(_enterprise) {\n\n        if (block.timestamp > _lastInspectionTimestamps[_enterprise][msg.sender]) {\n            revert InspectionManager__InspectionPeriodExpired();\n        }\n\n        DataTypes.InspectionReport memory report = DataTypes.InspectionReport({\n            inspector: msg.sender,\n            enterprise: _enterprise,\n            remarks: _remarks,\n            evidenceURI: _evidenceURI, // IPFS hash\n            inspectedAt: block.timestamp,\n            passed: _passed,\n            flagged: false\n        });\n\n        _enterpriseReports[_enterprise].push(report);\n\n        // Auto-revoke certification if not passed\n        if (!_passed) {\n            certAuthority.revokeCertification(_enterprise);\n            \n\n        }\n\n   \n\n        emit Events.InspectionReportSubmitted(\n            msg.sender,\n            _enterprise,\n            _passed,\n            _remarks,\n            _evidenceURI,\n            block.timestamp\n        );\n    }\n\n\n         /////////////////////////////////////////////////\n        ////////// INSPECTION FLAGGING /////////////////\n        ////////////////////////////////////////////////\n        function flagInspection(\n            address enterprise,\n            uint256 reportIndex,\n            string calldata reason\n        ) external onlyRole(AUDITOR_ROLE) {\n            if (reportIndex >_enterpriseReports[enterprise].length) {\n                revert InspectionManager__InvalidReportIndex();\n            }\n            \n            if (_enterpriseReports[enterprise][reportIndex].flagged) {\n                revert InspectionManager__ReportAlreadyFlagged();\n            }\n\n            _enterpriseReports[enterprise][reportIndex].flagged = true;\n\n            DataTypes.FlaggedInspection memory flagged = DataTypes.FlaggedInspection({\n                enterprise: enterprise,\n                reportIndex: reportIndex,\n                report: _enterpriseReports[enterprise][reportIndex],\n                flaggedBy: msg.sender,\n                reason: reason,\n                flaggedAt: block.timestamp\n            });\n\n            _flaggedInspections[_flagCounter] = flagged;\n            _enterpriseFlaggedReports[enterprise].push(_flagCounter);\n            _flagCounter++;\n\n            emit Events.InspectionReportFlagged(\n                enterprise,\n                reportIndex,\n                msg.sender,\n                reason,\n                block.timestamp\n            );\n\n        }\n\n\n    ////////////////////////////////////////////////\n    /////// CROSS-CONTRACT VALIDATION /////////////\n    //////////////////////////////////////////////\n    function _isInspectorAssigned(address enterprise, address inspector) private view returns(bool) {\n        for (uint256 i = 0; i < _enterpriseInspectors[enterprise].length; i++) {\n            if (_enterpriseInspectors[enterprise][i] == inspector) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    //////////////////////////////////////////////\n    //////// COMPEREHENSIVE GETTERS /////////////\n    ////////////////////////////////////////////\n    function getEnterpriseInspectors(address enterprise)\n    public \n    view \n    returns(address[] memory, uint256[] memory validityPeriods)\n     {\n        address[] memory inspectors = _enterpriseInspectors[enterprise];\n        uint256[] memory periods = new uint256[](inspectors.length);\n\n        for (uint256 i = 0; i < inspectors.length; i++) {\n            periods[i] = _lastInspectionTimestamps[enterprise][inspectors[i]];\n        }\n\n        return (inspectors, periods);\n     }\n\n    function getInspectorReports(address inspector)\n      public\n      view \n      returns(DataTypes.InspectionReport[] memory) {\n\n      address[] memory enterprises = _inspectorEnterprises[inspector];\n      uint256 totalReports;\n\n      // First pass: count reports\n      for (uint256 i = 0; i < enterprises.length; i++) {\n        totalReports += _enterpriseReports[enterprises[i]].length;\n      }\n\n     // Second pass: collect reports\n    DataTypes.InspectionReport[] memory reports = new DataTypes.InspectionReport[](totalReports);\n    uint256 counter;\n\n    for (uint256 i = 0; i < enterprises.length; i++) {\n        for (uint256 j = 0; j <_enterpriseReports[enterprises[i]].length; j++) {\n            if (_enterpriseReports[enterprises[i]][j].inspector == inspector) {\n                reports[counter++] = _enterpriseReports[enterprises[i]][j];\n            }\n        }\n    }    \n\n        return reports;\n    }\n\n    /////////////////////////////////////////\n    /// Simple reports getter for testing////\n    /////////////////////////////////////////\n      function getEnterpriseInspectionReports(address enterprise) external view returns(DataTypes.InspectionReport[] memory) {\n\n        if (_enterpriseReports[enterprise].length == 0) {\n            revert InspectionManager__NoReportsAssociatedWithEnterprise();\n        }\n        return _enterpriseReports[enterprise];\n    }\n\n\n\n    //////////////////////////////////////////\n    ///// FLAGGED INSPECTION GETTERS ////////\n    ////////////////////////////////////////\n    function getFlaggedInspections(uint256 limit, uint256 offset) \n        public view \n        returns(DataTypes.FlaggedInspection[] memory) {\n            uint256 resultSize = limit > _flagCounter - offset ?  _flagCounter - offset : limit;\n            DataTypes.FlaggedInspection[] memory result = new DataTypes.FlaggedInspection[](resultSize);\n\n            for (uint256 i = 0; i < resultSize; i++) {\n                result[i] = _flaggedInspections[offset + i];\n            }\n\n            return result;\n    }\n\n    function getEnterpriseFlaggedReports(address enterprise)\n    public\n    view\n    returns(DataTypes.FlaggedInspection[] memory) {\n        uint256[] memory flaggedIds = _enterpriseFlaggedReports[enterprise];\n        DataTypes.FlaggedInspection[] memory result = new DataTypes.FlaggedInspection[](flaggedIds.length);\n\n        for (uint256 i = 0; i < flaggedIds.length; i++) {\n            result[i] = _flaggedInspections[flaggedIds[i]];\n        }\n        return result;\n    }\n}"
    },
    "contracts/utils/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n* @author @0xJonaseb11\n* @dev This library contains the data types used by the contracts\n* @dev These structs hold a huge role in maintaining contract states\n*/\nlibrary DataTypes {\n    struct Certification {\n        string industry;\n        string metadataURI;\n        uint256 certifiedAt;\n        uint256 expiryDate;\n        bool isCertified;\n        uint256 tokenId;\n    }\n\n    struct Enterprise {\n        address enterpriseAddress;\n        string name;\n        string industry;\n        string metadataURI;\n        bool isRegistered;\n        uint256 registrationDate;\n        uint256 lastUpdated;\n        uint256 certificateId;\n    }\n\n    struct InspectionReport {\n        address inspector;\n        address enterprise;\n        string remarks;\n        string evidenceURI; // IPFS hash\n        uint256 inspectedAt;\n        bool passed;\n        bool flagged;\n    }\n\n    struct FlaggedInspection {\n        address enterprise;\n        uint256 reportIndex;\n        InspectionReport report;\n        address flaggedBy;\n        string reason;\n        uint256 flaggedAt;\n    }\n\n    struct NFTCertificate {\n    address enterprise;\n    address issuer;\n    uint256 issuedAt;\n    uint256 expiresAt;\n    bool isRevoked;\n    }\n\n    struct AuditCase {\n        uint256 id;\n        address targetEnterprise;\n        uint256 inspectionId;\n        address auditor;\n        string reason;\n        string evidenceURI;\n        uint256 depositAmount;\n        AuditStatus status;\n        uint256 createdAt;\n        uint256 resolvedAt;\n    }\n\n    enum AuditStatus {\n        Pending,\n        Upheld,\n        Rejected,\n        Appealed\n    }\n}"
    },
    "contracts/utils/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n* @author @0xJonaseb11\n* @dev contains the custom errors emitted by the contracts\n@notice All the contracts inherit this to handle custom errors\n*/\n\ncontract Errors {\n    error InvalidAddress();\n\n    // -------- RolesManager ------------------//\n    error RolesManager__UnauthorizedToPerformAction();\n    error RolesManager__NotAuthorizedCertifier();\n    error RolesManager__NotAuthorizedInspector();\n    error RolesManager__NotAuthorizedAuditor();\n    error RolesManager__NotAuthorizedEnterprise();\n    error RolesManager__NotAuthorizedCertificateFactory();\n    error RolesManager__NotAuthorizedPublicUser();\n    error RolesManager__AlreadyHasRole();\n    error RolesManager__InvalidDuration();\n    error RolesManager__EmptyArray();\n    error RolesManager__ArrayLengthMismatch();\n    error RolesManager__RoleDoesNotExist();\n\n    // ------- EnterpriseRegistry --------------//\n    error EnterpriseRegistry__EnterpriseAlreadyExists();\n    error EnterpriseRegistry__EnterpriseDoesNotExist();\n    error EnterpriseRegistry__InvalidStart();\n\n    // ------- CertificationAuthority ------- //\n    error CertificationAuthority__EnterpriseAlreadyCertified();\n    error CertificationAuthority__EnterpriseNotCertifiedYet();\n    error CertificationAuthority__CertificationNotExpiredYet();\n\n    // -------- CertificateNFT --------- //\n    error CertificateNFT__EnterpriseAlreadyCertified();\n    error CertificateNFT__CertificateDoesNotExist();\n\n    // -------- InspectionManageer --------- //\n    error InspectionManager__InspectorAlreadyAssigned();\n    error InspectionManager__InspectionPeriodExpired();\n    error InspectionManager__NotAssignedToEnterprise();\n    error InspectionManager__InvalidReportIndex();\n    error InspectionManager__ReportAlreadyFlagged();\n    error InspectionManager__NoReportsAssociatedWithEnterprise();\n\n\n    // ---------- InspectionReport ----------- //\n\n    error AuditorOversight__NotAuthorizedEnterpriseOwner();\n    error AuditorOversight__AppealWindowClosed();\n    error AuditorOversight__CaseNotPending();\n\n}"
    },
    "contracts/utils/Events.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n/**\n* @author @0xJonaseb11\n* @dev This library contains the events emitted by the contracts\n* @dev All the contracts inherit this to handle events\n*/\n\nlibrary Events {\n    event CertificationGranted(address indexed enterprise, string industry, string metadataURI, uint256 expiryDate);\n    event CertificationRevoked(address indexed enterprise);\n    event CertificationUpdated(address indexed enterprise, string newMetadataURI);\n\n    event EnterpriseRegistered(address indexed enterprise, string name, string industry, string metadataURI, uint256 certificateId);\n    event EnterpriseUpdated(address indexed enterprise, string newMetadataURI);\n    event EnterpriseDeregistered(address indexed enterprise, uint256 deregisteredAt);\n    \n    event InspectorAssigned(address indexed enterprise, address indexed inspector, uint256 validityPeriod);\n    event InspectionReportSubmitted(address indexed inspector, address indexed enterprise, bool passed, string remarks, string evidenceURI, uint256 ReportedAt);\n    event InspectionReportFlagged(address indexed enterprise, uint256 indexed reportIndex, address flaggedBy, string reason, uint256 timestamp);\n    \n    event CertificateMinted(uint256 certificateId, address indexed enterprise, address indexed certifier, uint256 mintedAt);\n    event CertificateRevoked(uint256 certificateId, address indexed revoker, uint256 timestamp);\n\n\n    event PublicRoleGranted(address indexed user, uint256 duration);\n    event PublicRoleExpired(address indexed user);\n    event RoleTransferred(bytes32 indexed role, address from, address to);\n    event BulkRolesGranted(bytes32[] roles, address[] indexed accounts);\n    event RoleGranted(bytes32 indexed role, address indexed account);\n    event RoleRevoked(bytes32 indexed role, address indexed account);\n\n    event AuditInitiated(uint256 indexed caseId, address indexed enterprise, uint256 inspectionId, address auditor, string reason, string evidenceURI);\n    event AuditResolved(uint256 indexed caseId, address indexed enterprise, address resolvedBy, bool upheld, string remarks);\n    event AppealFiled(uint256 indexed caseid, address indexed enterprise, string counterEvidenceURI, uint256 timestamp);\n\n}    "
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}