{"id":"0601622ec645bda1fc8db4aafa2bca30","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"},"@openzeppelin/contracts/access/IAccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"},"@openzeppelin/contracts/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"},"@openzeppelin/contracts/interfaces/IERC4906.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\nimport {IERC721} from \"./IERC721.sol\";\n\n/// @title EIP-721 Metadata Update Extension\ninterface IERC4906 is IERC165, IERC721 {\n    /// @dev This event emits when the metadata of a token is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFT.\n    event MetadataUpdate(uint256 _tokenId);\n\n    /// @dev This event emits when the metadata of a range of tokens is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFTs.\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\n}\n"},"@openzeppelin/contracts/interfaces/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../token/ERC721/IERC721.sol\";\n"},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"./IERC721.sol\";\nimport {IERC721Receiver} from \"./IERC721Receiver.sol\";\nimport {IERC721Metadata} from \"./extensions/IERC721Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {Strings} from \"../../utils/Strings.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {IERC721Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    mapping(uint256 tokenId => address) private _owners;\n\n    mapping(address owner => uint256) private _balances;\n\n    mapping(uint256 tokenId => address) private _tokenApprovals;\n\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        if (owner == address(0)) {\n            revert ERC721InvalidOwner(address(0));\n        }\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return _requireOwned(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual {\n        _approve(to, tokenId, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\n        _requireOwned(tokenId);\n\n        return _getApproved(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        address previousOwner = _update(to, tokenId, _msgSender());\n        if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\n        transferFrom(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n     * the `spender` for the specific `tokenId`.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n     *\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n     * remain consistent with one another.\n     */\n    function _increaseBalance(address account, uint128 value) internal virtual {\n        unchecked {\n            _balances[account] += value;\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }\n\n    /**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        _checkOnERC721Received(address(0), to, tokenId, data);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        } else if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `tokenId` token must exist and be owned by `from`.\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\n        _safeTransfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }\n\n    /**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Requirements:\n     * - operator can't be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC721InvalidOperator(operator);\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n     * Returns the owner.\n     *\n     * Overrides to ownership logic should be done to {_ownerOf}.\n     */\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                if (retval != IERC721Receiver.onERC721Received.selector) {\n                    revert ERC721InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert ERC721InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Burnable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC721} from \"../ERC721.sol\";\nimport {Context} from \"../../../utils/Context.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be burned (destroyed).\n */\nabstract contract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        _update(address(0), tokenId, _msgSender());\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC721} from \"../ERC721.sol\";\nimport {Strings} from \"../../../utils/Strings.sol\";\nimport {IERC4906} from \"../../../interfaces/IERC4906.sol\";\nimport {IERC165} from \"../../../interfaces/IERC165.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\n    using Strings for uint256;\n\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\n    // defines events and does not include any external function.\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\n\n    // Optional mapping for token URIs\n    mapping(uint256 tokenId => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC165-supportsInterface}\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\n        if (bytes(_tokenURI).length > 0) {\n            return string.concat(base, _tokenURI);\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Emits {MetadataUpdate}.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        _tokenURIs[tokenId] = _tokenURI;\n        emit MetadataUpdate(tokenId);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/core/CertificationAuthority.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n\n/**\n* @author @0xJonaseb11\n* @title CertificationAuthority Contract\n* @dev Acts like a Certificate Authority main house for enterprises\n* @dev Only the Certifier can certify enterprises\n* @dev Allows update of NFT certificate's metadata URI\n* @dev Automatic revocation of certificates after expiry duration\n*/\nimport {RolesManager} from \"./RolesManager.sol\";\nimport {Events} from \"../utils/Events.sol\";\nimport {DataTypes} from \"../utils/DataTypes.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\";\nimport { AccessControl } from \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ncontract CertificationAuthority is RolesManager, ERC721URIStorage, ERC721Burnable {\n    using DataTypes for DataTypes.Enterprise;\n    using DataTypes for DataTypes.Certification;\n    using DataTypes for DataTypes.InspectionReport;\n\n    mapping(address => DataTypes.Certification) public certifications;\n    mapping(uint256 => address) private _tokenToEnterprise;\n    uint256 private _tokenIdCounter;\n\n    constructor() ERC721(\"EnterpriseCertificate\", \"ECERT\") {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setupRole(CERTIFIER_ROLE, msg.sender);\n    }\n\n    //////////////////////////////////////////////////////////\n    ///////////// ENTERPRISE CERTIFICATION ///////////////////\n    //////////////////////////////////////////////////////////\n\n    /**\n    * @dev This function is used to certify enterprises\n    * @dev Only the Certifier can certify enterprises\n    * @dev mints and assigns NFT certificate to an enterprise\n    * @dev sets token URI to metadata URI of a certificate\n    * @param enterpriseAddress The address of the enterprise to be certified\n    * @param _industry The industry of the enterprise to be certified\n    * @param _metadataURI The metadata URI of the certificate (IPFS hash)\n    * @param validityDurationSeconds The validity duration of the certificate in seconds\n    * @notice Emits CertificationGranted event on successful enterprise certification\n    */\n\n    function certifyEnterprise(\n        address enterpriseAddress,\n        string memory _industry,\n        string memory _metadataURI,\n        uint256 validityDurationSeconds\n    ) external onlyValidAddress(enterpriseAddress) onlyRole(CERTIFIER_ROLE) {\n        if (certifications[enterpriseAddress].isCertified) {\n            revert CertificationAuthority__EnterpriseAlreadyCertified();\n        }\n\n        uint256 tokenId = _tokenIdCounter++;\n        _safeMint(enterpriseAddress, tokenId);\n        _setTokenURI(tokenId, _metadataURI);\n\n        certifications[enterpriseAddress] = DataTypes.Certification({\n            industry: _industry,\n            metadataURI: _metadataURI,\n            certifiedAt: block.timestamp,\n            expiryDate: block.timestamp + validityDurationSeconds,\n            isCertified: true,\n            tokenId: tokenId\n        });\n\n        _tokenToEnterprise[tokenId] = enterpriseAddress;\n\n        emit Events.CertificationGranted(\n            enterpriseAddress,\n            _industry,\n            _metadataURI,\n            block.timestamp + validityDurationSeconds\n        );\n    }\n\n    //////////////////////////////////////////////////////////\n    ///////////// REVOCATION & EXPIRY HANDLING //////////////\n    //////////////////////////////////////////////////////////\n    \n\n    /**\n    * @dev allows the revocation of certifications from enterprises\n    * @dev Only the `Certifier` or `Super Admin` can revoke certifications\n    * @dev allows automatic destruction of NFT certificates via oppenzeppelin's`burn` function\n    * @param enterpriseAddress The address of the enterprise to be revoked\n    * @notice Emits CertificationRevoked event on successful enterprise revocation\n    */\n    function revokeCertification(address enterpriseAddress)\n        external\n        onlyValidAddress(enterpriseAddress)\n        onlyRole(CERTIFIER_ROLE) onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\n        if (!cert.isCertified) {\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\n        }\n\n        if (cert.tokenId != 0) {\n            burn(cert.tokenId); \n            delete _tokenToEnterprise[cert.tokenId];\n        }\n\n        cert.isCertified = false;\n        emit Events.CertificationRevoked(enterpriseAddress);\n    }\n    \n\n    /**\n    * @dev alloes automatic revokation of NFT certificates after expiry duration \n    * @dev callable by anyone as long as expiry date kicks in\n    * @notice Emits CertificationRevoked event on successful enterprise revocation\n    */\n    function revokeIfExpired(address enterpriseAddress) external {\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\n\n        if (!cert.isCertified) {\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\n        }\n        if (block.timestamp < cert.expiryDate) {\n            revert CertificationAuthority__CertificationNotExpiredYet();\n        }\n\n        if (cert.tokenId != 0) {\n            burn(cert.tokenId);\n            delete _tokenToEnterprise[cert.tokenId];\n        }\n\n        cert.isCertified = false;\n        emit Events.CertificationRevoked(enterpriseAddress);\n    }\n\n    //////////////////////////////////////////////////////////\n    ///////////// TRANSFER CONTROL ///////////////////////////\n    //////////////////////////////////////////////////////////\n\n    function _update(\n        address to,\n        uint256 tokenId,\n        address auth\n    ) internal override(ERC721) returns (address) {\n        // Block all transfers except minting (to) and burning (address(0))\n        if (auth != address(0)) {\n            require(to == address(0), \"Certificates are non-transferable\");\n        }\n        return super._update(to, tokenId, auth);\n    }\n\n    //////////////////////////////////////////////////////////\n    ///////////// VALIDATION & METADATA //////////////////////\n    //////////////////////////////////////////////////////////\n\n    function isCertificationValid(address enterpriseAddress)\n        public\n        view\n        returns (bool)\n    {\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\n        return cert.isCertified && block.timestamp <= cert.expiryDate;\n    }\n\n    function isCertificateValid(uint256 tokenId) public view returns (bool) {\n        address enterprise = _tokenToEnterprise[tokenId];\n        return isCertificationValid(enterprise);\n    }\n    \n    \n    /**\n    * @dev updates the metadata URI of the NFT certificate\n    * @dev Only the `Certifier` can update certification metadata URI\n    * @param enterpriseAddress The address of the enterprise to be updated\n    * @param newMetadataURI The new metadata URI of the certificate\n    * @notice Emits CertificationUpdated event on successful metadata update\n    */\n    function updateCertificationMetadata(\n        address enterpriseAddress,\n        string calldata newMetadataURI\n    ) external onlyValidAddress(enterpriseAddress) onlyRole(CERTIFIER_ROLE) {\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\n        if (!cert.isCertified) {\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\n        }\n\n        if (cert.tokenId != 0) {\n            _setTokenURI(cert.tokenId, newMetadataURI);\n        }\n\n        cert.metadataURI = newMetadataURI;\n        emit Events.CertificationUpdated(enterpriseAddress, newMetadataURI);\n    }\n\n    //////////////////////////////////////////////////////////\n    ///////////// GETTERS & OVERRIDES ////////////////////////\n    //////////////////////////////////////////////////////////\n\n    function getCertification(address enterpriseAddress)\n        public\n        view\n        returns (DataTypes.Certification memory)\n    {\n        return certifications[enterpriseAddress];\n    }\n\n    function getEnterpriseByTokenId(uint256 tokenId)\n        public\n        view\n        returns (address)\n    {\n        return _tokenToEnterprise[tokenId];\n    }\n\n    // ----- Required overrides for multiple inheritance --- //\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        override(ERC721, ERC721URIStorage)\n        returns (string memory)\n    {\n        return super.tokenURI(tokenId);\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(ERC721, ERC721URIStorage, AccessControl)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n}\n"},"contracts/core/Predevelopment.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {RolesManager} from \"../core/RolesManager.sol\";\nimport {CertificationAuthority} from \"../core/CertificationAuthority.sol\";\nimport {InspectionManager} from \"../modules/InspectionManager.sol\";\nimport {Events} from \"../utils/Events.sol\";\nimport {DataTypes} from \"../utils/DataTypes.sol\";\n\ncontract Predevelopment {\n   \n\n}"},"contracts/core/RolesManager.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n\n/**\n* @author @0xJonaseb11\n\n* @dev manages the roles of the whole ecosystem \n* @dev Only Super Admin can assign roles\n* @dev On very high roles, there's DAO voting\n*/\n\n\nimport { AccessControl } from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport { Events } from \"../utils/Events.sol\";\nimport { Errors } from \"../utils/Errors.sol\";\nimport { DataTypes } from \"../utils/DataTypes.sol\";\n\n\ncontract RolesManager is AccessControl, Errors {\n\n    bytes32 public constant CERTIFIER_ROLE = keccak256(\"CERTIFYING_BODY_ROLE\");\n    bytes32 public constant INSPECTOR_ROLE = keccak256(\"INSPECTION_MANAGER_ROLE\");\n    bytes32 public constant AUDITOR_ROLE = keccak256(\"AUDITOR_ROLE\");\n    bytes32 public constant ENTERPRISE_ROLE = keccak256(\"ENTERPRISE_ROLE\");\n    bytes32 public constant CERTIFICATE_FACTORY_ROLE = keccak256(\"CERTIFICATE_FACTORY_ROLE\");\n    bytes32 public constant PUBLIC_ROLE = keccak256(\"PUBLIC_ROLE\");\n\n    mapping(address => uint256) public publicRoleExpiry;\n\n   // ----- modifiers\n   modifier onlyValidAddress(address account) {\n    if (account == address(0)) {\n        revert InvalidAddress();\n    }\n    _;\n   }\n\n\n    constructor() {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setupRole(CERTIFIER_ROLE,  msg.sender);\n    }\n\n\n    /** ----------- #claim temporary public role -------------- //\n    * @dev allows users to claim temporary `PUBLIC` role for `durationInHours` hours on their visit to platform\n    * @param durationInHours The duration in hours the user will have the `PUBLIC` role\n    * @notice `durationInHours` must be less than 24 hours\n    * @notice Emits PublicRoleGranted event on successful claim \n    */\n    function claimTemporaryPublicRole(uint256 durationInHours) external {\n        if (hasPublicRole(msg.sender)) {\n            revert RolesManager__AlreadyHasRole();\n        }\n        if (durationInHours > 0) {\n            revert RolesManager__InvalidDuration();\n        }\n         if (durationInHours > 24 /*hours */) {\n            revert RolesManager__InvalidDuration();\n         }\n        uint256 durationInSeconds = durationInHours * 1 hours;\n    \n        _grantRole(PUBLIC_ROLE, msg.sender);\n        publicRoleExpiry[msg.sender] = block.timestamp + durationInSeconds;\n\n        emit Events.PublicRoleGranted(msg.sender, durationInHours);\n    }\n\n    // ------- helper for client ---- //\n    function getMaxPublicRoleDuration() public pure returns (uint256) {\n        return 24;\n    }\n\n\n    /** --------- #  Auto-expiry check (Call periodically) ------- //\n    * @dev helper to check expiry of `PUBLIC` role\n    * @param account The account to check for role expiry\n    * @notice Emits PublicRoleExpired event on expiry\n    */\n    function checkExpiryRoles(address account) public {\n        if (hasPublicRole(account) && publicRoleExpiry[account] < block.timestamp) {\n            _revokeRole(PUBLIC_ROLE, account);\n\n            emit Events.PublicRoleExpired(account);\n        }\n    }\n\n    /** ---------- # Bulk Role Grant(Auto) ------- //\n    * @dev Bulk grant roles to accounts\n    * @param roles The array of roles to grant\n    * @param accounts The array of accounts to grant roles\n    * emits BulkRolesGranted event on successful grant\n    */\n    function bulkGrantRoles(\n        bytes32[] calldata roles,\n        address[] calldata accounts\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (roles.length == 0 || accounts.length == 0) {\n            revert RolesManager__EmptyArray();\n        }\n        if (roles.length != accounts.length) {\n            revert RolesManager__ArrayLengthMismatch();\n        }\n        \n        for (uint256 i = 0; i < roles.length; i++) {\n            _grantRole(roles[i], accounts[i]);\n        }\n\n        emit Events.BulkRolesGranted(roles, accounts);\n    }\n\n    /** -------- # Safe Role Transfer ------- //\n    * @dev Transfers a role from one account to another\n    * @param role The role to transfer\n    * @param from The account to transfer the role from\n    * @param to The account to transfer the role to\n    * @notice Emits RoleTransferred event on successful transfer\n    */\n    function transferRole(\n        bytes32 role,\n        address from,\n        address to  \n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (!hasRole(role, from)) {\n            revert RolesManager__RoleDoesNotExist();\n        }\n        _revokeRole(role, from);\n        _grantRole(role, to);\n\n        emit Events.RoleTransferred(role, from, to);\n    }\n\n    // ---- combined role check ----- //\n    function getActiveRoles(address account) public view returns (\n        bool isAdmin,\n        bool isCertifier,\n        bool isInspector,\n        bool isAuditor,\n        bool isEnterprise,\n        bool isCertificateFactory,\n        bool isPublic\n    ) {\n        return (\n            hasRole(DEFAULT_ADMIN_ROLE, account),\n            hasRole(CERTIFIER_ROLE, account),\n            hasRole(INSPECTOR_ROLE, account),\n            hasRole(AUDITOR_ROLE, account),\n            hasRole(ENTERPRISE_ROLE, account),\n            hasRole(CERTIFICATE_FACTORY_ROLE, account),\n            hasRole(PUBLIC_ROLE, account)\n        );\n    }\n    \n\n    function _setupRole(bytes32 role, address account) internal virtual {\n    _grantRole(role, account);\n}\n\n\n    ////////////////////////////////////////////////\n    /////// MANAUAL ROLES MANAGEMENT  ////////////////\n    ////////////////////////////////////////////////\n    \n\n    /////////////////////////////////\n    ////// ROLE GRANTING ////////////\n    /////////////////////////////////\n    \n    /** ---------# GRANTING ROLES ---------//\n    * @dev Functions to grant roles to!\n    * @param account The account to grant the role to\n    * @notice Emits RoleGranted event on successful grant\n    */\n    function grantCertifier(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\n        grantRole(CERTIFIER_ROLE, account);\n\n        emit Events.RoleGranted(CERTIFIER_ROLE, account);\n\n    }\n    \n    function grantInspector(address account ) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\n        grantRole(INSPECTOR_ROLE, account);\n        emit Events.RoleGranted(INSPECTOR_ROLE, account);\n    }\n\n    function grantAuditor(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\n        grantRole(AUDITOR_ROLE, account);\n        emit Events.RoleGranted(AUDITOR_ROLE, account);\n    }\n\n    function grantEnterprise(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\n        grantRole(ENTERPRISE_ROLE, account);\n        emit Events.RoleGranted(ENTERPRISE_ROLE, account);\n    }\n     \n    function grantCertificateFactory(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\n        grantRole(CERTIFICATE_FACTORY_ROLE, account);\n        emit Events.RoleGranted(CERTIFICATE_FACTORY_ROLE, account);\n    }\n\n    function grantPublicRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\n        grantRole(PUBLIC_ROLE, account);\n        emit Events.RoleGranted(PUBLIC_ROLE, account);\n    }\n\n\n    /**\n    * @dev Public role will be claimed instantly\n    * On the entry of a user to our platform\n    * Just clicking `claim public role` and user is assigned role\n    * @notice I plan to make it a temporary role on every visit to our platform\n    */\n\n    /////////////////////////////////\n    // ROLE REVOKATION /////////////\n    ////////////////////////////////\n    \n\n    /** ------------- # REVOKING ROLES ------------- //\n    * @dev Functions to revoke roles\n    * @param account The account to revoke the role from\n    * @notice Emits RoleRevoked event on successful revoke\n    */\n    function revokeCertifierRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\n        revokeRole(CERTIFIER_ROLE, account);\n        emit Events.RoleRevoked(CERTIFIER_ROLE, account);\n    }\n\n    function revokeInspectorRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\n        revokeRole(INSPECTOR_ROLE, account);\n    }\n\n    function revokeAuditorRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\n    revokeRole(AUDITOR_ROLE, account);\n    emit Events.RoleRevoked(AUDITOR_ROLE, account);\n    }\n\n    function revokeEnterpriseRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\n        revokeRole(ENTERPRISE_ROLE, account);\n        emit Events.RoleRevoked(ENTERPRISE_ROLE, account);\n    }\n\n    function revokeCertificateFactoryRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\n        revokeRole(CERTIFICATE_FACTORY_ROLE, account);\n        emit Events.RoleRevoked(CERTIFICATE_FACTORY_ROLE, account);\n    }\n    \n    function revokePublicRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\n        revokeRole(PUBLIC_ROLE, account);\n        emit Events.RoleRevoked(PUBLIC_ROLE, account);\n    }\n\n\n    /////////////////////////////////////////////////\n    //////// ROLE CHECKS //////////////////\n    /////////////////////////////////////////////////\n    \n   /** --------- # CHECKING ROLES --------- //\n   * @dev Functions to check if a certain account has the specified role\n   * @param account The account to check \n   */\n    function hasAdminRole(address account) public view returns(bool) {\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\n    }\n\n    function hasCertifierRole(address account) public view returns(bool) { \n        return hasRole(CERTIFIER_ROLE, account);\n    }\n\n    function hasInspectorRole(address account) public view  returns(bool) {\n        return hasRole(INSPECTOR_ROLE, account);\n    }\n\n    function hasAuditorRole(address account) public view  returns(bool) {\n        return hasRole(AUDITOR_ROLE, account);\n    }\n\n    function hasEnterpriseRole(address account) public view  returns(bool) {\n        return hasRole(ENTERPRISE_ROLE, account);\n    }\n\n    function hasCertificateFactoryRole(address account) public view  returns(bool) {\n        return hasRole(CERTIFICATE_FACTORY_ROLE, account);\n    }\n    \n    function hasPublicRole(address account) public view  returns(bool) {\n        return hasRole(PUBLIC_ROLE, account);\n    }\n}"},"contracts/modules/InspectionManager.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n* @author @0xJonaseb11 \n* @title InspectionManager Contract\n* @dev Manages inspection process and reports\n* @automates certification revocation when inspection is not passed\n*/\n\n///////////////////////////////////////////////////////////////////\n/////// TO-DO : : Implement Inspection Validity specification/////\n/////// Initial 30 days atleast - can be changed by Super Admin //\n////// ASK REGIS HOW LONG A CERTIFICATION WOULD LAST ////////////\n////////////////////////////////////////////////////////////////\n\n\nimport { RolesManager } from \"../core/RolesManager.sol\";\nimport { CertificationAuthority } from \"../core/CertificationAuthority.sol\";\nimport { Events } from \"../utils/Events.sol\";\nimport { DataTypes } from \"../utils/DataTypes.sol\";\n\ncontract InspectionManager is RolesManager {\n    RolesManager public immutable rolesManager;\n    CertificationAuthority public immutable certAuthority;\n\n    // Inspection relationships\n    mapping(address => address[]) private _enterpriseInspectors;\n    mapping(address => address[]) private _inspectorEnterprises;\n\n    // Inspection reports storage\n    mapping(address => DataTypes.InspectionReport[]) private _enterpriseReports;\n    mapping(address => mapping(address => uint256)) private _lastInspectionTimestamps;\n\n    // flagged inspection tracking\n    mapping(uint256 => DataTypes.FlaggedInspection) private _flaggedInspections;\n    mapping(address => uint256[]) private _enterpriseFlaggedReports;\n    uint256 private _flagCounter;\n    constructor(address _rolesManager, address _certAuthority) {\n        rolesManager = RolesManager(_rolesManager);\n        certAuthority = CertificationAuthority(_certAuthority);\n    }\n\n\n\n    ////////////////////////////////////////\n    //////// ENHANCED ACCESS CONTROL //////\n    //////////////////////////////////////\n\n        modifier onlyCertifier() {\n        if (!hasCertifierRole(msg.sender)) {\n            revert RolesManager__NotAuthorizedCertifier();\n        }\n        _;\n    }\n\n    modifier onlyActiveInspector(address enterprise) {\n\n        if (!hasInspectorRole(msg.sender)) {\n            revert RolesManager__NotAuthorizedInspector();\n        }\n\n        if (!_isInspectorAssigned(enterprise, msg.sender)) {\n            revert InspectionManager__NotAssignedToEnterprise();\n        }\n\n        if (block.timestamp > _lastInspectionTimestamps[enterprise][msg.sender]) {\n            revert InspectionManager__InspectionPeriodExpired();\n        }\n        _;\n    }\n\n\n\n    ////////////////////////////////////////////\n    ////////// INSPECTOR ASSIGNMENT ///////////\n    ///////////////////////////////////////////\n    function assignInspector(\n        address enterprise,\n        address inspector,\n        uint256 validityPeriod\n    ) external onlyCertifier {\n\n        if (!certAuthority.isCertificationValid(enterprise)) {\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\n        }\n\n        if (!hasInspectorRole(inspector)) {\n            revert RolesManager__NotAuthorizedInspector();\n        }\n\n        _enterpriseInspectors[enterprise].push(inspector);\n        _inspectorEnterprises[inspector].push(enterprise);\n        _lastInspectionTimestamps[enterprise][inspector] = block.timestamp + validityPeriod;\n\n        emit Events.InspectorAssigned(\n            enterprise, inspector, validityPeriod\n        );\n    }\n\n    ///////////////////////////////////////////////\n    /////// INSPECTION REPORTING /////////////////\n    /////////////////////////////////////////////\n    function submitInspectionReport (\n        address _enterprise,\n        bool _passed,\n        string calldata _remarks,\n        string calldata _evidenceURI\n    ) external onlyActiveInspector(_enterprise) {\n\n        if (block.timestamp > _lastInspectionTimestamps[_enterprise][msg.sender]) {\n            revert InspectionManager__InspectionPeriodExpired();\n        }\n\n        DataTypes.InspectionReport memory report = DataTypes.InspectionReport({\n            inspector: msg.sender,\n            enterprise: _enterprise,\n            remarks: _remarks,\n            evidenceURI: _evidenceURI, // IPFS hash\n            inspectedAt: block.timestamp,\n            passed: _passed,\n            flagged: false\n        });\n\n        _enterpriseReports[_enterprise].push(report);\n\n        // Auto-revoke certification if not passed\n        if (!_passed) {\n            certAuthority.revokeCertification(_enterprise);\n            \n\n        }\n\n   \n\n        emit Events.InspectionReportSubmitted(\n            msg.sender,\n            _enterprise,\n            _passed,\n            _remarks,\n            _evidenceURI,\n            block.timestamp\n        );\n    }\n\n\n         /////////////////////////////////////////////////\n        ////////// INSPECTION FLAGGING /////////////////\n        ////////////////////////////////////////////////\n        function flagInspection(\n            address enterprise,\n            uint256 reportIndex,\n            string calldata reason\n        ) external onlyRole(AUDITOR_ROLE) {\n            if (reportIndex >_enterpriseReports[enterprise].length) {\n                revert InspectionManager__InvalidReportIndex();\n            }\n            \n            if (_enterpriseReports[enterprise][reportIndex].flagged) {\n                revert InspectionManager__ReportAlreadyFlagged();\n            }\n\n            _enterpriseReports[enterprise][reportIndex].flagged = true;\n\n            DataTypes.FlaggedInspection memory flagged = DataTypes.FlaggedInspection({\n                enterprise: enterprise,\n                reportIndex: reportIndex,\n                report: _enterpriseReports[enterprise][reportIndex],\n                flaggedBy: msg.sender,\n                reason: reason,\n                flaggedAt: block.timestamp\n            });\n\n            _flaggedInspections[_flagCounter] = flagged;\n            _enterpriseFlaggedReports[enterprise].push(_flagCounter);\n            _flagCounter++;\n\n            emit Events.InspectionReportFlagged(\n                enterprise,\n                reportIndex,\n                msg.sender,\n                reason,\n                block.timestamp\n            );\n\n        }\n\n\n    ////////////////////////////////////////////////\n    /////// CROSS-CONTRACT VALIDATION /////////////\n    //////////////////////////////////////////////\n    function _isInspectorAssigned(address enterprise, address inspector) private view returns(bool) {\n        for (uint256 i = 0; i < _enterpriseInspectors[enterprise].length; i++) {\n            if (_enterpriseInspectors[enterprise][i] == inspector) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    //////////////////////////////////////////////\n    //////// COMPEREHENSIVE GETTERS /////////////\n    ////////////////////////////////////////////\n    function getEnterpriseInspectors(address enterprise)\n    public \n    view \n    returns(address[] memory, uint256[] memory validityPeriods)\n     {\n        address[] memory inspectors = _enterpriseInspectors[enterprise];\n        uint256[] memory periods = new uint256[](inspectors.length);\n\n        for (uint256 i = 0; i < inspectors.length; i++) {\n            periods[i] = _lastInspectionTimestamps[enterprise][inspectors[i]];\n        }\n\n        return (inspectors, periods);\n     }\n\n    function getInspectorReports(address inspector)\n      public\n      view \n      returns(DataTypes.InspectionReport[] memory) {\n\n      address[] memory enterprises = _inspectorEnterprises[inspector];\n      uint256 totalReports;\n\n      // First pass: count reports\n      for (uint256 i = 0; i < enterprises.length; i++) {\n        totalReports += _enterpriseReports[enterprises[i]].length;\n      }\n\n     // Second pass: collect reports\n    DataTypes.InspectionReport[] memory reports = new DataTypes.InspectionReport[](totalReports);\n    uint256 counter;\n\n    for (uint256 i = 0; i < enterprises.length; i++) {\n        for (uint256 j = 0; j <_enterpriseReports[enterprises[i]].length; j++) {\n            if (_enterpriseReports[enterprises[i]][j].inspector == inspector) {\n                reports[counter++] = _enterpriseReports[enterprises[i]][j];\n            }\n        }\n    }    \n\n        return reports;\n    }\n\n    /////////////////////////////////////////\n    /// Simple reports getter for testing////\n    /////////////////////////////////////////\n      function getEnterpriseInspectionReports(address enterprise) external view returns(DataTypes.InspectionReport[] memory) {\n\n        if (_enterpriseReports[enterprise].length == 0) {\n            revert InspectionManager__NoReportsAssociatedWithEnterprise();\n        }\n        return _enterpriseReports[enterprise];\n    }\n\n\n\n    //////////////////////////////////////////\n    ///// FLAGGED INSPECTION GETTERS ////////\n    ////////////////////////////////////////\n    function getFlaggedInspections(uint256 limit, uint256 offset) \n        public view \n        returns(DataTypes.FlaggedInspection[] memory) {\n            uint256 resultSize = limit > _flagCounter - offset ?  _flagCounter - offset : limit;\n            DataTypes.FlaggedInspection[] memory result = new DataTypes.FlaggedInspection[](resultSize);\n\n            for (uint256 i = 0; i < resultSize; i++) {\n                result[i] = _flaggedInspections[offset + i];\n            }\n\n            return result;\n    }\n\n    function getEnterpriseFlaggedReports(address enterprise)\n    public\n    view\n    returns(DataTypes.FlaggedInspection[] memory) {\n        uint256[] memory flaggedIds = _enterpriseFlaggedReports[enterprise];\n        DataTypes.FlaggedInspection[] memory result = new DataTypes.FlaggedInspection[](flaggedIds.length);\n\n        for (uint256 i = 0; i < flaggedIds.length; i++) {\n            result[i] = _flaggedInspections[flaggedIds[i]];\n        }\n        return result;\n    }\n}"},"contracts/utils/DataTypes.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n* @author @0xJonaseb11\n* @dev This library contains the data types used by the contracts\n* @dev These structs hold a huge role in maintaining contract states\n*/\nlibrary DataTypes {\n    struct Certification {\n        string industry;\n        string metadataURI;\n        uint256 certifiedAt;\n        uint256 expiryDate;\n        bool isCertified;\n        uint256 tokenId;\n    }\n\n    struct Enterprise {\n        address enterpriseAddress;\n        string name;\n        string industry;\n        string metadataURI;\n        bool isRegistered;\n        uint256 registrationDate;\n        uint256 lastUpdated;\n        uint256 certificateId;\n    }\n\n    struct InspectionReport {\n        address inspector;\n        address enterprise;\n        string remarks;\n        string evidenceURI; // IPFS hash\n        uint256 inspectedAt;\n        bool passed;\n        bool flagged;\n    }\n\n    struct FlaggedInspection {\n        address enterprise;\n        uint256 reportIndex;\n        InspectionReport report;\n        address flaggedBy;\n        string reason;\n        uint256 flaggedAt;\n    }\n\n    struct NFTCertificate {\n    address enterprise;\n    address issuer;\n    uint256 issuedAt;\n    uint256 expiresAt;\n    bool isRevoked;\n    }\n\n    struct AuditCase {\n        uint256 id;\n        address targetEnterprise;\n        uint256 inspectionId;\n        address auditor;\n        string reason;\n        string evidenceURI;\n        uint256 depositAmount;\n        AuditStatus status;\n        uint256 createdAt;\n        uint256 resolvedAt;\n    }\n\n    enum AuditStatus {\n        Pending,\n        Upheld,\n        Rejected,\n        Appealed\n    }\n}"},"contracts/utils/Errors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n* @author @0xJonaseb11\n* @dev contains the custom errors emitted by the contracts\n@notice All the contracts inherit this to handle custom errors\n*/\n\ncontract Errors {\n    error InvalidAddress();\n\n    // -------- RolesManager ------------------//\n    error RolesManager__UnauthorizedToPerformAction();\n    error RolesManager__NotAuthorizedCertifier();\n    error RolesManager__NotAuthorizedInspector();\n    error RolesManager__NotAuthorizedAuditor();\n    error RolesManager__NotAuthorizedEnterprise();\n    error RolesManager__NotAuthorizedCertificateFactory();\n    error RolesManager__NotAuthorizedPublicUser();\n    error RolesManager__AlreadyHasRole();\n    error RolesManager__InvalidDuration();\n    error RolesManager__EmptyArray();\n    error RolesManager__ArrayLengthMismatch();\n    error RolesManager__RoleDoesNotExist();\n\n    // ------- EnterpriseRegistry --------------//\n    error EnterpriseRegistry__EnterpriseAlreadyExists();\n    error EnterpriseRegistry__EnterpriseDoesNotExist();\n    error EnterpriseRegistry__InvalidStart();\n\n    // ------- CertificationAuthority ------- //\n    error CertificationAuthority__EnterpriseAlreadyCertified();\n    error CertificationAuthority__EnterpriseNotCertifiedYet();\n    error CertificationAuthority__CertificationNotExpiredYet();\n\n    // -------- CertificateNFT --------- //\n    error CertificateNFT__EnterpriseAlreadyCertified();\n    error CertificateNFT__CertificateDoesNotExist();\n\n    // -------- InspectionManageer --------- //\n    error InspectionManager__InspectorAlreadyAssigned();\n    error InspectionManager__InspectionPeriodExpired();\n    error InspectionManager__NotAssignedToEnterprise();\n    error InspectionManager__InvalidReportIndex();\n    error InspectionManager__ReportAlreadyFlagged();\n    error InspectionManager__NoReportsAssociatedWithEnterprise();\n\n\n    // ---------- InspectionReport ----------- //\n\n    error AuditorOversight__NotAuthorizedEnterpriseOwner();\n    error AuditorOversight__AppealWindowClosed();\n    error AuditorOversight__CaseNotPending();\n\n}"},"contracts/utils/Events.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n/**\n* @author @0xJonaseb11\n* @dev This library contains the events emitted by the contracts\n* @dev All the contracts inherit this to handle events\n*/\n\nlibrary Events {\n    event CertificationGranted(address indexed enterprise, string industry, string metadataURI, uint256 expiryDate);\n    event CertificationRevoked(address indexed enterprise);\n    event CertificationUpdated(address indexed enterprise, string newMetadataURI);\n\n    event EnterpriseRegistered(address indexed enterprise, string name, string industry, string metadataURI, uint256 certificateId);\n    event EnterpriseUpdated(address indexed enterprise, string newMetadataURI);\n    event EnterpriseDeregistered(address indexed enterprise, uint256 deregisteredAt);\n    \n    event InspectorAssigned(address indexed enterprise, address indexed inspector, uint256 validityPeriod);\n    event InspectionReportSubmitted(address indexed inspector, address indexed enterprise, bool passed, string remarks, string evidenceURI, uint256 ReportedAt);\n    event InspectionReportFlagged(address indexed enterprise, uint256 indexed reportIndex, address flaggedBy, string reason, uint256 timestamp);\n    \n    event CertificateMinted(uint256 certificateId, address indexed enterprise, address indexed certifier, uint256 mintedAt);\n    event CertificateRevoked(uint256 certificateId, address indexed revoker, uint256 timestamp);\n\n\n    event PublicRoleGranted(address indexed user, uint256 duration);\n    event PublicRoleExpired(address indexed user);\n    event RoleTransferred(bytes32 indexed role, address from, address to);\n    event BulkRolesGranted(bytes32[] roles, address[] indexed accounts);\n    event RoleGranted(bytes32 indexed role, address indexed account);\n    event RoleRevoked(bytes32 indexed role, address indexed account);\n\n    event AuditInitiated(uint256 indexed caseId, address indexed enterprise, uint256 inspectionId, address auditor, string reason, string evidenceURI);\n    event AuditResolved(uint256 indexed caseId, address indexed enterprise, address resolvedBy, bool upheld, string remarks);\n    event AppealFiled(uint256 indexed caseid, address indexed enterprise, string counterEvidenceURI, uint256 timestamp);\n\n}    "}},"settings":{"optimizer":{"enabled":true,"runs":200},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts/access/AccessControl.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","exportedSymbols":{"AccessControl":[295],"Context":[1904],"ERC165":[2183],"IAccessControl":[378]},"id":296,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"108:24:0"},{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","file":"./IAccessControl.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":296,"sourceUnit":379,"src":"134:52:0","symbolAliases":[{"foreign":{"id":2,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":378,"src":"142:14:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":296,"sourceUnit":1905,"src":"187:45:0","symbolAliases":[{"foreign":{"id":4,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1904,"src":"195:7:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../utils/introspection/ERC165.sol","id":7,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":296,"sourceUnit":2184,"src":"233:57:0","symbolAliases":[{"foreign":{"id":6,"name":"ERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2183,"src":"241:6:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":9,"name":"Context","nameLocations":["1988:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":1904,"src":"1988:7:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"1988:7:0"},{"baseName":{"id":11,"name":"IAccessControl","nameLocations":["1997:14:0"],"nodeType":"IdentifierPath","referencedDeclaration":378,"src":"1997:14:0"},"id":12,"nodeType":"InheritanceSpecifier","src":"1997:14:0"},{"baseName":{"id":13,"name":"ERC165","nameLocations":["2013:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":2183,"src":"2013:6:0"},"id":14,"nodeType":"InheritanceSpecifier","src":"2013:6:0"}],"canonicalName":"AccessControl","contractDependencies":[],"contractKind":"contract","documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"292:1660:0","text":" @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```solidity\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```solidity\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n to enforce additional security measures for this role."},"fullyImplemented":true,"id":295,"linearizedBaseContracts":[295,2183,2195,378,1904],"name":"AccessControl","nameLocation":"1971:13:0","nodeType":"ContractDefinition","nodes":[{"canonicalName":"AccessControl.RoleData","id":21,"members":[{"constant":false,"id":18,"mutability":"mutable","name":"hasRole","nameLocation":"2085:7:0","nodeType":"VariableDeclaration","scope":21,"src":"2052:40:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":17,"keyName":"account","keyNameLocation":"2068:7:0","keyType":{"id":15,"name":"address","nodeType":"ElementaryTypeName","src":"2060:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2052:32:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":16,"name":"bool","nodeType":"ElementaryTypeName","src":"2079:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":20,"mutability":"mutable","name":"adminRole","nameLocation":"2110:9:0","nodeType":"VariableDeclaration","scope":21,"src":"2102:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":19,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2102:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"RoleData","nameLocation":"2033:8:0","nodeType":"StructDefinition","scope":295,"src":"2026:100:0","visibility":"public"},{"constant":false,"id":26,"mutability":"mutable","name":"_roles","nameLocation":"2174:6:0","nodeType":"VariableDeclaration","scope":295,"src":"2132:48:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData)"},"typeName":{"id":25,"keyName":"role","keyNameLocation":"2148:4:0","keyType":{"id":22,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2140:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2132:33:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":24,"nodeType":"UserDefinedTypeName","pathNode":{"id":23,"name":"RoleData","nameLocations":["2156:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":21,"src":"2156:8:0"},"referencedDeclaration":21,"src":"2156:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$21_storage_ptr","typeString":"struct AccessControl.RoleData"}}},"visibility":"private"},{"constant":true,"functionSelector":"a217fddf","id":29,"mutability":"constant","name":"DEFAULT_ADMIN_ROLE","nameLocation":"2211:18:0","nodeType":"VariableDeclaration","scope":295,"src":"2187:49:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":27,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2187:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30783030","id":28,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2232:4:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"public"},{"body":{"id":39,"nodeType":"Block","src":"2454:44:0","statements":[{"expression":{"arguments":[{"id":35,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"2475:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":34,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[93,114],"referencedDeclaration":93,"src":"2464:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$__$","typeString":"function (bytes32) view"}},"id":36,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2464:16:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":37,"nodeType":"ExpressionStatement","src":"2464:16:0"},{"id":38,"nodeType":"PlaceholderStatement","src":"2490:1:0"}]},"documentation":{"id":30,"nodeType":"StructuredDocumentation","src":"2243:174:0","text":" @dev Modifier that checks that an account has a specific role. Reverts\n with an {AccessControlUnauthorizedAccount} error including the required role."},"id":40,"name":"onlyRole","nameLocation":"2431:8:0","nodeType":"ModifierDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32,"mutability":"mutable","name":"role","nameLocation":"2448:4:0","nodeType":"VariableDeclaration","scope":40,"src":"2440:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":31,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2440:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2439:14:0"},"src":"2422:76:0","virtual":false,"visibility":"internal"},{"baseFunctions":[2182],"body":{"id":61,"nodeType":"Block","src":"2656:111:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":59,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":54,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":49,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43,"src":"2673:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":51,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":378,"src":"2693:14:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$378_$","typeString":"type(contract IAccessControl)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$378_$","typeString":"type(contract IAccessControl)"}],"id":50,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"2688:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":52,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2688:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControl_$378","typeString":"type(contract IAccessControl)"}},"id":53,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2709:11:0","memberName":"interfaceId","nodeType":"MemberAccess","src":"2688:32:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2673:47:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":57,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43,"src":"2748:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":55,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967271,"src":"2724:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControl_$295_$","typeString":"type(contract super AccessControl)"}},"id":56,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2730:17:0","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":2182,"src":"2724:23:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":58,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2724:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2673:87:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":48,"id":60,"nodeType":"Return","src":"2666:94:0"}]},"documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"2504:56:0","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":62,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2574:17:0","nodeType":"FunctionDefinition","overrides":{"id":45,"nodeType":"OverrideSpecifier","overrides":[],"src":"2632:8:0"},"parameters":{"id":44,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43,"mutability":"mutable","name":"interfaceId","nameLocation":"2599:11:0","nodeType":"VariableDeclaration","scope":62,"src":"2592:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":42,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2592:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2591:20:0"},"returnParameters":{"id":48,"nodeType":"ParameterList","parameters":[{"constant":false,"id":47,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":62,"src":"2650:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":46,"name":"bool","nodeType":"ElementaryTypeName","src":"2650:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2649:6:0"},"scope":295,"src":"2565:202:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[345],"body":{"id":79,"nodeType":"Block","src":"2937:53:0","statements":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":72,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"2954:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":74,"indexExpression":{"id":73,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65,"src":"2961:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2954:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$21_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":75,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2967:7:0","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":18,"src":"2954:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":77,"indexExpression":{"id":76,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"2975:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2954:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":71,"id":78,"nodeType":"Return","src":"2947:36:0"}]},"documentation":{"id":63,"nodeType":"StructuredDocumentation","src":"2773:76:0","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":80,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"2863:7:0","nodeType":"FunctionDefinition","parameters":{"id":68,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65,"mutability":"mutable","name":"role","nameLocation":"2879:4:0","nodeType":"VariableDeclaration","scope":80,"src":"2871:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":64,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2871:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":67,"mutability":"mutable","name":"account","nameLocation":"2893:7:0","nodeType":"VariableDeclaration","scope":80,"src":"2885:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":66,"name":"address","nodeType":"ElementaryTypeName","src":"2885:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2870:31:0"},"returnParameters":{"id":71,"nodeType":"ParameterList","parameters":[{"constant":false,"id":70,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":80,"src":"2931:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":69,"name":"bool","nodeType":"ElementaryTypeName","src":"2931:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2930:6:0"},"scope":295,"src":"2854:136:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":92,"nodeType":"Block","src":"3255:47:0","statements":[{"expression":{"arguments":[{"id":87,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":83,"src":"3276:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":88,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"3282:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":89,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3282:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":86,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[93,114],"referencedDeclaration":114,"src":"3265:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) view"}},"id":90,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3265:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":91,"nodeType":"ExpressionStatement","src":"3265:30:0"}]},"documentation":{"id":81,"nodeType":"StructuredDocumentation","src":"2996:198:0","text":" @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier."},"id":93,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3208:10:0","nodeType":"FunctionDefinition","parameters":{"id":84,"nodeType":"ParameterList","parameters":[{"constant":false,"id":83,"mutability":"mutable","name":"role","nameLocation":"3227:4:0","nodeType":"VariableDeclaration","scope":93,"src":"3219:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":82,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3219:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3218:14:0"},"returnParameters":{"id":85,"nodeType":"ParameterList","parameters":[],"src":"3255:0:0"},"scope":295,"src":"3199:103:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":113,"nodeType":"Block","src":"3505:124:0","statements":[{"condition":{"id":105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3519:23:0","subExpression":{"arguments":[{"id":102,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":96,"src":"3528:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":103,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"3534:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":101,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"3520:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3520:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":112,"nodeType":"IfStatement","src":"3515:108:0","trueBody":{"id":111,"nodeType":"Block","src":"3544:79:0","statements":[{"errorCall":{"arguments":[{"id":107,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"3598:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":108,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":96,"src":"3607:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":106,"name":"AccessControlUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":305,"src":"3565:32:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_bytes32_$returns$__$","typeString":"function (address,bytes32) pure"}},"id":109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3565:47:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":110,"nodeType":"RevertStatement","src":"3558:54:0"}]}}]},"documentation":{"id":94,"nodeType":"StructuredDocumentation","src":"3308:119:0","text":" @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n is missing `role`."},"id":114,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3441:10:0","nodeType":"FunctionDefinition","parameters":{"id":99,"nodeType":"ParameterList","parameters":[{"constant":false,"id":96,"mutability":"mutable","name":"role","nameLocation":"3460:4:0","nodeType":"VariableDeclaration","scope":114,"src":"3452:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":95,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3452:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":98,"mutability":"mutable","name":"account","nameLocation":"3474:7:0","nodeType":"VariableDeclaration","scope":114,"src":"3466:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":97,"name":"address","nodeType":"ElementaryTypeName","src":"3466:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3451:31:0"},"returnParameters":{"id":100,"nodeType":"ParameterList","parameters":[],"src":"3505:0:0"},"scope":295,"src":"3432:197:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[353],"body":{"id":127,"nodeType":"Block","src":"3884:46:0","statements":[{"expression":{"expression":{"baseExpression":{"id":122,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"3901:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":124,"indexExpression":{"id":123,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"3908:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3901:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$21_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":125,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3914:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":20,"src":"3901:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":121,"id":126,"nodeType":"Return","src":"3894:29:0"}]},"documentation":{"id":115,"nodeType":"StructuredDocumentation","src":"3635:170:0","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."},"functionSelector":"248a9ca3","id":128,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"3819:12:0","nodeType":"FunctionDefinition","parameters":{"id":118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":117,"mutability":"mutable","name":"role","nameLocation":"3840:4:0","nodeType":"VariableDeclaration","scope":128,"src":"3832:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":116,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3832:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3831:14:0"},"returnParameters":{"id":121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":120,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":128,"src":"3875:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":119,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3875:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3874:9:0"},"scope":295,"src":"3810:120:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[361],"body":{"id":146,"nodeType":"Block","src":"4320:42:0","statements":[{"expression":{"arguments":[{"id":142,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":131,"src":"4341:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":143,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":133,"src":"4347:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":141,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"4330:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4330:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":145,"nodeType":"ExpressionStatement","src":"4330:25:0"}]},"documentation":{"id":129,"nodeType":"StructuredDocumentation","src":"3936:285:0","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleGranted} event."},"functionSelector":"2f2ff15d","id":147,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":137,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":131,"src":"4313:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":136,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"4300:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4300:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":139,"kind":"modifierInvocation","modifierName":{"id":135,"name":"onlyRole","nameLocations":["4291:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"4291:8:0"},"nodeType":"ModifierInvocation","src":"4291:28:0"}],"name":"grantRole","nameLocation":"4235:9:0","nodeType":"FunctionDefinition","parameters":{"id":134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":131,"mutability":"mutable","name":"role","nameLocation":"4253:4:0","nodeType":"VariableDeclaration","scope":147,"src":"4245:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":130,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4245:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":133,"mutability":"mutable","name":"account","nameLocation":"4267:7:0","nodeType":"VariableDeclaration","scope":147,"src":"4259:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":132,"name":"address","nodeType":"ElementaryTypeName","src":"4259:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4244:31:0"},"returnParameters":{"id":140,"nodeType":"ParameterList","parameters":[],"src":"4320:0:0"},"scope":295,"src":"4226:136:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[369],"body":{"id":165,"nodeType":"Block","src":"4737:43:0","statements":[{"expression":{"arguments":[{"id":161,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"4759:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":162,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":152,"src":"4765:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":160,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"4747:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4747:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":164,"nodeType":"ExpressionStatement","src":"4747:26:0"}]},"documentation":{"id":148,"nodeType":"StructuredDocumentation","src":"4368:269:0","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleRevoked} event."},"functionSelector":"d547741f","id":166,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":156,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"4730:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":155,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"4717:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4717:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":158,"kind":"modifierInvocation","modifierName":{"id":154,"name":"onlyRole","nameLocations":["4708:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"4708:8:0"},"nodeType":"ModifierInvocation","src":"4708:28:0"}],"name":"revokeRole","nameLocation":"4651:10:0","nodeType":"FunctionDefinition","parameters":{"id":153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":150,"mutability":"mutable","name":"role","nameLocation":"4670:4:0","nodeType":"VariableDeclaration","scope":166,"src":"4662:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":149,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4662:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":152,"mutability":"mutable","name":"account","nameLocation":"4684:7:0","nodeType":"VariableDeclaration","scope":166,"src":"4676:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":151,"name":"address","nodeType":"ElementaryTypeName","src":"4676:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4661:31:0"},"returnParameters":{"id":159,"nodeType":"ParameterList","parameters":[],"src":"4737:0:0"},"scope":295,"src":"4642:138:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[377],"body":{"id":188,"nodeType":"Block","src":"5407:166:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":174,"name":"callerConfirmation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"5421:18:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":175,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"5443:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5443:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5421:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":182,"nodeType":"IfStatement","src":"5417:102:0","trueBody":{"id":181,"nodeType":"Block","src":"5457:62:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":178,"name":"AccessControlBadConfirmation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":308,"src":"5478:28:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5478:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":180,"nodeType":"RevertStatement","src":"5471:37:0"}]}},{"expression":{"arguments":[{"id":184,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":169,"src":"5541:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":185,"name":"callerConfirmation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"5547:18:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":183,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"5529:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5529:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":187,"nodeType":"ExpressionStatement","src":"5529:37:0"}]},"documentation":{"id":167,"nodeType":"StructuredDocumentation","src":"4786:537:0","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `callerConfirmation`.\n May emit a {RoleRevoked} event."},"functionSelector":"36568abe","id":189,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"5337:12:0","nodeType":"FunctionDefinition","parameters":{"id":172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":169,"mutability":"mutable","name":"role","nameLocation":"5358:4:0","nodeType":"VariableDeclaration","scope":189,"src":"5350:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":168,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5350:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":171,"mutability":"mutable","name":"callerConfirmation","nameLocation":"5372:18:0","nodeType":"VariableDeclaration","scope":189,"src":"5364:26:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":170,"name":"address","nodeType":"ElementaryTypeName","src":"5364:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5349:42:0"},"returnParameters":{"id":173,"nodeType":"ParameterList","parameters":[],"src":"5407:0:0"},"scope":295,"src":"5328:245:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":216,"nodeType":"Block","src":"5771:174:0","statements":[{"assignments":[198],"declarations":[{"constant":false,"id":198,"mutability":"mutable","name":"previousAdminRole","nameLocation":"5789:17:0","nodeType":"VariableDeclaration","scope":216,"src":"5781:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":197,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5781:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":202,"initialValue":{"arguments":[{"id":200,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"5822:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":199,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"5809:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5809:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5781:46:0"},{"expression":{"id":208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":203,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"5837:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":205,"indexExpression":{"id":204,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"5844:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5837:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$21_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":206,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5850:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":20,"src":"5837:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":207,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"5862:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5837:34:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":209,"nodeType":"ExpressionStatement","src":"5837:34:0"},{"eventCall":{"arguments":[{"id":211,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"5903:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":212,"name":"previousAdminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":198,"src":"5909:17:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":213,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"5928:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":210,"name":"RoleAdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":317,"src":"5886:16:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32,bytes32)"}},"id":214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5886:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":215,"nodeType":"EmitStatement","src":"5881:57:0"}]},"documentation":{"id":190,"nodeType":"StructuredDocumentation","src":"5579:114:0","text":" @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."},"id":217,"implemented":true,"kind":"function","modifiers":[],"name":"_setRoleAdmin","nameLocation":"5707:13:0","nodeType":"FunctionDefinition","parameters":{"id":195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":192,"mutability":"mutable","name":"role","nameLocation":"5729:4:0","nodeType":"VariableDeclaration","scope":217,"src":"5721:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":191,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5721:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":194,"mutability":"mutable","name":"adminRole","nameLocation":"5743:9:0","nodeType":"VariableDeclaration","scope":217,"src":"5735:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":193,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5735:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5720:33:0"},"returnParameters":{"id":196,"nodeType":"ParameterList","parameters":[],"src":"5771:0:0"},"scope":295,"src":"5698:247:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":255,"nodeType":"Block","src":"6262:233:0","statements":[{"condition":{"id":231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6276:23:0","subExpression":{"arguments":[{"id":228,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":220,"src":"6285:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":229,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":222,"src":"6291:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":227,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"6277:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6277:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":253,"nodeType":"Block","src":"6452:37:0","statements":[{"expression":{"hexValue":"66616c7365","id":251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6473:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":226,"id":252,"nodeType":"Return","src":"6466:12:0"}]},"id":254,"nodeType":"IfStatement","src":"6272:217:0","trueBody":{"id":250,"nodeType":"Block","src":"6301:145:0","statements":[{"expression":{"id":239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":232,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"6315:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":234,"indexExpression":{"id":233,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":220,"src":"6322:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6315:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$21_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":235,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6328:7:0","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":18,"src":"6315:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":237,"indexExpression":{"id":236,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":222,"src":"6336:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6315:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6347:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"6315:36:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":240,"nodeType":"ExpressionStatement","src":"6315:36:0"},{"eventCall":{"arguments":[{"id":242,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":220,"src":"6382:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":243,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":222,"src":"6388:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":244,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"6397:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6397:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":241,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":326,"src":"6370:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6370:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":247,"nodeType":"EmitStatement","src":"6365:45:0"},{"expression":{"hexValue":"74727565","id":248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6431:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":226,"id":249,"nodeType":"Return","src":"6424:11:0"}]}}]},"documentation":{"id":218,"nodeType":"StructuredDocumentation","src":"5951:223:0","text":" @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n Internal function without access restriction.\n May emit a {RoleGranted} event."},"id":256,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"6188:10:0","nodeType":"FunctionDefinition","parameters":{"id":223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":220,"mutability":"mutable","name":"role","nameLocation":"6207:4:0","nodeType":"VariableDeclaration","scope":256,"src":"6199:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":219,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6199:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":222,"mutability":"mutable","name":"account","nameLocation":"6221:7:0","nodeType":"VariableDeclaration","scope":256,"src":"6213:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":221,"name":"address","nodeType":"ElementaryTypeName","src":"6213:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6198:31:0"},"returnParameters":{"id":226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":225,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":256,"src":"6256:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":224,"name":"bool","nodeType":"ElementaryTypeName","src":"6256:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6255:6:0"},"scope":295,"src":"6179:316:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":293,"nodeType":"Block","src":"6814:233:0","statements":[{"condition":{"arguments":[{"id":267,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":259,"src":"6836:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":268,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":261,"src":"6842:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":266,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"6828:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6828:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":291,"nodeType":"Block","src":"7004:37:0","statements":[{"expression":{"hexValue":"66616c7365","id":289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7025:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":265,"id":290,"nodeType":"Return","src":"7018:12:0"}]},"id":292,"nodeType":"IfStatement","src":"6824:217:0","trueBody":{"id":288,"nodeType":"Block","src":"6852:146:0","statements":[{"expression":{"id":277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":270,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"6866:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":272,"indexExpression":{"id":271,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":259,"src":"6873:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6866:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$21_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":273,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6879:7:0","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":18,"src":"6866:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":275,"indexExpression":{"id":274,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":261,"src":"6887:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6866:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6898:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"6866:37:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":278,"nodeType":"ExpressionStatement","src":"6866:37:0"},{"eventCall":{"arguments":[{"id":280,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":259,"src":"6934:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":281,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":261,"src":"6940:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":282,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"6949:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6949:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":279,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"6922:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6922:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":285,"nodeType":"EmitStatement","src":"6917:45:0"},{"expression":{"hexValue":"74727565","id":286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6983:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":265,"id":287,"nodeType":"Return","src":"6976:11:0"}]}}]},"documentation":{"id":257,"nodeType":"StructuredDocumentation","src":"6501:224:0","text":" @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n Internal function without access restriction.\n May emit a {RoleRevoked} event."},"id":294,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"6739:11:0","nodeType":"FunctionDefinition","parameters":{"id":262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":259,"mutability":"mutable","name":"role","nameLocation":"6759:4:0","nodeType":"VariableDeclaration","scope":294,"src":"6751:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":258,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6751:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":261,"mutability":"mutable","name":"account","nameLocation":"6773:7:0","nodeType":"VariableDeclaration","scope":294,"src":"6765:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":260,"name":"address","nodeType":"ElementaryTypeName","src":"6765:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6750:31:0"},"returnParameters":{"id":265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":264,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":294,"src":"6808:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":263,"name":"bool","nodeType":"ElementaryTypeName","src":"6808:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6807:6:0"},"scope":295,"src":"6730:317:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":296,"src":"1953:5096:0","usedErrors":[305,308],"usedEvents":[317,326,335]}],"src":"108:6942:0"},"id":0},"@openzeppelin/contracts/access/IAccessControl.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","exportedSymbols":{"IAccessControl":[378]},"id":379,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":297,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControl","contractDependencies":[],"contractKind":"interface","documentation":{"id":298,"nodeType":"StructuredDocumentation","src":"135:89:1","text":" @dev External interface of AccessControl declared to support ERC165 detection."},"fullyImplemented":false,"id":378,"linearizedBaseContracts":[378],"name":"IAccessControl","nameLocation":"235:14:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":299,"nodeType":"StructuredDocumentation","src":"256:56:1","text":" @dev The `account` is missing a role."},"errorSelector":"e2517d3f","id":305,"name":"AccessControlUnauthorizedAccount","nameLocation":"323:32:1","nodeType":"ErrorDefinition","parameters":{"id":304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":301,"mutability":"mutable","name":"account","nameLocation":"364:7:1","nodeType":"VariableDeclaration","scope":305,"src":"356:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":300,"name":"address","nodeType":"ElementaryTypeName","src":"356:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":303,"mutability":"mutable","name":"neededRole","nameLocation":"381:10:1","nodeType":"VariableDeclaration","scope":305,"src":"373:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":302,"name":"bytes32","nodeType":"ElementaryTypeName","src":"373:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"355:37:1"},"src":"317:76:1"},{"documentation":{"id":306,"nodeType":"StructuredDocumentation","src":"399:148:1","text":" @dev The caller of a function is not the expected one.\n NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."},"errorSelector":"6697b232","id":308,"name":"AccessControlBadConfirmation","nameLocation":"558:28:1","nodeType":"ErrorDefinition","parameters":{"id":307,"nodeType":"ParameterList","parameters":[],"src":"586:2:1"},"src":"552:37:1"},{"anonymous":false,"documentation":{"id":309,"nodeType":"StructuredDocumentation","src":"595:254:1","text":" @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted signaling this."},"eventSelector":"bd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff","id":317,"name":"RoleAdminChanged","nameLocation":"860:16:1","nodeType":"EventDefinition","parameters":{"id":316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":311,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"893:4:1","nodeType":"VariableDeclaration","scope":317,"src":"877:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":310,"name":"bytes32","nodeType":"ElementaryTypeName","src":"877:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":313,"indexed":true,"mutability":"mutable","name":"previousAdminRole","nameLocation":"915:17:1","nodeType":"VariableDeclaration","scope":317,"src":"899:33:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":312,"name":"bytes32","nodeType":"ElementaryTypeName","src":"899:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":315,"indexed":true,"mutability":"mutable","name":"newAdminRole","nameLocation":"950:12:1","nodeType":"VariableDeclaration","scope":317,"src":"934:28:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":314,"name":"bytes32","nodeType":"ElementaryTypeName","src":"934:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"876:87:1"},"src":"854:110:1"},{"anonymous":false,"documentation":{"id":318,"nodeType":"StructuredDocumentation","src":"970:212:1","text":" @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call, an admin role\n bearer except when using {AccessControl-_setupRole}."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":326,"name":"RoleGranted","nameLocation":"1193:11:1","nodeType":"EventDefinition","parameters":{"id":325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":320,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1221:4:1","nodeType":"VariableDeclaration","scope":326,"src":"1205:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":319,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1205:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":322,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1243:7:1","nodeType":"VariableDeclaration","scope":326,"src":"1227:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":321,"name":"address","nodeType":"ElementaryTypeName","src":"1227:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":324,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1268:6:1","nodeType":"VariableDeclaration","scope":326,"src":"1252:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":323,"name":"address","nodeType":"ElementaryTypeName","src":"1252:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1204:71:1"},"src":"1187:89:1"},{"anonymous":false,"documentation":{"id":327,"nodeType":"StructuredDocumentation","src":"1282:275:1","text":" @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":335,"name":"RoleRevoked","nameLocation":"1568:11:1","nodeType":"EventDefinition","parameters":{"id":334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":329,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1596:4:1","nodeType":"VariableDeclaration","scope":335,"src":"1580:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":328,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1580:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":331,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1618:7:1","nodeType":"VariableDeclaration","scope":335,"src":"1602:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":330,"name":"address","nodeType":"ElementaryTypeName","src":"1602:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":333,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1643:6:1","nodeType":"VariableDeclaration","scope":335,"src":"1627:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":332,"name":"address","nodeType":"ElementaryTypeName","src":"1627:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1579:71:1"},"src":"1562:89:1"},{"documentation":{"id":336,"nodeType":"StructuredDocumentation","src":"1657:76:1","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":345,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"1747:7:1","nodeType":"FunctionDefinition","parameters":{"id":341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":338,"mutability":"mutable","name":"role","nameLocation":"1763:4:1","nodeType":"VariableDeclaration","scope":345,"src":"1755:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":337,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1755:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":340,"mutability":"mutable","name":"account","nameLocation":"1777:7:1","nodeType":"VariableDeclaration","scope":345,"src":"1769:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":339,"name":"address","nodeType":"ElementaryTypeName","src":"1769:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1754:31:1"},"returnParameters":{"id":344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":343,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":345,"src":"1809:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":342,"name":"bool","nodeType":"ElementaryTypeName","src":"1809:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1808:6:1"},"scope":378,"src":"1738:77:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":346,"nodeType":"StructuredDocumentation","src":"1821:184:1","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."},"functionSelector":"248a9ca3","id":353,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"2019:12:1","nodeType":"FunctionDefinition","parameters":{"id":349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":348,"mutability":"mutable","name":"role","nameLocation":"2040:4:1","nodeType":"VariableDeclaration","scope":353,"src":"2032:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":347,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2032:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2031:14:1"},"returnParameters":{"id":352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":351,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":353,"src":"2069:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":350,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2069:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2068:9:1"},"scope":378,"src":"2010:68:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":354,"nodeType":"StructuredDocumentation","src":"2084:239:1","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"2f2ff15d","id":361,"implemented":false,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"2337:9:1","nodeType":"FunctionDefinition","parameters":{"id":359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":356,"mutability":"mutable","name":"role","nameLocation":"2355:4:1","nodeType":"VariableDeclaration","scope":361,"src":"2347:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":355,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2347:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":358,"mutability":"mutable","name":"account","nameLocation":"2369:7:1","nodeType":"VariableDeclaration","scope":361,"src":"2361:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":357,"name":"address","nodeType":"ElementaryTypeName","src":"2361:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2346:31:1"},"returnParameters":{"id":360,"nodeType":"ParameterList","parameters":[],"src":"2386:0:1"},"scope":378,"src":"2328:59:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":362,"nodeType":"StructuredDocumentation","src":"2393:223:1","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"d547741f","id":369,"implemented":false,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"2630:10:1","nodeType":"FunctionDefinition","parameters":{"id":367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":364,"mutability":"mutable","name":"role","nameLocation":"2649:4:1","nodeType":"VariableDeclaration","scope":369,"src":"2641:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":363,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2641:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":366,"mutability":"mutable","name":"account","nameLocation":"2663:7:1","nodeType":"VariableDeclaration","scope":369,"src":"2655:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":365,"name":"address","nodeType":"ElementaryTypeName","src":"2655:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2640:31:1"},"returnParameters":{"id":368,"nodeType":"ParameterList","parameters":[],"src":"2680:0:1"},"scope":378,"src":"2621:60:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":370,"nodeType":"StructuredDocumentation","src":"2687:491:1","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `callerConfirmation`."},"functionSelector":"36568abe","id":377,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"3192:12:1","nodeType":"FunctionDefinition","parameters":{"id":375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":372,"mutability":"mutable","name":"role","nameLocation":"3213:4:1","nodeType":"VariableDeclaration","scope":377,"src":"3205:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":371,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3205:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":374,"mutability":"mutable","name":"callerConfirmation","nameLocation":"3227:18:1","nodeType":"VariableDeclaration","scope":377,"src":"3219:26:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":373,"name":"address","nodeType":"ElementaryTypeName","src":"3219:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3204:42:1"},"returnParameters":{"id":376,"nodeType":"ParameterList","parameters":[],"src":"3255:0:1"},"scope":378,"src":"3183:73:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":379,"src":"225:3033:1","usedErrors":[305,308],"usedEvents":[317,326,335]}],"src":"109:3150:1"},"id":1},"@openzeppelin/contracts/interfaces/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[2195]},"id":383,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":380,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:2"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../utils/introspection/IERC165.sol","id":382,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":383,"sourceUnit":2196,"src":"132:59:2","symbolAliases":[{"foreign":{"id":381,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2195,"src":"140:7:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""}],"src":"106:86:2"},"id":2},"@openzeppelin/contracts/interfaces/IERC4906.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4906.sol","exportedSymbols":{"IERC165":[2195],"IERC4906":[406],"IERC721":[1673]},"id":407,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":384,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"107:24:3"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC165.sol","file":"./IERC165.sol","id":386,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":407,"sourceUnit":383,"src":"133:38:3","symbolAliases":[{"foreign":{"id":385,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2195,"src":"141:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC721.sol","file":"./IERC721.sol","id":388,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":407,"sourceUnit":411,"src":"172:38:3","symbolAliases":[{"foreign":{"id":387,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1673,"src":"180:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":390,"name":"IERC165","nameLocations":["279:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":2195,"src":"279:7:3"},"id":391,"nodeType":"InheritanceSpecifier","src":"279:7:3"},{"baseName":{"id":392,"name":"IERC721","nameLocations":["288:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":1673,"src":"288:7:3"},"id":393,"nodeType":"InheritanceSpecifier","src":"288:7:3"}],"canonicalName":"IERC4906","contractDependencies":[],"contractKind":"interface","documentation":{"id":389,"nodeType":"StructuredDocumentation","src":"212:45:3","text":"@title EIP-721 Metadata Update Extension"},"fullyImplemented":false,"id":406,"linearizedBaseContracts":[406,1673,2195],"name":"IERC4906","nameLocation":"267:8:3","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":394,"nodeType":"StructuredDocumentation","src":"302:201:3","text":"@dev This event emits when the metadata of a token is changed.\n So that the third-party platforms such as NFT market could\n timely update the images and related attributes of the NFT."},"eventSelector":"f8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7","id":398,"name":"MetadataUpdate","nameLocation":"514:14:3","nodeType":"EventDefinition","parameters":{"id":397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":396,"indexed":false,"mutability":"mutable","name":"_tokenId","nameLocation":"537:8:3","nodeType":"VariableDeclaration","scope":398,"src":"529:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":395,"name":"uint256","nodeType":"ElementaryTypeName","src":"529:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"528:18:3"},"src":"508:39:3"},{"anonymous":false,"documentation":{"id":399,"nodeType":"StructuredDocumentation","src":"553:212:3","text":"@dev This event emits when the metadata of a range of tokens is changed.\n So that the third-party platforms such as NFT market could\n timely update the images and related attributes of the NFTs."},"eventSelector":"6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c","id":405,"name":"BatchMetadataUpdate","nameLocation":"776:19:3","nodeType":"EventDefinition","parameters":{"id":404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":401,"indexed":false,"mutability":"mutable","name":"_fromTokenId","nameLocation":"804:12:3","nodeType":"VariableDeclaration","scope":405,"src":"796:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":400,"name":"uint256","nodeType":"ElementaryTypeName","src":"796:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":403,"indexed":false,"mutability":"mutable","name":"_toTokenId","nameLocation":"826:10:3","nodeType":"VariableDeclaration","scope":405,"src":"818:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":402,"name":"uint256","nodeType":"ElementaryTypeName","src":"818:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"795:42:3"},"src":"770:68:3"}],"scope":407,"src":"257:583:3","usedErrors":[],"usedEvents":[398,405,1572,1581,1590]}],"src":"107:734:3"},"id":3},"@openzeppelin/contracts/interfaces/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC721.sol","exportedSymbols":{"IERC721":[1673]},"id":411,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":408,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:4"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../token/ERC721/IERC721.sol","id":410,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":411,"sourceUnit":1674,"src":"132:52:4","symbolAliases":[{"foreign":{"id":409,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1673,"src":"140:7:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""}],"src":"106:79:4"},"id":4},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","exportedSymbols":{"IERC1155Errors":[547],"IERC20Errors":[452],"IERC721Errors":[500]},"id":548,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":412,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"112:24:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":413,"nodeType":"StructuredDocumentation","src":"138:139:5","text":" @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."},"fullyImplemented":true,"id":452,"linearizedBaseContracts":[452],"name":"IERC20Errors","nameLocation":"288:12:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":414,"nodeType":"StructuredDocumentation","src":"307:309:5","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"e450d38c","id":422,"name":"ERC20InsufficientBalance","nameLocation":"627:24:5","nodeType":"ErrorDefinition","parameters":{"id":421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":416,"mutability":"mutable","name":"sender","nameLocation":"660:6:5","nodeType":"VariableDeclaration","scope":422,"src":"652:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":415,"name":"address","nodeType":"ElementaryTypeName","src":"652:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":418,"mutability":"mutable","name":"balance","nameLocation":"676:7:5","nodeType":"VariableDeclaration","scope":422,"src":"668:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":417,"name":"uint256","nodeType":"ElementaryTypeName","src":"668:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":420,"mutability":"mutable","name":"needed","nameLocation":"693:6:5","nodeType":"VariableDeclaration","scope":422,"src":"685:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":419,"name":"uint256","nodeType":"ElementaryTypeName","src":"685:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"651:49:5"},"src":"621:80:5"},{"documentation":{"id":423,"nodeType":"StructuredDocumentation","src":"707:152:5","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"96c6fd1e","id":427,"name":"ERC20InvalidSender","nameLocation":"870:18:5","nodeType":"ErrorDefinition","parameters":{"id":426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":425,"mutability":"mutable","name":"sender","nameLocation":"897:6:5","nodeType":"VariableDeclaration","scope":427,"src":"889:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":424,"name":"address","nodeType":"ElementaryTypeName","src":"889:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"888:16:5"},"src":"864:41:5"},{"documentation":{"id":428,"nodeType":"StructuredDocumentation","src":"911:159:5","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"ec442f05","id":432,"name":"ERC20InvalidReceiver","nameLocation":"1081:20:5","nodeType":"ErrorDefinition","parameters":{"id":431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":430,"mutability":"mutable","name":"receiver","nameLocation":"1110:8:5","nodeType":"VariableDeclaration","scope":432,"src":"1102:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":429,"name":"address","nodeType":"ElementaryTypeName","src":"1102:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1101:18:5"},"src":"1075:45:5"},{"documentation":{"id":433,"nodeType":"StructuredDocumentation","src":"1126:345:5","text":" @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"fb8f41b2","id":441,"name":"ERC20InsufficientAllowance","nameLocation":"1482:26:5","nodeType":"ErrorDefinition","parameters":{"id":440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":435,"mutability":"mutable","name":"spender","nameLocation":"1517:7:5","nodeType":"VariableDeclaration","scope":441,"src":"1509:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":434,"name":"address","nodeType":"ElementaryTypeName","src":"1509:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":437,"mutability":"mutable","name":"allowance","nameLocation":"1534:9:5","nodeType":"VariableDeclaration","scope":441,"src":"1526:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":436,"name":"uint256","nodeType":"ElementaryTypeName","src":"1526:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":439,"mutability":"mutable","name":"needed","nameLocation":"1553:6:5","nodeType":"VariableDeclaration","scope":441,"src":"1545:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":438,"name":"uint256","nodeType":"ElementaryTypeName","src":"1545:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1508:52:5"},"src":"1476:85:5"},{"documentation":{"id":442,"nodeType":"StructuredDocumentation","src":"1567:174:5","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"e602df05","id":446,"name":"ERC20InvalidApprover","nameLocation":"1752:20:5","nodeType":"ErrorDefinition","parameters":{"id":445,"nodeType":"ParameterList","parameters":[{"constant":false,"id":444,"mutability":"mutable","name":"approver","nameLocation":"1781:8:5","nodeType":"VariableDeclaration","scope":446,"src":"1773:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":443,"name":"address","nodeType":"ElementaryTypeName","src":"1773:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1772:18:5"},"src":"1746:45:5"},{"documentation":{"id":447,"nodeType":"StructuredDocumentation","src":"1797:195:5","text":" @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"94280d62","id":451,"name":"ERC20InvalidSpender","nameLocation":"2003:19:5","nodeType":"ErrorDefinition","parameters":{"id":450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":449,"mutability":"mutable","name":"spender","nameLocation":"2031:7:5","nodeType":"VariableDeclaration","scope":451,"src":"2023:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":448,"name":"address","nodeType":"ElementaryTypeName","src":"2023:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2022:17:5"},"src":"1997:43:5"}],"scope":548,"src":"278:1764:5","usedErrors":[422,427,432,441,446,451],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":453,"nodeType":"StructuredDocumentation","src":"2044:141:5","text":" @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."},"fullyImplemented":true,"id":500,"linearizedBaseContracts":[500],"name":"IERC721Errors","nameLocation":"2196:13:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":454,"nodeType":"StructuredDocumentation","src":"2216:219:5","text":" @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."},"errorSelector":"89c62b64","id":458,"name":"ERC721InvalidOwner","nameLocation":"2446:18:5","nodeType":"ErrorDefinition","parameters":{"id":457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":456,"mutability":"mutable","name":"owner","nameLocation":"2473:5:5","nodeType":"VariableDeclaration","scope":458,"src":"2465:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":455,"name":"address","nodeType":"ElementaryTypeName","src":"2465:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2464:15:5"},"src":"2440:40:5"},{"documentation":{"id":459,"nodeType":"StructuredDocumentation","src":"2486:132:5","text":" @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."},"errorSelector":"7e273289","id":463,"name":"ERC721NonexistentToken","nameLocation":"2629:22:5","nodeType":"ErrorDefinition","parameters":{"id":462,"nodeType":"ParameterList","parameters":[{"constant":false,"id":461,"mutability":"mutable","name":"tokenId","nameLocation":"2660:7:5","nodeType":"VariableDeclaration","scope":463,"src":"2652:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":460,"name":"uint256","nodeType":"ElementaryTypeName","src":"2652:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2651:17:5"},"src":"2623:46:5"},{"documentation":{"id":464,"nodeType":"StructuredDocumentation","src":"2675:289:5","text":" @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."},"errorSelector":"64283d7b","id":472,"name":"ERC721IncorrectOwner","nameLocation":"2975:20:5","nodeType":"ErrorDefinition","parameters":{"id":471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":466,"mutability":"mutable","name":"sender","nameLocation":"3004:6:5","nodeType":"VariableDeclaration","scope":472,"src":"2996:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":465,"name":"address","nodeType":"ElementaryTypeName","src":"2996:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":468,"mutability":"mutable","name":"tokenId","nameLocation":"3020:7:5","nodeType":"VariableDeclaration","scope":472,"src":"3012:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":467,"name":"uint256","nodeType":"ElementaryTypeName","src":"3012:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":470,"mutability":"mutable","name":"owner","nameLocation":"3037:5:5","nodeType":"VariableDeclaration","scope":472,"src":"3029:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":469,"name":"address","nodeType":"ElementaryTypeName","src":"3029:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2995:48:5"},"src":"2969:75:5"},{"documentation":{"id":473,"nodeType":"StructuredDocumentation","src":"3050:152:5","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"73c6ac6e","id":477,"name":"ERC721InvalidSender","nameLocation":"3213:19:5","nodeType":"ErrorDefinition","parameters":{"id":476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":475,"mutability":"mutable","name":"sender","nameLocation":"3241:6:5","nodeType":"VariableDeclaration","scope":477,"src":"3233:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":474,"name":"address","nodeType":"ElementaryTypeName","src":"3233:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3232:16:5"},"src":"3207:42:5"},{"documentation":{"id":478,"nodeType":"StructuredDocumentation","src":"3255:159:5","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"64a0ae92","id":482,"name":"ERC721InvalidReceiver","nameLocation":"3425:21:5","nodeType":"ErrorDefinition","parameters":{"id":481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":480,"mutability":"mutable","name":"receiver","nameLocation":"3455:8:5","nodeType":"VariableDeclaration","scope":482,"src":"3447:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":479,"name":"address","nodeType":"ElementaryTypeName","src":"3447:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3446:18:5"},"src":"3419:46:5"},{"documentation":{"id":483,"nodeType":"StructuredDocumentation","src":"3471:247:5","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."},"errorSelector":"177e802f","id":489,"name":"ERC721InsufficientApproval","nameLocation":"3729:26:5","nodeType":"ErrorDefinition","parameters":{"id":488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":485,"mutability":"mutable","name":"operator","nameLocation":"3764:8:5","nodeType":"VariableDeclaration","scope":489,"src":"3756:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":484,"name":"address","nodeType":"ElementaryTypeName","src":"3756:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":487,"mutability":"mutable","name":"tokenId","nameLocation":"3782:7:5","nodeType":"VariableDeclaration","scope":489,"src":"3774:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":486,"name":"uint256","nodeType":"ElementaryTypeName","src":"3774:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3755:35:5"},"src":"3723:68:5"},{"documentation":{"id":490,"nodeType":"StructuredDocumentation","src":"3797:174:5","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"a9fbf51f","id":494,"name":"ERC721InvalidApprover","nameLocation":"3982:21:5","nodeType":"ErrorDefinition","parameters":{"id":493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":492,"mutability":"mutable","name":"approver","nameLocation":"4012:8:5","nodeType":"VariableDeclaration","scope":494,"src":"4004:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":491,"name":"address","nodeType":"ElementaryTypeName","src":"4004:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4003:18:5"},"src":"3976:46:5"},{"documentation":{"id":495,"nodeType":"StructuredDocumentation","src":"4028:197:5","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"5b08ba18","id":499,"name":"ERC721InvalidOperator","nameLocation":"4236:21:5","nodeType":"ErrorDefinition","parameters":{"id":498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":497,"mutability":"mutable","name":"operator","nameLocation":"4266:8:5","nodeType":"VariableDeclaration","scope":499,"src":"4258:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":496,"name":"address","nodeType":"ElementaryTypeName","src":"4258:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4257:18:5"},"src":"4230:46:5"}],"scope":548,"src":"2186:2092:5","usedErrors":[458,463,472,477,482,489,494,499],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":501,"nodeType":"StructuredDocumentation","src":"4280:143:5","text":" @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."},"fullyImplemented":true,"id":547,"linearizedBaseContracts":[547],"name":"IERC1155Errors","nameLocation":"4434:14:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":502,"nodeType":"StructuredDocumentation","src":"4455:361:5","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."},"errorSelector":"03dee4c5","id":512,"name":"ERC1155InsufficientBalance","nameLocation":"4827:26:5","nodeType":"ErrorDefinition","parameters":{"id":511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":504,"mutability":"mutable","name":"sender","nameLocation":"4862:6:5","nodeType":"VariableDeclaration","scope":512,"src":"4854:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":503,"name":"address","nodeType":"ElementaryTypeName","src":"4854:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":506,"mutability":"mutable","name":"balance","nameLocation":"4878:7:5","nodeType":"VariableDeclaration","scope":512,"src":"4870:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":505,"name":"uint256","nodeType":"ElementaryTypeName","src":"4870:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":508,"mutability":"mutable","name":"needed","nameLocation":"4895:6:5","nodeType":"VariableDeclaration","scope":512,"src":"4887:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":507,"name":"uint256","nodeType":"ElementaryTypeName","src":"4887:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":510,"mutability":"mutable","name":"tokenId","nameLocation":"4911:7:5","nodeType":"VariableDeclaration","scope":512,"src":"4903:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":509,"name":"uint256","nodeType":"ElementaryTypeName","src":"4903:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4853:66:5"},"src":"4821:99:5"},{"documentation":{"id":513,"nodeType":"StructuredDocumentation","src":"4926:152:5","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"01a83514","id":517,"name":"ERC1155InvalidSender","nameLocation":"5089:20:5","nodeType":"ErrorDefinition","parameters":{"id":516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":515,"mutability":"mutable","name":"sender","nameLocation":"5118:6:5","nodeType":"VariableDeclaration","scope":517,"src":"5110:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":514,"name":"address","nodeType":"ElementaryTypeName","src":"5110:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5109:16:5"},"src":"5083:43:5"},{"documentation":{"id":518,"nodeType":"StructuredDocumentation","src":"5132:159:5","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"57f447ce","id":522,"name":"ERC1155InvalidReceiver","nameLocation":"5302:22:5","nodeType":"ErrorDefinition","parameters":{"id":521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":520,"mutability":"mutable","name":"receiver","nameLocation":"5333:8:5","nodeType":"VariableDeclaration","scope":522,"src":"5325:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":519,"name":"address","nodeType":"ElementaryTypeName","src":"5325:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5324:18:5"},"src":"5296:47:5"},{"documentation":{"id":523,"nodeType":"StructuredDocumentation","src":"5349:256:5","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."},"errorSelector":"e237d922","id":529,"name":"ERC1155MissingApprovalForAll","nameLocation":"5616:28:5","nodeType":"ErrorDefinition","parameters":{"id":528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":525,"mutability":"mutable","name":"operator","nameLocation":"5653:8:5","nodeType":"VariableDeclaration","scope":529,"src":"5645:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":524,"name":"address","nodeType":"ElementaryTypeName","src":"5645:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":527,"mutability":"mutable","name":"owner","nameLocation":"5671:5:5","nodeType":"VariableDeclaration","scope":529,"src":"5663:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":526,"name":"address","nodeType":"ElementaryTypeName","src":"5663:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5644:33:5"},"src":"5610:68:5"},{"documentation":{"id":530,"nodeType":"StructuredDocumentation","src":"5684:174:5","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"3e31884e","id":534,"name":"ERC1155InvalidApprover","nameLocation":"5869:22:5","nodeType":"ErrorDefinition","parameters":{"id":533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":532,"mutability":"mutable","name":"approver","nameLocation":"5900:8:5","nodeType":"VariableDeclaration","scope":534,"src":"5892:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":531,"name":"address","nodeType":"ElementaryTypeName","src":"5892:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5891:18:5"},"src":"5863:47:5"},{"documentation":{"id":535,"nodeType":"StructuredDocumentation","src":"5916:197:5","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"ced3e100","id":539,"name":"ERC1155InvalidOperator","nameLocation":"6124:22:5","nodeType":"ErrorDefinition","parameters":{"id":538,"nodeType":"ParameterList","parameters":[{"constant":false,"id":537,"mutability":"mutable","name":"operator","nameLocation":"6155:8:5","nodeType":"VariableDeclaration","scope":539,"src":"6147:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":536,"name":"address","nodeType":"ElementaryTypeName","src":"6147:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6146:18:5"},"src":"6118:47:5"},{"documentation":{"id":540,"nodeType":"StructuredDocumentation","src":"6171:280:5","text":" @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"},"errorSelector":"5b059991","id":546,"name":"ERC1155InvalidArrayLength","nameLocation":"6462:25:5","nodeType":"ErrorDefinition","parameters":{"id":545,"nodeType":"ParameterList","parameters":[{"constant":false,"id":542,"mutability":"mutable","name":"idsLength","nameLocation":"6496:9:5","nodeType":"VariableDeclaration","scope":546,"src":"6488:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":541,"name":"uint256","nodeType":"ElementaryTypeName","src":"6488:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":544,"mutability":"mutable","name":"valuesLength","nameLocation":"6515:12:5","nodeType":"VariableDeclaration","scope":546,"src":"6507:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":543,"name":"uint256","nodeType":"ElementaryTypeName","src":"6507:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6487:41:5"},"src":"6456:73:5"}],"scope":548,"src":"4424:2107:5","usedErrors":[512,517,522,529,534,539,546],"usedEvents":[]}],"src":"112:6420:5"},"id":5},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","exportedSymbols":{"Context":[1904],"ERC165":[2183],"ERC721":[1556],"IERC165":[2195],"IERC721":[1673],"IERC721Errors":[500],"IERC721Metadata":[1874],"IERC721Receiver":[1691],"Strings":[2159]},"id":1557,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":549,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"107:24:6"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"./IERC721.sol","id":551,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1557,"sourceUnit":1674,"src":"133:38:6","symbolAliases":[{"foreign":{"id":550,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1673,"src":"141:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"./IERC721Receiver.sol","id":553,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1557,"sourceUnit":1692,"src":"172:54:6","symbolAliases":[{"foreign":{"id":552,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"180:15:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","file":"./extensions/IERC721Metadata.sol","id":555,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1557,"sourceUnit":1875,"src":"227:65:6","symbolAliases":[{"foreign":{"id":554,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1874,"src":"235:15:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":557,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1557,"sourceUnit":1905,"src":"293:48:6","symbolAliases":[{"foreign":{"id":556,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1904,"src":"301:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../../utils/Strings.sol","id":559,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1557,"sourceUnit":2160,"src":"342:48:6","symbolAliases":[{"foreign":{"id":558,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2159,"src":"350:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":562,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1557,"sourceUnit":2184,"src":"391:69:6","symbolAliases":[{"foreign":{"id":560,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2195,"src":"399:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":561,"name":"ERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2183,"src":"408:6:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","file":"../../interfaces/draft-IERC6093.sol","id":564,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1557,"sourceUnit":548,"src":"461:66:6","symbolAliases":[{"foreign":{"id":563,"name":"IERC721Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":500,"src":"469:13:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":566,"name":"Context","nameLocations":["804:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":1904,"src":"804:7:6"},"id":567,"nodeType":"InheritanceSpecifier","src":"804:7:6"},{"baseName":{"id":568,"name":"ERC165","nameLocations":["813:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":2183,"src":"813:6:6"},"id":569,"nodeType":"InheritanceSpecifier","src":"813:6:6"},{"baseName":{"id":570,"name":"IERC721","nameLocations":["821:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":1673,"src":"821:7:6"},"id":571,"nodeType":"InheritanceSpecifier","src":"821:7:6"},{"baseName":{"id":572,"name":"IERC721Metadata","nameLocations":["830:15:6"],"nodeType":"IdentifierPath","referencedDeclaration":1874,"src":"830:15:6"},"id":573,"nodeType":"InheritanceSpecifier","src":"830:15:6"},{"baseName":{"id":574,"name":"IERC721Errors","nameLocations":["847:13:6"],"nodeType":"IdentifierPath","referencedDeclaration":500,"src":"847:13:6"},"id":575,"nodeType":"InheritanceSpecifier","src":"847:13:6"}],"canonicalName":"ERC721","contractDependencies":[],"contractKind":"contract","documentation":{"id":565,"nodeType":"StructuredDocumentation","src":"529:246:6","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."},"fullyImplemented":true,"id":1556,"linearizedBaseContracts":[1556,500,1874,1673,2183,2195,1904],"name":"ERC721","nameLocation":"794:6:6","nodeType":"ContractDefinition","nodes":[{"global":false,"id":578,"libraryName":{"id":576,"name":"Strings","nameLocations":["873:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":2159,"src":"873:7:6"},"nodeType":"UsingForDirective","src":"867:26:6","typeName":{"id":577,"name":"uint256","nodeType":"ElementaryTypeName","src":"885:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":580,"mutability":"mutable","name":"_name","nameLocation":"932:5:6","nodeType":"VariableDeclaration","scope":1556,"src":"917:20:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":579,"name":"string","nodeType":"ElementaryTypeName","src":"917:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":582,"mutability":"mutable","name":"_symbol","nameLocation":"979:7:6","nodeType":"VariableDeclaration","scope":1556,"src":"964:22:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":581,"name":"string","nodeType":"ElementaryTypeName","src":"964:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":586,"mutability":"mutable","name":"_owners","nameLocation":"1037:7:6","nodeType":"VariableDeclaration","scope":1556,"src":"993:51:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":585,"keyName":"tokenId","keyNameLocation":"1009:7:6","keyType":{"id":583,"name":"uint256","nodeType":"ElementaryTypeName","src":"1001:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"993:35:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":584,"name":"address","nodeType":"ElementaryTypeName","src":"1020:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":590,"mutability":"mutable","name":"_balances","nameLocation":"1093:9:6","nodeType":"VariableDeclaration","scope":1556,"src":"1051:51:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":589,"keyName":"owner","keyNameLocation":"1067:5:6","keyType":{"id":587,"name":"address","nodeType":"ElementaryTypeName","src":"1059:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1051:33:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":588,"name":"uint256","nodeType":"ElementaryTypeName","src":"1076:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":594,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1153:15:6","nodeType":"VariableDeclaration","scope":1556,"src":"1109:59:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":593,"keyName":"tokenId","keyNameLocation":"1125:7:6","keyType":{"id":591,"name":"uint256","nodeType":"ElementaryTypeName","src":"1117:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1109:35:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":592,"name":"address","nodeType":"ElementaryTypeName","src":"1136:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":600,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1243:18:6","nodeType":"VariableDeclaration","scope":1556,"src":"1175:86:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":599,"keyName":"owner","keyNameLocation":"1191:5:6","keyType":{"id":595,"name":"address","nodeType":"ElementaryTypeName","src":"1183:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1175:59:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":598,"keyName":"operator","keyNameLocation":"1216:8:6","keyType":{"id":596,"name":"address","nodeType":"ElementaryTypeName","src":"1208:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1200:33:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":597,"name":"bool","nodeType":"ElementaryTypeName","src":"1228:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":616,"nodeType":"Block","src":"1437:57:6","statements":[{"expression":{"id":610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":608,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"1447:5:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":609,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":603,"src":"1455:5:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1447:13:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":611,"nodeType":"ExpressionStatement","src":"1447:13:6"},{"expression":{"id":614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":612,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":582,"src":"1470:7:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":613,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":605,"src":"1480:7:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1470:17:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":615,"nodeType":"ExpressionStatement","src":"1470:17:6"}]},"documentation":{"id":601,"nodeType":"StructuredDocumentation","src":"1268:108:6","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."},"id":617,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":603,"mutability":"mutable","name":"name_","nameLocation":"1407:5:6","nodeType":"VariableDeclaration","scope":617,"src":"1393:19:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":602,"name":"string","nodeType":"ElementaryTypeName","src":"1393:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":605,"mutability":"mutable","name":"symbol_","nameLocation":"1428:7:6","nodeType":"VariableDeclaration","scope":617,"src":"1414:21:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":604,"name":"string","nodeType":"ElementaryTypeName","src":"1414:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1392:44:6"},"returnParameters":{"id":607,"nodeType":"ParameterList","parameters":[],"src":"1437:0:6"},"scope":1556,"src":"1381:113:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[2182,2194],"body":{"id":647,"nodeType":"Block","src":"1669:192:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":628,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":620,"src":"1698:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":630,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1673,"src":"1718:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$1673_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$1673_$","typeString":"type(contract IERC721)"}],"id":629,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"1713:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1713:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$1673","typeString":"type(contract IERC721)"}},"id":632,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1727:11:6","memberName":"interfaceId","nodeType":"MemberAccess","src":"1713:25:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1698:40:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":634,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":620,"src":"1754:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":636,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1874,"src":"1774:15:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1874_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1874_$","typeString":"type(contract IERC721Metadata)"}],"id":635,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"1769:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1769:21:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$1874","typeString":"type(contract IERC721Metadata)"}},"id":638,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1791:11:6","memberName":"interfaceId","nodeType":"MemberAccess","src":"1769:33:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1754:48:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1698:104:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":643,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":620,"src":"1842:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":641,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967271,"src":"1818:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721_$1556_$","typeString":"type(contract super ERC721)"}},"id":642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1824:17:6","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":2182,"src":"1818:23:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":644,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1818:36:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1698:156:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":627,"id":646,"nodeType":"Return","src":"1679:175:6"}]},"documentation":{"id":618,"nodeType":"StructuredDocumentation","src":"1500:56:6","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":648,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1570:17:6","nodeType":"FunctionDefinition","overrides":{"id":624,"nodeType":"OverrideSpecifier","overrides":[{"id":622,"name":"ERC165","nameLocations":["1637:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":2183,"src":"1637:6:6"},{"id":623,"name":"IERC165","nameLocations":["1645:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":2195,"src":"1645:7:6"}],"src":"1628:25:6"},"parameters":{"id":621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":620,"mutability":"mutable","name":"interfaceId","nameLocation":"1595:11:6","nodeType":"VariableDeclaration","scope":648,"src":"1588:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":619,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1588:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1587:20:6"},"returnParameters":{"id":627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":626,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":648,"src":"1663:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":625,"name":"bool","nodeType":"ElementaryTypeName","src":"1663:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1662:6:6"},"scope":1556,"src":"1561:300:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1598],"body":{"id":675,"nodeType":"Block","src":"1992:136:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":656,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"2006:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2023:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":658,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2015:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":657,"name":"address","nodeType":"ElementaryTypeName","src":"2015:7:6","typeDescriptions":{}}},"id":660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2015:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2006:19:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":670,"nodeType":"IfStatement","src":"2002:87:6","trueBody":{"id":669,"nodeType":"Block","src":"2027:62:6","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2075:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":664,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2067:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":663,"name":"address","nodeType":"ElementaryTypeName","src":"2067:7:6","typeDescriptions":{}}},"id":666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2067:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":662,"name":"ERC721InvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"2048:18:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2048:30:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":668,"nodeType":"RevertStatement","src":"2041:37:6"}]}},{"expression":{"baseExpression":{"id":671,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":590,"src":"2105:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":673,"indexExpression":{"id":672,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"2115:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2105:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":655,"id":674,"nodeType":"Return","src":"2098:23:6"}]},"documentation":{"id":649,"nodeType":"StructuredDocumentation","src":"1867:48:6","text":" @dev See {IERC721-balanceOf}."},"functionSelector":"70a08231","id":676,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1929:9:6","nodeType":"FunctionDefinition","parameters":{"id":652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":651,"mutability":"mutable","name":"owner","nameLocation":"1947:5:6","nodeType":"VariableDeclaration","scope":676,"src":"1939:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":650,"name":"address","nodeType":"ElementaryTypeName","src":"1939:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1938:15:6"},"returnParameters":{"id":655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":654,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":676,"src":"1983:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":653,"name":"uint256","nodeType":"ElementaryTypeName","src":"1983:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1982:9:6"},"scope":1556,"src":"1920:208:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1606],"body":{"id":688,"nodeType":"Block","src":"2257:46:6","statements":[{"expression":{"arguments":[{"id":685,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"2288:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":684,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"2274:13:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2274:22:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":683,"id":687,"nodeType":"Return","src":"2267:29:6"}]},"documentation":{"id":677,"nodeType":"StructuredDocumentation","src":"2134:46:6","text":" @dev See {IERC721-ownerOf}."},"functionSelector":"6352211e","id":689,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"2194:7:6","nodeType":"FunctionDefinition","parameters":{"id":680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":679,"mutability":"mutable","name":"tokenId","nameLocation":"2210:7:6","nodeType":"VariableDeclaration","scope":689,"src":"2202:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":678,"name":"uint256","nodeType":"ElementaryTypeName","src":"2202:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2201:17:6"},"returnParameters":{"id":683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":682,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":689,"src":"2248:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":681,"name":"address","nodeType":"ElementaryTypeName","src":"2248:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2247:9:6"},"scope":1556,"src":"2185:118:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1859],"body":{"id":697,"nodeType":"Block","src":"2425:29:6","statements":[{"expression":{"id":695,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"2442:5:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":694,"id":696,"nodeType":"Return","src":"2435:12:6"}]},"documentation":{"id":690,"nodeType":"StructuredDocumentation","src":"2309:51:6","text":" @dev See {IERC721Metadata-name}."},"functionSelector":"06fdde03","id":698,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2374:4:6","nodeType":"FunctionDefinition","parameters":{"id":691,"nodeType":"ParameterList","parameters":[],"src":"2378:2:6"},"returnParameters":{"id":694,"nodeType":"ParameterList","parameters":[{"constant":false,"id":693,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":698,"src":"2410:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":692,"name":"string","nodeType":"ElementaryTypeName","src":"2410:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2409:15:6"},"scope":1556,"src":"2365:89:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1865],"body":{"id":706,"nodeType":"Block","src":"2580:31:6","statements":[{"expression":{"id":704,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":582,"src":"2597:7:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":703,"id":705,"nodeType":"Return","src":"2590:14:6"}]},"documentation":{"id":699,"nodeType":"StructuredDocumentation","src":"2460:53:6","text":" @dev See {IERC721Metadata-symbol}."},"functionSelector":"95d89b41","id":707,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2527:6:6","nodeType":"FunctionDefinition","parameters":{"id":700,"nodeType":"ParameterList","parameters":[],"src":"2533:2:6"},"returnParameters":{"id":703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":702,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":707,"src":"2565:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":701,"name":"string","nodeType":"ElementaryTypeName","src":"2565:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2564:15:6"},"scope":1556,"src":"2518:93:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1873],"body":{"id":742,"nodeType":"Block","src":"2756:176:6","statements":[{"expression":{"arguments":[{"id":716,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":710,"src":"2780:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":715,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"2766:13:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2766:22:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":718,"nodeType":"ExpressionStatement","src":"2766:22:6"},{"assignments":[720],"declarations":[{"constant":false,"id":720,"mutability":"mutable","name":"baseURI","nameLocation":"2813:7:6","nodeType":"VariableDeclaration","scope":742,"src":"2799:21:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":719,"name":"string","nodeType":"ElementaryTypeName","src":"2799:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":723,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":721,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":752,"src":"2823:8:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":722,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2823:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2799:34:6"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":726,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"2856:7:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":725,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2850:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":724,"name":"bytes","nodeType":"ElementaryTypeName","src":"2850:5:6","typeDescriptions":{}}},"id":727,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2850:14:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2865:6:6","memberName":"length","nodeType":"MemberAccess","src":"2850:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2874:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2850:25:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2923:2:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2850:75:6","trueExpression":{"arguments":[{"id":734,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"2892:7:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":735,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":710,"src":"2901:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2909:8:6","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1972,"src":"2901:16:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2901:18:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":732,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2878:6:6","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":731,"name":"string","nodeType":"ElementaryTypeName","src":"2878:6:6","typeDescriptions":{}}},"id":733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2885:6:6","memberName":"concat","nodeType":"MemberAccess","src":"2878:13:6","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2878:42:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":714,"id":741,"nodeType":"Return","src":"2843:82:6"}]},"documentation":{"id":708,"nodeType":"StructuredDocumentation","src":"2617:55:6","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":743,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"2686:8:6","nodeType":"FunctionDefinition","parameters":{"id":711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":710,"mutability":"mutable","name":"tokenId","nameLocation":"2703:7:6","nodeType":"VariableDeclaration","scope":743,"src":"2695:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":709,"name":"uint256","nodeType":"ElementaryTypeName","src":"2695:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2694:17:6"},"returnParameters":{"id":714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":713,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":743,"src":"2741:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":712,"name":"string","nodeType":"ElementaryTypeName","src":"2741:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2740:15:6"},"scope":1556,"src":"2677:255:6","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":751,"nodeType":"Block","src":"3240:26:6","statements":[{"expression":{"hexValue":"","id":749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3257:2:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":748,"id":750,"nodeType":"Return","src":"3250:9:6"}]},"documentation":{"id":744,"nodeType":"StructuredDocumentation","src":"2938:231:6","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."},"id":752,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"3183:8:6","nodeType":"FunctionDefinition","parameters":{"id":745,"nodeType":"ParameterList","parameters":[],"src":"3191:2:6"},"returnParameters":{"id":748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":747,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":752,"src":"3225:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":746,"name":"string","nodeType":"ElementaryTypeName","src":"3225:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3224:15:6"},"scope":1556,"src":"3174:92:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[1646],"body":{"id":767,"nodeType":"Block","src":"3384:52:6","statements":[{"expression":{"arguments":[{"id":761,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":755,"src":"3403:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":762,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"3407:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"id":763,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"3416:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":764,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3416:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":760,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[1359,1425],"referencedDeclaration":1359,"src":"3394:8:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address)"}},"id":765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3394:35:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":766,"nodeType":"ExpressionStatement","src":"3394:35:6"}]},"documentation":{"id":753,"nodeType":"StructuredDocumentation","src":"3272:46:6","text":" @dev See {IERC721-approve}."},"functionSelector":"095ea7b3","id":768,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3332:7:6","nodeType":"FunctionDefinition","parameters":{"id":758,"nodeType":"ParameterList","parameters":[{"constant":false,"id":755,"mutability":"mutable","name":"to","nameLocation":"3348:2:6","nodeType":"VariableDeclaration","scope":768,"src":"3340:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":754,"name":"address","nodeType":"ElementaryTypeName","src":"3340:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":757,"mutability":"mutable","name":"tokenId","nameLocation":"3360:7:6","nodeType":"VariableDeclaration","scope":768,"src":"3352:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":756,"name":"uint256","nodeType":"ElementaryTypeName","src":"3352:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3339:29:6"},"returnParameters":{"id":759,"nodeType":"ParameterList","parameters":[],"src":"3384:0:6"},"scope":1556,"src":"3323:113:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1662],"body":{"id":784,"nodeType":"Block","src":"3573:78:6","statements":[{"expression":{"arguments":[{"id":777,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":771,"src":"3597:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":776,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"3583:13:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3583:22:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":779,"nodeType":"ExpressionStatement","src":"3583:22:6"},{"expression":{"arguments":[{"id":781,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":771,"src":"3636:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":780,"name":"_getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":934,"src":"3623:12:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":782,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3623:21:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":775,"id":783,"nodeType":"Return","src":"3616:28:6"}]},"documentation":{"id":769,"nodeType":"StructuredDocumentation","src":"3442:50:6","text":" @dev See {IERC721-getApproved}."},"functionSelector":"081812fc","id":785,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"3506:11:6","nodeType":"FunctionDefinition","parameters":{"id":772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":771,"mutability":"mutable","name":"tokenId","nameLocation":"3526:7:6","nodeType":"VariableDeclaration","scope":785,"src":"3518:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":770,"name":"uint256","nodeType":"ElementaryTypeName","src":"3518:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3517:17:6"},"returnParameters":{"id":775,"nodeType":"ParameterList","parameters":[{"constant":false,"id":774,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":785,"src":"3564:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":773,"name":"address","nodeType":"ElementaryTypeName","src":"3564:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3563:9:6"},"scope":1556,"src":"3497:154:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1654],"body":{"id":800,"nodeType":"Block","src":"3793:69:6","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":794,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"3822:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":795,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3822:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":796,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":788,"src":"3836:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":797,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":790,"src":"3846:8:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":793,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"3803:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3803:52:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":799,"nodeType":"ExpressionStatement","src":"3803:52:6"}]},"documentation":{"id":786,"nodeType":"StructuredDocumentation","src":"3657:56:6","text":" @dev See {IERC721-setApprovalForAll}."},"functionSelector":"a22cb465","id":801,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"3727:17:6","nodeType":"FunctionDefinition","parameters":{"id":791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":788,"mutability":"mutable","name":"operator","nameLocation":"3753:8:6","nodeType":"VariableDeclaration","scope":801,"src":"3745:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":787,"name":"address","nodeType":"ElementaryTypeName","src":"3745:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":790,"mutability":"mutable","name":"approved","nameLocation":"3768:8:6","nodeType":"VariableDeclaration","scope":801,"src":"3763:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":789,"name":"bool","nodeType":"ElementaryTypeName","src":"3763:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3744:33:6"},"returnParameters":{"id":792,"nodeType":"ParameterList","parameters":[],"src":"3793:0:6"},"scope":1556,"src":"3718:144:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1672],"body":{"id":817,"nodeType":"Block","src":"4022:59:6","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":811,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":600,"src":"4039:18:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":813,"indexExpression":{"id":812,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"4058:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4039:25:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":815,"indexExpression":{"id":814,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"4065:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4039:35:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":810,"id":816,"nodeType":"Return","src":"4032:42:6"}]},"documentation":{"id":802,"nodeType":"StructuredDocumentation","src":"3868:55:6","text":" @dev See {IERC721-isApprovedForAll}."},"functionSelector":"e985e9c5","id":818,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"3937:16:6","nodeType":"FunctionDefinition","parameters":{"id":807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":804,"mutability":"mutable","name":"owner","nameLocation":"3962:5:6","nodeType":"VariableDeclaration","scope":818,"src":"3954:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":803,"name":"address","nodeType":"ElementaryTypeName","src":"3954:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":806,"mutability":"mutable","name":"operator","nameLocation":"3977:8:6","nodeType":"VariableDeclaration","scope":818,"src":"3969:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":805,"name":"address","nodeType":"ElementaryTypeName","src":"3969:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3953:33:6"},"returnParameters":{"id":810,"nodeType":"ParameterList","parameters":[{"constant":false,"id":809,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":818,"src":"4016:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":808,"name":"bool","nodeType":"ElementaryTypeName","src":"4016:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4015:6:6"},"scope":1556,"src":"3928:153:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1638],"body":{"id":863,"nodeType":"Block","src":"4223:498:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":828,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":823,"src":"4237:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4251:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":830,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4243:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":829,"name":"address","nodeType":"ElementaryTypeName","src":"4243:7:6","typeDescriptions":{}}},"id":832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4243:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4237:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":842,"nodeType":"IfStatement","src":"4233:87:6","trueBody":{"id":841,"nodeType":"Block","src":"4255:65:6","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4306:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":836,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4298:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":835,"name":"address","nodeType":"ElementaryTypeName","src":"4298:7:6","typeDescriptions":{}}},"id":838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4298:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":834,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":482,"src":"4276:21:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4276:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":840,"nodeType":"RevertStatement","src":"4269:40:6"}]}},{"assignments":[844],"declarations":[{"constant":false,"id":844,"mutability":"mutable","name":"previousOwner","nameLocation":"4546:13:6","nodeType":"VariableDeclaration","scope":863,"src":"4538:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":843,"name":"address","nodeType":"ElementaryTypeName","src":"4538:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":851,"initialValue":{"arguments":[{"id":846,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":823,"src":"4570:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":847,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"4574:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"id":848,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"4583:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":849,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4583:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":845,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"4562:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":850,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4562:34:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4538:58:6"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":852,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"4610:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":853,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"4627:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4610:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":862,"nodeType":"IfStatement","src":"4606:109:6","trueBody":{"id":861,"nodeType":"Block","src":"4633:82:6","statements":[{"errorCall":{"arguments":[{"id":856,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"4675:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":857,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"4681:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":858,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"4690:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":855,"name":"ERC721IncorrectOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":472,"src":"4654:20:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address) pure"}},"id":859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4654:50:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":860,"nodeType":"RevertStatement","src":"4647:57:6"}]}}]},"documentation":{"id":819,"nodeType":"StructuredDocumentation","src":"4087:51:6","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":864,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"4152:12:6","nodeType":"FunctionDefinition","parameters":{"id":826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":821,"mutability":"mutable","name":"from","nameLocation":"4173:4:6","nodeType":"VariableDeclaration","scope":864,"src":"4165:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":820,"name":"address","nodeType":"ElementaryTypeName","src":"4165:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":823,"mutability":"mutable","name":"to","nameLocation":"4187:2:6","nodeType":"VariableDeclaration","scope":864,"src":"4179:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":822,"name":"address","nodeType":"ElementaryTypeName","src":"4179:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":825,"mutability":"mutable","name":"tokenId","nameLocation":"4199:7:6","nodeType":"VariableDeclaration","scope":864,"src":"4191:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":824,"name":"uint256","nodeType":"ElementaryTypeName","src":"4191:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4164:43:6"},"returnParameters":{"id":827,"nodeType":"ParameterList","parameters":[],"src":"4223:0:6"},"scope":1556,"src":"4143:578:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1628],"body":{"id":881,"nodeType":"Block","src":"4863:56:6","statements":[{"expression":{"arguments":[{"id":875,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":867,"src":"4890:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":876,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":869,"src":"4896:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":877,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":871,"src":"4900:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":878,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4909:2:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":874,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[882,908],"referencedDeclaration":908,"src":"4873:16:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:39:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":880,"nodeType":"ExpressionStatement","src":"4873:39:6"}]},"documentation":{"id":865,"nodeType":"StructuredDocumentation","src":"4727:55:6","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"42842e0e","id":882,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4796:16:6","nodeType":"FunctionDefinition","parameters":{"id":872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":867,"mutability":"mutable","name":"from","nameLocation":"4821:4:6","nodeType":"VariableDeclaration","scope":882,"src":"4813:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":866,"name":"address","nodeType":"ElementaryTypeName","src":"4813:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":869,"mutability":"mutable","name":"to","nameLocation":"4835:2:6","nodeType":"VariableDeclaration","scope":882,"src":"4827:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":868,"name":"address","nodeType":"ElementaryTypeName","src":"4827:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":871,"mutability":"mutable","name":"tokenId","nameLocation":"4847:7:6","nodeType":"VariableDeclaration","scope":882,"src":"4839:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":870,"name":"uint256","nodeType":"ElementaryTypeName","src":"4839:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4812:43:6"},"returnParameters":{"id":873,"nodeType":"ParameterList","parameters":[],"src":"4863:0:6"},"scope":1556,"src":"4787:132:6","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1618],"body":{"id":907,"nodeType":"Block","src":"5088:105:6","statements":[{"expression":{"arguments":[{"id":895,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"5111:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":896,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"5117:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":897,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"5121:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":894,"name":"transferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":864,"src":"5098:12:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":898,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5098:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":899,"nodeType":"ExpressionStatement","src":"5098:31:6"},{"expression":{"arguments":[{"id":901,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"5162:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":902,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"5168:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":903,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"5172:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":904,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":891,"src":"5181:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":900,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1555,"src":"5139:22:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":905,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5139:47:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":906,"nodeType":"ExpressionStatement","src":"5139:47:6"}]},"documentation":{"id":883,"nodeType":"StructuredDocumentation","src":"4925:55:6","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"b88d4fde","id":908,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4994:16:6","nodeType":"FunctionDefinition","parameters":{"id":892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":885,"mutability":"mutable","name":"from","nameLocation":"5019:4:6","nodeType":"VariableDeclaration","scope":908,"src":"5011:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":884,"name":"address","nodeType":"ElementaryTypeName","src":"5011:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":887,"mutability":"mutable","name":"to","nameLocation":"5033:2:6","nodeType":"VariableDeclaration","scope":908,"src":"5025:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":886,"name":"address","nodeType":"ElementaryTypeName","src":"5025:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":889,"mutability":"mutable","name":"tokenId","nameLocation":"5045:7:6","nodeType":"VariableDeclaration","scope":908,"src":"5037:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":888,"name":"uint256","nodeType":"ElementaryTypeName","src":"5037:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":891,"mutability":"mutable","name":"data","nameLocation":"5067:4:6","nodeType":"VariableDeclaration","scope":908,"src":"5054:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":890,"name":"bytes","nodeType":"ElementaryTypeName","src":"5054:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5010:62:6"},"returnParameters":{"id":893,"nodeType":"ParameterList","parameters":[],"src":"5088:0:6"},"scope":1556,"src":"4985:208:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":920,"nodeType":"Block","src":"5782:40:6","statements":[{"expression":{"baseExpression":{"id":916,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"5799:7:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":918,"indexExpression":{"id":917,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":911,"src":"5807:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5799:16:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":915,"id":919,"nodeType":"Return","src":"5792:23:6"}]},"documentation":{"id":909,"nodeType":"StructuredDocumentation","src":"5199:503:6","text":" @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`."},"id":921,"implemented":true,"kind":"function","modifiers":[],"name":"_ownerOf","nameLocation":"5716:8:6","nodeType":"FunctionDefinition","parameters":{"id":912,"nodeType":"ParameterList","parameters":[{"constant":false,"id":911,"mutability":"mutable","name":"tokenId","nameLocation":"5733:7:6","nodeType":"VariableDeclaration","scope":921,"src":"5725:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":910,"name":"uint256","nodeType":"ElementaryTypeName","src":"5725:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5724:17:6"},"returnParameters":{"id":915,"nodeType":"ParameterList","parameters":[{"constant":false,"id":914,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":921,"src":"5773:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":913,"name":"address","nodeType":"ElementaryTypeName","src":"5773:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5772:9:6"},"scope":1556,"src":"5707:115:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":933,"nodeType":"Block","src":"6017:48:6","statements":[{"expression":{"baseExpression":{"id":929,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"6034:15:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":931,"indexExpression":{"id":930,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":924,"src":"6050:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6034:24:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":928,"id":932,"nodeType":"Return","src":"6027:31:6"}]},"documentation":{"id":922,"nodeType":"StructuredDocumentation","src":"5828:105:6","text":" @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted."},"id":934,"implemented":true,"kind":"function","modifiers":[],"name":"_getApproved","nameLocation":"5947:12:6","nodeType":"FunctionDefinition","parameters":{"id":925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":924,"mutability":"mutable","name":"tokenId","nameLocation":"5968:7:6","nodeType":"VariableDeclaration","scope":934,"src":"5960:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":923,"name":"uint256","nodeType":"ElementaryTypeName","src":"5960:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5959:17:6"},"returnParameters":{"id":928,"nodeType":"ParameterList","parameters":[{"constant":false,"id":927,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":934,"src":"6008:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":926,"name":"address","nodeType":"ElementaryTypeName","src":"6008:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6007:9:6"},"scope":1556,"src":"5938:127:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":969,"nodeType":"Block","src":"6485:163:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":946,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":939,"src":"6514:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6533:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":948,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6525:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":947,"name":"address","nodeType":"ElementaryTypeName","src":"6525:7:6","typeDescriptions":{}}},"id":950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6525:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6514:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":952,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"6552:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":953,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":939,"src":"6561:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6552:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":956,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"6589:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":957,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":939,"src":"6596:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":955,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"6572:16:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":958,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6572:32:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6552:52:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":961,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"6621:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":960,"name":"_getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":934,"src":"6608:12:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":962,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6608:21:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":963,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":939,"src":"6633:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6608:32:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6552:88:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":966,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6551:90:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6514:127:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":945,"id":968,"nodeType":"Return","src":"6495:146:6"}]},"documentation":{"id":935,"nodeType":"StructuredDocumentation","src":"6071:300:6","text":" @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n particular (ignoring whether it is owned by `owner`).\n WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n assumption."},"id":970,"implemented":true,"kind":"function","modifiers":[],"name":"_isAuthorized","nameLocation":"6385:13:6","nodeType":"FunctionDefinition","parameters":{"id":942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":937,"mutability":"mutable","name":"owner","nameLocation":"6407:5:6","nodeType":"VariableDeclaration","scope":970,"src":"6399:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":936,"name":"address","nodeType":"ElementaryTypeName","src":"6399:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":939,"mutability":"mutable","name":"spender","nameLocation":"6422:7:6","nodeType":"VariableDeclaration","scope":970,"src":"6414:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":938,"name":"address","nodeType":"ElementaryTypeName","src":"6414:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":941,"mutability":"mutable","name":"tokenId","nameLocation":"6439:7:6","nodeType":"VariableDeclaration","scope":970,"src":"6431:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":940,"name":"uint256","nodeType":"ElementaryTypeName","src":"6431:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6398:49:6"},"returnParameters":{"id":945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":944,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":970,"src":"6479:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":943,"name":"bool","nodeType":"ElementaryTypeName","src":"6479:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6478:6:6"},"scope":1556,"src":"6376:272:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1006,"nodeType":"Block","src":"7179:271:6","statements":[{"condition":{"id":985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7193:39:6","subExpression":{"arguments":[{"id":981,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":973,"src":"7208:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":982,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"7215:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":983,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"7224:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":980,"name":"_isAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"7194:13:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) view returns (bool)"}},"id":984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7194:38:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1005,"nodeType":"IfStatement","src":"7189:255:6","trueBody":{"id":1004,"nodeType":"Block","src":"7234:210:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":986,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":973,"src":"7252:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7269:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":988,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7261:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":987,"name":"address","nodeType":"ElementaryTypeName","src":"7261:7:6","typeDescriptions":{}}},"id":990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7261:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7252:19:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1002,"nodeType":"Block","src":"7350:84:6","statements":[{"errorCall":{"arguments":[{"id":998,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"7402:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":999,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"7411:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":997,"name":"ERC721InsufficientApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"7375:26:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":1000,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7375:44:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1001,"nodeType":"RevertStatement","src":"7368:51:6"}]},"id":1003,"nodeType":"IfStatement","src":"7248:186:6","trueBody":{"id":996,"nodeType":"Block","src":"7273:71:6","statements":[{"errorCall":{"arguments":[{"id":993,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"7321:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":992,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"7298:22:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7298:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":995,"nodeType":"RevertStatement","src":"7291:38:6"}]}}]}}]},"documentation":{"id":971,"nodeType":"StructuredDocumentation","src":"6654:423:6","text":" @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n the `spender` for the specific `tokenId`.\n WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n assumption."},"id":1007,"implemented":true,"kind":"function","modifiers":[],"name":"_checkAuthorized","nameLocation":"7091:16:6","nodeType":"FunctionDefinition","parameters":{"id":978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":973,"mutability":"mutable","name":"owner","nameLocation":"7116:5:6","nodeType":"VariableDeclaration","scope":1007,"src":"7108:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":972,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":975,"mutability":"mutable","name":"spender","nameLocation":"7131:7:6","nodeType":"VariableDeclaration","scope":1007,"src":"7123:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":974,"name":"address","nodeType":"ElementaryTypeName","src":"7123:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":977,"mutability":"mutable","name":"tokenId","nameLocation":"7148:7:6","nodeType":"VariableDeclaration","scope":1007,"src":"7140:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":976,"name":"uint256","nodeType":"ElementaryTypeName","src":"7140:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7107:49:6"},"returnParameters":{"id":979,"nodeType":"ParameterList","parameters":[],"src":"7179:0:6"},"scope":1556,"src":"7082:368:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1022,"nodeType":"Block","src":"8167:78:6","statements":[{"id":1021,"nodeType":"UncheckedBlock","src":"8177:62:6","statements":[{"expression":{"id":1019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1015,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":590,"src":"8201:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1017,"indexExpression":{"id":1016,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"8211:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8201:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1018,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"8223:5:6","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"8201:27:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1020,"nodeType":"ExpressionStatement","src":"8201:27:6"}]}]},"documentation":{"id":1008,"nodeType":"StructuredDocumentation","src":"7456:631:6","text":" @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n remain consistent with one another."},"id":1023,"implemented":true,"kind":"function","modifiers":[],"name":"_increaseBalance","nameLocation":"8101:16:6","nodeType":"FunctionDefinition","parameters":{"id":1013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1010,"mutability":"mutable","name":"account","nameLocation":"8126:7:6","nodeType":"VariableDeclaration","scope":1023,"src":"8118:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1009,"name":"address","nodeType":"ElementaryTypeName","src":"8118:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1012,"mutability":"mutable","name":"value","nameLocation":"8143:5:6","nodeType":"VariableDeclaration","scope":1023,"src":"8135:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1011,"name":"uint128","nodeType":"ElementaryTypeName","src":"8135:7:6","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"8117:32:6"},"returnParameters":{"id":1014,"nodeType":"ParameterList","parameters":[],"src":"8167:0:6"},"scope":1556,"src":"8092:153:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1112,"nodeType":"Block","src":"8933:700:6","statements":[{"assignments":[1036],"declarations":[{"constant":false,"id":1036,"mutability":"mutable","name":"from","nameLocation":"8951:4:6","nodeType":"VariableDeclaration","scope":1112,"src":"8943:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1035,"name":"address","nodeType":"ElementaryTypeName","src":"8943:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1040,"initialValue":{"arguments":[{"id":1038,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1028,"src":"8967:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1037,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":921,"src":"8958:8:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8958:17:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"8943:32:6"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1041,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1030,"src":"9035:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9051:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1043,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9043:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1042,"name":"address","nodeType":"ElementaryTypeName","src":"9043:7:6","typeDescriptions":{}}},"id":1045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9043:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9035:18:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1054,"nodeType":"IfStatement","src":"9031:86:6","trueBody":{"id":1053,"nodeType":"Block","src":"9055:62:6","statements":[{"expression":{"arguments":[{"id":1048,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"9086:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1049,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1030,"src":"9092:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1050,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1028,"src":"9098:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1047,"name":"_checkAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1007,"src":"9069:16:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) view"}},"id":1051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9069:37:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1052,"nodeType":"ExpressionStatement","src":"9069:37:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1055,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"9161:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9177:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1057,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9169:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1056,"name":"address","nodeType":"ElementaryTypeName","src":"9169:7:6","typeDescriptions":{}}},"id":1059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9169:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9161:18:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1082,"nodeType":"IfStatement","src":"9157:256:6","trueBody":{"id":1081,"nodeType":"Block","src":"9181:232:6","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9294:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1063,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9286:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1062,"name":"address","nodeType":"ElementaryTypeName","src":"9286:7:6","typeDescriptions":{}}},"id":1065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9286:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1066,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1028,"src":"9298:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":1069,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9315:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1068,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9307:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1067,"name":"address","nodeType":"ElementaryTypeName","src":"9307:7:6","typeDescriptions":{}}},"id":1070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9307:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"66616c7365","id":1071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9319:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1061,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[1359,1425],"referencedDeclaration":1425,"src":"9277:8:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,uint256,address,bool)"}},"id":1072,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9277:48:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1073,"nodeType":"ExpressionStatement","src":"9277:48:6"},{"id":1080,"nodeType":"UncheckedBlock","src":"9340:63:6","statements":[{"expression":{"id":1078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1074,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":590,"src":"9368:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1076,"indexExpression":{"id":1075,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"9378:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9368:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":1077,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9387:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9368:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1079,"nodeType":"ExpressionStatement","src":"9368:20:6"}]}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1083,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1026,"src":"9427:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9441:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1085,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9433:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1084,"name":"address","nodeType":"ElementaryTypeName","src":"9433:7:6","typeDescriptions":{}}},"id":1087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9433:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9427:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1097,"nodeType":"IfStatement","src":"9423:107:6","trueBody":{"id":1096,"nodeType":"Block","src":"9445:85:6","statements":[{"id":1095,"nodeType":"UncheckedBlock","src":"9459:61:6","statements":[{"expression":{"id":1093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1089,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":590,"src":"9487:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1091,"indexExpression":{"id":1090,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1026,"src":"9497:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9487:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9504:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9487:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1094,"nodeType":"ExpressionStatement","src":"9487:18:6"}]}]}},{"expression":{"id":1102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1098,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"9540:7:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1100,"indexExpression":{"id":1099,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1028,"src":"9548:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9540:16:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1101,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1026,"src":"9559:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9540:21:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1103,"nodeType":"ExpressionStatement","src":"9540:21:6"},{"eventCall":{"arguments":[{"id":1105,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"9586:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1106,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1026,"src":"9592:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1107,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1028,"src":"9596:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1104,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1572,"src":"9577:8:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9577:27:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1109,"nodeType":"EmitStatement","src":"9572:32:6"},{"expression":{"id":1110,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"9622:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1034,"id":1111,"nodeType":"Return","src":"9615:11:6"}]},"documentation":{"id":1024,"nodeType":"StructuredDocumentation","src":"8251:582:6","text":" @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n The `auth` argument is optional. If the value passed is non 0, then this function will check that\n `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n Emits a {Transfer} event.\n NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}."},"id":1113,"implemented":true,"kind":"function","modifiers":[],"name":"_update","nameLocation":"8847:7:6","nodeType":"FunctionDefinition","parameters":{"id":1031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1026,"mutability":"mutable","name":"to","nameLocation":"8863:2:6","nodeType":"VariableDeclaration","scope":1113,"src":"8855:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1025,"name":"address","nodeType":"ElementaryTypeName","src":"8855:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1028,"mutability":"mutable","name":"tokenId","nameLocation":"8875:7:6","nodeType":"VariableDeclaration","scope":1113,"src":"8867:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1027,"name":"uint256","nodeType":"ElementaryTypeName","src":"8867:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1030,"mutability":"mutable","name":"auth","nameLocation":"8892:4:6","nodeType":"VariableDeclaration","scope":1113,"src":"8884:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1029,"name":"address","nodeType":"ElementaryTypeName","src":"8884:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8854:43:6"},"returnParameters":{"id":1034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1033,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1113,"src":"8924:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1032,"name":"address","nodeType":"ElementaryTypeName","src":"8924:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8923:9:6"},"scope":1556,"src":"8838:795:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1162,"nodeType":"Block","src":"10008:274:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1121,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1116,"src":"10022:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10036:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1123,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10028:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1122,"name":"address","nodeType":"ElementaryTypeName","src":"10028:7:6","typeDescriptions":{}}},"id":1125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10028:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10022:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1135,"nodeType":"IfStatement","src":"10018:87:6","trueBody":{"id":1134,"nodeType":"Block","src":"10040:65:6","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10091:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1129,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10083:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1128,"name":"address","nodeType":"ElementaryTypeName","src":"10083:7:6","typeDescriptions":{}}},"id":1131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10083:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1127,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":482,"src":"10061:21:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10061:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1133,"nodeType":"RevertStatement","src":"10054:40:6"}]}},{"assignments":[1137],"declarations":[{"constant":false,"id":1137,"mutability":"mutable","name":"previousOwner","nameLocation":"10122:13:6","nodeType":"VariableDeclaration","scope":1162,"src":"10114:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1136,"name":"address","nodeType":"ElementaryTypeName","src":"10114:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1146,"initialValue":{"arguments":[{"id":1139,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1116,"src":"10146:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1140,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1118,"src":"10150:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":1143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10167:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1142,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10159:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1141,"name":"address","nodeType":"ElementaryTypeName","src":"10159:7:6","typeDescriptions":{}}},"id":1144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10159:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1138,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"10138:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":1145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10138:32:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10114:56:6"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1147,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1137,"src":"10184:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10209:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1149,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10201:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1148,"name":"address","nodeType":"ElementaryTypeName","src":"10201:7:6","typeDescriptions":{}}},"id":1151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10201:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10184:27:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1161,"nodeType":"IfStatement","src":"10180:96:6","trueBody":{"id":1160,"nodeType":"Block","src":"10213:63:6","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10262:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1155,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10254:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1154,"name":"address","nodeType":"ElementaryTypeName","src":"10254:7:6","typeDescriptions":{}}},"id":1157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10254:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1153,"name":"ERC721InvalidSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"10234:19:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10234:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1159,"nodeType":"RevertStatement","src":"10227:38:6"}]}}]},"documentation":{"id":1114,"nodeType":"StructuredDocumentation","src":"9639:311:6","text":" @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."},"id":1163,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"9964:5:6","nodeType":"FunctionDefinition","parameters":{"id":1119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1116,"mutability":"mutable","name":"to","nameLocation":"9978:2:6","nodeType":"VariableDeclaration","scope":1163,"src":"9970:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1115,"name":"address","nodeType":"ElementaryTypeName","src":"9970:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1118,"mutability":"mutable","name":"tokenId","nameLocation":"9990:7:6","nodeType":"VariableDeclaration","scope":1163,"src":"9982:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1117,"name":"uint256","nodeType":"ElementaryTypeName","src":"9982:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9969:29:6"},"returnParameters":{"id":1120,"nodeType":"ParameterList","parameters":[],"src":"10008:0:6"},"scope":1556,"src":"9955:327:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1177,"nodeType":"Block","src":"10690:43:6","statements":[{"expression":{"arguments":[{"id":1172,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"10710:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1173,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"10714:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":1174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10723:2:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1171,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[1178,1204],"referencedDeclaration":1204,"src":"10700:9:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":1175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10700:26:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1176,"nodeType":"ExpressionStatement","src":"10700:26:6"}]},"documentation":{"id":1164,"nodeType":"StructuredDocumentation","src":"10288:340:6","text":" @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":1178,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"10642:9:6","nodeType":"FunctionDefinition","parameters":{"id":1169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1166,"mutability":"mutable","name":"to","nameLocation":"10660:2:6","nodeType":"VariableDeclaration","scope":1178,"src":"10652:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1165,"name":"address","nodeType":"ElementaryTypeName","src":"10652:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1168,"mutability":"mutable","name":"tokenId","nameLocation":"10672:7:6","nodeType":"VariableDeclaration","scope":1178,"src":"10664:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1167,"name":"uint256","nodeType":"ElementaryTypeName","src":"10664:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10651:29:6"},"returnParameters":{"id":1170,"nodeType":"ParameterList","parameters":[],"src":"10690:0:6"},"scope":1556,"src":"10633:100:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1203,"nodeType":"Block","src":"11038:98:6","statements":[{"expression":{"arguments":[{"id":1189,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"11054:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1190,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1183,"src":"11058:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1188,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"11048:5:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11048:18:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1192,"nodeType":"ExpressionStatement","src":"11048:18:6"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11107:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1195,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11099:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1194,"name":"address","nodeType":"ElementaryTypeName","src":"11099:7:6","typeDescriptions":{}}},"id":1197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11099:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1198,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"11111:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1199,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1183,"src":"11115:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1200,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1185,"src":"11124:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1193,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1555,"src":"11076:22:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":1201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11076:53:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1202,"nodeType":"ExpressionStatement","src":"11076:53:6"}]},"documentation":{"id":1179,"nodeType":"StructuredDocumentation","src":"10739:210:6","text":" @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":1204,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"10963:9:6","nodeType":"FunctionDefinition","parameters":{"id":1186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1181,"mutability":"mutable","name":"to","nameLocation":"10981:2:6","nodeType":"VariableDeclaration","scope":1204,"src":"10973:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1180,"name":"address","nodeType":"ElementaryTypeName","src":"10973:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1183,"mutability":"mutable","name":"tokenId","nameLocation":"10993:7:6","nodeType":"VariableDeclaration","scope":1204,"src":"10985:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1182,"name":"uint256","nodeType":"ElementaryTypeName","src":"10985:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1185,"mutability":"mutable","name":"data","nameLocation":"11015:4:6","nodeType":"VariableDeclaration","scope":1204,"src":"11002:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1184,"name":"bytes","nodeType":"ElementaryTypeName","src":"11002:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10972:48:6"},"returnParameters":{"id":1187,"nodeType":"ParameterList","parameters":[],"src":"11038:0:6"},"scope":1556,"src":"10954:182:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1236,"nodeType":"Block","src":"11503:186:6","statements":[{"assignments":[1211],"declarations":[{"constant":false,"id":1211,"mutability":"mutable","name":"previousOwner","nameLocation":"11521:13:6","nodeType":"VariableDeclaration","scope":1236,"src":"11513:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1210,"name":"address","nodeType":"ElementaryTypeName","src":"11513:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1223,"initialValue":{"arguments":[{"arguments":[{"hexValue":"30","id":1215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11553:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1214,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11545:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1213,"name":"address","nodeType":"ElementaryTypeName","src":"11545:7:6","typeDescriptions":{}}},"id":1216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11545:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1217,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"11557:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":1220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11574:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1219,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11566:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1218,"name":"address","nodeType":"ElementaryTypeName","src":"11566:7:6","typeDescriptions":{}}},"id":1221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11566:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1212,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"11537:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":1222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11537:40:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"11513:64:6"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1224,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1211,"src":"11591:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11616:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1226,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11608:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1225,"name":"address","nodeType":"ElementaryTypeName","src":"11608:7:6","typeDescriptions":{}}},"id":1228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11608:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11591:27:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1235,"nodeType":"IfStatement","src":"11587:96:6","trueBody":{"id":1234,"nodeType":"Block","src":"11620:63:6","statements":[{"errorCall":{"arguments":[{"id":1231,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"11664:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1230,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"11641:22:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11641:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1233,"nodeType":"RevertStatement","src":"11634:38:6"}]}}]},"documentation":{"id":1205,"nodeType":"StructuredDocumentation","src":"11142:315:6","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":1237,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"11471:5:6","nodeType":"FunctionDefinition","parameters":{"id":1208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1207,"mutability":"mutable","name":"tokenId","nameLocation":"11485:7:6","nodeType":"VariableDeclaration","scope":1237,"src":"11477:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1206,"name":"uint256","nodeType":"ElementaryTypeName","src":"11477:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11476:17:6"},"returnParameters":{"id":1209,"nodeType":"ParameterList","parameters":[],"src":"11503:0:6"},"scope":1556,"src":"11462:227:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1296,"nodeType":"Block","src":"12084:389:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1247,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1242,"src":"12098:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12112:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1249,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12104:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1248,"name":"address","nodeType":"ElementaryTypeName","src":"12104:7:6","typeDescriptions":{}}},"id":1251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12104:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12098:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1261,"nodeType":"IfStatement","src":"12094:87:6","trueBody":{"id":1260,"nodeType":"Block","src":"12116:65:6","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12167:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1255,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12159:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1254,"name":"address","nodeType":"ElementaryTypeName","src":"12159:7:6","typeDescriptions":{}}},"id":1257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12159:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1253,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":482,"src":"12137:21:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12137:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1259,"nodeType":"RevertStatement","src":"12130:40:6"}]}},{"assignments":[1263],"declarations":[{"constant":false,"id":1263,"mutability":"mutable","name":"previousOwner","nameLocation":"12198:13:6","nodeType":"VariableDeclaration","scope":1296,"src":"12190:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1262,"name":"address","nodeType":"ElementaryTypeName","src":"12190:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1272,"initialValue":{"arguments":[{"id":1265,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1242,"src":"12222:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1266,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"12226:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":1269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12243:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1268,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12235:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1267,"name":"address","nodeType":"ElementaryTypeName","src":"12235:7:6","typeDescriptions":{}}},"id":1270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12235:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1264,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"12214:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":1271,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12214:32:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"12190:56:6"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1273,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1263,"src":"12260:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1275,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12277:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1274,"name":"address","nodeType":"ElementaryTypeName","src":"12277:7:6","typeDescriptions":{}}},"id":1277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12277:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12260:27:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1284,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1263,"src":"12362:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1285,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1240,"src":"12379:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12362:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1294,"nodeType":"IfStatement","src":"12358:109:6","trueBody":{"id":1293,"nodeType":"Block","src":"12385:82:6","statements":[{"errorCall":{"arguments":[{"id":1288,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1240,"src":"12427:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1289,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"12433:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1290,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1263,"src":"12442:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1287,"name":"ERC721IncorrectOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":472,"src":"12406:20:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address) pure"}},"id":1291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12406:50:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1292,"nodeType":"RevertStatement","src":"12399:57:6"}]}},"id":1295,"nodeType":"IfStatement","src":"12256:211:6","trueBody":{"id":1283,"nodeType":"Block","src":"12289:63:6","statements":[{"errorCall":{"arguments":[{"id":1280,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"12333:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1279,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"12310:22:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12310:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1282,"nodeType":"RevertStatement","src":"12303:38:6"}]}}]},"documentation":{"id":1238,"nodeType":"StructuredDocumentation","src":"11695:313:6","text":" @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."},"id":1297,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"12022:9:6","nodeType":"FunctionDefinition","parameters":{"id":1245,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1240,"mutability":"mutable","name":"from","nameLocation":"12040:4:6","nodeType":"VariableDeclaration","scope":1297,"src":"12032:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1239,"name":"address","nodeType":"ElementaryTypeName","src":"12032:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1242,"mutability":"mutable","name":"to","nameLocation":"12054:2:6","nodeType":"VariableDeclaration","scope":1297,"src":"12046:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1241,"name":"address","nodeType":"ElementaryTypeName","src":"12046:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1244,"mutability":"mutable","name":"tokenId","nameLocation":"12066:7:6","nodeType":"VariableDeclaration","scope":1297,"src":"12058:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1243,"name":"uint256","nodeType":"ElementaryTypeName","src":"12058:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12031:43:6"},"returnParameters":{"id":1246,"nodeType":"ParameterList","parameters":[],"src":"12084:0:6"},"scope":1556,"src":"12013:460:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1314,"nodeType":"Block","src":"13481:53:6","statements":[{"expression":{"arguments":[{"id":1308,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1300,"src":"13505:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1309,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1302,"src":"13511:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1310,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1304,"src":"13515:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":1311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13524:2:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1307,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[1315,1341],"referencedDeclaration":1341,"src":"13491:13:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":1312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13491:36:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1313,"nodeType":"ExpressionStatement","src":"13491:36:6"}]},"documentation":{"id":1298,"nodeType":"StructuredDocumentation","src":"12479:922:6","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n are aware of the ERC721 standard to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is like {safeTransferFrom} in the sense that it invokes\n {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `tokenId` token must exist and be owned by `from`.\n - `to` cannot be the zero address.\n - `from` cannot be the zero address.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":1315,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"13415:13:6","nodeType":"FunctionDefinition","parameters":{"id":1305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1300,"mutability":"mutable","name":"from","nameLocation":"13437:4:6","nodeType":"VariableDeclaration","scope":1315,"src":"13429:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1299,"name":"address","nodeType":"ElementaryTypeName","src":"13429:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1302,"mutability":"mutable","name":"to","nameLocation":"13451:2:6","nodeType":"VariableDeclaration","scope":1315,"src":"13443:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1301,"name":"address","nodeType":"ElementaryTypeName","src":"13443:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1304,"mutability":"mutable","name":"tokenId","nameLocation":"13463:7:6","nodeType":"VariableDeclaration","scope":1315,"src":"13455:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1303,"name":"uint256","nodeType":"ElementaryTypeName","src":"13455:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13428:43:6"},"returnParameters":{"id":1306,"nodeType":"ParameterList","parameters":[],"src":"13481:0:6"},"scope":1556,"src":"13406:128:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1340,"nodeType":"Block","src":"13873:102:6","statements":[{"expression":{"arguments":[{"id":1328,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"13893:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1329,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"13899:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1330,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1322,"src":"13903:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1327,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1297,"src":"13883:9:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13883:28:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1332,"nodeType":"ExpressionStatement","src":"13883:28:6"},{"expression":{"arguments":[{"id":1334,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"13944:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1335,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"13950:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1336,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1322,"src":"13954:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1337,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"13963:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1333,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1555,"src":"13921:22:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":1338,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13921:47:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1339,"nodeType":"ExpressionStatement","src":"13921:47:6"}]},"documentation":{"id":1316,"nodeType":"StructuredDocumentation","src":"13540:226:6","text":" @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":1341,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"13780:13:6","nodeType":"FunctionDefinition","parameters":{"id":1325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1318,"mutability":"mutable","name":"from","nameLocation":"13802:4:6","nodeType":"VariableDeclaration","scope":1341,"src":"13794:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1317,"name":"address","nodeType":"ElementaryTypeName","src":"13794:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1320,"mutability":"mutable","name":"to","nameLocation":"13816:2:6","nodeType":"VariableDeclaration","scope":1341,"src":"13808:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1319,"name":"address","nodeType":"ElementaryTypeName","src":"13808:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1322,"mutability":"mutable","name":"tokenId","nameLocation":"13828:7:6","nodeType":"VariableDeclaration","scope":1341,"src":"13820:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1321,"name":"uint256","nodeType":"ElementaryTypeName","src":"13820:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1324,"mutability":"mutable","name":"data","nameLocation":"13850:4:6","nodeType":"VariableDeclaration","scope":1341,"src":"13837:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1323,"name":"bytes","nodeType":"ElementaryTypeName","src":"13837:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"13793:62:6"},"returnParameters":{"id":1326,"nodeType":"ParameterList","parameters":[],"src":"13873:0:6"},"scope":1556,"src":"13771:204:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1358,"nodeType":"Block","src":"14488:50:6","statements":[{"expression":{"arguments":[{"id":1352,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1344,"src":"14507:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1353,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1346,"src":"14511:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1354,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1348,"src":"14520:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"74727565","id":1355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14526:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1351,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[1359,1425],"referencedDeclaration":1425,"src":"14498:8:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,uint256,address,bool)"}},"id":1356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14498:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1357,"nodeType":"ExpressionStatement","src":"14498:33:6"}]},"documentation":{"id":1342,"nodeType":"StructuredDocumentation","src":"13981:432:6","text":" @dev Approve `to` to operate on `tokenId`\n The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n either the owner of the token, or approved to operate on all tokens held by this owner.\n Emits an {Approval} event.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."},"id":1359,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"14427:8:6","nodeType":"FunctionDefinition","parameters":{"id":1349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1344,"mutability":"mutable","name":"to","nameLocation":"14444:2:6","nodeType":"VariableDeclaration","scope":1359,"src":"14436:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1343,"name":"address","nodeType":"ElementaryTypeName","src":"14436:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1346,"mutability":"mutable","name":"tokenId","nameLocation":"14456:7:6","nodeType":"VariableDeclaration","scope":1359,"src":"14448:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1345,"name":"uint256","nodeType":"ElementaryTypeName","src":"14448:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1348,"mutability":"mutable","name":"auth","nameLocation":"14473:4:6","nodeType":"VariableDeclaration","scope":1359,"src":"14465:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1347,"name":"address","nodeType":"ElementaryTypeName","src":"14465:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14435:43:6"},"returnParameters":{"id":1350,"nodeType":"ParameterList","parameters":[],"src":"14488:0:6"},"scope":1556,"src":"14418:120:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1424,"nodeType":"Block","src":"14814:568:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1371,"name":"emitEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1368,"src":"14880:9:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1372,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"14893:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14909:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1374,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14901:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1373,"name":"address","nodeType":"ElementaryTypeName","src":"14901:7:6","typeDescriptions":{}}},"id":1376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14901:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14893:18:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14880:31:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1417,"nodeType":"IfStatement","src":"14876:460:6","trueBody":{"id":1416,"nodeType":"Block","src":"14913:423:6","statements":[{"assignments":[1380],"declarations":[{"constant":false,"id":1380,"mutability":"mutable","name":"owner","nameLocation":"14935:5:6","nodeType":"VariableDeclaration","scope":1416,"src":"14927:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1379,"name":"address","nodeType":"ElementaryTypeName","src":"14927:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1384,"initialValue":{"arguments":[{"id":1382,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"14957:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1381,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"14943:13:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14943:22:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"14927:38:6"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1385,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"15093:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15109:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1387,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15101:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1386,"name":"address","nodeType":"ElementaryTypeName","src":"15101:7:6","typeDescriptions":{}}},"id":1389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15101:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15093:18:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1391,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1380,"src":"15115:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1392,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"15124:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15115:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15093:35:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":1399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"15132:30:6","subExpression":{"arguments":[{"id":1396,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1380,"src":"15150:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1397,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"15157:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1395,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"15133:16:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":1398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15133:29:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15093:69:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1406,"nodeType":"IfStatement","src":"15089:142:6","trueBody":{"id":1405,"nodeType":"Block","src":"15164:67:6","statements":[{"errorCall":{"arguments":[{"id":1402,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"15211:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1401,"name":"ERC721InvalidApprover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":494,"src":"15189:21:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15189:27:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1404,"nodeType":"RevertStatement","src":"15182:34:6"}]}},{"condition":{"id":1407,"name":"emitEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1368,"src":"15249:9:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1415,"nodeType":"IfStatement","src":"15245:81:6","trueBody":{"id":1414,"nodeType":"Block","src":"15260:66:6","statements":[{"eventCall":{"arguments":[{"id":1409,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1380,"src":"15292:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1410,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1362,"src":"15299:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1411,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"15303:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1408,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1581,"src":"15283:8:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15283:28:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1413,"nodeType":"EmitStatement","src":"15278:33:6"}]}}]}},{"expression":{"id":1422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1418,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"15346:15:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1420,"indexExpression":{"id":1419,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"15362:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15346:24:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1421,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1362,"src":"15373:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15346:29:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1423,"nodeType":"ExpressionStatement","src":"15346:29:6"}]},"documentation":{"id":1360,"nodeType":"StructuredDocumentation","src":"14544:171:6","text":" @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n emitted in the context of transfers."},"id":1425,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"14729:8:6","nodeType":"FunctionDefinition","parameters":{"id":1369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1362,"mutability":"mutable","name":"to","nameLocation":"14746:2:6","nodeType":"VariableDeclaration","scope":1425,"src":"14738:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1361,"name":"address","nodeType":"ElementaryTypeName","src":"14738:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1364,"mutability":"mutable","name":"tokenId","nameLocation":"14758:7:6","nodeType":"VariableDeclaration","scope":1425,"src":"14750:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1363,"name":"uint256","nodeType":"ElementaryTypeName","src":"14750:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1366,"mutability":"mutable","name":"auth","nameLocation":"14775:4:6","nodeType":"VariableDeclaration","scope":1425,"src":"14767:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1365,"name":"address","nodeType":"ElementaryTypeName","src":"14767:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1368,"mutability":"mutable","name":"emitEvent","nameLocation":"14786:9:6","nodeType":"VariableDeclaration","scope":1425,"src":"14781:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1367,"name":"bool","nodeType":"ElementaryTypeName","src":"14781:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14737:59:6"},"returnParameters":{"id":1370,"nodeType":"ParameterList","parameters":[],"src":"14814:0:6"},"scope":1556,"src":"14720:662:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1461,"nodeType":"Block","src":"15684:219:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1435,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1430,"src":"15698:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15718:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1437,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15710:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1436,"name":"address","nodeType":"ElementaryTypeName","src":"15710:7:6","typeDescriptions":{}}},"id":1439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15710:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15698:22:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1446,"nodeType":"IfStatement","src":"15694:91:6","trueBody":{"id":1445,"nodeType":"Block","src":"15722:63:6","statements":[{"errorCall":{"arguments":[{"id":1442,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1430,"src":"15765:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1441,"name":"ERC721InvalidOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":499,"src":"15743:21:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15743:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1444,"nodeType":"RevertStatement","src":"15736:38:6"}]}},{"expression":{"id":1453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1447,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":600,"src":"15794:18:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1450,"indexExpression":{"id":1448,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1428,"src":"15813:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15794:25:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1451,"indexExpression":{"id":1449,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1430,"src":"15820:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15794:35:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1452,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1432,"src":"15832:8:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15794:46:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1454,"nodeType":"ExpressionStatement","src":"15794:46:6"},{"eventCall":{"arguments":[{"id":1456,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1428,"src":"15870:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1457,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1430,"src":"15877:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1458,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1432,"src":"15887:8:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1455,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1590,"src":"15855:14:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15855:41:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1460,"nodeType":"EmitStatement","src":"15850:46:6"}]},"documentation":{"id":1426,"nodeType":"StructuredDocumentation","src":"15388:198:6","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Requirements:\n - operator can't be the address zero.\n Emits an {ApprovalForAll} event."},"id":1462,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"15600:18:6","nodeType":"FunctionDefinition","parameters":{"id":1433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1428,"mutability":"mutable","name":"owner","nameLocation":"15627:5:6","nodeType":"VariableDeclaration","scope":1462,"src":"15619:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1427,"name":"address","nodeType":"ElementaryTypeName","src":"15619:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1430,"mutability":"mutable","name":"operator","nameLocation":"15642:8:6","nodeType":"VariableDeclaration","scope":1462,"src":"15634:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1429,"name":"address","nodeType":"ElementaryTypeName","src":"15634:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1432,"mutability":"mutable","name":"approved","nameLocation":"15657:8:6","nodeType":"VariableDeclaration","scope":1462,"src":"15652:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1431,"name":"bool","nodeType":"ElementaryTypeName","src":"15652:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15618:48:6"},"returnParameters":{"id":1434,"nodeType":"ParameterList","parameters":[],"src":"15684:0:6"},"scope":1556,"src":"15591:312:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1490,"nodeType":"Block","src":"16210:169:6","statements":[{"assignments":[1471],"declarations":[{"constant":false,"id":1471,"mutability":"mutable","name":"owner","nameLocation":"16228:5:6","nodeType":"VariableDeclaration","scope":1490,"src":"16220:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1470,"name":"address","nodeType":"ElementaryTypeName","src":"16220:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1475,"initialValue":{"arguments":[{"id":1473,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1465,"src":"16245:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1472,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":921,"src":"16236:8:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16236:17:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"16220:33:6"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1476,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"16267:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16284:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1478,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16276:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1477,"name":"address","nodeType":"ElementaryTypeName","src":"16276:7:6","typeDescriptions":{}}},"id":1480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16276:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16267:19:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1487,"nodeType":"IfStatement","src":"16263:88:6","trueBody":{"id":1486,"nodeType":"Block","src":"16288:63:6","statements":[{"errorCall":{"arguments":[{"id":1483,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1465,"src":"16332:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1482,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"16309:22:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16309:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1485,"nodeType":"RevertStatement","src":"16302:38:6"}]}},{"expression":{"id":1488,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"16367:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1469,"id":1489,"nodeType":"Return","src":"16360:12:6"}]},"documentation":{"id":1463,"nodeType":"StructuredDocumentation","src":"15909:224:6","text":" @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n Returns the owner.\n Overrides to ownership logic should be done to {_ownerOf}."},"id":1491,"implemented":true,"kind":"function","modifiers":[],"name":"_requireOwned","nameLocation":"16147:13:6","nodeType":"FunctionDefinition","parameters":{"id":1466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1465,"mutability":"mutable","name":"tokenId","nameLocation":"16169:7:6","nodeType":"VariableDeclaration","scope":1491,"src":"16161:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1464,"name":"uint256","nodeType":"ElementaryTypeName","src":"16161:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16160:17:6"},"returnParameters":{"id":1469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1468,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1491,"src":"16201:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1467,"name":"address","nodeType":"ElementaryTypeName","src":"16201:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16200:9:6"},"scope":1556,"src":"16138:241:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1554,"nodeType":"Block","src":"17020:680:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1503,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"17034:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17037:4:6","memberName":"code","nodeType":"MemberAccess","src":"17034:7:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17042:6:6","memberName":"length","nodeType":"MemberAccess","src":"17034:14:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17051:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17034:18:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1553,"nodeType":"IfStatement","src":"17030:664:6","trueBody":{"id":1552,"nodeType":"Block","src":"17054:640:6","statements":[{"clauses":[{"block":{"id":1532,"nodeType":"Block","src":"17168:162:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1521,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1519,"src":"17190:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":1522,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"17200:15:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1691_$","typeString":"type(contract IERC721Receiver)"}},"id":1523,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17216:16:6","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1690,"src":"17200:32:6","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":1524,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17233:8:6","memberName":"selector","nodeType":"MemberAccess","src":"17200:41:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"17190:51:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1531,"nodeType":"IfStatement","src":"17186:130:6","trueBody":{"id":1530,"nodeType":"Block","src":"17243:73:6","statements":[{"errorCall":{"arguments":[{"id":1527,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"17294:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1526,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":482,"src":"17272:21:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17272:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1529,"nodeType":"RevertStatement","src":"17265:32:6"}]}}]},"errorName":"","id":1533,"nodeType":"TryCatchClause","parameters":{"id":1520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1519,"mutability":"mutable","name":"retval","nameLocation":"17160:6:6","nodeType":"VariableDeclaration","scope":1533,"src":"17153:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1518,"name":"bytes4","nodeType":"ElementaryTypeName","src":"17153:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"17152:15:6"},"src":"17144:186:6"},{"block":{"id":1549,"nodeType":"Block","src":"17359:325:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1537,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1535,"src":"17381:6:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17388:6:6","memberName":"length","nodeType":"MemberAccess","src":"17381:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17398:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17381:18:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1547,"nodeType":"Block","src":"17480:190:6","statements":[{"AST":{"nodeType":"YulBlock","src":"17566:86:6","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17603:2:6","type":"","value":"32"},{"name":"reason","nodeType":"YulIdentifier","src":"17607:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17599:3:6"},"nodeType":"YulFunctionCall","src":"17599:15:6"},{"arguments":[{"name":"reason","nodeType":"YulIdentifier","src":"17622:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17616:5:6"},"nodeType":"YulFunctionCall","src":"17616:13:6"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17592:6:6"},"nodeType":"YulFunctionCall","src":"17592:38:6"},"nodeType":"YulExpressionStatement","src":"17592:38:6"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1535,"isOffset":false,"isSlot":false,"src":"17607:6:6","valueSize":1},{"declaration":1535,"isOffset":false,"isSlot":false,"src":"17622:6:6","valueSize":1}],"id":1546,"nodeType":"InlineAssembly","src":"17557:95:6"}]},"id":1548,"nodeType":"IfStatement","src":"17377:293:6","trueBody":{"id":1545,"nodeType":"Block","src":"17401:73:6","statements":[{"errorCall":{"arguments":[{"id":1542,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"17452:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1541,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":482,"src":"17430:21:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1543,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17430:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1544,"nodeType":"RevertStatement","src":"17423:32:6"}]}}]},"errorName":"","id":1550,"nodeType":"TryCatchClause","parameters":{"id":1536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1535,"mutability":"mutable","name":"reason","nameLocation":"17351:6:6","nodeType":"VariableDeclaration","scope":1550,"src":"17338:19:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1534,"name":"bytes","nodeType":"ElementaryTypeName","src":"17338:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"17337:21:6"},"src":"17331:353:6"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1512,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"17109:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17109:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1514,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1494,"src":"17123:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1515,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"17129:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1516,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1500,"src":"17138:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1509,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"17088:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1508,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"17072:15:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1691_$","typeString":"type(contract IERC721Receiver)"}},"id":1510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17072:19:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$1691","typeString":"contract IERC721Receiver"}},"id":1511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17092:16:6","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1690,"src":"17072:36:6","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":1517,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17072:71:6","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":1551,"nodeType":"TryStatement","src":"17068:616:6"}]}}]},"documentation":{"id":1492,"nodeType":"StructuredDocumentation","src":"16385:528:6","text":" @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call"},"id":1555,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOnERC721Received","nameLocation":"16927:22:6","nodeType":"FunctionDefinition","parameters":{"id":1501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1494,"mutability":"mutable","name":"from","nameLocation":"16958:4:6","nodeType":"VariableDeclaration","scope":1555,"src":"16950:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1493,"name":"address","nodeType":"ElementaryTypeName","src":"16950:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1496,"mutability":"mutable","name":"to","nameLocation":"16972:2:6","nodeType":"VariableDeclaration","scope":1555,"src":"16964:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1495,"name":"address","nodeType":"ElementaryTypeName","src":"16964:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1498,"mutability":"mutable","name":"tokenId","nameLocation":"16984:7:6","nodeType":"VariableDeclaration","scope":1555,"src":"16976:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1497,"name":"uint256","nodeType":"ElementaryTypeName","src":"16976:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1500,"mutability":"mutable","name":"data","nameLocation":"17006:4:6","nodeType":"VariableDeclaration","scope":1555,"src":"16993:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1499,"name":"bytes","nodeType":"ElementaryTypeName","src":"16993:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16949:62:6"},"returnParameters":{"id":1502,"nodeType":"ParameterList","parameters":[],"src":"17020:0:6"},"scope":1556,"src":"16918:782:6","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":1557,"src":"776:16926:6","usedErrors":[458,463,472,477,482,489,494,499],"usedEvents":[1572,1581,1590]}],"src":"107:17596:6"},"id":6},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[2195],"IERC721":[1673]},"id":1674,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1558,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"108:24:7"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":1560,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1674,"sourceUnit":2196,"src":"134:62:7","symbolAliases":[{"foreign":{"id":1559,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2195,"src":"142:7:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1562,"name":"IERC165","nameLocations":["287:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":2195,"src":"287:7:7"},"id":1563,"nodeType":"InheritanceSpecifier","src":"287:7:7"}],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":1561,"nodeType":"StructuredDocumentation","src":"198:67:7","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":1673,"linearizedBaseContracts":[1673,2195],"name":"IERC721","nameLocation":"276:7:7","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1564,"nodeType":"StructuredDocumentation","src":"301:88:7","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1572,"name":"Transfer","nameLocation":"400:8:7","nodeType":"EventDefinition","parameters":{"id":1571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1566,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"425:4:7","nodeType":"VariableDeclaration","scope":1572,"src":"409:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1565,"name":"address","nodeType":"ElementaryTypeName","src":"409:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1568,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"447:2:7","nodeType":"VariableDeclaration","scope":1572,"src":"431:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1567,"name":"address","nodeType":"ElementaryTypeName","src":"431:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1570,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"467:7:7","nodeType":"VariableDeclaration","scope":1572,"src":"451:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1569,"name":"uint256","nodeType":"ElementaryTypeName","src":"451:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"408:67:7"},"src":"394:82:7"},{"anonymous":false,"documentation":{"id":1573,"nodeType":"StructuredDocumentation","src":"482:94:7","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1581,"name":"Approval","nameLocation":"587:8:7","nodeType":"EventDefinition","parameters":{"id":1580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1575,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"612:5:7","nodeType":"VariableDeclaration","scope":1581,"src":"596:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1574,"name":"address","nodeType":"ElementaryTypeName","src":"596:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1577,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"635:8:7","nodeType":"VariableDeclaration","scope":1581,"src":"619:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1576,"name":"address","nodeType":"ElementaryTypeName","src":"619:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1579,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"661:7:7","nodeType":"VariableDeclaration","scope":1581,"src":"645:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1578,"name":"uint256","nodeType":"ElementaryTypeName","src":"645:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"595:74:7"},"src":"581:89:7"},{"anonymous":false,"documentation":{"id":1582,"nodeType":"StructuredDocumentation","src":"676:117:7","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":1590,"name":"ApprovalForAll","nameLocation":"804:14:7","nodeType":"EventDefinition","parameters":{"id":1589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1584,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"835:5:7","nodeType":"VariableDeclaration","scope":1590,"src":"819:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1583,"name":"address","nodeType":"ElementaryTypeName","src":"819:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1586,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"858:8:7","nodeType":"VariableDeclaration","scope":1590,"src":"842:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1585,"name":"address","nodeType":"ElementaryTypeName","src":"842:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1588,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"873:8:7","nodeType":"VariableDeclaration","scope":1590,"src":"868:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1587,"name":"bool","nodeType":"ElementaryTypeName","src":"868:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"818:64:7"},"src":"798:85:7"},{"documentation":{"id":1591,"nodeType":"StructuredDocumentation","src":"889:76:7","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":1598,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"979:9:7","nodeType":"FunctionDefinition","parameters":{"id":1594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1593,"mutability":"mutable","name":"owner","nameLocation":"997:5:7","nodeType":"VariableDeclaration","scope":1598,"src":"989:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1592,"name":"address","nodeType":"ElementaryTypeName","src":"989:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"988:15:7"},"returnParameters":{"id":1597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1596,"mutability":"mutable","name":"balance","nameLocation":"1035:7:7","nodeType":"VariableDeclaration","scope":1598,"src":"1027:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1595,"name":"uint256","nodeType":"ElementaryTypeName","src":"1027:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1026:17:7"},"scope":1673,"src":"970:74:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1599,"nodeType":"StructuredDocumentation","src":"1050:131:7","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":1606,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1195:7:7","nodeType":"FunctionDefinition","parameters":{"id":1602,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1601,"mutability":"mutable","name":"tokenId","nameLocation":"1211:7:7","nodeType":"VariableDeclaration","scope":1606,"src":"1203:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1600,"name":"uint256","nodeType":"ElementaryTypeName","src":"1203:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1202:17:7"},"returnParameters":{"id":1605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1604,"mutability":"mutable","name":"owner","nameLocation":"1251:5:7","nodeType":"VariableDeclaration","scope":1606,"src":"1243:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1603,"name":"address","nodeType":"ElementaryTypeName","src":"1243:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1242:15:7"},"scope":1673,"src":"1186:72:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1607,"nodeType":"StructuredDocumentation","src":"1264:565:7","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":1618,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1843:16:7","nodeType":"FunctionDefinition","parameters":{"id":1616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1609,"mutability":"mutable","name":"from","nameLocation":"1868:4:7","nodeType":"VariableDeclaration","scope":1618,"src":"1860:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1608,"name":"address","nodeType":"ElementaryTypeName","src":"1860:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1611,"mutability":"mutable","name":"to","nameLocation":"1882:2:7","nodeType":"VariableDeclaration","scope":1618,"src":"1874:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1610,"name":"address","nodeType":"ElementaryTypeName","src":"1874:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1613,"mutability":"mutable","name":"tokenId","nameLocation":"1894:7:7","nodeType":"VariableDeclaration","scope":1618,"src":"1886:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1612,"name":"uint256","nodeType":"ElementaryTypeName","src":"1886:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1615,"mutability":"mutable","name":"data","nameLocation":"1918:4:7","nodeType":"VariableDeclaration","scope":1618,"src":"1903:19:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1614,"name":"bytes","nodeType":"ElementaryTypeName","src":"1903:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1859:64:7"},"returnParameters":{"id":1617,"nodeType":"ParameterList","parameters":[],"src":"1932:0:7"},"scope":1673,"src":"1834:99:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1619,"nodeType":"StructuredDocumentation","src":"1939:705:7","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n   {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":1628,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2658:16:7","nodeType":"FunctionDefinition","parameters":{"id":1626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1621,"mutability":"mutable","name":"from","nameLocation":"2683:4:7","nodeType":"VariableDeclaration","scope":1628,"src":"2675:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1620,"name":"address","nodeType":"ElementaryTypeName","src":"2675:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1623,"mutability":"mutable","name":"to","nameLocation":"2697:2:7","nodeType":"VariableDeclaration","scope":1628,"src":"2689:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1622,"name":"address","nodeType":"ElementaryTypeName","src":"2689:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1625,"mutability":"mutable","name":"tokenId","nameLocation":"2709:7:7","nodeType":"VariableDeclaration","scope":1628,"src":"2701:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1624,"name":"uint256","nodeType":"ElementaryTypeName","src":"2701:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2674:43:7"},"returnParameters":{"id":1627,"nodeType":"ParameterList","parameters":[],"src":"2726:0:7"},"scope":1673,"src":"2649:78:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1629,"nodeType":"StructuredDocumentation","src":"2733:732:7","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1638,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3479:12:7","nodeType":"FunctionDefinition","parameters":{"id":1636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1631,"mutability":"mutable","name":"from","nameLocation":"3500:4:7","nodeType":"VariableDeclaration","scope":1638,"src":"3492:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1630,"name":"address","nodeType":"ElementaryTypeName","src":"3492:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1633,"mutability":"mutable","name":"to","nameLocation":"3514:2:7","nodeType":"VariableDeclaration","scope":1638,"src":"3506:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1632,"name":"address","nodeType":"ElementaryTypeName","src":"3506:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1635,"mutability":"mutable","name":"tokenId","nameLocation":"3526:7:7","nodeType":"VariableDeclaration","scope":1638,"src":"3518:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1634,"name":"uint256","nodeType":"ElementaryTypeName","src":"3518:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3491:43:7"},"returnParameters":{"id":1637,"nodeType":"ParameterList","parameters":[],"src":"3543:0:7"},"scope":1673,"src":"3470:74:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1639,"nodeType":"StructuredDocumentation","src":"3550:452:7","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1646,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4016:7:7","nodeType":"FunctionDefinition","parameters":{"id":1644,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1641,"mutability":"mutable","name":"to","nameLocation":"4032:2:7","nodeType":"VariableDeclaration","scope":1646,"src":"4024:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1640,"name":"address","nodeType":"ElementaryTypeName","src":"4024:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1643,"mutability":"mutable","name":"tokenId","nameLocation":"4044:7:7","nodeType":"VariableDeclaration","scope":1646,"src":"4036:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1642,"name":"uint256","nodeType":"ElementaryTypeName","src":"4036:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4023:29:7"},"returnParameters":{"id":1645,"nodeType":"ParameterList","parameters":[],"src":"4061:0:7"},"scope":1673,"src":"4007:55:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1647,"nodeType":"StructuredDocumentation","src":"4068:315:7","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the address zero.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":1654,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4397:17:7","nodeType":"FunctionDefinition","parameters":{"id":1652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1649,"mutability":"mutable","name":"operator","nameLocation":"4423:8:7","nodeType":"VariableDeclaration","scope":1654,"src":"4415:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1648,"name":"address","nodeType":"ElementaryTypeName","src":"4415:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1651,"mutability":"mutable","name":"approved","nameLocation":"4438:8:7","nodeType":"VariableDeclaration","scope":1654,"src":"4433:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1650,"name":"bool","nodeType":"ElementaryTypeName","src":"4433:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4414:33:7"},"returnParameters":{"id":1653,"nodeType":"ParameterList","parameters":[],"src":"4456:0:7"},"scope":1673,"src":"4388:69:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1655,"nodeType":"StructuredDocumentation","src":"4463:139:7","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":1662,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4616:11:7","nodeType":"FunctionDefinition","parameters":{"id":1658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1657,"mutability":"mutable","name":"tokenId","nameLocation":"4636:7:7","nodeType":"VariableDeclaration","scope":1662,"src":"4628:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1656,"name":"uint256","nodeType":"ElementaryTypeName","src":"4628:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4627:17:7"},"returnParameters":{"id":1661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1660,"mutability":"mutable","name":"operator","nameLocation":"4676:8:7","nodeType":"VariableDeclaration","scope":1662,"src":"4668:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1659,"name":"address","nodeType":"ElementaryTypeName","src":"4668:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4667:18:7"},"scope":1673,"src":"4607:79:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1663,"nodeType":"StructuredDocumentation","src":"4692:138:7","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":1672,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4844:16:7","nodeType":"FunctionDefinition","parameters":{"id":1668,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1665,"mutability":"mutable","name":"owner","nameLocation":"4869:5:7","nodeType":"VariableDeclaration","scope":1672,"src":"4861:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1664,"name":"address","nodeType":"ElementaryTypeName","src":"4861:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1667,"mutability":"mutable","name":"operator","nameLocation":"4884:8:7","nodeType":"VariableDeclaration","scope":1672,"src":"4876:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1666,"name":"address","nodeType":"ElementaryTypeName","src":"4876:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4860:33:7"},"returnParameters":{"id":1671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1670,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1672,"src":"4917:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1669,"name":"bool","nodeType":"ElementaryTypeName","src":"4917:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4916:6:7"},"scope":1673,"src":"4835:88:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1674,"src":"266:4659:7","usedErrors":[],"usedEvents":[1572,1581,1590]}],"src":"108:4818:7"},"id":7},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[1691]},"id":1692,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1675,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"116:24:8"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":1676,"nodeType":"StructuredDocumentation","src":"142:152:8","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":1691,"linearizedBaseContracts":[1691],"name":"IERC721Receiver","nameLocation":"305:15:8","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1677,"nodeType":"StructuredDocumentation","src":"327:500:8","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":1690,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"841:16:8","nodeType":"FunctionDefinition","parameters":{"id":1686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1679,"mutability":"mutable","name":"operator","nameLocation":"875:8:8","nodeType":"VariableDeclaration","scope":1690,"src":"867:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1678,"name":"address","nodeType":"ElementaryTypeName","src":"867:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1681,"mutability":"mutable","name":"from","nameLocation":"901:4:8","nodeType":"VariableDeclaration","scope":1690,"src":"893:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1680,"name":"address","nodeType":"ElementaryTypeName","src":"893:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1683,"mutability":"mutable","name":"tokenId","nameLocation":"923:7:8","nodeType":"VariableDeclaration","scope":1690,"src":"915:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1682,"name":"uint256","nodeType":"ElementaryTypeName","src":"915:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1685,"mutability":"mutable","name":"data","nameLocation":"955:4:8","nodeType":"VariableDeclaration","scope":1690,"src":"940:19:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1684,"name":"bytes","nodeType":"ElementaryTypeName","src":"940:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"857:108:8"},"returnParameters":{"id":1689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1688,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1690,"src":"984:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1687,"name":"bytes4","nodeType":"ElementaryTypeName","src":"984:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"983:8:8"},"scope":1691,"src":"832:160:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1692,"src":"295:699:8","usedErrors":[],"usedEvents":[]}],"src":"116:879:8"},"id":8},"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol","exportedSymbols":{"Context":[1904],"ERC721":[1556],"ERC721Burnable":[1720]},"id":1721,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1693,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"126:24:9"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"../ERC721.sol","id":1695,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1721,"sourceUnit":1557,"src":"152:37:9","symbolAliases":[{"foreign":{"id":1694,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1556,"src":"160:6:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../../utils/Context.sol","id":1697,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1721,"sourceUnit":1905,"src":"190:51:9","symbolAliases":[{"foreign":{"id":1696,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1904,"src":"198:7:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1699,"name":"Context","nameLocations":["372:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":1904,"src":"372:7:9"},"id":1700,"nodeType":"InheritanceSpecifier","src":"372:7:9"},{"baseName":{"id":1701,"name":"ERC721","nameLocations":["381:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":1556,"src":"381:6:9"},"id":1702,"nodeType":"InheritanceSpecifier","src":"381:6:9"}],"canonicalName":"ERC721Burnable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1698,"nodeType":"StructuredDocumentation","src":"243:92:9","text":" @title ERC721 Burnable Token\n @dev ERC721 Token that can be burned (destroyed)."},"fullyImplemented":true,"id":1720,"linearizedBaseContracts":[1720,1556,500,1874,1673,2183,2195,1904],"name":"ERC721Burnable","nameLocation":"354:14:9","nodeType":"ContractDefinition","nodes":[{"body":{"id":1718,"nodeType":"Block","src":"607:268:9","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"842:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1710,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"834:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1709,"name":"address","nodeType":"ElementaryTypeName","src":"834:7:9","typeDescriptions":{}}},"id":1712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"834:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1713,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"846:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1714,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"855:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"855:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1708,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"826:7:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":1716,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"826:42:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1717,"nodeType":"ExpressionStatement","src":"826:42:9"}]},"documentation":{"id":1703,"nodeType":"StructuredDocumentation","src":"394:162:9","text":" @dev Burns `tokenId`. See {ERC721-_burn}.\n Requirements:\n - The caller must own `tokenId` or be an approved operator."},"functionSelector":"42966c68","id":1719,"implemented":true,"kind":"function","modifiers":[],"name":"burn","nameLocation":"570:4:9","nodeType":"FunctionDefinition","parameters":{"id":1706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1705,"mutability":"mutable","name":"tokenId","nameLocation":"583:7:9","nodeType":"VariableDeclaration","scope":1719,"src":"575:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1704,"name":"uint256","nodeType":"ElementaryTypeName","src":"575:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"574:17:9"},"returnParameters":{"id":1707,"nodeType":"ParameterList","parameters":[],"src":"607:0:9"},"scope":1720,"src":"561:314:9","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":1721,"src":"336:541:9","usedErrors":[458,463,472,477,482,489,494,499],"usedEvents":[1572,1581,1590]}],"src":"126:752:9"},"id":9},"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","exportedSymbols":{"ERC721":[1556],"ERC721URIStorage":[1846],"IERC165":[2195],"IERC4906":[406],"Strings":[2159]},"id":1847,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1722,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"128:24:10"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"../ERC721.sol","id":1724,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1847,"sourceUnit":1557,"src":"154:37:10","symbolAliases":[{"foreign":{"id":1723,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1556,"src":"162:6:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../../../utils/Strings.sol","id":1726,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1847,"sourceUnit":2160,"src":"192:51:10","symbolAliases":[{"foreign":{"id":1725,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2159,"src":"200:7:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4906.sol","file":"../../../interfaces/IERC4906.sol","id":1728,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1847,"sourceUnit":407,"src":"244:58:10","symbolAliases":[{"foreign":{"id":1727,"name":"IERC4906","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":406,"src":"252:8:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC165.sol","file":"../../../interfaces/IERC165.sol","id":1730,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1847,"sourceUnit":383,"src":"303:56:10","symbolAliases":[{"foreign":{"id":1729,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2195,"src":"311:7:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1732,"name":"IERC4906","nameLocations":["469:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":406,"src":"469:8:10"},"id":1733,"nodeType":"InheritanceSpecifier","src":"469:8:10"},{"baseName":{"id":1734,"name":"ERC721","nameLocations":["479:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":1556,"src":"479:6:10"},"id":1735,"nodeType":"InheritanceSpecifier","src":"479:6:10"}],"canonicalName":"ERC721URIStorage","contractDependencies":[],"contractKind":"contract","documentation":{"id":1731,"nodeType":"StructuredDocumentation","src":"361:69:10","text":" @dev ERC721 token with storage based token URI management."},"fullyImplemented":true,"id":1846,"linearizedBaseContracts":[1846,1556,500,1874,406,1673,2183,2195,1904],"name":"ERC721URIStorage","nameLocation":"449:16:10","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1738,"libraryName":{"id":1736,"name":"Strings","nameLocations":["498:7:10"],"nodeType":"IdentifierPath","referencedDeclaration":2159,"src":"498:7:10"},"nodeType":"UsingForDirective","src":"492:26:10","typeName":{"id":1737,"name":"uint256","nodeType":"ElementaryTypeName","src":"510:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":true,"id":1744,"mutability":"constant","name":"ERC4906_INTERFACE_ID","nameLocation":"730:20:10","nodeType":"VariableDeclaration","scope":1846,"src":"706:65:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1739,"name":"bytes4","nodeType":"ElementaryTypeName","src":"706:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"arguments":[{"hexValue":"30783439303634393036","id":1742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"760:10:10","typeDescriptions":{"typeIdentifier":"t_rational_1225148678_by_1","typeString":"int_const 1225148678"},"value":"0x49064906"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1225148678_by_1","typeString":"int_const 1225148678"}],"id":1741,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"753:6:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":1740,"name":"bytes4","nodeType":"ElementaryTypeName","src":"753:6:10","typeDescriptions":{}}},"id":1743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"753:18:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"private"},{"constant":false,"id":1748,"mutability":"mutable","name":"_tokenURIs","nameLocation":"860:10:10","nodeType":"VariableDeclaration","scope":1846,"src":"817:53:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"typeName":{"id":1747,"keyName":"tokenId","keyNameLocation":"833:7:10","keyType":{"id":1745,"name":"uint256","nodeType":"ElementaryTypeName","src":"825:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"817:34:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1746,"name":"string","nodeType":"ElementaryTypeName","src":"844:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"visibility":"private"},{"baseFunctions":[648,2194],"body":{"id":1768,"nodeType":"Block","src":"1045:99:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1759,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1751,"src":"1062:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1760,"name":"ERC4906_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1744,"src":"1077:20:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1062:35:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1764,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1751,"src":"1125:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":1762,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967271,"src":"1101:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721URIStorage_$1846_$","typeString":"type(contract super ERC721URIStorage)"}},"id":1763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1107:17:10","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":648,"src":"1101:23:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":1765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1101:36:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1062:75:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1758,"id":1767,"nodeType":"Return","src":"1055:82:10"}]},"documentation":{"id":1749,"nodeType":"StructuredDocumentation","src":"877:55:10","text":" @dev See {IERC165-supportsInterface}"},"functionSelector":"01ffc9a7","id":1769,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"946:17:10","nodeType":"FunctionDefinition","overrides":{"id":1755,"nodeType":"OverrideSpecifier","overrides":[{"id":1753,"name":"ERC721","nameLocations":["1013:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":1556,"src":"1013:6:10"},{"id":1754,"name":"IERC165","nameLocations":["1021:7:10"],"nodeType":"IdentifierPath","referencedDeclaration":2195,"src":"1021:7:10"}],"src":"1004:25:10"},"parameters":{"id":1752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1751,"mutability":"mutable","name":"interfaceId","nameLocation":"971:11:10","nodeType":"VariableDeclaration","scope":1769,"src":"964:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1750,"name":"bytes4","nodeType":"ElementaryTypeName","src":"964:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"963:20:10"},"returnParameters":{"id":1758,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1757,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1769,"src":"1039:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1756,"name":"bool","nodeType":"ElementaryTypeName","src":"1039:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1038:6:10"},"scope":1846,"src":"937:207:10","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[743],"body":{"id":1825,"nodeType":"Block","src":"1298:505:10","statements":[{"expression":{"arguments":[{"id":1779,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1772,"src":"1322:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1778,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"1308:13:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1308:22:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1781,"nodeType":"ExpressionStatement","src":"1308:22:10"},{"assignments":[1783],"declarations":[{"constant":false,"id":1783,"mutability":"mutable","name":"_tokenURI","nameLocation":"1355:9:10","nodeType":"VariableDeclaration","scope":1825,"src":"1341:23:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1782,"name":"string","nodeType":"ElementaryTypeName","src":"1341:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1787,"initialValue":{"baseExpression":{"id":1784,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1748,"src":"1367:10:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":1786,"indexExpression":{"id":1785,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1772,"src":"1378:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1367:19:10","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"VariableDeclarationStatement","src":"1341:45:10"},{"assignments":[1789],"declarations":[{"constant":false,"id":1789,"mutability":"mutable","name":"base","nameLocation":"1410:4:10","nodeType":"VariableDeclaration","scope":1825,"src":"1396:18:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1788,"name":"string","nodeType":"ElementaryTypeName","src":"1396:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1792,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1790,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":752,"src":"1417:8:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":1791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1417:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"1396:31:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1795,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1789,"src":"1506:4:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1794,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1500:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1793,"name":"bytes","nodeType":"ElementaryTypeName","src":"1500:5:10","typeDescriptions":{}}},"id":1796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1500:11:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1512:6:10","memberName":"length","nodeType":"MemberAccess","src":"1500:18:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1522:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1500:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1803,"nodeType":"IfStatement","src":"1496:70:10","trueBody":{"id":1802,"nodeType":"Block","src":"1525:41:10","statements":[{"expression":{"id":1800,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1783,"src":"1546:9:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1777,"id":1801,"nodeType":"Return","src":"1539:16:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1806,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1783,"src":"1671:9:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1805,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1665:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1804,"name":"bytes","nodeType":"ElementaryTypeName","src":"1665:5:10","typeDescriptions":{}}},"id":1807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1665:16:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1682:6:10","memberName":"length","nodeType":"MemberAccess","src":"1665:23:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1691:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1665:27:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1819,"nodeType":"IfStatement","src":"1661:95:10","trueBody":{"id":1818,"nodeType":"Block","src":"1694:62:10","statements":[{"expression":{"arguments":[{"id":1814,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1789,"src":"1729:4:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1815,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1783,"src":"1735:9:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1812,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1715:6:10","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1811,"name":"string","nodeType":"ElementaryTypeName","src":"1715:6:10","typeDescriptions":{}}},"id":1813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1722:6:10","memberName":"concat","nodeType":"MemberAccess","src":"1715:13:10","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":1816,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1715:30:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1777,"id":1817,"nodeType":"Return","src":"1708:37:10"}]}},{"expression":{"arguments":[{"id":1822,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1772,"src":"1788:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1820,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967271,"src":"1773:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721URIStorage_$1846_$","typeString":"type(contract super ERC721URIStorage)"}},"id":1821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1779:8:10","memberName":"tokenURI","nodeType":"MemberAccess","referencedDeclaration":743,"src":"1773:14:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) view returns (string memory)"}},"id":1823,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1773:23:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1777,"id":1824,"nodeType":"Return","src":"1766:30:10"}]},"documentation":{"id":1770,"nodeType":"StructuredDocumentation","src":"1150:55:10","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":1826,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"1219:8:10","nodeType":"FunctionDefinition","overrides":{"id":1774,"nodeType":"OverrideSpecifier","overrides":[],"src":"1265:8:10"},"parameters":{"id":1773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1772,"mutability":"mutable","name":"tokenId","nameLocation":"1236:7:10","nodeType":"VariableDeclaration","scope":1826,"src":"1228:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1771,"name":"uint256","nodeType":"ElementaryTypeName","src":"1228:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1227:17:10"},"returnParameters":{"id":1777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1776,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1826,"src":"1283:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1775,"name":"string","nodeType":"ElementaryTypeName","src":"1283:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1282:15:10"},"scope":1846,"src":"1210:593:10","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1844,"nodeType":"Block","src":"2003:86:10","statements":[{"expression":{"id":1838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1834,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1748,"src":"2013:10:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":1836,"indexExpression":{"id":1835,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"2024:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2013:19:10","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1837,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1831,"src":"2035:9:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2013:31:10","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1839,"nodeType":"ExpressionStatement","src":"2013:31:10"},{"eventCall":{"arguments":[{"id":1841,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"2074:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1840,"name":"MetadataUpdate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":398,"src":"2059:14:10","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":1842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2059:23:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1843,"nodeType":"EmitStatement","src":"2054:28:10"}]},"documentation":{"id":1827,"nodeType":"StructuredDocumentation","src":"1809:108:10","text":" @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n Emits {MetadataUpdate}."},"id":1845,"implemented":true,"kind":"function","modifiers":[],"name":"_setTokenURI","nameLocation":"1931:12:10","nodeType":"FunctionDefinition","parameters":{"id":1832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1829,"mutability":"mutable","name":"tokenId","nameLocation":"1952:7:10","nodeType":"VariableDeclaration","scope":1845,"src":"1944:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1828,"name":"uint256","nodeType":"ElementaryTypeName","src":"1944:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1831,"mutability":"mutable","name":"_tokenURI","nameLocation":"1975:9:10","nodeType":"VariableDeclaration","scope":1845,"src":"1961:23:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1830,"name":"string","nodeType":"ElementaryTypeName","src":"1961:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1943:42:10"},"returnParameters":{"id":1833,"nodeType":"ParameterList","parameters":[],"src":"2003:0:10"},"scope":1846,"src":"1922:167:10","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1847,"src":"431:1660:10","usedErrors":[458,463,472,477,482,489,494,499],"usedEvents":[398,405,1572,1581,1590]}],"src":"128:1964:10"},"id":10},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","exportedSymbols":{"IERC721":[1673],"IERC721Metadata":[1874]},"id":1875,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1848,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"127:24:11"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":1850,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1875,"sourceUnit":1674,"src":"153:39:11","symbolAliases":[{"foreign":{"id":1849,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1673,"src":"161:7:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1852,"name":"IERC721","nameLocations":["357:7:11"],"nodeType":"IdentifierPath","referencedDeclaration":1673,"src":"357:7:11"},"id":1853,"nodeType":"InheritanceSpecifier","src":"357:7:11"}],"canonicalName":"IERC721Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":1851,"nodeType":"StructuredDocumentation","src":"194:133:11","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":1874,"linearizedBaseContracts":[1874,1673,2195],"name":"IERC721Metadata","nameLocation":"338:15:11","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1854,"nodeType":"StructuredDocumentation","src":"371:58:11","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":1859,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"443:4:11","nodeType":"FunctionDefinition","parameters":{"id":1855,"nodeType":"ParameterList","parameters":[],"src":"447:2:11"},"returnParameters":{"id":1858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1857,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1859,"src":"473:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1856,"name":"string","nodeType":"ElementaryTypeName","src":"473:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"472:15:11"},"scope":1874,"src":"434:54:11","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1860,"nodeType":"StructuredDocumentation","src":"494:60:11","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":1865,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"568:6:11","nodeType":"FunctionDefinition","parameters":{"id":1861,"nodeType":"ParameterList","parameters":[],"src":"574:2:11"},"returnParameters":{"id":1864,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1863,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1865,"src":"600:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1862,"name":"string","nodeType":"ElementaryTypeName","src":"600:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"599:15:11"},"scope":1874,"src":"559:56:11","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1866,"nodeType":"StructuredDocumentation","src":"621:90:11","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":1873,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"725:8:11","nodeType":"FunctionDefinition","parameters":{"id":1869,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1868,"mutability":"mutable","name":"tokenId","nameLocation":"742:7:11","nodeType":"VariableDeclaration","scope":1873,"src":"734:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1867,"name":"uint256","nodeType":"ElementaryTypeName","src":"734:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"733:17:11"},"returnParameters":{"id":1872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1871,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1873,"src":"774:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1870,"name":"string","nodeType":"ElementaryTypeName","src":"774:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"773:15:11"},"scope":1874,"src":"716:73:11","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1875,"src":"328:463:11","usedErrors":[],"usedEvents":[1572,1581,1590]}],"src":"127:665:11"},"id":11},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1904]},"id":1905,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1876,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:12"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1877,"nodeType":"StructuredDocumentation","src":"127:496:12","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1904,"linearizedBaseContracts":[1904],"name":"Context","nameLocation":"642:7:12","nodeType":"ContractDefinition","nodes":[{"body":{"id":1885,"nodeType":"Block","src":"718:34:12","statements":[{"expression":{"expression":{"id":1882,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"735:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:12","memberName":"sender","nodeType":"MemberAccess","src":"735:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1881,"id":1884,"nodeType":"Return","src":"728:17:12"}]},"id":1886,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:12","nodeType":"FunctionDefinition","parameters":{"id":1878,"nodeType":"ParameterList","parameters":[],"src":"675:2:12"},"returnParameters":{"id":1881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1880,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1886,"src":"709:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1879,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:12"},"scope":1904,"src":"656:96:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1894,"nodeType":"Block","src":"825:32:12","statements":[{"expression":{"expression":{"id":1891,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"842:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:12","memberName":"data","nodeType":"MemberAccess","src":"842:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1890,"id":1893,"nodeType":"Return","src":"835:15:12"}]},"id":1895,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:12","nodeType":"FunctionDefinition","parameters":{"id":1887,"nodeType":"ParameterList","parameters":[],"src":"775:2:12"},"returnParameters":{"id":1890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1889,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1895,"src":"809:14:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1888,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:12"},"scope":1904,"src":"758:99:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1902,"nodeType":"Block","src":"935:25:12","statements":[{"expression":{"hexValue":"30","id":1900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":1899,"id":1901,"nodeType":"Return","src":"945:8:12"}]},"id":1903,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:12","nodeType":"FunctionDefinition","parameters":{"id":1896,"nodeType":"ParameterList","parameters":[],"src":"892:2:12"},"returnParameters":{"id":1899,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1898,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1903,"src":"926:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1897,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:12"},"scope":1904,"src":"863:97:12","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1905,"src":"624:338:12","usedErrors":[],"usedEvents":[]}],"src":"101:862:12"},"id":12},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[3249],"SignedMath":[3354],"Strings":[2159]},"id":2160,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1906,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:13"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":1908,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2160,"sourceUnit":3250,"src":"127:37:13","symbolAliases":[{"foreign":{"id":1907,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3249,"src":"135:4:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":1910,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2160,"sourceUnit":3355,"src":"165:49:13","symbolAliases":[{"foreign":{"id":1909,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3354,"src":"173:10:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":1911,"nodeType":"StructuredDocumentation","src":"216:34:13","text":" @dev String operations."},"fullyImplemented":true,"id":2159,"linearizedBaseContracts":[2159],"name":"Strings","nameLocation":"259:7:13","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1914,"mutability":"constant","name":"HEX_DIGITS","nameLocation":"298:10:13","nodeType":"VariableDeclaration","scope":2159,"src":"273:56:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1912,"name":"bytes16","nodeType":"ElementaryTypeName","src":"273:7:13","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"311:18:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1917,"mutability":"constant","name":"ADDRESS_LENGTH","nameLocation":"358:14:13","nodeType":"VariableDeclaration","scope":2159,"src":"335:42:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1915,"name":"uint8","nodeType":"ElementaryTypeName","src":"335:5:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"375:2:13","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"documentation":{"id":1918,"nodeType":"StructuredDocumentation","src":"384:81:13","text":" @dev The `value` string doesn't fit in the specified `length`."},"errorSelector":"e22e27eb","id":1924,"name":"StringsInsufficientHexLength","nameLocation":"476:28:13","nodeType":"ErrorDefinition","parameters":{"id":1923,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1920,"mutability":"mutable","name":"value","nameLocation":"513:5:13","nodeType":"VariableDeclaration","scope":1924,"src":"505:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1919,"name":"uint256","nodeType":"ElementaryTypeName","src":"505:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1922,"mutability":"mutable","name":"length","nameLocation":"528:6:13","nodeType":"VariableDeclaration","scope":1924,"src":"520:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1921,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"504:31:13"},"src":"470:66:13"},{"body":{"id":1971,"nodeType":"Block","src":"708:627:13","statements":[{"id":1970,"nodeType":"UncheckedBlock","src":"718:611:13","statements":[{"assignments":[1933],"declarations":[{"constant":false,"id":1933,"mutability":"mutable","name":"length","nameLocation":"750:6:13","nodeType":"VariableDeclaration","scope":1970,"src":"742:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1932,"name":"uint256","nodeType":"ElementaryTypeName","src":"742:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1940,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1936,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1927,"src":"770:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1934,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3249,"src":"759:4:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3249_$","typeString":"type(library Math)"}},"id":1935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"764:5:13","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":3069,"src":"759:10:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"759:17:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1938,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"779:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"759:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"742:38:13"},{"assignments":[1942],"declarations":[{"constant":false,"id":1942,"mutability":"mutable","name":"buffer","nameLocation":"808:6:13","nodeType":"VariableDeclaration","scope":1970,"src":"794:20:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1941,"name":"string","nodeType":"ElementaryTypeName","src":"794:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1947,"initialValue":{"arguments":[{"id":1945,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"828:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1944,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"817:10:13","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1943,"name":"string","nodeType":"ElementaryTypeName","src":"821:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1946,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"817:18:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"794:41:13"},{"assignments":[1949],"declarations":[{"constant":false,"id":1949,"mutability":"mutable","name":"ptr","nameLocation":"857:3:13","nodeType":"VariableDeclaration","scope":1970,"src":"849:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1948,"name":"uint256","nodeType":"ElementaryTypeName","src":"849:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1950,"nodeType":"VariableDeclarationStatement","src":"849:11:13"},{"AST":{"nodeType":"YulBlock","src":"930:67:13","statements":[{"nodeType":"YulAssignment","src":"948:35:13","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"959:6:13"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"971:2:13","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"975:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"967:3:13"},"nodeType":"YulFunctionCall","src":"967:15:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"955:3:13"},"nodeType":"YulFunctionCall","src":"955:28:13"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"948:3:13"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1942,"isOffset":false,"isSlot":false,"src":"959:6:13","valueSize":1},{"declaration":1933,"isOffset":false,"isSlot":false,"src":"975:6:13","valueSize":1},{"declaration":1949,"isOffset":false,"isSlot":false,"src":"948:3:13","valueSize":1}],"id":1951,"nodeType":"InlineAssembly","src":"921:76:13"},{"body":{"id":1966,"nodeType":"Block","src":"1023:269:13","statements":[{"expression":{"id":1954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"1041:5:13","subExpression":{"id":1953,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"1041:3:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1955,"nodeType":"ExpressionStatement","src":"1041:5:13"},{"AST":{"nodeType":"YulBlock","src":"1124:86:13","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1154:3:13"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"1175:2:13","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"1164:3:13"},"nodeType":"YulFunctionCall","src":"1164:14:13"},{"name":"HEX_DIGITS","nodeType":"YulIdentifier","src":"1180:10:13"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"1159:4:13"},"nodeType":"YulFunctionCall","src":"1159:32:13"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"1146:7:13"},"nodeType":"YulFunctionCall","src":"1146:46:13"},"nodeType":"YulExpressionStatement","src":"1146:46:13"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1914,"isOffset":false,"isSlot":false,"src":"1180:10:13","valueSize":1},{"declaration":1949,"isOffset":false,"isSlot":false,"src":"1154:3:13","valueSize":1},{"declaration":1927,"isOffset":false,"isSlot":false,"src":"1168:5:13","valueSize":1}],"id":1956,"nodeType":"InlineAssembly","src":"1115:95:13"},{"expression":{"id":1959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1957,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1927,"src":"1227:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1236:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1227:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1960,"nodeType":"ExpressionStatement","src":"1227:11:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1961,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1927,"src":"1260:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1269:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1260:10:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1965,"nodeType":"IfStatement","src":"1256:21:13","trueBody":{"id":1964,"nodeType":"Break","src":"1272:5:13"}}]},"condition":{"hexValue":"74727565","id":1952,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1017:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1967,"nodeType":"WhileStatement","src":"1010:282:13"},{"expression":{"id":1968,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1942,"src":"1312:6:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1931,"id":1969,"nodeType":"Return","src":"1305:13:13"}]}]},"documentation":{"id":1925,"nodeType":"StructuredDocumentation","src":"542:90:13","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1972,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"646:8:13","nodeType":"FunctionDefinition","parameters":{"id":1928,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1927,"mutability":"mutable","name":"value","nameLocation":"663:5:13","nodeType":"VariableDeclaration","scope":1972,"src":"655:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1926,"name":"uint256","nodeType":"ElementaryTypeName","src":"655:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"654:15:13"},"returnParameters":{"id":1931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1930,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1972,"src":"693:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1929,"name":"string","nodeType":"ElementaryTypeName","src":"693:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"692:15:13"},"scope":2159,"src":"637:698:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1997,"nodeType":"Block","src":"1511:92:13","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1983,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1975,"src":"1542:5:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1550:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1542:9:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":1987,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1560:2:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":1988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1542:20:13","trueExpression":{"hexValue":"2d","id":1986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1554:3:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":1992,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1975,"src":"1588:5:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":1990,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3354,"src":"1573:10:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$3354_$","typeString":"type(library SignedMath)"}},"id":1991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1584:3:13","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":3353,"src":"1573:14:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":1993,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1573:21:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1989,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1972,"src":"1564:8:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1564:31:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1981,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1528:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1980,"name":"string","nodeType":"ElementaryTypeName","src":"1528:6:13","typeDescriptions":{}}},"id":1982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1535:6:13","memberName":"concat","nodeType":"MemberAccess","src":"1528:13:13","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":1995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1528:68:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1979,"id":1996,"nodeType":"Return","src":"1521:75:13"}]},"documentation":{"id":1973,"nodeType":"StructuredDocumentation","src":"1341:89:13","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":1998,"implemented":true,"kind":"function","modifiers":[],"name":"toStringSigned","nameLocation":"1444:14:13","nodeType":"FunctionDefinition","parameters":{"id":1976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1975,"mutability":"mutable","name":"value","nameLocation":"1466:5:13","nodeType":"VariableDeclaration","scope":1998,"src":"1459:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1974,"name":"int256","nodeType":"ElementaryTypeName","src":"1459:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1458:14:13"},"returnParameters":{"id":1979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1978,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1998,"src":"1496:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1977,"name":"string","nodeType":"ElementaryTypeName","src":"1496:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1495:15:13"},"scope":2159,"src":"1435:168:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2017,"nodeType":"Block","src":"1782:100:13","statements":[{"id":2016,"nodeType":"UncheckedBlock","src":"1792:84:13","statements":[{"expression":{"arguments":[{"id":2007,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"1835:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2010,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"1854:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2008,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3249,"src":"1842:4:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3249_$","typeString":"type(library Math)"}},"id":2009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1847:6:13","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":3191,"src":"1842:11:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2011,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1842:18:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1863:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1842:22:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2006,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2018,2101,2121],"referencedDeclaration":2101,"src":"1823:11:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2014,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1823:42:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2005,"id":2015,"nodeType":"Return","src":"1816:49:13"}]}]},"documentation":{"id":1999,"nodeType":"StructuredDocumentation","src":"1609:94:13","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":2018,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1717:11:13","nodeType":"FunctionDefinition","parameters":{"id":2002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2001,"mutability":"mutable","name":"value","nameLocation":"1737:5:13","nodeType":"VariableDeclaration","scope":2018,"src":"1729:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2000,"name":"uint256","nodeType":"ElementaryTypeName","src":"1729:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1728:15:13"},"returnParameters":{"id":2005,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2004,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2018,"src":"1767:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2003,"name":"string","nodeType":"ElementaryTypeName","src":"1767:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1766:15:13"},"scope":2159,"src":"1708:174:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2100,"nodeType":"Block","src":"2095:435:13","statements":[{"assignments":[2029],"declarations":[{"constant":false,"id":2029,"mutability":"mutable","name":"localValue","nameLocation":"2113:10:13","nodeType":"VariableDeclaration","scope":2100,"src":"2105:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2028,"name":"uint256","nodeType":"ElementaryTypeName","src":"2105:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2031,"initialValue":{"id":2030,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2021,"src":"2126:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2105:26:13"},{"assignments":[2033],"declarations":[{"constant":false,"id":2033,"mutability":"mutable","name":"buffer","nameLocation":"2154:6:13","nodeType":"VariableDeclaration","scope":2100,"src":"2141:19:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2032,"name":"bytes","nodeType":"ElementaryTypeName","src":"2141:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2042,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2036,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2173:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2037,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2023,"src":"2177:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2173:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":2039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2186:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2173:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2035,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2163:9:13","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":2034,"name":"bytes","nodeType":"ElementaryTypeName","src":"2167:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":2041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2163:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2141:47:13"},{"expression":{"id":2047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2043,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2033,"src":"2198:6:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2045,"indexExpression":{"hexValue":"30","id":2044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2205:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2198:9:13","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2046,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2210:3:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2198:15:13","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2048,"nodeType":"ExpressionStatement","src":"2198:15:13"},{"expression":{"id":2053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2049,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2033,"src":"2223:6:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2051,"indexExpression":{"hexValue":"31","id":2050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2230:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2223:9:13","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":2052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2235:3:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2223:15:13","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2054,"nodeType":"ExpressionStatement","src":"2223:15:13"},{"body":{"id":2083,"nodeType":"Block","src":"2293:95:13","statements":[{"expression":{"id":2077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2069,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2033,"src":"2307:6:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2071,"indexExpression":{"id":2070,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2056,"src":"2314:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2307:9:13","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2072,"name":"HEX_DIGITS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1914,"src":"2319:10:13","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":2076,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2073,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2029,"src":"2330:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":2074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2343:3:13","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2330:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2319:28:13","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2307:40:13","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2078,"nodeType":"ExpressionStatement","src":"2307:40:13"},{"expression":{"id":2081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2079,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2029,"src":"2361:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2080,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2376:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2361:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2082,"nodeType":"ExpressionStatement","src":"2361:16:13"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2063,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2056,"src":"2281:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":2064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2285:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2281:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2084,"initializationExpression":{"assignments":[2056],"declarations":[{"constant":false,"id":2056,"mutability":"mutable","name":"i","nameLocation":"2261:1:13","nodeType":"VariableDeclaration","scope":2084,"src":"2253:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2055,"name":"uint256","nodeType":"ElementaryTypeName","src":"2253:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2062,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2265:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2058,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2023,"src":"2269:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2265:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2278:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2265:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2253:26:13"},"loopExpression":{"expression":{"id":2067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2288:3:13","subExpression":{"id":2066,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2056,"src":"2290:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2068,"nodeType":"ExpressionStatement","src":"2288:3:13"},"nodeType":"ForStatement","src":"2248:140:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2085,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2029,"src":"2401:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2415:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2401:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2094,"nodeType":"IfStatement","src":"2397:96:13","trueBody":{"id":2093,"nodeType":"Block","src":"2418:75:13","statements":[{"errorCall":{"arguments":[{"id":2089,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2021,"src":"2468:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2090,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2023,"src":"2475:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2088,"name":"StringsInsufficientHexLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"2439:28:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":2091,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2439:43:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2092,"nodeType":"RevertStatement","src":"2432:50:13"}]}},{"expression":{"arguments":[{"id":2097,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2033,"src":"2516:6:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2096,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2095,"name":"string","nodeType":"ElementaryTypeName","src":"2509:6:13","typeDescriptions":{}}},"id":2098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:14:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2027,"id":2099,"nodeType":"Return","src":"2502:21:13"}]},"documentation":{"id":2019,"nodeType":"StructuredDocumentation","src":"1888:112:13","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":2101,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2014:11:13","nodeType":"FunctionDefinition","parameters":{"id":2024,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2021,"mutability":"mutable","name":"value","nameLocation":"2034:5:13","nodeType":"VariableDeclaration","scope":2101,"src":"2026:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2020,"name":"uint256","nodeType":"ElementaryTypeName","src":"2026:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2023,"mutability":"mutable","name":"length","nameLocation":"2049:6:13","nodeType":"VariableDeclaration","scope":2101,"src":"2041:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2022,"name":"uint256","nodeType":"ElementaryTypeName","src":"2041:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2025:31:13"},"returnParameters":{"id":2027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2026,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2101,"src":"2080:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2025,"name":"string","nodeType":"ElementaryTypeName","src":"2080:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2079:15:13"},"scope":2159,"src":"2005:525:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2120,"nodeType":"Block","src":"2762:75:13","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":2114,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2104,"src":"2807:4:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2113,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2799:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2112,"name":"uint160","nodeType":"ElementaryTypeName","src":"2799:7:13","typeDescriptions":{}}},"id":2115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2799:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2111,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2791:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2110,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:13","typeDescriptions":{}}},"id":2116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2791:22:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2117,"name":"ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1917,"src":"2815:14:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2109,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2018,2101,2121],"referencedDeclaration":2101,"src":"2779:11:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2118,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2779:51:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2108,"id":2119,"nodeType":"Return","src":"2772:58:13"}]},"documentation":{"id":2102,"nodeType":"StructuredDocumentation","src":"2536:148:13","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n representation."},"id":2121,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2698:11:13","nodeType":"FunctionDefinition","parameters":{"id":2105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2104,"mutability":"mutable","name":"addr","nameLocation":"2718:4:13","nodeType":"VariableDeclaration","scope":2121,"src":"2710:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2103,"name":"address","nodeType":"ElementaryTypeName","src":"2710:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2709:14:13"},"returnParameters":{"id":2108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2107,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2121,"src":"2747:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2106,"name":"string","nodeType":"ElementaryTypeName","src":"2747:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2746:15:13"},"scope":2159,"src":"2689:148:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2157,"nodeType":"Block","src":"2992:104:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2133,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"3015:1:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2132,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3009:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2131,"name":"bytes","nodeType":"ElementaryTypeName","src":"3009:5:13","typeDescriptions":{}}},"id":2134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3009:8:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3018:6:13","memberName":"length","nodeType":"MemberAccess","src":"3009:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2138,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"3034:1:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2137,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3028:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2136,"name":"bytes","nodeType":"ElementaryTypeName","src":"3028:5:13","typeDescriptions":{}}},"id":2139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3028:8:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3037:6:13","memberName":"length","nodeType":"MemberAccess","src":"3028:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3009:34:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":2145,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"3063:1:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2144,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3057:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2143,"name":"bytes","nodeType":"ElementaryTypeName","src":"3057:5:13","typeDescriptions":{}}},"id":2146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3057:8:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2142,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"3047:9:13","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3047:19:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":2151,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"3086:1:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2150,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3080:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2149,"name":"bytes","nodeType":"ElementaryTypeName","src":"3080:5:13","typeDescriptions":{}}},"id":2152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3080:8:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2148,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"3070:9:13","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3070:19:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3047:42:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3009:80:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2130,"id":2156,"nodeType":"Return","src":"3002:87:13"}]},"documentation":{"id":2122,"nodeType":"StructuredDocumentation","src":"2843:66:13","text":" @dev Returns true if the two strings are equal."},"id":2158,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2923:5:13","nodeType":"FunctionDefinition","parameters":{"id":2127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2124,"mutability":"mutable","name":"a","nameLocation":"2943:1:13","nodeType":"VariableDeclaration","scope":2158,"src":"2929:15:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2123,"name":"string","nodeType":"ElementaryTypeName","src":"2929:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2126,"mutability":"mutable","name":"b","nameLocation":"2960:1:13","nodeType":"VariableDeclaration","scope":2158,"src":"2946:15:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2125,"name":"string","nodeType":"ElementaryTypeName","src":"2946:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2928:34:13"},"returnParameters":{"id":2130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2129,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2158,"src":"2986:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2128,"name":"bool","nodeType":"ElementaryTypeName","src":"2986:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2985:6:13"},"scope":2159,"src":"2914:182:13","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2160,"src":"251:2847:13","usedErrors":[1924],"usedEvents":[]}],"src":"101:2998:13"},"id":13},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[2183],"IERC165":[2195]},"id":2184,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2161,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"114:24:14"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":2163,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2184,"sourceUnit":2196,"src":"140:38:14","symbolAliases":[{"foreign":{"id":2162,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2195,"src":"148:7:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2165,"name":"IERC165","nameLocations":["687:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":2195,"src":"687:7:14"},"id":2166,"nodeType":"InheritanceSpecifier","src":"687:7:14"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":2164,"nodeType":"StructuredDocumentation","src":"180:478:14","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```"},"fullyImplemented":true,"id":2183,"linearizedBaseContracts":[2183,2195],"name":"ERC165","nameLocation":"677:6:14","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[2194],"body":{"id":2181,"nodeType":"Block","src":"844:64:14","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2174,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2169,"src":"861:11:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2176,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2195,"src":"881:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$2195_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$2195_$","typeString":"type(contract IERC165)"}],"id":2175,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"876:4:14","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"876:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$2195","typeString":"type(contract IERC165)"}},"id":2178,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"890:11:14","memberName":"interfaceId","nodeType":"MemberAccess","src":"876:25:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"861:40:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2173,"id":2180,"nodeType":"Return","src":"854:47:14"}]},"documentation":{"id":2167,"nodeType":"StructuredDocumentation","src":"701:56:14","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":2182,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"771:17:14","nodeType":"FunctionDefinition","parameters":{"id":2170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2169,"mutability":"mutable","name":"interfaceId","nameLocation":"796:11:14","nodeType":"VariableDeclaration","scope":2182,"src":"789:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2168,"name":"bytes4","nodeType":"ElementaryTypeName","src":"789:6:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"788:20:14"},"returnParameters":{"id":2173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2172,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2182,"src":"838:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2171,"name":"bool","nodeType":"ElementaryTypeName","src":"838:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"837:6:14"},"scope":2183,"src":"762:146:14","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":2184,"src":"659:251:14","usedErrors":[],"usedEvents":[]}],"src":"114:797:14"},"id":14},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[2195]},"id":2196,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2185,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:15"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":2186,"nodeType":"StructuredDocumentation","src":"141:279:15","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":2195,"linearizedBaseContracts":[2195],"name":"IERC165","nameLocation":"431:7:15","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2187,"nodeType":"StructuredDocumentation","src":"445:340:15","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":2194,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"799:17:15","nodeType":"FunctionDefinition","parameters":{"id":2190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2189,"mutability":"mutable","name":"interfaceId","nameLocation":"824:11:15","nodeType":"VariableDeclaration","scope":2194,"src":"817:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2188,"name":"bytes4","nodeType":"ElementaryTypeName","src":"817:6:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"816:20:15"},"returnParameters":{"id":2193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2192,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2194,"src":"860:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2191,"name":"bool","nodeType":"ElementaryTypeName","src":"860:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"859:6:15"},"scope":2195,"src":"790:76:15","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2196,"src":"421:447:15","usedErrors":[],"usedEvents":[]}],"src":"115:754:15"},"id":15},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[3249]},"id":3250,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2197,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"103:24:16"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":2198,"nodeType":"StructuredDocumentation","src":"129:73:16","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":3249,"linearizedBaseContracts":[3249],"name":"Math","nameLocation":"211:4:16","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2199,"nodeType":"StructuredDocumentation","src":"222:50:16","text":" @dev Muldiv operation overflow."},"errorSelector":"227bc153","id":2201,"name":"MathOverflowedMulDiv","nameLocation":"283:20:16","nodeType":"ErrorDefinition","parameters":{"id":2200,"nodeType":"ParameterList","parameters":[],"src":"303:2:16"},"src":"277:29:16"},{"canonicalName":"Math.Rounding","id":2206,"members":[{"id":2202,"name":"Floor","nameLocation":"336:5:16","nodeType":"EnumValue","src":"336:5:16"},{"id":2203,"name":"Ceil","nameLocation":"379:4:16","nodeType":"EnumValue","src":"379:4:16"},{"id":2204,"name":"Trunc","nameLocation":"421:5:16","nodeType":"EnumValue","src":"421:5:16"},{"id":2205,"name":"Expand","nameLocation":"451:6:16","nodeType":"EnumValue","src":"451:6:16"}],"name":"Rounding","nameLocation":"317:8:16","nodeType":"EnumDefinition","src":"312:169:16"},{"body":{"id":2237,"nodeType":"Block","src":"661:140:16","statements":[{"id":2236,"nodeType":"UncheckedBlock","src":"671:124:16","statements":[{"assignments":[2219],"declarations":[{"constant":false,"id":2219,"mutability":"mutable","name":"c","nameLocation":"703:1:16","nodeType":"VariableDeclaration","scope":2236,"src":"695:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2218,"name":"uint256","nodeType":"ElementaryTypeName","src":"695:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2223,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2220,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2209,"src":"707:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2221,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"711:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"707:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"695:17:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2224,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2219,"src":"730:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2225,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2209,"src":"734:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"730:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2231,"nodeType":"IfStatement","src":"726:28:16","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"745:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"752:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2229,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"744:10:16","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2217,"id":2230,"nodeType":"Return","src":"737:17:16"}},{"expression":{"components":[{"hexValue":"74727565","id":2232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"776:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":2233,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2219,"src":"782:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2234,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"775:9:16","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2217,"id":2235,"nodeType":"Return","src":"768:16:16"}]}]},"documentation":{"id":2207,"nodeType":"StructuredDocumentation","src":"487:93:16","text":" @dev Returns the addition of two unsigned integers, with an overflow flag."},"id":2238,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"594:6:16","nodeType":"FunctionDefinition","parameters":{"id":2212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2209,"mutability":"mutable","name":"a","nameLocation":"609:1:16","nodeType":"VariableDeclaration","scope":2238,"src":"601:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2208,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2211,"mutability":"mutable","name":"b","nameLocation":"620:1:16","nodeType":"VariableDeclaration","scope":2238,"src":"612:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2210,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:16"},"returnParameters":{"id":2217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2214,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2238,"src":"646:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2213,"name":"bool","nodeType":"ElementaryTypeName","src":"646:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2216,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2238,"src":"652:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2215,"name":"uint256","nodeType":"ElementaryTypeName","src":"652:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:15:16"},"scope":3249,"src":"585:216:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2265,"nodeType":"Block","src":"984:113:16","statements":[{"id":2264,"nodeType":"UncheckedBlock","src":"994:97:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2250,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"1022:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2251,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2241,"src":"1026:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1022:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2257,"nodeType":"IfStatement","src":"1018:28:16","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1037:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2255,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1036:10:16","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2249,"id":2256,"nodeType":"Return","src":"1029:17:16"}},{"expression":{"components":[{"hexValue":"74727565","id":2258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1068:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2259,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2241,"src":"1074:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2260,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"1078:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1074:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2262,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1067:13:16","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2249,"id":2263,"nodeType":"Return","src":"1060:20:16"}]}]},"documentation":{"id":2239,"nodeType":"StructuredDocumentation","src":"807:96:16","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag."},"id":2266,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"917:6:16","nodeType":"FunctionDefinition","parameters":{"id":2244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2241,"mutability":"mutable","name":"a","nameLocation":"932:1:16","nodeType":"VariableDeclaration","scope":2266,"src":"924:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2240,"name":"uint256","nodeType":"ElementaryTypeName","src":"924:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2243,"mutability":"mutable","name":"b","nameLocation":"943:1:16","nodeType":"VariableDeclaration","scope":2266,"src":"935:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2242,"name":"uint256","nodeType":"ElementaryTypeName","src":"935:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"923:22:16"},"returnParameters":{"id":2249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2246,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2266,"src":"969:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2245,"name":"bool","nodeType":"ElementaryTypeName","src":"969:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2248,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2266,"src":"975:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2247,"name":"uint256","nodeType":"ElementaryTypeName","src":"975:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"968:15:16"},"scope":3249,"src":"908:189:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2307,"nodeType":"Block","src":"1283:417:16","statements":[{"id":2306,"nodeType":"UncheckedBlock","src":"1293:401:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2278,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2269,"src":"1551:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1556:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1551:6:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2285,"nodeType":"IfStatement","src":"1547:28:16","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":2281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1567:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":2282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1573:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2283,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1566:9:16","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2277,"id":2284,"nodeType":"Return","src":"1559:16:16"}},{"assignments":[2287],"declarations":[{"constant":false,"id":2287,"mutability":"mutable","name":"c","nameLocation":"1597:1:16","nodeType":"VariableDeclaration","scope":2306,"src":"1589:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2286,"name":"uint256","nodeType":"ElementaryTypeName","src":"1589:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2291,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2288,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2269,"src":"1601:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2289,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2271,"src":"1605:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1601:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1589:17:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2292,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2287,"src":"1624:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2293,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2269,"src":"1628:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2295,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2271,"src":"1633:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2301,"nodeType":"IfStatement","src":"1620:33:16","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1644:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1651:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2299,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1643:10:16","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2277,"id":2300,"nodeType":"Return","src":"1636:17:16"}},{"expression":{"components":[{"hexValue":"74727565","id":2302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1675:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":2303,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2287,"src":"1681:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2304,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1674:9:16","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2277,"id":2305,"nodeType":"Return","src":"1667:16:16"}]}]},"documentation":{"id":2267,"nodeType":"StructuredDocumentation","src":"1103:99:16","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag."},"id":2308,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1216:6:16","nodeType":"FunctionDefinition","parameters":{"id":2272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2269,"mutability":"mutable","name":"a","nameLocation":"1231:1:16","nodeType":"VariableDeclaration","scope":2308,"src":"1223:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2268,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2271,"mutability":"mutable","name":"b","nameLocation":"1242:1:16","nodeType":"VariableDeclaration","scope":2308,"src":"1234:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2270,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1222:22:16"},"returnParameters":{"id":2277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2274,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2308,"src":"1268:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2273,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2276,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2308,"src":"1274:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2275,"name":"uint256","nodeType":"ElementaryTypeName","src":"1274:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1267:15:16"},"scope":3249,"src":"1207:493:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2335,"nodeType":"Block","src":"1887:114:16","statements":[{"id":2334,"nodeType":"UncheckedBlock","src":"1897:98:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2320,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2313,"src":"1925:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1930:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1925:6:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2327,"nodeType":"IfStatement","src":"1921:29:16","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1941:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1948:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2325,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1940:10:16","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2319,"id":2326,"nodeType":"Return","src":"1933:17:16"}},{"expression":{"components":[{"hexValue":"74727565","id":2328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1972:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2329,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"1978:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2330,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2313,"src":"1982:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1978:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2332,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1971:13:16","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2319,"id":2333,"nodeType":"Return","src":"1964:20:16"}]}]},"documentation":{"id":2309,"nodeType":"StructuredDocumentation","src":"1706:100:16","text":" @dev Returns the division of two unsigned integers, with a division by zero flag."},"id":2336,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1820:6:16","nodeType":"FunctionDefinition","parameters":{"id":2314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2311,"mutability":"mutable","name":"a","nameLocation":"1835:1:16","nodeType":"VariableDeclaration","scope":2336,"src":"1827:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2310,"name":"uint256","nodeType":"ElementaryTypeName","src":"1827:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2313,"mutability":"mutable","name":"b","nameLocation":"1846:1:16","nodeType":"VariableDeclaration","scope":2336,"src":"1838:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2312,"name":"uint256","nodeType":"ElementaryTypeName","src":"1838:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1826:22:16"},"returnParameters":{"id":2319,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2316,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2336,"src":"1872:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2315,"name":"bool","nodeType":"ElementaryTypeName","src":"1872:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2318,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2336,"src":"1878:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2317,"name":"uint256","nodeType":"ElementaryTypeName","src":"1878:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1871:15:16"},"scope":3249,"src":"1811:190:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2363,"nodeType":"Block","src":"2198:114:16","statements":[{"id":2362,"nodeType":"UncheckedBlock","src":"2208:98:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2348,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2341,"src":"2236:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2241:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:6:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2355,"nodeType":"IfStatement","src":"2232:29:16","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2252:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2259:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2353,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2251:10:16","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2347,"id":2354,"nodeType":"Return","src":"2244:17:16"}},{"expression":{"components":[{"hexValue":"74727565","id":2356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2283:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2357,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2339,"src":"2289:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":2358,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2341,"src":"2293:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2289:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2360,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2282:13:16","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2347,"id":2361,"nodeType":"Return","src":"2275:20:16"}]}]},"documentation":{"id":2337,"nodeType":"StructuredDocumentation","src":"2007:110:16","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."},"id":2364,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2131:6:16","nodeType":"FunctionDefinition","parameters":{"id":2342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2339,"mutability":"mutable","name":"a","nameLocation":"2146:1:16","nodeType":"VariableDeclaration","scope":2364,"src":"2138:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2338,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2341,"mutability":"mutable","name":"b","nameLocation":"2157:1:16","nodeType":"VariableDeclaration","scope":2364,"src":"2149:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2340,"name":"uint256","nodeType":"ElementaryTypeName","src":"2149:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2137:22:16"},"returnParameters":{"id":2347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2344,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2364,"src":"2183:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2343,"name":"bool","nodeType":"ElementaryTypeName","src":"2183:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2346,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2364,"src":"2189:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2345,"name":"uint256","nodeType":"ElementaryTypeName","src":"2189:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2182:15:16"},"scope":3249,"src":"2122:190:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2381,"nodeType":"Block","src":"2449:37:16","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2374,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2367,"src":"2466:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2375,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2369,"src":"2470:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2466:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2378,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2369,"src":"2478:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2466:13:16","trueExpression":{"id":2377,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2367,"src":"2474:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2373,"id":2380,"nodeType":"Return","src":"2459:20:16"}]},"documentation":{"id":2365,"nodeType":"StructuredDocumentation","src":"2318:59:16","text":" @dev Returns the largest of two numbers."},"id":2382,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"2391:3:16","nodeType":"FunctionDefinition","parameters":{"id":2370,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2367,"mutability":"mutable","name":"a","nameLocation":"2403:1:16","nodeType":"VariableDeclaration","scope":2382,"src":"2395:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2366,"name":"uint256","nodeType":"ElementaryTypeName","src":"2395:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2369,"mutability":"mutable","name":"b","nameLocation":"2414:1:16","nodeType":"VariableDeclaration","scope":2382,"src":"2406:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2368,"name":"uint256","nodeType":"ElementaryTypeName","src":"2406:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2394:22:16"},"returnParameters":{"id":2373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2372,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2382,"src":"2440:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2371,"name":"uint256","nodeType":"ElementaryTypeName","src":"2440:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2439:9:16"},"scope":3249,"src":"2382:104:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2399,"nodeType":"Block","src":"2624:37:16","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2392,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2385,"src":"2641:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2393,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2387,"src":"2645:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2641:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2396,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2387,"src":"2653:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2641:13:16","trueExpression":{"id":2395,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2385,"src":"2649:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2391,"id":2398,"nodeType":"Return","src":"2634:20:16"}]},"documentation":{"id":2383,"nodeType":"StructuredDocumentation","src":"2492:60:16","text":" @dev Returns the smallest of two numbers."},"id":2400,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"2566:3:16","nodeType":"FunctionDefinition","parameters":{"id":2388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2385,"mutability":"mutable","name":"a","nameLocation":"2578:1:16","nodeType":"VariableDeclaration","scope":2400,"src":"2570:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2384,"name":"uint256","nodeType":"ElementaryTypeName","src":"2570:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2387,"mutability":"mutable","name":"b","nameLocation":"2589:1:16","nodeType":"VariableDeclaration","scope":2400,"src":"2581:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2386,"name":"uint256","nodeType":"ElementaryTypeName","src":"2581:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2569:22:16"},"returnParameters":{"id":2391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2390,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2400,"src":"2615:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2389,"name":"uint256","nodeType":"ElementaryTypeName","src":"2615:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2614:9:16"},"scope":3249,"src":"2557:104:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2422,"nodeType":"Block","src":"2845:82:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2410,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2403,"src":"2900:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2411,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2405,"src":"2904:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2900:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2413,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2899:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2414,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2403,"src":"2910:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2415,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2405,"src":"2914:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2910:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2417,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2909:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":2418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2919:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2909:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2899:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2409,"id":2421,"nodeType":"Return","src":"2892:28:16"}]},"documentation":{"id":2401,"nodeType":"StructuredDocumentation","src":"2667:102:16","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":2423,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"2783:7:16","nodeType":"FunctionDefinition","parameters":{"id":2406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2403,"mutability":"mutable","name":"a","nameLocation":"2799:1:16","nodeType":"VariableDeclaration","scope":2423,"src":"2791:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2402,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2405,"mutability":"mutable","name":"b","nameLocation":"2810:1:16","nodeType":"VariableDeclaration","scope":2423,"src":"2802:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2404,"name":"uint256","nodeType":"ElementaryTypeName","src":"2802:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2790:22:16"},"returnParameters":{"id":2409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2408,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2423,"src":"2836:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2407,"name":"uint256","nodeType":"ElementaryTypeName","src":"2836:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2835:9:16"},"scope":3249,"src":"2774:153:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2456,"nodeType":"Block","src":"3219:260:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2433,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"3233:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3238:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3233:6:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2441,"nodeType":"IfStatement","src":"3229:127:16","trueBody":{"id":2440,"nodeType":"Block","src":"3241:115:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2436,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"3340:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2437,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"3344:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3340:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2432,"id":2439,"nodeType":"Return","src":"3333:12:16"}]}},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2442,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"3444:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3449:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3444:6:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2446,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"3458:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3462:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3458:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2449,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3457:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2450,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"3467:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3457:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3471:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3457:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3444:28:16","trueExpression":{"hexValue":"30","id":2445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3453:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2432,"id":2455,"nodeType":"Return","src":"3437:35:16"}]},"documentation":{"id":2424,"nodeType":"StructuredDocumentation","src":"2933:210:16","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."},"id":2457,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"3157:7:16","nodeType":"FunctionDefinition","parameters":{"id":2429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2426,"mutability":"mutable","name":"a","nameLocation":"3173:1:16","nodeType":"VariableDeclaration","scope":2457,"src":"3165:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2425,"name":"uint256","nodeType":"ElementaryTypeName","src":"3165:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2428,"mutability":"mutable","name":"b","nameLocation":"3184:1:16","nodeType":"VariableDeclaration","scope":2457,"src":"3176:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2427,"name":"uint256","nodeType":"ElementaryTypeName","src":"3176:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3164:22:16"},"returnParameters":{"id":2432,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2431,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2457,"src":"3210:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2430,"name":"uint256","nodeType":"ElementaryTypeName","src":"3210:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3209:9:16"},"scope":3249,"src":"3148:331:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2582,"nodeType":"Block","src":"3901:4018:16","statements":[{"id":2581,"nodeType":"UncheckedBlock","src":"3911:4002:16","statements":[{"assignments":[2470],"declarations":[{"constant":false,"id":2470,"mutability":"mutable","name":"prod0","nameLocation":"4240:5:16","nodeType":"VariableDeclaration","scope":2581,"src":"4232:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2469,"name":"uint256","nodeType":"ElementaryTypeName","src":"4232:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2474,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2471,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2460,"src":"4248:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2472,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"4252:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4248:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4232:21:16"},{"assignments":[2476],"declarations":[{"constant":false,"id":2476,"mutability":"mutable","name":"prod1","nameLocation":"4320:5:16","nodeType":"VariableDeclaration","scope":2581,"src":"4312:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2475,"name":"uint256","nodeType":"ElementaryTypeName","src":"4312:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2477,"nodeType":"VariableDeclarationStatement","src":"4312:13:16"},{"AST":{"nodeType":"YulBlock","src":"4392:122:16","statements":[{"nodeType":"YulVariableDeclaration","src":"4410:30:16","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4427:1:16"},{"name":"y","nodeType":"YulIdentifier","src":"4430:1:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4437:1:16","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4433:3:16"},"nodeType":"YulFunctionCall","src":"4433:6:16"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"4420:6:16"},"nodeType":"YulFunctionCall","src":"4420:20:16"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"4414:2:16","type":""}]},{"nodeType":"YulAssignment","src":"4457:43:16","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"4474:2:16"},{"name":"prod0","nodeType":"YulIdentifier","src":"4478:5:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4470:3:16"},"nodeType":"YulFunctionCall","src":"4470:14:16"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"4489:2:16"},{"name":"prod0","nodeType":"YulIdentifier","src":"4493:5:16"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4486:2:16"},"nodeType":"YulFunctionCall","src":"4486:13:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4466:3:16"},"nodeType":"YulFunctionCall","src":"4466:34:16"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"4457:5:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2470,"isOffset":false,"isSlot":false,"src":"4478:5:16","valueSize":1},{"declaration":2470,"isOffset":false,"isSlot":false,"src":"4493:5:16","valueSize":1},{"declaration":2476,"isOffset":false,"isSlot":false,"src":"4457:5:16","valueSize":1},{"declaration":2460,"isOffset":false,"isSlot":false,"src":"4427:1:16","valueSize":1},{"declaration":2462,"isOffset":false,"isSlot":false,"src":"4430:1:16","valueSize":1}],"id":2478,"nodeType":"InlineAssembly","src":"4383:131:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2479,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2476,"src":"4595:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4604:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4595:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2487,"nodeType":"IfStatement","src":"4591:368:16","trueBody":{"id":2486,"nodeType":"Block","src":"4607:352:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2482,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2470,"src":"4925:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2483,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"4933:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4925:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2468,"id":2485,"nodeType":"Return","src":"4918:26:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2488,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"5065:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":2489,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2476,"src":"5080:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:20:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2495,"nodeType":"IfStatement","src":"5061:88:16","trueBody":{"id":2494,"nodeType":"Block","src":"5087:62:16","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2491,"name":"MathOverflowedMulDiv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2201,"src":"5112:20:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5112:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2493,"nodeType":"RevertStatement","src":"5105:29:16"}]}},{"assignments":[2497],"declarations":[{"constant":false,"id":2497,"mutability":"mutable","name":"remainder","nameLocation":"5412:9:16","nodeType":"VariableDeclaration","scope":2581,"src":"5404:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2496,"name":"uint256","nodeType":"ElementaryTypeName","src":"5404:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2498,"nodeType":"VariableDeclarationStatement","src":"5404:17:16"},{"AST":{"nodeType":"YulBlock","src":"5444:291:16","statements":[{"nodeType":"YulAssignment","src":"5513:38:16","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5533:1:16"},{"name":"y","nodeType":"YulIdentifier","src":"5536:1:16"},{"name":"denominator","nodeType":"YulIdentifier","src":"5539:11:16"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"5526:6:16"},"nodeType":"YulFunctionCall","src":"5526:25:16"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"5513:9:16"}]},{"nodeType":"YulAssignment","src":"5633:41:16","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"5646:5:16"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"5656:9:16"},{"name":"prod0","nodeType":"YulIdentifier","src":"5667:5:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5653:2:16"},"nodeType":"YulFunctionCall","src":"5653:20:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5642:3:16"},"nodeType":"YulFunctionCall","src":"5642:32:16"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"5633:5:16"}]},{"nodeType":"YulAssignment","src":"5691:30:16","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"5704:5:16"},{"name":"remainder","nodeType":"YulIdentifier","src":"5711:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5700:3:16"},"nodeType":"YulFunctionCall","src":"5700:21:16"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"5691:5:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2464,"isOffset":false,"isSlot":false,"src":"5539:11:16","valueSize":1},{"declaration":2470,"isOffset":false,"isSlot":false,"src":"5667:5:16","valueSize":1},{"declaration":2470,"isOffset":false,"isSlot":false,"src":"5691:5:16","valueSize":1},{"declaration":2470,"isOffset":false,"isSlot":false,"src":"5704:5:16","valueSize":1},{"declaration":2476,"isOffset":false,"isSlot":false,"src":"5633:5:16","valueSize":1},{"declaration":2476,"isOffset":false,"isSlot":false,"src":"5646:5:16","valueSize":1},{"declaration":2497,"isOffset":false,"isSlot":false,"src":"5513:9:16","valueSize":1},{"declaration":2497,"isOffset":false,"isSlot":false,"src":"5656:9:16","valueSize":1},{"declaration":2497,"isOffset":false,"isSlot":false,"src":"5711:9:16","valueSize":1},{"declaration":2460,"isOffset":false,"isSlot":false,"src":"5533:1:16","valueSize":1},{"declaration":2462,"isOffset":false,"isSlot":false,"src":"5536:1:16","valueSize":1}],"id":2499,"nodeType":"InlineAssembly","src":"5435:300:16"},{"assignments":[2501],"declarations":[{"constant":false,"id":2501,"mutability":"mutable","name":"twos","nameLocation":"5947:4:16","nodeType":"VariableDeclaration","scope":2581,"src":"5939:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2500,"name":"uint256","nodeType":"ElementaryTypeName","src":"5939:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2508,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2502,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"5954:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"30","id":2503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5969:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2504,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"5973:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5969:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2506,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5968:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5954:31:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5939:46:16"},{"AST":{"nodeType":"YulBlock","src":"6008:362:16","statements":[{"nodeType":"YulAssignment","src":"6073:37:16","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"6092:11:16"},{"name":"twos","nodeType":"YulIdentifier","src":"6105:4:16"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6088:3:16"},"nodeType":"YulFunctionCall","src":"6088:22:16"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"6073:11:16"}]},{"nodeType":"YulAssignment","src":"6177:25:16","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"6190:5:16"},{"name":"twos","nodeType":"YulIdentifier","src":"6197:4:16"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6186:3:16"},"nodeType":"YulFunctionCall","src":"6186:16:16"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"6177:5:16"}]},{"nodeType":"YulAssignment","src":"6317:39:16","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6337:1:16","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"6340:4:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6333:3:16"},"nodeType":"YulFunctionCall","src":"6333:12:16"},{"name":"twos","nodeType":"YulIdentifier","src":"6347:4:16"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6329:3:16"},"nodeType":"YulFunctionCall","src":"6329:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"6354:1:16","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6325:3:16"},"nodeType":"YulFunctionCall","src":"6325:31:16"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"6317:4:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2464,"isOffset":false,"isSlot":false,"src":"6073:11:16","valueSize":1},{"declaration":2464,"isOffset":false,"isSlot":false,"src":"6092:11:16","valueSize":1},{"declaration":2470,"isOffset":false,"isSlot":false,"src":"6177:5:16","valueSize":1},{"declaration":2470,"isOffset":false,"isSlot":false,"src":"6190:5:16","valueSize":1},{"declaration":2501,"isOffset":false,"isSlot":false,"src":"6105:4:16","valueSize":1},{"declaration":2501,"isOffset":false,"isSlot":false,"src":"6197:4:16","valueSize":1},{"declaration":2501,"isOffset":false,"isSlot":false,"src":"6317:4:16","valueSize":1},{"declaration":2501,"isOffset":false,"isSlot":false,"src":"6340:4:16","valueSize":1},{"declaration":2501,"isOffset":false,"isSlot":false,"src":"6347:4:16","valueSize":1}],"id":2509,"nodeType":"InlineAssembly","src":"5999:371:16"},{"expression":{"id":2514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2510,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2470,"src":"6436:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2511,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2476,"src":"6445:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2512,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2501,"src":"6453:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6445:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6436:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2515,"nodeType":"ExpressionStatement","src":"6436:21:16"},{"assignments":[2517],"declarations":[{"constant":false,"id":2517,"mutability":"mutable","name":"inverse","nameLocation":"6783:7:16","nodeType":"VariableDeclaration","scope":2581,"src":"6775:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2516,"name":"uint256","nodeType":"ElementaryTypeName","src":"6775:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2524,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":2518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6794:1:16","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2519,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"6798:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6794:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2521,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6793:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":2522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6813:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6793:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6775:39:16"},{"expression":{"id":2531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2525,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"7031:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7042:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2527,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"7046:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2528,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"7060:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7046:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7042:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7031:36:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2532,"nodeType":"ExpressionStatement","src":"7031:36:16"},{"expression":{"id":2539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2533,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"7100:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7111:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2535,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"7115:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2536,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"7129:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7115:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7111:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7100:36:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2540,"nodeType":"ExpressionStatement","src":"7100:36:16"},{"expression":{"id":2547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2541,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"7170:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7181:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2543,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"7185:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2544,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"7199:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7185:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7181:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7170:36:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2548,"nodeType":"ExpressionStatement","src":"7170:36:16"},{"expression":{"id":2555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2549,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"7240:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7251:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2551,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"7255:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2552,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"7269:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7255:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7251:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7240:36:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2556,"nodeType":"ExpressionStatement","src":"7240:36:16"},{"expression":{"id":2563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2557,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"7310:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7321:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2559,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"7325:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2560,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"7339:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7325:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7321:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7310:36:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2564,"nodeType":"ExpressionStatement","src":"7310:36:16"},{"expression":{"id":2571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2565,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"7381:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7392:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2567,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"7396:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2568,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"7410:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7396:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7392:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7381:36:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2572,"nodeType":"ExpressionStatement","src":"7381:36:16"},{"expression":{"id":2577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2573,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"7851:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2574,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2470,"src":"7860:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2575,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"7868:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7860:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7851:24:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2578,"nodeType":"ExpressionStatement","src":"7851:24:16"},{"expression":{"id":2579,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"7896:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2468,"id":2580,"nodeType":"Return","src":"7889:13:16"}]}]},"documentation":{"id":2458,"nodeType":"StructuredDocumentation","src":"3485:313:16","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."},"id":2583,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"3812:6:16","nodeType":"FunctionDefinition","parameters":{"id":2465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2460,"mutability":"mutable","name":"x","nameLocation":"3827:1:16","nodeType":"VariableDeclaration","scope":2583,"src":"3819:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2459,"name":"uint256","nodeType":"ElementaryTypeName","src":"3819:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2462,"mutability":"mutable","name":"y","nameLocation":"3838:1:16","nodeType":"VariableDeclaration","scope":2583,"src":"3830:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2461,"name":"uint256","nodeType":"ElementaryTypeName","src":"3830:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2464,"mutability":"mutable","name":"denominator","nameLocation":"3849:11:16","nodeType":"VariableDeclaration","scope":2583,"src":"3841:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2463,"name":"uint256","nodeType":"ElementaryTypeName","src":"3841:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3818:43:16"},"returnParameters":{"id":2468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2467,"mutability":"mutable","name":"result","nameLocation":"3893:6:16","nodeType":"VariableDeclaration","scope":2583,"src":"3885:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2466,"name":"uint256","nodeType":"ElementaryTypeName","src":"3885:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3884:16:16"},"scope":3249,"src":"3803:4116:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2625,"nodeType":"Block","src":"8161:192:16","statements":[{"assignments":[2599],"declarations":[{"constant":false,"id":2599,"mutability":"mutable","name":"result","nameLocation":"8179:6:16","nodeType":"VariableDeclaration","scope":2625,"src":"8171:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2598,"name":"uint256","nodeType":"ElementaryTypeName","src":"8171:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2605,"initialValue":{"arguments":[{"id":2601,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2586,"src":"8195:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2602,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2588,"src":"8198:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2603,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"8201:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2600,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2583,2626],"referencedDeclaration":2583,"src":"8188:6:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2604,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8188:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8171:42:16"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2607,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2593,"src":"8244:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2206","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2206","typeString":"enum Math.Rounding"}],"id":2606,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"8227:16:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2206_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8227:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2610,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2586,"src":"8264:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2611,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2588,"src":"8267:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2612,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"8270:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2609,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967280,"src":"8257:6:16","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2613,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8257:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8285:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8257:29:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8227:59:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2622,"nodeType":"IfStatement","src":"8223:101:16","trueBody":{"id":2621,"nodeType":"Block","src":"8288:36:16","statements":[{"expression":{"id":2619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2617,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2599,"src":"8302:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8312:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8302:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2620,"nodeType":"ExpressionStatement","src":"8302:11:16"}]}},{"expression":{"id":2623,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2599,"src":"8340:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2597,"id":2624,"nodeType":"Return","src":"8333:13:16"}]},"documentation":{"id":2584,"nodeType":"StructuredDocumentation","src":"7925:121:16","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2626,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"8060:6:16","nodeType":"FunctionDefinition","parameters":{"id":2594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2586,"mutability":"mutable","name":"x","nameLocation":"8075:1:16","nodeType":"VariableDeclaration","scope":2626,"src":"8067:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2585,"name":"uint256","nodeType":"ElementaryTypeName","src":"8067:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2588,"mutability":"mutable","name":"y","nameLocation":"8086:1:16","nodeType":"VariableDeclaration","scope":2626,"src":"8078:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2587,"name":"uint256","nodeType":"ElementaryTypeName","src":"8078:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2590,"mutability":"mutable","name":"denominator","nameLocation":"8097:11:16","nodeType":"VariableDeclaration","scope":2626,"src":"8089:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2589,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2593,"mutability":"mutable","name":"rounding","nameLocation":"8119:8:16","nodeType":"VariableDeclaration","scope":2626,"src":"8110:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2206","typeString":"enum Math.Rounding"},"typeName":{"id":2592,"nodeType":"UserDefinedTypeName","pathNode":{"id":2591,"name":"Rounding","nameLocations":["8110:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":2206,"src":"8110:8:16"},"referencedDeclaration":2206,"src":"8110:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2206","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8066:62:16"},"returnParameters":{"id":2597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2596,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2626,"src":"8152:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2595,"name":"uint256","nodeType":"ElementaryTypeName","src":"8152:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8151:9:16"},"scope":3249,"src":"8051:302:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2737,"nodeType":"Block","src":"8644:1585:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2634,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2629,"src":"8658:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8663:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8658:6:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2640,"nodeType":"IfStatement","src":"8654:45:16","trueBody":{"id":2639,"nodeType":"Block","src":"8666:33:16","statements":[{"expression":{"hexValue":"30","id":2637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8687:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2633,"id":2638,"nodeType":"Return","src":"8680:8:16"}]}},{"assignments":[2642],"declarations":[{"constant":false,"id":2642,"mutability":"mutable","name":"result","nameLocation":"9386:6:16","nodeType":"VariableDeclaration","scope":2737,"src":"9378:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2641,"name":"uint256","nodeType":"ElementaryTypeName","src":"9378:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2651,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9395:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2645,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2629,"src":"9406:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2644,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2905,2940],"referencedDeclaration":2905,"src":"9401:4:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9401:7:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9412:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9401:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2649,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9400:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9395:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9378:36:16"},{"id":2736,"nodeType":"UncheckedBlock","src":"9815:408:16","statements":[{"expression":{"id":2661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2652,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"9839:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2653,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"9849:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2654,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2629,"src":"9858:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2655,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"9862:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9858:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9849:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2658,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9848:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9873:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9848:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9839:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2662,"nodeType":"ExpressionStatement","src":"9839:35:16"},{"expression":{"id":2672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2663,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"9888:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2664,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"9898:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2665,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2629,"src":"9907:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2666,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"9911:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9907:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9898:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2669,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9897:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9922:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9897:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9888:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2673,"nodeType":"ExpressionStatement","src":"9888:35:16"},{"expression":{"id":2683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2674,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"9937:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2675,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"9947:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2676,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2629,"src":"9956:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2677,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"9960:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9956:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9947:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2680,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9946:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9971:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9946:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9937:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2684,"nodeType":"ExpressionStatement","src":"9937:35:16"},{"expression":{"id":2694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2685,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"9986:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2686,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"9996:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2687,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2629,"src":"10005:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2688,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"10009:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10005:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9996:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2691,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9995:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10020:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9995:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9986:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2695,"nodeType":"ExpressionStatement","src":"9986:35:16"},{"expression":{"id":2705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2696,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"10035:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2697,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"10045:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2698,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2629,"src":"10054:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2699,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"10058:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10054:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10045:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2702,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10044:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10069:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10044:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10035:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2706,"nodeType":"ExpressionStatement","src":"10035:35:16"},{"expression":{"id":2716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2707,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"10084:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2708,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"10094:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2709,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2629,"src":"10103:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2710,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"10107:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10103:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10094:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2713,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10093:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10118:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10093:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10084:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2717,"nodeType":"ExpressionStatement","src":"10084:35:16"},{"expression":{"id":2727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2718,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"10133:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2719,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"10143:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2720,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2629,"src":"10152:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2721,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"10156:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10152:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10143:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2724,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10142:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10167:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10142:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10133:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2728,"nodeType":"ExpressionStatement","src":"10133:35:16"},{"expression":{"arguments":[{"id":2730,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"10193:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2731,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2629,"src":"10201:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2732,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"10205:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10201:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2729,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2400,"src":"10189:3:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10189:23:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2633,"id":2735,"nodeType":"Return","src":"10182:30:16"}]}]},"documentation":{"id":2627,"nodeType":"StructuredDocumentation","src":"8359:223:16","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2738,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8596:4:16","nodeType":"FunctionDefinition","parameters":{"id":2630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2629,"mutability":"mutable","name":"a","nameLocation":"8609:1:16","nodeType":"VariableDeclaration","scope":2738,"src":"8601:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2628,"name":"uint256","nodeType":"ElementaryTypeName","src":"8601:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8600:11:16"},"returnParameters":{"id":2633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2632,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2738,"src":"8635:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2631,"name":"uint256","nodeType":"ElementaryTypeName","src":"8635:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8634:9:16"},"scope":3249,"src":"8587:1642:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2772,"nodeType":"Block","src":"10405:164:16","statements":[{"id":2771,"nodeType":"UncheckedBlock","src":"10415:148:16","statements":[{"assignments":[2750],"declarations":[{"constant":false,"id":2750,"mutability":"mutable","name":"result","nameLocation":"10447:6:16","nodeType":"VariableDeclaration","scope":2771,"src":"10439:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2749,"name":"uint256","nodeType":"ElementaryTypeName","src":"10439:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2754,"initialValue":{"arguments":[{"id":2752,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2741,"src":"10461:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2751,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2738,2773],"referencedDeclaration":2738,"src":"10456:4:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10456:7:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10439:24:16"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2755,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2750,"src":"10484:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2757,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2744,"src":"10511:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2206","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2206","typeString":"enum Math.Rounding"}],"id":2756,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"10494:16:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2206_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2758,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10494:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2759,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2750,"src":"10524:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2760,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2750,"src":"10533:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2762,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2741,"src":"10542:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10494:49:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10550:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10494:57:16","trueExpression":{"hexValue":"31","id":2765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10546:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2768,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10493:59:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"10484:68:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2748,"id":2770,"nodeType":"Return","src":"10477:75:16"}]}]},"documentation":{"id":2739,"nodeType":"StructuredDocumentation","src":"10235:89:16","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2773,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"10338:4:16","nodeType":"FunctionDefinition","parameters":{"id":2745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2741,"mutability":"mutable","name":"a","nameLocation":"10351:1:16","nodeType":"VariableDeclaration","scope":2773,"src":"10343:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2740,"name":"uint256","nodeType":"ElementaryTypeName","src":"10343:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2744,"mutability":"mutable","name":"rounding","nameLocation":"10363:8:16","nodeType":"VariableDeclaration","scope":2773,"src":"10354:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2206","typeString":"enum Math.Rounding"},"typeName":{"id":2743,"nodeType":"UserDefinedTypeName","pathNode":{"id":2742,"name":"Rounding","nameLocations":["10354:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":2206,"src":"10354:8:16"},"referencedDeclaration":2206,"src":"10354:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2206","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10342:30:16"},"returnParameters":{"id":2748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2747,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2773,"src":"10396:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2746,"name":"uint256","nodeType":"ElementaryTypeName","src":"10396:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10395:9:16"},"scope":3249,"src":"10329:240:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2904,"nodeType":"Block","src":"10760:922:16","statements":[{"assignments":[2782],"declarations":[{"constant":false,"id":2782,"mutability":"mutable","name":"result","nameLocation":"10778:6:16","nodeType":"VariableDeclaration","scope":2904,"src":"10770:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2781,"name":"uint256","nodeType":"ElementaryTypeName","src":"10770:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2784,"initialValue":{"hexValue":"30","id":2783,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10787:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10770:18:16"},{"id":2901,"nodeType":"UncheckedBlock","src":"10798:855:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2785,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2776,"src":"10826:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2786,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10835:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10826:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10841:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10826:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2799,"nodeType":"IfStatement","src":"10822:99:16","trueBody":{"id":2798,"nodeType":"Block","src":"10844:77:16","statements":[{"expression":{"id":2792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2790,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2776,"src":"10862:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10872:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10862:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2793,"nodeType":"ExpressionStatement","src":"10862:13:16"},{"expression":{"id":2796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2794,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2782,"src":"10893:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10903:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10893:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2797,"nodeType":"ExpressionStatement","src":"10893:13:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2800,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2776,"src":"10938:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10947:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10938:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10952:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10938:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2814,"nodeType":"IfStatement","src":"10934:96:16","trueBody":{"id":2813,"nodeType":"Block","src":"10955:75:16","statements":[{"expression":{"id":2807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2805,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2776,"src":"10973:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10983:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10973:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2808,"nodeType":"ExpressionStatement","src":"10973:12:16"},{"expression":{"id":2811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2809,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2782,"src":"11003:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11013:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11003:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2812,"nodeType":"ExpressionStatement","src":"11003:12:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2815,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2776,"src":"11047:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2816,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11056:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11047:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11061:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11047:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2829,"nodeType":"IfStatement","src":"11043:96:16","trueBody":{"id":2828,"nodeType":"Block","src":"11064:75:16","statements":[{"expression":{"id":2822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2820,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2776,"src":"11082:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11092:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11082:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2823,"nodeType":"ExpressionStatement","src":"11082:12:16"},{"expression":{"id":2826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2824,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2782,"src":"11112:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2825,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11122:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11112:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2827,"nodeType":"ExpressionStatement","src":"11112:12:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2830,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2776,"src":"11156:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11165:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11156:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11170:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11156:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2844,"nodeType":"IfStatement","src":"11152:96:16","trueBody":{"id":2843,"nodeType":"Block","src":"11173:75:16","statements":[{"expression":{"id":2837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2835,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2776,"src":"11191:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11201:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11191:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2838,"nodeType":"ExpressionStatement","src":"11191:12:16"},{"expression":{"id":2841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2839,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2782,"src":"11221:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11231:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11221:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2842,"nodeType":"ExpressionStatement","src":"11221:12:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2845,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2776,"src":"11265:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11274:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11265:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2848,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11278:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11265:14:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2859,"nodeType":"IfStatement","src":"11261:93:16","trueBody":{"id":2858,"nodeType":"Block","src":"11281:73:16","statements":[{"expression":{"id":2852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2850,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2776,"src":"11299:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11309:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11299:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2853,"nodeType":"ExpressionStatement","src":"11299:11:16"},{"expression":{"id":2856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2854,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2782,"src":"11328:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11338:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11328:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2857,"nodeType":"ExpressionStatement","src":"11328:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2860,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2776,"src":"11371:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11380:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11371:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2863,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11384:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11371:14:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2874,"nodeType":"IfStatement","src":"11367:93:16","trueBody":{"id":2873,"nodeType":"Block","src":"11387:73:16","statements":[{"expression":{"id":2867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2865,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2776,"src":"11405:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11415:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11405:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2868,"nodeType":"ExpressionStatement","src":"11405:11:16"},{"expression":{"id":2871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2869,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2782,"src":"11434:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2870,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11444:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11434:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2872,"nodeType":"ExpressionStatement","src":"11434:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2875,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2776,"src":"11477:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11486:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11477:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2878,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11490:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11477:14:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2889,"nodeType":"IfStatement","src":"11473:93:16","trueBody":{"id":2888,"nodeType":"Block","src":"11493:73:16","statements":[{"expression":{"id":2882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2880,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2776,"src":"11511:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11521:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11511:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2883,"nodeType":"ExpressionStatement","src":"11511:11:16"},{"expression":{"id":2886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2884,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2782,"src":"11540:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11550:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11540:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2887,"nodeType":"ExpressionStatement","src":"11540:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2890,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2776,"src":"11583:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2891,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11592:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11583:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11596:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11583:14:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2900,"nodeType":"IfStatement","src":"11579:64:16","trueBody":{"id":2899,"nodeType":"Block","src":"11599:44:16","statements":[{"expression":{"id":2897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2895,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2782,"src":"11617:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11627:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11617:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2898,"nodeType":"ExpressionStatement","src":"11617:11:16"}]}}]},{"expression":{"id":2902,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2782,"src":"11669:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2780,"id":2903,"nodeType":"Return","src":"11662:13:16"}]},"documentation":{"id":2774,"nodeType":"StructuredDocumentation","src":"10575:119:16","text":" @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":2905,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"10708:4:16","nodeType":"FunctionDefinition","parameters":{"id":2777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2776,"mutability":"mutable","name":"value","nameLocation":"10721:5:16","nodeType":"VariableDeclaration","scope":2905,"src":"10713:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2775,"name":"uint256","nodeType":"ElementaryTypeName","src":"10713:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10712:15:16"},"returnParameters":{"id":2780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2779,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2905,"src":"10751:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2778,"name":"uint256","nodeType":"ElementaryTypeName","src":"10751:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10750:9:16"},"scope":3249,"src":"10699:983:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2939,"nodeType":"Block","src":"11915:168:16","statements":[{"id":2938,"nodeType":"UncheckedBlock","src":"11925:152:16","statements":[{"assignments":[2917],"declarations":[{"constant":false,"id":2917,"mutability":"mutable","name":"result","nameLocation":"11957:6:16","nodeType":"VariableDeclaration","scope":2938,"src":"11949:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2916,"name":"uint256","nodeType":"ElementaryTypeName","src":"11949:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2921,"initialValue":{"arguments":[{"id":2919,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"11971:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2918,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2905,2940],"referencedDeclaration":2905,"src":"11966:4:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11966:11:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11949:28:16"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2922,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2917,"src":"11998:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2924,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2911,"src":"12025:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2206","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2206","typeString":"enum Math.Rounding"}],"id":2923,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"12008:16:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2206_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2925,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12008:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2926,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2927,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2917,"src":"12043:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2929,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"12052:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12008:49:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12064:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12008:57:16","trueExpression":{"hexValue":"31","id":2932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12060:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2935,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12007:59:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11998:68:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2915,"id":2937,"nodeType":"Return","src":"11991:75:16"}]}]},"documentation":{"id":2906,"nodeType":"StructuredDocumentation","src":"11688:142:16","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2940,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"11844:4:16","nodeType":"FunctionDefinition","parameters":{"id":2912,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2908,"mutability":"mutable","name":"value","nameLocation":"11857:5:16","nodeType":"VariableDeclaration","scope":2940,"src":"11849:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2907,"name":"uint256","nodeType":"ElementaryTypeName","src":"11849:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2911,"mutability":"mutable","name":"rounding","nameLocation":"11873:8:16","nodeType":"VariableDeclaration","scope":2940,"src":"11864:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2206","typeString":"enum Math.Rounding"},"typeName":{"id":2910,"nodeType":"UserDefinedTypeName","pathNode":{"id":2909,"name":"Rounding","nameLocations":["11864:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":2206,"src":"11864:8:16"},"referencedDeclaration":2206,"src":"11864:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2206","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11848:34:16"},"returnParameters":{"id":2915,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2914,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2940,"src":"11906:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2913,"name":"uint256","nodeType":"ElementaryTypeName","src":"11906:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11905:9:16"},"scope":3249,"src":"11835:248:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3068,"nodeType":"Block","src":"12276:854:16","statements":[{"assignments":[2949],"declarations":[{"constant":false,"id":2949,"mutability":"mutable","name":"result","nameLocation":"12294:6:16","nodeType":"VariableDeclaration","scope":3068,"src":"12286:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2948,"name":"uint256","nodeType":"ElementaryTypeName","src":"12286:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2951,"initialValue":{"hexValue":"30","id":2950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12303:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12286:18:16"},{"id":3065,"nodeType":"UncheckedBlock","src":"12314:787:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2952,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"12342:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2955,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2953,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12351:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12357:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12351:8:16","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12342:17:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2968,"nodeType":"IfStatement","src":"12338:103:16","trueBody":{"id":2967,"nodeType":"Block","src":"12361:80:16","statements":[{"expression":{"id":2961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2957,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"12379:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2960,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12388:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12394:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12388:8:16","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12379:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2962,"nodeType":"ExpressionStatement","src":"12379:17:16"},{"expression":{"id":2965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2963,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2949,"src":"12414:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12424:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12414:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2966,"nodeType":"ExpressionStatement","src":"12414:12:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2969,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"12458:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2972,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12467:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12473:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12467:8:16","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12458:17:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2985,"nodeType":"IfStatement","src":"12454:103:16","trueBody":{"id":2984,"nodeType":"Block","src":"12477:80:16","statements":[{"expression":{"id":2978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2974,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"12495:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2977,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2975,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12504:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12510:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12504:8:16","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12495:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2979,"nodeType":"ExpressionStatement","src":"12495:17:16"},{"expression":{"id":2982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2980,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2949,"src":"12530:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2981,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12540:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12530:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2983,"nodeType":"ExpressionStatement","src":"12530:12:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2986,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"12574:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2989,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2987,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12583:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12589:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12583:8:16","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12574:17:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3002,"nodeType":"IfStatement","src":"12570:103:16","trueBody":{"id":3001,"nodeType":"Block","src":"12593:80:16","statements":[{"expression":{"id":2995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2991,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"12611:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2994,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12620:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2993,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12626:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12620:8:16","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12611:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2996,"nodeType":"ExpressionStatement","src":"12611:17:16"},{"expression":{"id":2999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2997,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2949,"src":"12646:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12656:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12646:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3000,"nodeType":"ExpressionStatement","src":"12646:12:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3003,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"12690:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3006,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3004,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12699:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12705:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12699:7:16","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12690:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3019,"nodeType":"IfStatement","src":"12686:100:16","trueBody":{"id":3018,"nodeType":"Block","src":"12708:78:16","statements":[{"expression":{"id":3012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3008,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"12726:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3011,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3009,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12735:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12741:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12735:7:16","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12726:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3013,"nodeType":"ExpressionStatement","src":"12726:16:16"},{"expression":{"id":3016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3014,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2949,"src":"12760:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12770:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12760:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3017,"nodeType":"ExpressionStatement","src":"12760:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3020,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"12803:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3023,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3021,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12812:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12818:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12812:7:16","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12803:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3036,"nodeType":"IfStatement","src":"12799:100:16","trueBody":{"id":3035,"nodeType":"Block","src":"12821:78:16","statements":[{"expression":{"id":3029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3025,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"12839:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3028,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12848:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3027,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12854:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12848:7:16","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12839:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3030,"nodeType":"ExpressionStatement","src":"12839:16:16"},{"expression":{"id":3033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3031,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2949,"src":"12873:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12883:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12873:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3034,"nodeType":"ExpressionStatement","src":"12873:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3037,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"12916:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3040,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12925:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12931:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12925:7:16","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12916:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3053,"nodeType":"IfStatement","src":"12912:100:16","trueBody":{"id":3052,"nodeType":"Block","src":"12934:78:16","statements":[{"expression":{"id":3046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3042,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"12952:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3045,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12961:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12967:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12961:7:16","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12952:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3047,"nodeType":"ExpressionStatement","src":"12952:16:16"},{"expression":{"id":3050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3048,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2949,"src":"12986:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12996:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12986:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3051,"nodeType":"ExpressionStatement","src":"12986:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3054,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"13029:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":3057,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3055,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13038:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":3056,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13044:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13038:7:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"13029:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3064,"nodeType":"IfStatement","src":"13025:66:16","trueBody":{"id":3063,"nodeType":"Block","src":"13047:44:16","statements":[{"expression":{"id":3061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3059,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2949,"src":"13065:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13075:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13065:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3062,"nodeType":"ExpressionStatement","src":"13065:11:16"}]}}]},{"expression":{"id":3066,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2949,"src":"13117:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2947,"id":3067,"nodeType":"Return","src":"13110:13:16"}]},"documentation":{"id":2941,"nodeType":"StructuredDocumentation","src":"12089:120:16","text":" @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":3069,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"12223:5:16","nodeType":"FunctionDefinition","parameters":{"id":2944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2943,"mutability":"mutable","name":"value","nameLocation":"12237:5:16","nodeType":"VariableDeclaration","scope":3069,"src":"12229:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2942,"name":"uint256","nodeType":"ElementaryTypeName","src":"12229:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12228:15:16"},"returnParameters":{"id":2947,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2946,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3069,"src":"12267:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2945,"name":"uint256","nodeType":"ElementaryTypeName","src":"12267:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12266:9:16"},"scope":3249,"src":"12214:916:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3103,"nodeType":"Block","src":"13365:170:16","statements":[{"id":3102,"nodeType":"UncheckedBlock","src":"13375:154:16","statements":[{"assignments":[3081],"declarations":[{"constant":false,"id":3081,"mutability":"mutable","name":"result","nameLocation":"13407:6:16","nodeType":"VariableDeclaration","scope":3102,"src":"13399:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3080,"name":"uint256","nodeType":"ElementaryTypeName","src":"13399:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3085,"initialValue":{"arguments":[{"id":3083,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"13422:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3082,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[3069,3104],"referencedDeclaration":3069,"src":"13416:5:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13416:12:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13399:29:16"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3086,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3081,"src":"13449:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3088,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3075,"src":"13476:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2206","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2206","typeString":"enum Math.Rounding"}],"id":3087,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"13459:16:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2206_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3089,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13459:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13489:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":3091,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3081,"src":"13495:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3093,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"13504:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:20:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13459:50:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13516:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"13459:58:16","trueExpression":{"hexValue":"31","id":3096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13512:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3099,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13458:60:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"13449:69:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3079,"id":3101,"nodeType":"Return","src":"13442:76:16"}]}]},"documentation":{"id":3070,"nodeType":"StructuredDocumentation","src":"13136:143:16","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3104,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"13293:5:16","nodeType":"FunctionDefinition","parameters":{"id":3076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3072,"mutability":"mutable","name":"value","nameLocation":"13307:5:16","nodeType":"VariableDeclaration","scope":3104,"src":"13299:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3071,"name":"uint256","nodeType":"ElementaryTypeName","src":"13299:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3075,"mutability":"mutable","name":"rounding","nameLocation":"13323:8:16","nodeType":"VariableDeclaration","scope":3104,"src":"13314:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2206","typeString":"enum Math.Rounding"},"typeName":{"id":3074,"nodeType":"UserDefinedTypeName","pathNode":{"id":3073,"name":"Rounding","nameLocations":["13314:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":2206,"src":"13314:8:16"},"referencedDeclaration":2206,"src":"13314:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2206","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"13298:34:16"},"returnParameters":{"id":3079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3078,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3104,"src":"13356:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3077,"name":"uint256","nodeType":"ElementaryTypeName","src":"13356:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13355:9:16"},"scope":3249,"src":"13284:251:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3190,"nodeType":"Block","src":"13855:600:16","statements":[{"assignments":[3113],"declarations":[{"constant":false,"id":3113,"mutability":"mutable","name":"result","nameLocation":"13873:6:16","nodeType":"VariableDeclaration","scope":3190,"src":"13865:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3112,"name":"uint256","nodeType":"ElementaryTypeName","src":"13865:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3115,"initialValue":{"hexValue":"30","id":3114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13882:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"13865:18:16"},{"id":3187,"nodeType":"UncheckedBlock","src":"13893:533:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3116,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3107,"src":"13921:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13930:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13921:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13936:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13921:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3130,"nodeType":"IfStatement","src":"13917:98:16","trueBody":{"id":3129,"nodeType":"Block","src":"13939:76:16","statements":[{"expression":{"id":3123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3121,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3107,"src":"13957:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13967:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13957:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3124,"nodeType":"ExpressionStatement","src":"13957:13:16"},{"expression":{"id":3127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3125,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3113,"src":"13988:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13998:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"13988:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3128,"nodeType":"ExpressionStatement","src":"13988:12:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3131,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3107,"src":"14032:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14041:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14032:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14046:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14032:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3145,"nodeType":"IfStatement","src":"14028:95:16","trueBody":{"id":3144,"nodeType":"Block","src":"14049:74:16","statements":[{"expression":{"id":3138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3136,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3107,"src":"14067:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14077:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14067:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3139,"nodeType":"ExpressionStatement","src":"14067:12:16"},{"expression":{"id":3142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3140,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3113,"src":"14097:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14107:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14097:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3143,"nodeType":"ExpressionStatement","src":"14097:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3146,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3107,"src":"14140:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14149:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14140:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14154:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14140:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3160,"nodeType":"IfStatement","src":"14136:95:16","trueBody":{"id":3159,"nodeType":"Block","src":"14157:74:16","statements":[{"expression":{"id":3153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3151,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3107,"src":"14175:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14185:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14175:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3154,"nodeType":"ExpressionStatement","src":"14175:12:16"},{"expression":{"id":3157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3155,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3113,"src":"14205:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14215:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"14205:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3158,"nodeType":"ExpressionStatement","src":"14205:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3161,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3107,"src":"14248:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14257:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14248:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3164,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14262:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14248:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3175,"nodeType":"IfStatement","src":"14244:95:16","trueBody":{"id":3174,"nodeType":"Block","src":"14265:74:16","statements":[{"expression":{"id":3168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3166,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3107,"src":"14283:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14293:2:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14283:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3169,"nodeType":"ExpressionStatement","src":"14283:12:16"},{"expression":{"id":3172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3170,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3113,"src":"14313:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14323:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"14313:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3173,"nodeType":"ExpressionStatement","src":"14313:11:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3176,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3107,"src":"14356:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14365:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14356:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14369:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14356:14:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3186,"nodeType":"IfStatement","src":"14352:64:16","trueBody":{"id":3185,"nodeType":"Block","src":"14372:44:16","statements":[{"expression":{"id":3183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3181,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3113,"src":"14390:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14400:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14390:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3184,"nodeType":"ExpressionStatement","src":"14390:11:16"}]}}]},{"expression":{"id":3188,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3113,"src":"14442:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3111,"id":3189,"nodeType":"Return","src":"14435:13:16"}]},"documentation":{"id":3105,"nodeType":"StructuredDocumentation","src":"13541:246:16","text":" @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":3191,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"13801:6:16","nodeType":"FunctionDefinition","parameters":{"id":3108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3107,"mutability":"mutable","name":"value","nameLocation":"13816:5:16","nodeType":"VariableDeclaration","scope":3191,"src":"13808:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3106,"name":"uint256","nodeType":"ElementaryTypeName","src":"13808:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13807:15:16"},"returnParameters":{"id":3111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3110,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3191,"src":"13846:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3109,"name":"uint256","nodeType":"ElementaryTypeName","src":"13846:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13845:9:16"},"scope":3249,"src":"13792:663:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3228,"nodeType":"Block","src":"14692:177:16","statements":[{"id":3227,"nodeType":"UncheckedBlock","src":"14702:161:16","statements":[{"assignments":[3203],"declarations":[{"constant":false,"id":3203,"mutability":"mutable","name":"result","nameLocation":"14734:6:16","nodeType":"VariableDeclaration","scope":3227,"src":"14726:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3202,"name":"uint256","nodeType":"ElementaryTypeName","src":"14726:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3207,"initialValue":{"arguments":[{"id":3205,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3194,"src":"14750:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3204,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[3191,3229],"referencedDeclaration":3191,"src":"14743:6:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14743:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14726:30:16"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3208,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3203,"src":"14777:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3210,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3197,"src":"14804:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2206","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2206","typeString":"enum Math.Rounding"}],"id":3209,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"14787:16:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$2206_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14787:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14817:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3213,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3203,"src":"14823:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":3214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14833:1:16","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"14823:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3216,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14822:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:18:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3218,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3194,"src":"14838:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:26:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14787:56:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14850:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"14787:64:16","trueExpression":{"hexValue":"31","id":3221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14846:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3224,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14786:66:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"14777:75:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3201,"id":3226,"nodeType":"Return","src":"14770:82:16"}]}]},"documentation":{"id":3192,"nodeType":"StructuredDocumentation","src":"14461:144:16","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3229,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"14619:6:16","nodeType":"FunctionDefinition","parameters":{"id":3198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3194,"mutability":"mutable","name":"value","nameLocation":"14634:5:16","nodeType":"VariableDeclaration","scope":3229,"src":"14626:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3193,"name":"uint256","nodeType":"ElementaryTypeName","src":"14626:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3197,"mutability":"mutable","name":"rounding","nameLocation":"14650:8:16","nodeType":"VariableDeclaration","scope":3229,"src":"14641:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2206","typeString":"enum Math.Rounding"},"typeName":{"id":3196,"nodeType":"UserDefinedTypeName","pathNode":{"id":3195,"name":"Rounding","nameLocations":["14641:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":2206,"src":"14641:8:16"},"referencedDeclaration":2206,"src":"14641:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2206","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"14625:34:16"},"returnParameters":{"id":3201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3200,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3229,"src":"14683:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3199,"name":"uint256","nodeType":"ElementaryTypeName","src":"14683:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14682:9:16"},"scope":3249,"src":"14610:259:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3247,"nodeType":"Block","src":"15067:48:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3240,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3233,"src":"15090:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2206","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$2206","typeString":"enum Math.Rounding"}],"id":3239,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15084:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3238,"name":"uint8","nodeType":"ElementaryTypeName","src":"15084:5:16","typeDescriptions":{}}},"id":3241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15084:15:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"32","id":3242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15102:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"15084:19:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":3244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15107:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15084:24:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3237,"id":3246,"nodeType":"Return","src":"15077:31:16"}]},"documentation":{"id":3230,"nodeType":"StructuredDocumentation","src":"14875:113:16","text":" @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."},"id":3248,"implemented":true,"kind":"function","modifiers":[],"name":"unsignedRoundsUp","nameLocation":"15002:16:16","nodeType":"FunctionDefinition","parameters":{"id":3234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3233,"mutability":"mutable","name":"rounding","nameLocation":"15028:8:16","nodeType":"VariableDeclaration","scope":3248,"src":"15019:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2206","typeString":"enum Math.Rounding"},"typeName":{"id":3232,"nodeType":"UserDefinedTypeName","pathNode":{"id":3231,"name":"Rounding","nameLocations":["15019:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":2206,"src":"15019:8:16"},"referencedDeclaration":2206,"src":"15019:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2206","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"15018:19:16"},"returnParameters":{"id":3237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3236,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3248,"src":"15061:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3235,"name":"bool","nodeType":"ElementaryTypeName","src":"15061:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15060:6:16"},"scope":3249,"src":"14993:122:16","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3250,"src":"203:14914:16","usedErrors":[2201],"usedEvents":[]}],"src":"103:15015:16"},"id":16},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[3354]},"id":3355,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3251,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:17"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":3252,"nodeType":"StructuredDocumentation","src":"135:80:17","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":3354,"linearizedBaseContracts":[3354],"name":"SignedMath","nameLocation":"224:10:17","nodeType":"ContractDefinition","nodes":[{"body":{"id":3269,"nodeType":"Block","src":"376:37:17","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3262,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3255,"src":"393:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3263,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3257,"src":"397:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"393:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3266,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3257,"src":"405:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"393:13:17","trueExpression":{"id":3265,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3255,"src":"401:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3261,"id":3268,"nodeType":"Return","src":"386:20:17"}]},"documentation":{"id":3253,"nodeType":"StructuredDocumentation","src":"241:66:17","text":" @dev Returns the largest of two signed numbers."},"id":3270,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"321:3:17","nodeType":"FunctionDefinition","parameters":{"id":3258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3255,"mutability":"mutable","name":"a","nameLocation":"332:1:17","nodeType":"VariableDeclaration","scope":3270,"src":"325:8:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3254,"name":"int256","nodeType":"ElementaryTypeName","src":"325:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3257,"mutability":"mutable","name":"b","nameLocation":"342:1:17","nodeType":"VariableDeclaration","scope":3270,"src":"335:8:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3256,"name":"int256","nodeType":"ElementaryTypeName","src":"335:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"324:20:17"},"returnParameters":{"id":3261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3260,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3270,"src":"368:6:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3259,"name":"int256","nodeType":"ElementaryTypeName","src":"368:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"367:8:17"},"scope":3354,"src":"312:101:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3287,"nodeType":"Block","src":"555:37:17","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3280,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3273,"src":"572:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3281,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3275,"src":"576:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"572:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3284,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3275,"src":"584:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"572:13:17","trueExpression":{"id":3283,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3273,"src":"580:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3279,"id":3286,"nodeType":"Return","src":"565:20:17"}]},"documentation":{"id":3271,"nodeType":"StructuredDocumentation","src":"419:67:17","text":" @dev Returns the smallest of two signed numbers."},"id":3288,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"500:3:17","nodeType":"FunctionDefinition","parameters":{"id":3276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3273,"mutability":"mutable","name":"a","nameLocation":"511:1:17","nodeType":"VariableDeclaration","scope":3288,"src":"504:8:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3272,"name":"int256","nodeType":"ElementaryTypeName","src":"504:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3275,"mutability":"mutable","name":"b","nameLocation":"521:1:17","nodeType":"VariableDeclaration","scope":3288,"src":"514:8:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3274,"name":"int256","nodeType":"ElementaryTypeName","src":"514:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"503:20:17"},"returnParameters":{"id":3279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3278,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3288,"src":"547:6:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3277,"name":"int256","nodeType":"ElementaryTypeName","src":"547:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"546:8:17"},"scope":3354,"src":"491:101:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3331,"nodeType":"Block","src":"797:162:17","statements":[{"assignments":[3299],"declarations":[{"constant":false,"id":3299,"mutability":"mutable","name":"x","nameLocation":"866:1:17","nodeType":"VariableDeclaration","scope":3331,"src":"859:8:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3298,"name":"int256","nodeType":"ElementaryTypeName","src":"859:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3312,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3300,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3291,"src":"871:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3301,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"875:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"871:5:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3303,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"870:7:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3304,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3291,"src":"882:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3305,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"886:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"882:5:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3307,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"881:7:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"892:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"881:12:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3310,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:14:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:24:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"859:35:17"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3313,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3299,"src":"911:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3318,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3299,"src":"931:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3317,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"923:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3316,"name":"uint256","nodeType":"ElementaryTypeName","src":"923:7:17","typeDescriptions":{}}},"id":3319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"923:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":3320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"937:3:17","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"923:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3315,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"916:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":3314,"name":"int256","nodeType":"ElementaryTypeName","src":"916:6:17","typeDescriptions":{}}},"id":3322,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"916:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3323,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3291,"src":"945:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3324,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"949:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"945:5:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3326,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"944:7:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"916:35:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3328,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"915:37:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"911:41:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3297,"id":3330,"nodeType":"Return","src":"904:48:17"}]},"documentation":{"id":3289,"nodeType":"StructuredDocumentation","src":"598:126:17","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":3332,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"738:7:17","nodeType":"FunctionDefinition","parameters":{"id":3294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3291,"mutability":"mutable","name":"a","nameLocation":"753:1:17","nodeType":"VariableDeclaration","scope":3332,"src":"746:8:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3290,"name":"int256","nodeType":"ElementaryTypeName","src":"746:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3293,"mutability":"mutable","name":"b","nameLocation":"763:1:17","nodeType":"VariableDeclaration","scope":3332,"src":"756:8:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3292,"name":"int256","nodeType":"ElementaryTypeName","src":"756:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"745:20:17"},"returnParameters":{"id":3297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3296,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3332,"src":"789:6:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3295,"name":"int256","nodeType":"ElementaryTypeName","src":"789:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"788:8:17"},"scope":3354,"src":"729:230:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3352,"nodeType":"Block","src":"1103:158:17","statements":[{"id":3351,"nodeType":"UncheckedBlock","src":"1113:142:17","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3342,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3335,"src":"1228:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":3343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1233:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1228:6:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1241:2:17","subExpression":{"id":3346,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3335,"src":"1242:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1228:15:17","trueExpression":{"id":3345,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3335,"src":"1237:1:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3341,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1220:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3340,"name":"uint256","nodeType":"ElementaryTypeName","src":"1220:7:17","typeDescriptions":{}}},"id":3349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1220:24:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3339,"id":3350,"nodeType":"Return","src":"1213:31:17"}]}]},"documentation":{"id":3333,"nodeType":"StructuredDocumentation","src":"965:78:17","text":" @dev Returns the absolute unsigned value of a signed value."},"id":3353,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1057:3:17","nodeType":"FunctionDefinition","parameters":{"id":3336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3335,"mutability":"mutable","name":"n","nameLocation":"1068:1:17","nodeType":"VariableDeclaration","scope":3353,"src":"1061:8:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3334,"name":"int256","nodeType":"ElementaryTypeName","src":"1061:6:17","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1060:10:17"},"returnParameters":{"id":3339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3338,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3353,"src":"1094:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3337,"name":"uint256","nodeType":"ElementaryTypeName","src":"1094:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1093:9:17"},"scope":3354,"src":"1048:213:17","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3355,"src":"216:1047:17","usedErrors":[],"usedEvents":[]}],"src":"109:1155:17"},"id":17},"contracts/core/CertificationAuthority.sol":{"ast":{"absolutePath":"contracts/core/CertificationAuthority.sol","exportedSymbols":{"AccessControl":[295],"CertificationAuthority":[3819],"Context":[1904],"DataTypes":[5387],"ERC165":[2183],"ERC721":[1556],"ERC721Burnable":[1720],"ERC721URIStorage":[1846],"Events":[5625],"IERC165":[2195],"IERC4906":[406],"IERC721":[1673],"IERC721Errors":[500],"IERC721Metadata":[1874],"IERC721Receiver":[1691],"RolesManager":[4561],"Strings":[2159]},"id":3820,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3356,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:18"},{"absolutePath":"contracts/core/RolesManager.sol","file":"./RolesManager.sol","id":3358,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3820,"sourceUnit":4562,"src":"369:48:18","symbolAliases":[{"foreign":{"id":3357,"name":"RolesManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4561,"src":"377:12:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/utils/Events.sol","file":"../utils/Events.sol","id":3360,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3820,"sourceUnit":5626,"src":"418:43:18","symbolAliases":[{"foreign":{"id":3359,"name":"Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5625,"src":"426:6:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/utils/DataTypes.sol","file":"../utils/DataTypes.sol","id":3362,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3820,"sourceUnit":5388,"src":"462:49:18","symbolAliases":[{"foreign":{"id":3361,"name":"DataTypes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5387,"src":"470:9:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","id":3363,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3820,"sourceUnit":1557,"src":"512:57:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","file":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","id":3364,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3820,"sourceUnit":1847,"src":"570:78:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol","file":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol","id":3365,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3820,"sourceUnit":1721,"src":"649:76:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","file":"@openzeppelin/contracts/access/AccessControl.sol","id":3367,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3820,"sourceUnit":296,"src":"726:81:18","symbolAliases":[{"foreign":{"id":3366,"name":"AccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":295,"src":"735:13:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3368,"name":"RolesManager","nameLocations":["844:12:18"],"nodeType":"IdentifierPath","referencedDeclaration":4561,"src":"844:12:18"},"id":3369,"nodeType":"InheritanceSpecifier","src":"844:12:18"},{"baseName":{"id":3370,"name":"ERC721URIStorage","nameLocations":["858:16:18"],"nodeType":"IdentifierPath","referencedDeclaration":1846,"src":"858:16:18"},"id":3371,"nodeType":"InheritanceSpecifier","src":"858:16:18"},{"baseName":{"id":3372,"name":"ERC721Burnable","nameLocations":["876:14:18"],"nodeType":"IdentifierPath","referencedDeclaration":1720,"src":"876:14:18"},"id":3373,"nodeType":"InheritanceSpecifier","src":"876:14:18"}],"canonicalName":"CertificationAuthority","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3819,"linearizedBaseContracts":[3819,1720,1846,1556,500,1874,406,1673,4561,5451,295,2183,2195,378,1904],"name":"CertificationAuthority","nameLocation":"818:22:18","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3377,"libraryName":{"id":3374,"name":"DataTypes","nameLocations":["903:9:18"],"nodeType":"IdentifierPath","referencedDeclaration":5387,"src":"903:9:18"},"nodeType":"UsingForDirective","src":"897:41:18","typeName":{"id":3376,"nodeType":"UserDefinedTypeName","pathNode":{"id":3375,"name":"DataTypes.Enterprise","nameLocations":["917:9:18","927:10:18"],"nodeType":"IdentifierPath","referencedDeclaration":5319,"src":"917:20:18"},"referencedDeclaration":5319,"src":"917:20:18","typeDescriptions":{"typeIdentifier":"t_struct$_Enterprise_$5319_storage_ptr","typeString":"struct DataTypes.Enterprise"}}},{"global":false,"id":3381,"libraryName":{"id":3378,"name":"DataTypes","nameLocations":["949:9:18"],"nodeType":"IdentifierPath","referencedDeclaration":5387,"src":"949:9:18"},"nodeType":"UsingForDirective","src":"943:44:18","typeName":{"id":3380,"nodeType":"UserDefinedTypeName","pathNode":{"id":3379,"name":"DataTypes.Certification","nameLocations":["963:9:18","973:13:18"],"nodeType":"IdentifierPath","referencedDeclaration":5302,"src":"963:23:18"},"referencedDeclaration":5302,"src":"963:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage_ptr","typeString":"struct DataTypes.Certification"}}},{"global":false,"id":3385,"libraryName":{"id":3382,"name":"DataTypes","nameLocations":["998:9:18"],"nodeType":"IdentifierPath","referencedDeclaration":5387,"src":"998:9:18"},"nodeType":"UsingForDirective","src":"992:47:18","typeName":{"id":3384,"nodeType":"UserDefinedTypeName","pathNode":{"id":3383,"name":"DataTypes.InspectionReport","nameLocations":["1012:9:18","1022:16:18"],"nodeType":"IdentifierPath","referencedDeclaration":5334,"src":"1012:26:18"},"referencedDeclaration":5334,"src":"1012:26:18","typeDescriptions":{"typeIdentifier":"t_struct$_InspectionReport_$5334_storage_ptr","typeString":"struct DataTypes.InspectionReport"}}},{"constant":false,"functionSelector":"236e0929","id":3390,"mutability":"mutable","name":"certifications","nameLocation":"1096:14:18","nodeType":"VariableDeclaration","scope":3819,"src":"1045:65:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Certification_$5302_storage_$","typeString":"mapping(address => struct DataTypes.Certification)"},"typeName":{"id":3389,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3386,"name":"address","nodeType":"ElementaryTypeName","src":"1053:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1045:43:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Certification_$5302_storage_$","typeString":"mapping(address => struct DataTypes.Certification)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3388,"nodeType":"UserDefinedTypeName","pathNode":{"id":3387,"name":"DataTypes.Certification","nameLocations":["1064:9:18","1074:13:18"],"nodeType":"IdentifierPath","referencedDeclaration":5302,"src":"1064:23:18"},"referencedDeclaration":5302,"src":"1064:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage_ptr","typeString":"struct DataTypes.Certification"}}},"visibility":"public"},{"constant":false,"id":3394,"mutability":"mutable","name":"_tokenToEnterprise","nameLocation":"1152:18:18","nodeType":"VariableDeclaration","scope":3819,"src":"1116:54:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":3393,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3391,"name":"uint256","nodeType":"ElementaryTypeName","src":"1124:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1116:27:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3392,"name":"address","nodeType":"ElementaryTypeName","src":"1135:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":3396,"mutability":"mutable","name":"_tokenIdCounter","nameLocation":"1192:15:18","nodeType":"VariableDeclaration","scope":3819,"src":"1176:31:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3395,"name":"uint256","nodeType":"ElementaryTypeName","src":"1176:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":3415,"nodeType":"Block","src":"1269:107:18","statements":[{"expression":{"arguments":[{"id":3404,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"1290:18:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3405,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1310:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1314:6:18","memberName":"sender","nodeType":"MemberAccess","src":"1310:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3403,"name":"_setupRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4185,"src":"1279:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":3407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1279:42:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3408,"nodeType":"ExpressionStatement","src":"1279:42:18"},{"expression":{"arguments":[{"id":3410,"name":"CERTIFIER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3851,"src":"1342:14:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3411,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1358:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1362:6:18","memberName":"sender","nodeType":"MemberAccess","src":"1358:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3409,"name":"_setupRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4185,"src":"1331:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":3413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1331:38:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3414,"nodeType":"ExpressionStatement","src":"1331:38:18"}]},"id":3416,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"456e74657270726973654365727469666963617465","id":3399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1235:23:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_040efaef7afcd831926f16c6fc45edaa26bc9ceaa4289f4c38a3d2e9750b08cf","typeString":"literal_string \"EnterpriseCertificate\""},"value":"EnterpriseCertificate"},{"hexValue":"4543455254","id":3400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1260:7:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_6581d53196243049f9a3498f360d6fc291f7e00f342c1079baca98472651f556","typeString":"literal_string \"ECERT\""},"value":"ECERT"}],"id":3401,"kind":"baseConstructorSpecifier","modifierName":{"id":3398,"name":"ERC721","nameLocations":["1228:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":1556,"src":"1228:6:18"},"nodeType":"ModifierInvocation","src":"1228:40:18"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3397,"nodeType":"ParameterList","parameters":[],"src":"1225:2:18"},"returnParameters":{"id":3402,"nodeType":"ParameterList","parameters":[],"src":"1269:0:18"},"scope":3819,"src":"1214:162:18","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3494,"nodeType":"Block","src":"2463:859:18","statements":[{"condition":{"expression":{"baseExpression":{"id":3434,"name":"certifications","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3390,"src":"2477:14:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Certification_$5302_storage_$","typeString":"mapping(address => struct DataTypes.Certification storage ref)"}},"id":3436,"indexExpression":{"id":3435,"name":"enterpriseAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"2492:17:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2477:33:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage","typeString":"struct DataTypes.Certification storage ref"}},"id":3437,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2511:11:18","memberName":"isCertified","nodeType":"MemberAccess","referencedDeclaration":5299,"src":"2477:45:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3442,"nodeType":"IfStatement","src":"2473:135:18","trueBody":{"id":3441,"nodeType":"Block","src":"2524:84:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3438,"name":"CertificationAuthority__EnterpriseAlreadyCertified","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5424,"src":"2545:50:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3439,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2545:52:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3440,"nodeType":"RevertStatement","src":"2538:59:18"}]}},{"assignments":[3444],"declarations":[{"constant":false,"id":3444,"mutability":"mutable","name":"tokenId","nameLocation":"2626:7:18","nodeType":"VariableDeclaration","scope":3494,"src":"2618:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3443,"name":"uint256","nodeType":"ElementaryTypeName","src":"2618:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3447,"initialValue":{"id":3446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2636:17:18","subExpression":{"id":3445,"name":"_tokenIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3396,"src":"2636:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2618:35:18"},{"expression":{"arguments":[{"id":3449,"name":"enterpriseAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"2673:17:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3450,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3444,"src":"2692:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3448,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[1178,1204],"referencedDeclaration":1178,"src":"2663:9:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2663:37:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3452,"nodeType":"ExpressionStatement","src":"2663:37:18"},{"expression":{"arguments":[{"id":3454,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3444,"src":"2723:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3455,"name":"_metadataURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3423,"src":"2732:12:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3453,"name":"_setTokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1845,"src":"2710:12:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":3456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2710:35:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3457,"nodeType":"ExpressionStatement","src":"2710:35:18"},{"expression":{"id":3474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3458,"name":"certifications","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3390,"src":"2756:14:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Certification_$5302_storage_$","typeString":"mapping(address => struct DataTypes.Certification storage ref)"}},"id":3460,"indexExpression":{"id":3459,"name":"enterpriseAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"2771:17:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2756:33:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage","typeString":"struct DataTypes.Certification storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3463,"name":"_industry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3421,"src":"2840:9:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3464,"name":"_metadataURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3423,"src":"2876:12:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"expression":{"id":3465,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967292,"src":"2915:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2921:9:18","memberName":"timestamp","nodeType":"MemberAccess","src":"2915:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3467,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967292,"src":"2956:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2962:9:18","memberName":"timestamp","nodeType":"MemberAccess","src":"2956:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3469,"name":"validityDurationSeconds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3425,"src":"2974:23:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2956:41:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":3471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3024:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":3472,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3444,"src":"3051:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3461,"name":"DataTypes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5387,"src":"2792:9:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_DataTypes_$5387_$","typeString":"type(library DataTypes)"}},"id":3462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2802:13:18","memberName":"Certification","nodeType":"MemberAccess","referencedDeclaration":5302,"src":"2792:23:18","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Certification_$5302_storage_ptr_$","typeString":"type(struct DataTypes.Certification storage pointer)"}},"id":3473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["2830:8:18","2863:11:18","2902:11:18","2944:10:18","3011:11:18","3042:7:18"],"names":["industry","metadataURI","certifiedAt","expiryDate","isCertified","tokenId"],"nodeType":"FunctionCall","src":"2792:277:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_memory_ptr","typeString":"struct DataTypes.Certification memory"}},"src":"2756:313:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage","typeString":"struct DataTypes.Certification storage ref"}},"id":3475,"nodeType":"ExpressionStatement","src":"2756:313:18"},{"expression":{"id":3480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3476,"name":"_tokenToEnterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"3080:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3478,"indexExpression":{"id":3477,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3444,"src":"3099:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3080:27:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3479,"name":"enterpriseAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"3110:17:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3080:47:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3481,"nodeType":"ExpressionStatement","src":"3080:47:18"},{"eventCall":{"arguments":[{"id":3485,"name":"enterpriseAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"3184:17:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3486,"name":"_industry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3421,"src":"3215:9:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3487,"name":"_metadataURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3423,"src":"3238:12:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3488,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967292,"src":"3264:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3270:9:18","memberName":"timestamp","nodeType":"MemberAccess","src":"3264:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3490,"name":"validityDurationSeconds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3425,"src":"3282:23:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3264:41:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3482,"name":"Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5625,"src":"3143:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Events_$5625_$","typeString":"type(library Events)"}},"id":3484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3150:20:18","memberName":"CertificationGranted","nodeType":"MemberAccess","referencedDeclaration":5464,"src":"3143:27:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (address,string memory,string memory,uint256)"}},"id":3492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3143:172:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3493,"nodeType":"EmitStatement","src":"3138:177:18"}]},"documentation":{"id":3417,"nodeType":"StructuredDocumentation","src":"1572:637:18","text":" @dev This function is used to certify enterprises\n @dev Only the Certifier can certify enterprises\n @dev mints and assigns NFT certificate to an enterprise\n @dev sets token URI to metadata URI of a certificate\n @param enterpriseAddress The address of the enterprise to be certified\n @param _industry The industry of the enterprise to be certified\n @param _metadataURI The metadata URI of the certificate (IPFS hash)\n @param validityDurationSeconds The validity duration of the certificate in seconds\n @notice Emits CertificationGranted event on successful enterprise certification"},"functionSelector":"0bcce45b","id":3495,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":3428,"name":"enterpriseAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"2419:17:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3429,"kind":"modifierInvocation","modifierName":{"id":3427,"name":"onlyValidAddress","nameLocations":["2402:16:18"],"nodeType":"IdentifierPath","referencedDeclaration":3897,"src":"2402:16:18"},"nodeType":"ModifierInvocation","src":"2402:35:18"},{"arguments":[{"id":3431,"name":"CERTIFIER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3851,"src":"2447:14:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3432,"kind":"modifierInvocation","modifierName":{"id":3430,"name":"onlyRole","nameLocations":["2438:8:18"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"2438:8:18"},"nodeType":"ModifierInvocation","src":"2438:24:18"}],"name":"certifyEnterprise","nameLocation":"2224:17:18","nodeType":"FunctionDefinition","parameters":{"id":3426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3419,"mutability":"mutable","name":"enterpriseAddress","nameLocation":"2259:17:18","nodeType":"VariableDeclaration","scope":3495,"src":"2251:25:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3418,"name":"address","nodeType":"ElementaryTypeName","src":"2251:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3421,"mutability":"mutable","name":"_industry","nameLocation":"2300:9:18","nodeType":"VariableDeclaration","scope":3495,"src":"2286:23:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3420,"name":"string","nodeType":"ElementaryTypeName","src":"2286:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3423,"mutability":"mutable","name":"_metadataURI","nameLocation":"2333:12:18","nodeType":"VariableDeclaration","scope":3495,"src":"2319:26:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3422,"name":"string","nodeType":"ElementaryTypeName","src":"2319:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3425,"mutability":"mutable","name":"validityDurationSeconds","nameLocation":"2363:23:18","nodeType":"VariableDeclaration","scope":3495,"src":"2355:31:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3424,"name":"uint256","nodeType":"ElementaryTypeName","src":"2355:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2241:151:18"},"returnParameters":{"id":3433,"nodeType":"ParameterList","parameters":[],"src":"2463:0:18"},"scope":3819,"src":"2215:1107:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3556,"nodeType":"Block","src":"4116:430:18","statements":[{"assignments":[3514],"declarations":[{"constant":false,"id":3514,"mutability":"mutable","name":"cert","nameLocation":"4158:4:18","nodeType":"VariableDeclaration","scope":3556,"src":"4126:36:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage_ptr","typeString":"struct DataTypes.Certification"},"typeName":{"id":3513,"nodeType":"UserDefinedTypeName","pathNode":{"id":3512,"name":"DataTypes.Certification","nameLocations":["4126:9:18","4136:13:18"],"nodeType":"IdentifierPath","referencedDeclaration":5302,"src":"4126:23:18"},"referencedDeclaration":5302,"src":"4126:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage_ptr","typeString":"struct DataTypes.Certification"}},"visibility":"internal"}],"id":3518,"initialValue":{"baseExpression":{"id":3515,"name":"certifications","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3390,"src":"4165:14:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Certification_$5302_storage_$","typeString":"mapping(address => struct DataTypes.Certification storage ref)"}},"id":3517,"indexExpression":{"id":3516,"name":"enterpriseAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3498,"src":"4180:17:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4165:33:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage","typeString":"struct DataTypes.Certification storage ref"}},"nodeType":"VariableDeclarationStatement","src":"4126:72:18"},{"condition":{"id":3521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4212:17:18","subExpression":{"expression":{"id":3519,"name":"cert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3514,"src":"4213:4:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage_ptr","typeString":"struct DataTypes.Certification storage pointer"}},"id":3520,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4218:11:18","memberName":"isCertified","nodeType":"MemberAccess","referencedDeclaration":5299,"src":"4213:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3526,"nodeType":"IfStatement","src":"4208:106:18","trueBody":{"id":3525,"nodeType":"Block","src":"4231:83:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3522,"name":"CertificationAuthority__EnterpriseNotCertifiedYet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5426,"src":"4252:49:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4252:51:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3524,"nodeType":"RevertStatement","src":"4245:58:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3527,"name":"cert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3514,"src":"4328:4:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage_ptr","typeString":"struct DataTypes.Certification storage pointer"}},"id":3528,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4333:7:18","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":5301,"src":"4328:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4344:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4328:17:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3543,"nodeType":"IfStatement","src":"4324:120:18","trueBody":{"id":3542,"nodeType":"Block","src":"4347:97:18","statements":[{"expression":{"arguments":[{"expression":{"id":3532,"name":"cert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3514,"src":"4366:4:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage_ptr","typeString":"struct DataTypes.Certification storage pointer"}},"id":3533,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4371:7:18","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":5301,"src":"4366:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3531,"name":"burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1719,"src":"4361:4:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":3534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4361:18:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3535,"nodeType":"ExpressionStatement","src":"4361:18:18"},{"expression":{"id":3540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"4394:39:18","subExpression":{"baseExpression":{"id":3536,"name":"_tokenToEnterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"4401:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3539,"indexExpression":{"expression":{"id":3537,"name":"cert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3514,"src":"4420:4:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage_ptr","typeString":"struct DataTypes.Certification storage pointer"}},"id":3538,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4425:7:18","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":5301,"src":"4420:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4401:32:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3541,"nodeType":"ExpressionStatement","src":"4394:39:18"}]}},{"expression":{"id":3548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3544,"name":"cert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3514,"src":"4454:4:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage_ptr","typeString":"struct DataTypes.Certification storage pointer"}},"id":3546,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4459:11:18","memberName":"isCertified","nodeType":"MemberAccess","referencedDeclaration":5299,"src":"4454:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":3547,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4473:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"4454:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3549,"nodeType":"ExpressionStatement","src":"4454:24:18"},{"eventCall":{"arguments":[{"id":3553,"name":"enterpriseAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3498,"src":"4521:17:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3550,"name":"Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5625,"src":"4493:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Events_$5625_$","typeString":"type(library Events)"}},"id":3552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4500:20:18","memberName":"CertificationRevoked","nodeType":"MemberAccess","referencedDeclaration":5468,"src":"4493:27:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3554,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4493:46:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3555,"nodeType":"EmitStatement","src":"4488:51:18"}]},"documentation":{"id":3496,"nodeType":"StructuredDocumentation","src":"3522:406:18","text":" @dev allows the revocation of certifications from enterprises\n @dev Only the `Certifier` or `Super Admin` can revoke certifications\n @dev allows automatic destruction of NFT certificates via oppenzeppelin's`burn` function\n @param enterpriseAddress The address of the enterprise to be revoked\n @notice Emits CertificationRevoked event on successful enterprise revocation"},"functionSelector":"b83cc3b3","id":3557,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":3501,"name":"enterpriseAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3498,"src":"4031:17:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3502,"kind":"modifierInvocation","modifierName":{"id":3500,"name":"onlyValidAddress","nameLocations":["4014:16:18"],"nodeType":"IdentifierPath","referencedDeclaration":3897,"src":"4014:16:18"},"nodeType":"ModifierInvocation","src":"4014:35:18"},{"arguments":[{"id":3504,"name":"CERTIFIER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3851,"src":"4067:14:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3505,"kind":"modifierInvocation","modifierName":{"id":3503,"name":"onlyRole","nameLocations":["4058:8:18"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"4058:8:18"},"nodeType":"ModifierInvocation","src":"4058:24:18"},{"arguments":[{"id":3507,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"4092:18:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3508,"kind":"modifierInvocation","modifierName":{"id":3506,"name":"onlyRole","nameLocations":["4083:8:18"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"4083:8:18"},"nodeType":"ModifierInvocation","src":"4083:28:18"}],"name":"revokeCertification","nameLocation":"3942:19:18","nodeType":"FunctionDefinition","parameters":{"id":3499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3498,"mutability":"mutable","name":"enterpriseAddress","nameLocation":"3970:17:18","nodeType":"VariableDeclaration","scope":3557,"src":"3962:25:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3497,"name":"address","nodeType":"ElementaryTypeName","src":"3962:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3961:27:18"},"returnParameters":{"id":3509,"nodeType":"ParameterList","parameters":[],"src":"4116:0:18"},"scope":3819,"src":"3933:613:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3619,"nodeType":"Block","src":"4860:562:18","statements":[{"assignments":[3567],"declarations":[{"constant":false,"id":3567,"mutability":"mutable","name":"cert","nameLocation":"4902:4:18","nodeType":"VariableDeclaration","scope":3619,"src":"4870:36:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage_ptr","typeString":"struct DataTypes.Certification"},"typeName":{"id":3566,"nodeType":"UserDefinedTypeName","pathNode":{"id":3565,"name":"DataTypes.Certification","nameLocations":["4870:9:18","4880:13:18"],"nodeType":"IdentifierPath","referencedDeclaration":5302,"src":"4870:23:18"},"referencedDeclaration":5302,"src":"4870:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage_ptr","typeString":"struct DataTypes.Certification"}},"visibility":"internal"}],"id":3571,"initialValue":{"baseExpression":{"id":3568,"name":"certifications","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3390,"src":"4909:14:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Certification_$5302_storage_$","typeString":"mapping(address => struct DataTypes.Certification storage ref)"}},"id":3570,"indexExpression":{"id":3569,"name":"enterpriseAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"4924:17:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4909:33:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage","typeString":"struct DataTypes.Certification storage ref"}},"nodeType":"VariableDeclarationStatement","src":"4870:72:18"},{"condition":{"id":3574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4957:17:18","subExpression":{"expression":{"id":3572,"name":"cert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3567,"src":"4958:4:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage_ptr","typeString":"struct DataTypes.Certification storage pointer"}},"id":3573,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4963:11:18","memberName":"isCertified","nodeType":"MemberAccess","referencedDeclaration":5299,"src":"4958:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3579,"nodeType":"IfStatement","src":"4953:106:18","trueBody":{"id":3578,"nodeType":"Block","src":"4976:83:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3575,"name":"CertificationAuthority__EnterpriseNotCertifiedYet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5426,"src":"4997:49:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4997:51:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3577,"nodeType":"RevertStatement","src":"4990:58:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3580,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967292,"src":"5072:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5078:9:18","memberName":"timestamp","nodeType":"MemberAccess","src":"5072:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3582,"name":"cert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3567,"src":"5090:4:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage_ptr","typeString":"struct DataTypes.Certification storage pointer"}},"id":3583,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5095:10:18","memberName":"expiryDate","nodeType":"MemberAccess","referencedDeclaration":5297,"src":"5090:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:33:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3589,"nodeType":"IfStatement","src":"5068:123:18","trueBody":{"id":3588,"nodeType":"Block","src":"5107:84:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3585,"name":"CertificationAuthority__CertificationNotExpiredYet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5428,"src":"5128:50:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5128:52:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3587,"nodeType":"RevertStatement","src":"5121:59:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3590,"name":"cert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3567,"src":"5205:4:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage_ptr","typeString":"struct DataTypes.Certification storage pointer"}},"id":3591,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5210:7:18","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":5301,"src":"5205:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5221:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5205:17:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3606,"nodeType":"IfStatement","src":"5201:119:18","trueBody":{"id":3605,"nodeType":"Block","src":"5224:96:18","statements":[{"expression":{"arguments":[{"expression":{"id":3595,"name":"cert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3567,"src":"5243:4:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage_ptr","typeString":"struct DataTypes.Certification storage pointer"}},"id":3596,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5248:7:18","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":5301,"src":"5243:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3594,"name":"burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1719,"src":"5238:4:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":3597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5238:18:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3598,"nodeType":"ExpressionStatement","src":"5238:18:18"},{"expression":{"id":3603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"5270:39:18","subExpression":{"baseExpression":{"id":3599,"name":"_tokenToEnterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"5277:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3602,"indexExpression":{"expression":{"id":3600,"name":"cert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3567,"src":"5296:4:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage_ptr","typeString":"struct DataTypes.Certification storage pointer"}},"id":3601,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5301:7:18","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":5301,"src":"5296:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5277:32:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3604,"nodeType":"ExpressionStatement","src":"5270:39:18"}]}},{"expression":{"id":3611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3607,"name":"cert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3567,"src":"5330:4:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage_ptr","typeString":"struct DataTypes.Certification storage pointer"}},"id":3609,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5335:11:18","memberName":"isCertified","nodeType":"MemberAccess","referencedDeclaration":5299,"src":"5330:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":3610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5349:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5330:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3612,"nodeType":"ExpressionStatement","src":"5330:24:18"},{"eventCall":{"arguments":[{"id":3616,"name":"enterpriseAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"5397:17:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3613,"name":"Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5625,"src":"5369:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Events_$5625_$","typeString":"type(library Events)"}},"id":3615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5376:20:18","memberName":"CertificationRevoked","nodeType":"MemberAccess","referencedDeclaration":5468,"src":"5369:27:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3617,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5369:46:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3618,"nodeType":"EmitStatement","src":"5364:51:18"}]},"documentation":{"id":3558,"nodeType":"StructuredDocumentation","src":"4557:237:18","text":" @dev alloes automatic revokation of NFT certificates after expiry duration \n @dev callable by anyone as long as expiry date kicks in\n @notice Emits CertificationRevoked event on successful enterprise revocation"},"functionSelector":"808b0557","id":3620,"implemented":true,"kind":"function","modifiers":[],"name":"revokeIfExpired","nameLocation":"4808:15:18","nodeType":"FunctionDefinition","parameters":{"id":3561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3560,"mutability":"mutable","name":"enterpriseAddress","nameLocation":"4832:17:18","nodeType":"VariableDeclaration","scope":3620,"src":"4824:25:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3559,"name":"address","nodeType":"ElementaryTypeName","src":"4824:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4823:27:18"},"returnParameters":{"id":3562,"nodeType":"ParameterList","parameters":[],"src":"4860:0:18"},"scope":3819,"src":"4799:623:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[1113],"body":{"id":3658,"nodeType":"Block","src":"5752:252:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3633,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3626,"src":"5842:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5858:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3635,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5850:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3634,"name":"address","nodeType":"ElementaryTypeName","src":"5850:7:18","typeDescriptions":{}}},"id":3637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5850:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5842:18:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3650,"nodeType":"IfStatement","src":"5838:111:18","trueBody":{"id":3649,"nodeType":"Block","src":"5862:87:18","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3640,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3622,"src":"5884:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5898:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3642,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5890:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3641,"name":"address","nodeType":"ElementaryTypeName","src":"5890:7:18","typeDescriptions":{}}},"id":3644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5890:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5884:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43657274696669636174657320617265206e6f6e2d7472616e7366657261626c65","id":3646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5902:35:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_3054708b0a11b38511bc7d353b1f656d5fdd977e39d245846af7029381d44603","typeString":"literal_string \"Certificates are non-transferable\""},"value":"Certificates are non-transferable"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3054708b0a11b38511bc7d353b1f656d5fdd977e39d245846af7029381d44603","typeString":"literal_string \"Certificates are non-transferable\""}],"id":3639,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"5876:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5876:62:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3648,"nodeType":"ExpressionStatement","src":"5876:62:18"}]}},{"expression":{"arguments":[{"id":3653,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3622,"src":"5979:2:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3654,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3624,"src":"5983:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3655,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3626,"src":"5992:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3651,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967271,"src":"5965:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_CertificationAuthority_$3819_$","typeString":"type(contract super CertificationAuthority)"}},"id":3652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5971:7:18","memberName":"_update","nodeType":"MemberAccess","referencedDeclaration":1113,"src":"5965:13:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":3656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5965:32:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3632,"id":3657,"nodeType":"Return","src":"5958:39:18"}]},"id":3659,"implemented":true,"kind":"function","modifiers":[],"name":"_update","nameLocation":"5627:7:18","nodeType":"FunctionDefinition","overrides":{"id":3629,"nodeType":"OverrideSpecifier","overrides":[{"id":3628,"name":"ERC721","nameLocations":["5726:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":1556,"src":"5726:6:18"}],"src":"5717:16:18"},"parameters":{"id":3627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3622,"mutability":"mutable","name":"to","nameLocation":"5652:2:18","nodeType":"VariableDeclaration","scope":3659,"src":"5644:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3621,"name":"address","nodeType":"ElementaryTypeName","src":"5644:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3624,"mutability":"mutable","name":"tokenId","nameLocation":"5672:7:18","nodeType":"VariableDeclaration","scope":3659,"src":"5664:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3623,"name":"uint256","nodeType":"ElementaryTypeName","src":"5664:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3626,"mutability":"mutable","name":"auth","nameLocation":"5697:4:18","nodeType":"VariableDeclaration","scope":3659,"src":"5689:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3625,"name":"address","nodeType":"ElementaryTypeName","src":"5689:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5634:73:18"},"returnParameters":{"id":3632,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3631,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3659,"src":"5743:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3630,"name":"address","nodeType":"ElementaryTypeName","src":"5743:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5742:9:18"},"scope":3819,"src":"5618:386:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3684,"nodeType":"Block","src":"6312:160:18","statements":[{"assignments":[3670],"declarations":[{"constant":false,"id":3670,"mutability":"mutable","name":"cert","nameLocation":"6354:4:18","nodeType":"VariableDeclaration","scope":3684,"src":"6322:36:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage_ptr","typeString":"struct DataTypes.Certification"},"typeName":{"id":3669,"nodeType":"UserDefinedTypeName","pathNode":{"id":3668,"name":"DataTypes.Certification","nameLocations":["6322:9:18","6332:13:18"],"nodeType":"IdentifierPath","referencedDeclaration":5302,"src":"6322:23:18"},"referencedDeclaration":5302,"src":"6322:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage_ptr","typeString":"struct DataTypes.Certification"}},"visibility":"internal"}],"id":3674,"initialValue":{"baseExpression":{"id":3671,"name":"certifications","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3390,"src":"6361:14:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Certification_$5302_storage_$","typeString":"mapping(address => struct DataTypes.Certification storage ref)"}},"id":3673,"indexExpression":{"id":3672,"name":"enterpriseAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3661,"src":"6376:17:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6361:33:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage","typeString":"struct DataTypes.Certification storage ref"}},"nodeType":"VariableDeclarationStatement","src":"6322:72:18"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3675,"name":"cert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3670,"src":"6411:4:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage_ptr","typeString":"struct DataTypes.Certification storage pointer"}},"id":3676,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6416:11:18","memberName":"isCertified","nodeType":"MemberAccess","referencedDeclaration":5299,"src":"6411:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3677,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967292,"src":"6431:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6437:9:18","memberName":"timestamp","nodeType":"MemberAccess","src":"6431:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":3679,"name":"cert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3670,"src":"6450:4:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage_ptr","typeString":"struct DataTypes.Certification storage pointer"}},"id":3680,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6455:10:18","memberName":"expiryDate","nodeType":"MemberAccess","referencedDeclaration":5297,"src":"6450:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6431:34:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6411:54:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3665,"id":3683,"nodeType":"Return","src":"6404:61:18"}]},"functionSelector":"261e85cd","id":3685,"implemented":true,"kind":"function","modifiers":[],"name":"isCertificationValid","nameLocation":"6209:20:18","nodeType":"FunctionDefinition","parameters":{"id":3662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3661,"mutability":"mutable","name":"enterpriseAddress","nameLocation":"6238:17:18","nodeType":"VariableDeclaration","scope":3685,"src":"6230:25:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3660,"name":"address","nodeType":"ElementaryTypeName","src":"6230:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6229:27:18"},"returnParameters":{"id":3665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3664,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3685,"src":"6302:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3663,"name":"bool","nodeType":"ElementaryTypeName","src":"6302:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6301:6:18"},"scope":3819,"src":"6200:272:18","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3702,"nodeType":"Block","src":"6550:114:18","statements":[{"assignments":[3693],"declarations":[{"constant":false,"id":3693,"mutability":"mutable","name":"enterprise","nameLocation":"6568:10:18","nodeType":"VariableDeclaration","scope":3702,"src":"6560:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3692,"name":"address","nodeType":"ElementaryTypeName","src":"6560:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3697,"initialValue":{"baseExpression":{"id":3694,"name":"_tokenToEnterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"6581:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3696,"indexExpression":{"id":3695,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3687,"src":"6600:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6581:27:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6560:48:18"},{"expression":{"arguments":[{"id":3699,"name":"enterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"6646:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3698,"name":"isCertificationValid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3685,"src":"6625:20:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6625:32:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3691,"id":3701,"nodeType":"Return","src":"6618:39:18"}]},"functionSelector":"a5ce413a","id":3703,"implemented":true,"kind":"function","modifiers":[],"name":"isCertificateValid","nameLocation":"6487:18:18","nodeType":"FunctionDefinition","parameters":{"id":3688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3687,"mutability":"mutable","name":"tokenId","nameLocation":"6514:7:18","nodeType":"VariableDeclaration","scope":3703,"src":"6506:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3686,"name":"uint256","nodeType":"ElementaryTypeName","src":"6506:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6505:17:18"},"returnParameters":{"id":3691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3690,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3703,"src":"6544:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3689,"name":"bool","nodeType":"ElementaryTypeName","src":"6544:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6543:6:18"},"scope":3819,"src":"6478:186:18","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3759,"nodeType":"Block","src":"7231:425:18","statements":[{"assignments":[3721],"declarations":[{"constant":false,"id":3721,"mutability":"mutable","name":"cert","nameLocation":"7273:4:18","nodeType":"VariableDeclaration","scope":3759,"src":"7241:36:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage_ptr","typeString":"struct DataTypes.Certification"},"typeName":{"id":3720,"nodeType":"UserDefinedTypeName","pathNode":{"id":3719,"name":"DataTypes.Certification","nameLocations":["7241:9:18","7251:13:18"],"nodeType":"IdentifierPath","referencedDeclaration":5302,"src":"7241:23:18"},"referencedDeclaration":5302,"src":"7241:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage_ptr","typeString":"struct DataTypes.Certification"}},"visibility":"internal"}],"id":3725,"initialValue":{"baseExpression":{"id":3722,"name":"certifications","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3390,"src":"7280:14:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Certification_$5302_storage_$","typeString":"mapping(address => struct DataTypes.Certification storage ref)"}},"id":3724,"indexExpression":{"id":3723,"name":"enterpriseAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"7295:17:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7280:33:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage","typeString":"struct DataTypes.Certification storage ref"}},"nodeType":"VariableDeclarationStatement","src":"7241:72:18"},{"condition":{"id":3728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7327:17:18","subExpression":{"expression":{"id":3726,"name":"cert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3721,"src":"7328:4:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage_ptr","typeString":"struct DataTypes.Certification storage pointer"}},"id":3727,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7333:11:18","memberName":"isCertified","nodeType":"MemberAccess","referencedDeclaration":5299,"src":"7328:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3733,"nodeType":"IfStatement","src":"7323:106:18","trueBody":{"id":3732,"nodeType":"Block","src":"7346:83:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3729,"name":"CertificationAuthority__EnterpriseNotCertifiedYet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5426,"src":"7367:49:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3730,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7367:51:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3731,"nodeType":"RevertStatement","src":"7360:58:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3734,"name":"cert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3721,"src":"7443:4:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage_ptr","typeString":"struct DataTypes.Certification storage pointer"}},"id":3735,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7448:7:18","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":5301,"src":"7443:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7459:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7443:17:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3745,"nodeType":"IfStatement","src":"7439:90:18","trueBody":{"id":3744,"nodeType":"Block","src":"7462:67:18","statements":[{"expression":{"arguments":[{"expression":{"id":3739,"name":"cert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3721,"src":"7489:4:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage_ptr","typeString":"struct DataTypes.Certification storage pointer"}},"id":3740,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7494:7:18","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":5301,"src":"7489:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3741,"name":"newMetadataURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"7503:14:18","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":3738,"name":"_setTokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1845,"src":"7476:12:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":3742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7476:42:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3743,"nodeType":"ExpressionStatement","src":"7476:42:18"}]}},{"expression":{"id":3750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3746,"name":"cert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3721,"src":"7539:4:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage_ptr","typeString":"struct DataTypes.Certification storage pointer"}},"id":3748,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7544:11:18","memberName":"metadataURI","nodeType":"MemberAccess","referencedDeclaration":5293,"src":"7539:16:18","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3749,"name":"newMetadataURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"7558:14:18","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"src":"7539:33:18","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3751,"nodeType":"ExpressionStatement","src":"7539:33:18"},{"eventCall":{"arguments":[{"id":3755,"name":"enterpriseAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"7615:17:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3756,"name":"newMetadataURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"7634:14:18","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"expression":{"id":3752,"name":"Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5625,"src":"7587:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Events_$5625_$","typeString":"type(library Events)"}},"id":3754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7594:20:18","memberName":"CertificationUpdated","nodeType":"MemberAccess","referencedDeclaration":5474,"src":"7587:27:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_string_memory_ptr_$returns$__$","typeString":"function (address,string memory)"}},"id":3757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7587:62:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3758,"nodeType":"EmitStatement","src":"7582:67:18"}]},"documentation":{"id":3704,"nodeType":"StructuredDocumentation","src":"6679:359:18","text":" @dev updates the metadata URI of the NFT certificate\n @dev Only the `Certifier` can update certification metadata URI\n @param enterpriseAddress The address of the enterprise to be updated\n @param newMetadataURI The new metadata URI of the certificate\n @notice Emits CertificationUpdated event on successful metadata update"},"functionSelector":"90f201be","id":3760,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":3711,"name":"enterpriseAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"7187:17:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3712,"kind":"modifierInvocation","modifierName":{"id":3710,"name":"onlyValidAddress","nameLocations":["7170:16:18"],"nodeType":"IdentifierPath","referencedDeclaration":3897,"src":"7170:16:18"},"nodeType":"ModifierInvocation","src":"7170:35:18"},{"arguments":[{"id":3714,"name":"CERTIFIER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3851,"src":"7215:14:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3715,"kind":"modifierInvocation","modifierName":{"id":3713,"name":"onlyRole","nameLocations":["7206:8:18"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"7206:8:18"},"nodeType":"ModifierInvocation","src":"7206:24:18"}],"name":"updateCertificationMetadata","nameLocation":"7052:27:18","nodeType":"FunctionDefinition","parameters":{"id":3709,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3706,"mutability":"mutable","name":"enterpriseAddress","nameLocation":"7097:17:18","nodeType":"VariableDeclaration","scope":3760,"src":"7089:25:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3705,"name":"address","nodeType":"ElementaryTypeName","src":"7089:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3708,"mutability":"mutable","name":"newMetadataURI","nameLocation":"7140:14:18","nodeType":"VariableDeclaration","scope":3760,"src":"7124:30:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":3707,"name":"string","nodeType":"ElementaryTypeName","src":"7124:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7079:81:18"},"returnParameters":{"id":3716,"nodeType":"ParameterList","parameters":[],"src":"7231:0:18"},"scope":3819,"src":"7043:613:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3772,"nodeType":"Block","src":"7986:57:18","statements":[{"expression":{"baseExpression":{"id":3768,"name":"certifications","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3390,"src":"8003:14:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Certification_$5302_storage_$","typeString":"mapping(address => struct DataTypes.Certification storage ref)"}},"id":3770,"indexExpression":{"id":3769,"name":"enterpriseAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3762,"src":"8018:17:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8003:33:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage","typeString":"struct DataTypes.Certification storage ref"}},"functionReturnParameters":3767,"id":3771,"nodeType":"Return","src":"7996:40:18"}]},"functionSelector":"c88cc6ac","id":3773,"implemented":true,"kind":"function","modifiers":[],"name":"getCertification","nameLocation":"7861:16:18","nodeType":"FunctionDefinition","parameters":{"id":3763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3762,"mutability":"mutable","name":"enterpriseAddress","nameLocation":"7886:17:18","nodeType":"VariableDeclaration","scope":3773,"src":"7878:25:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3761,"name":"address","nodeType":"ElementaryTypeName","src":"7878:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7877:27:18"},"returnParameters":{"id":3767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3766,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3773,"src":"7950:30:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_memory_ptr","typeString":"struct DataTypes.Certification"},"typeName":{"id":3765,"nodeType":"UserDefinedTypeName","pathNode":{"id":3764,"name":"DataTypes.Certification","nameLocations":["7950:9:18","7960:13:18"],"nodeType":"IdentifierPath","referencedDeclaration":5302,"src":"7950:23:18"},"referencedDeclaration":5302,"src":"7950:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_Certification_$5302_storage_ptr","typeString":"struct DataTypes.Certification"}},"visibility":"internal"}],"src":"7949:32:18"},"scope":3819,"src":"7852:191:18","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3784,"nodeType":"Block","src":"8156:51:18","statements":[{"expression":{"baseExpression":{"id":3780,"name":"_tokenToEnterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"8173:18:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3782,"indexExpression":{"id":3781,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3775,"src":"8192:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8173:27:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3779,"id":3783,"nodeType":"Return","src":"8166:34:18"}]},"functionSelector":"89a912e0","id":3785,"implemented":true,"kind":"function","modifiers":[],"name":"getEnterpriseByTokenId","nameLocation":"8058:22:18","nodeType":"FunctionDefinition","parameters":{"id":3776,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3775,"mutability":"mutable","name":"tokenId","nameLocation":"8089:7:18","nodeType":"VariableDeclaration","scope":3785,"src":"8081:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3774,"name":"uint256","nodeType":"ElementaryTypeName","src":"8081:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8080:17:18"},"returnParameters":{"id":3779,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3778,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3785,"src":"8143:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3777,"name":"address","nodeType":"ElementaryTypeName","src":"8143:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8142:9:18"},"scope":3819,"src":"8049:158:18","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[743,1826],"body":{"id":3800,"nodeType":"Block","src":"8419:47:18","statements":[{"expression":{"arguments":[{"id":3797,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3787,"src":"8451:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3795,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967271,"src":"8436:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_CertificationAuthority_$3819_$","typeString":"type(contract super CertificationAuthority)"}},"id":3796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8442:8:18","memberName":"tokenURI","nodeType":"MemberAccess","referencedDeclaration":1826,"src":"8436:14:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) view returns (string memory)"}},"id":3798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8436:23:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3794,"id":3799,"nodeType":"Return","src":"8429:30:18"}]},"functionSelector":"c87b56dd","id":3801,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"8286:8:18","nodeType":"FunctionDefinition","overrides":{"id":3791,"nodeType":"OverrideSpecifier","overrides":[{"id":3789,"name":"ERC721","nameLocations":["8357:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":1556,"src":"8357:6:18"},{"id":3790,"name":"ERC721URIStorage","nameLocations":["8365:16:18"],"nodeType":"IdentifierPath","referencedDeclaration":1846,"src":"8365:16:18"}],"src":"8348:34:18"},"parameters":{"id":3788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3787,"mutability":"mutable","name":"tokenId","nameLocation":"8303:7:18","nodeType":"VariableDeclaration","scope":3801,"src":"8295:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3786,"name":"uint256","nodeType":"ElementaryTypeName","src":"8295:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8294:17:18"},"returnParameters":{"id":3794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3793,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3801,"src":"8400:13:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3792,"name":"string","nodeType":"ElementaryTypeName","src":"8400:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8399:15:18"},"scope":3819,"src":"8277:189:18","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[62,648,1769],"body":{"id":3817,"nodeType":"Block","src":"8632:60:18","statements":[{"expression":{"arguments":[{"id":3814,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3803,"src":"8673:11:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":3812,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967271,"src":"8649:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_CertificationAuthority_$3819_$","typeString":"type(contract super CertificationAuthority)"}},"id":3813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8655:17:18","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1769,"src":"8649:23:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":3815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8649:36:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3811,"id":3816,"nodeType":"Return","src":"8642:43:18"}]},"functionSelector":"01ffc9a7","id":3818,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"8481:17:18","nodeType":"FunctionDefinition","overrides":{"id":3808,"nodeType":"OverrideSpecifier","overrides":[{"id":3805,"name":"ERC721","nameLocations":["8564:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":1556,"src":"8564:6:18"},{"id":3806,"name":"ERC721URIStorage","nameLocations":["8572:16:18"],"nodeType":"IdentifierPath","referencedDeclaration":1846,"src":"8572:16:18"},{"id":3807,"name":"AccessControl","nameLocations":["8590:13:18"],"nodeType":"IdentifierPath","referencedDeclaration":295,"src":"8590:13:18"}],"src":"8555:49:18"},"parameters":{"id":3804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3803,"mutability":"mutable","name":"interfaceId","nameLocation":"8506:11:18","nodeType":"VariableDeclaration","scope":3818,"src":"8499:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3802,"name":"bytes4","nodeType":"ElementaryTypeName","src":"8499:6:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"8498:20:18"},"returnParameters":{"id":3811,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3810,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3818,"src":"8622:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3809,"name":"bool","nodeType":"ElementaryTypeName","src":"8622:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8621:6:18"},"scope":3819,"src":"8472:220:18","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":3820,"src":"809:7885:18","usedErrors":[305,308,458,463,472,477,482,489,494,499,5392,5394,5396,5398,5400,5402,5404,5406,5408,5410,5412,5414,5416,5418,5420,5422,5424,5426,5428,5430,5432,5434,5436,5438,5440,5442,5444,5446,5448,5450],"usedEvents":[317,326,335,398,405,1572,1581,1590,5464,5468,5474,5556,5560,5568,5576,5582,5588]}],"src":"32:8663:18"},"id":18},"contracts/core/Predevelopment.sol":{"ast":{"absolutePath":"contracts/core/Predevelopment.sol","exportedSymbols":{"CertificationAuthority":[3819],"DataTypes":[5387],"Events":[5625],"InspectionManager":[5286],"Predevelopment":[3832],"RolesManager":[4561]},"id":3833,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3821,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:19"},{"absolutePath":"contracts/core/RolesManager.sol","file":"../core/RolesManager.sol","id":3823,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3833,"sourceUnit":4562,"src":"58:54:19","symbolAliases":[{"foreign":{"id":3822,"name":"RolesManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4561,"src":"66:12:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/core/CertificationAuthority.sol","file":"../core/CertificationAuthority.sol","id":3825,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3833,"sourceUnit":3820,"src":"113:74:19","symbolAliases":[{"foreign":{"id":3824,"name":"CertificationAuthority","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3819,"src":"121:22:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/modules/InspectionManager.sol","file":"../modules/InspectionManager.sol","id":3827,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3833,"sourceUnit":5287,"src":"188:67:19","symbolAliases":[{"foreign":{"id":3826,"name":"InspectionManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5286,"src":"196:17:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/utils/Events.sol","file":"../utils/Events.sol","id":3829,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3833,"sourceUnit":5626,"src":"256:43:19","symbolAliases":[{"foreign":{"id":3828,"name":"Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5625,"src":"264:6:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/utils/DataTypes.sol","file":"../utils/DataTypes.sol","id":3831,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3833,"sourceUnit":5388,"src":"300:49:19","symbolAliases":[{"foreign":{"id":3830,"name":"DataTypes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5387,"src":"308:9:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Predevelopment","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3832,"linearizedBaseContracts":[3832],"name":"Predevelopment","nameLocation":"360:14:19","nodeType":"ContractDefinition","nodes":[],"scope":3833,"src":"351:32:19","usedErrors":[],"usedEvents":[]}],"src":"32:351:19"},"id":19},"contracts/core/RolesManager.sol":{"ast":{"absolutePath":"contracts/core/RolesManager.sol","exportedSymbols":{"AccessControl":[295],"DataTypes":[5387],"Errors":[5451],"Events":[5625],"RolesManager":[4561]},"id":4562,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3834,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:20"},{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","file":"@openzeppelin/contracts/access/AccessControl.sol","id":3836,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4562,"sourceUnit":296,"src":"228:81:20","symbolAliases":[{"foreign":{"id":3835,"name":"AccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":295,"src":"237:13:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/utils/Events.sol","file":"../utils/Events.sol","id":3838,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4562,"sourceUnit":5626,"src":"310:45:20","symbolAliases":[{"foreign":{"id":3837,"name":"Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5625,"src":"319:6:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/utils/Errors.sol","file":"../utils/Errors.sol","id":3840,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4562,"sourceUnit":5452,"src":"356:45:20","symbolAliases":[{"foreign":{"id":3839,"name":"Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"365:6:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/utils/DataTypes.sol","file":"../utils/DataTypes.sol","id":3842,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4562,"sourceUnit":5388,"src":"402:51:20","symbolAliases":[{"foreign":{"id":3841,"name":"DataTypes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5387,"src":"411:9:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3843,"name":"AccessControl","nameLocations":["481:13:20"],"nodeType":"IdentifierPath","referencedDeclaration":295,"src":"481:13:20"},"id":3844,"nodeType":"InheritanceSpecifier","src":"481:13:20"},{"baseName":{"id":3845,"name":"Errors","nameLocations":["496:6:20"],"nodeType":"IdentifierPath","referencedDeclaration":5451,"src":"496:6:20"},"id":3846,"nodeType":"InheritanceSpecifier","src":"496:6:20"}],"canonicalName":"RolesManager","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4561,"linearizedBaseContracts":[4561,5451,295,2183,2195,378,1904],"name":"RolesManager","nameLocation":"465:12:20","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"69d0b517","id":3851,"mutability":"constant","name":"CERTIFIER_ROLE","nameLocation":"534:14:20","nodeType":"VariableDeclaration","scope":4561,"src":"510:74:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3847,"name":"bytes32","nodeType":"ElementaryTypeName","src":"510:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"43455254494659494e475f424f44595f524f4c45","id":3849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"561:22:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_c41a06b26ced3a23b7bf835a0918ade784f4055ded86d18305f528f47a726052","typeString":"literal_string \"CERTIFYING_BODY_ROLE\""},"value":"CERTIFYING_BODY_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c41a06b26ced3a23b7bf835a0918ade784f4055ded86d18305f528f47a726052","typeString":"literal_string \"CERTIFYING_BODY_ROLE\""}],"id":3848,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"551:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"551:33:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"e3a3c522","id":3856,"mutability":"constant","name":"INSPECTOR_ROLE","nameLocation":"614:14:20","nodeType":"VariableDeclaration","scope":4561,"src":"590:77:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3852,"name":"bytes32","nodeType":"ElementaryTypeName","src":"590:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"494e5350454354494f4e5f4d414e414745525f524f4c45","id":3854,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"641:25:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_06fa31d7a92d9fa9a8898ac41d86ee9b13863605a361c85ae5d6010d5de4f280","typeString":"literal_string \"INSPECTION_MANAGER_ROLE\""},"value":"INSPECTION_MANAGER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_06fa31d7a92d9fa9a8898ac41d86ee9b13863605a361c85ae5d6010d5de4f280","typeString":"literal_string \"INSPECTION_MANAGER_ROLE\""}],"id":3853,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"631:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"631:36:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"6e1d616e","id":3861,"mutability":"constant","name":"AUDITOR_ROLE","nameLocation":"697:12:20","nodeType":"VariableDeclaration","scope":4561,"src":"673:64:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3857,"name":"bytes32","nodeType":"ElementaryTypeName","src":"673:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"41554449544f525f524f4c45","id":3859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"722:14:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_59a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f5","typeString":"literal_string \"AUDITOR_ROLE\""},"value":"AUDITOR_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_59a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f5","typeString":"literal_string \"AUDITOR_ROLE\""}],"id":3858,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"712:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"712:25:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"68dd17a5","id":3866,"mutability":"constant","name":"ENTERPRISE_ROLE","nameLocation":"767:15:20","nodeType":"VariableDeclaration","scope":4561,"src":"743:70:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3862,"name":"bytes32","nodeType":"ElementaryTypeName","src":"743:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"454e54455250524953455f524f4c45","id":3864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"795:17:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_920994fc3bfe282f3f20cdccf1b7c5e46c63d963e822d98efff90abd41c12e21","typeString":"literal_string \"ENTERPRISE_ROLE\""},"value":"ENTERPRISE_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_920994fc3bfe282f3f20cdccf1b7c5e46c63d963e822d98efff90abd41c12e21","typeString":"literal_string \"ENTERPRISE_ROLE\""}],"id":3863,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"785:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"785:28:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"784fee0e","id":3871,"mutability":"constant","name":"CERTIFICATE_FACTORY_ROLE","nameLocation":"843:24:20","nodeType":"VariableDeclaration","scope":4561,"src":"819:88:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3867,"name":"bytes32","nodeType":"ElementaryTypeName","src":"819:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"43455254494649434154455f464143544f52595f524f4c45","id":3869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"880:26:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_aa0ec51d0bf03ce5511c9ffc9de2b423d73d1faacd808abf2ac89ccea8a3ecf2","typeString":"literal_string \"CERTIFICATE_FACTORY_ROLE\""},"value":"CERTIFICATE_FACTORY_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_aa0ec51d0bf03ce5511c9ffc9de2b423d73d1faacd808abf2ac89ccea8a3ecf2","typeString":"literal_string \"CERTIFICATE_FACTORY_ROLE\""}],"id":3868,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"870:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3870,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"870:37:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"3ca7c02a","id":3876,"mutability":"constant","name":"PUBLIC_ROLE","nameLocation":"937:11:20","nodeType":"VariableDeclaration","scope":4561,"src":"913:62:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3872,"name":"bytes32","nodeType":"ElementaryTypeName","src":"913:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"5055424c49435f524f4c45","id":3874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"961:13:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_ee244ef9da0b2f89a74b208ea9fe1a639ebdf634027d9e1f092b58c39954fa37","typeString":"literal_string \"PUBLIC_ROLE\""},"value":"PUBLIC_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ee244ef9da0b2f89a74b208ea9fe1a639ebdf634027d9e1f092b58c39954fa37","typeString":"literal_string \"PUBLIC_ROLE\""}],"id":3873,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"951:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3875,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"951:24:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"functionSelector":"b5617ef7","id":3880,"mutability":"mutable","name":"publicRoleExpiry","nameLocation":"1017:16:20","nodeType":"VariableDeclaration","scope":4561,"src":"982:51:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":3879,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3877,"name":"address","nodeType":"ElementaryTypeName","src":"990:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"982:27:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3878,"name":"uint256","nodeType":"ElementaryTypeName","src":"1001:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"body":{"id":3896,"nodeType":"Block","src":"1104:85:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3884,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3882,"src":"1114:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1133:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3886,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1125:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3885,"name":"address","nodeType":"ElementaryTypeName","src":"1125:7:20","typeDescriptions":{}}},"id":3888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1125:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1114:21:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3894,"nodeType":"IfStatement","src":"1110:67:20","trueBody":{"id":3893,"nodeType":"Block","src":"1137:40:20","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3890,"name":"InvalidAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5392,"src":"1154:14:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3891,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1154:16:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3892,"nodeType":"RevertStatement","src":"1147:23:20"}]}},{"id":3895,"nodeType":"PlaceholderStatement","src":"1182:1:20"}]},"id":3897,"name":"onlyValidAddress","nameLocation":"1070:16:20","nodeType":"ModifierDefinition","parameters":{"id":3883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3882,"mutability":"mutable","name":"account","nameLocation":"1095:7:20","nodeType":"VariableDeclaration","scope":3897,"src":"1087:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3881,"name":"address","nodeType":"ElementaryTypeName","src":"1087:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1086:17:20"},"src":"1061:128:20","virtual":false,"visibility":"internal"},{"body":{"id":3912,"nodeType":"Block","src":"1210:108:20","statements":[{"expression":{"arguments":[{"id":3901,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"1231:18:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3902,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1251:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1255:6:20","memberName":"sender","nodeType":"MemberAccess","src":"1251:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3900,"name":"_setupRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4185,"src":"1220:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":3904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1220:42:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3905,"nodeType":"ExpressionStatement","src":"1220:42:20"},{"expression":{"arguments":[{"id":3907,"name":"CERTIFIER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3851,"src":"1283:14:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3908,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1300:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1304:6:20","memberName":"sender","nodeType":"MemberAccess","src":"1300:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3906,"name":"_setupRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4185,"src":"1272:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":3910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1272:39:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3911,"nodeType":"ExpressionStatement","src":"1272:39:20"}]},"id":3913,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3898,"nodeType":"ParameterList","parameters":[],"src":"1207:2:20"},"returnParameters":{"id":3899,"nodeType":"ParameterList","parameters":[],"src":"1210:0:20"},"scope":4561,"src":"1196:122:20","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3974,"nodeType":"Block","src":"1791:575:20","statements":[{"condition":{"arguments":[{"expression":{"id":3920,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1819:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1823:6:20","memberName":"sender","nodeType":"MemberAccess","src":"1819:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3919,"name":"hasPublicRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4560,"src":"1805:13:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1805:25:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3927,"nodeType":"IfStatement","src":"1801:93:20","trueBody":{"id":3926,"nodeType":"Block","src":"1832:62:20","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3923,"name":"RolesManager__AlreadyHasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5408,"src":"1853:28:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1853:30:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3925,"nodeType":"RevertStatement","src":"1846:37:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3928,"name":"durationInHours","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"1907:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1925:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1907:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3935,"nodeType":"IfStatement","src":"1903:88:20","trueBody":{"id":3934,"nodeType":"Block","src":"1928:63:20","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3931,"name":"RolesManager__InvalidDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5410,"src":"1949:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1949:31:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3933,"nodeType":"RevertStatement","src":"1942:38:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3936,"name":"durationInHours","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"2005:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3234","id":3937,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2023:2:20","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"2005:20:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3943,"nodeType":"IfStatement","src":"2001:101:20","trueBody":{"id":3942,"nodeType":"Block","src":"2038:64:20","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3939,"name":"RolesManager__InvalidDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5410,"src":"2059:29:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2059:31:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3941,"nodeType":"RevertStatement","src":"2052:38:20"}]}},{"assignments":[3945],"declarations":[{"constant":false,"id":3945,"mutability":"mutable","name":"durationInSeconds","nameLocation":"2119:17:20","nodeType":"VariableDeclaration","scope":3974,"src":"2111:25:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3944,"name":"uint256","nodeType":"ElementaryTypeName","src":"2111:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3949,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3946,"name":"durationInHours","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"2139:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31","id":3947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2157:7:20","subdenomination":"hours","typeDescriptions":{"typeIdentifier":"t_rational_3600_by_1","typeString":"int_const 3600"},"value":"1"},"src":"2139:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2111:53:20"},{"expression":{"arguments":[{"id":3951,"name":"PUBLIC_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3876,"src":"2190:11:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3952,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"2203:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2207:6:20","memberName":"sender","nodeType":"MemberAccess","src":"2203:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3950,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"2179:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":3954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2179:35:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3955,"nodeType":"ExpressionStatement","src":"2179:35:20"},{"expression":{"id":3964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3956,"name":"publicRoleExpiry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3880,"src":"2224:16:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3959,"indexExpression":{"expression":{"id":3957,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"2241:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2245:6:20","memberName":"sender","nodeType":"MemberAccess","src":"2241:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2224:28:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3960,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967292,"src":"2255:5:20","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2261:9:20","memberName":"timestamp","nodeType":"MemberAccess","src":"2255:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3962,"name":"durationInSeconds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3945,"src":"2273:17:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2255:35:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2224:66:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3965,"nodeType":"ExpressionStatement","src":"2224:66:20"},{"eventCall":{"arguments":[{"expression":{"id":3969,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"2331:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2335:6:20","memberName":"sender","nodeType":"MemberAccess","src":"2331:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3971,"name":"durationInHours","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"2343:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3966,"name":"Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5625,"src":"2306:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Events_$5625_$","typeString":"type(library Events)"}},"id":3968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2313:17:20","memberName":"PublicRoleGranted","nodeType":"MemberAccess","referencedDeclaration":5556,"src":"2306:24:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2306:53:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3973,"nodeType":"EmitStatement","src":"2301:58:20"}]},"documentation":{"id":3914,"nodeType":"StructuredDocumentation","src":"1325:393:20","text":"----------- #claim temporary public role -------------- //\n @dev allows users to claim temporary `PUBLIC` role for `durationInHours` hours on their visit to platform\n @param durationInHours The duration in hours the user will have the `PUBLIC` role\n @notice `durationInHours` must be less than 24 hours\n @notice Emits PublicRoleGranted event on successful claim "},"functionSelector":"7780e9c1","id":3975,"implemented":true,"kind":"function","modifiers":[],"name":"claimTemporaryPublicRole","nameLocation":"1732:24:20","nodeType":"FunctionDefinition","parameters":{"id":3917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3916,"mutability":"mutable","name":"durationInHours","nameLocation":"1765:15:20","nodeType":"VariableDeclaration","scope":3975,"src":"1757:23:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3915,"name":"uint256","nodeType":"ElementaryTypeName","src":"1757:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1756:25:20"},"returnParameters":{"id":3918,"nodeType":"ParameterList","parameters":[],"src":"1791:0:20"},"scope":4561,"src":"1723:643:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3982,"nodeType":"Block","src":"2479:26:20","statements":[{"expression":{"hexValue":"3234","id":3980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2496:2:20","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"functionReturnParameters":3979,"id":3981,"nodeType":"Return","src":"2489:9:20"}]},"functionSelector":"b8ad415e","id":3983,"implemented":true,"kind":"function","modifiers":[],"name":"getMaxPublicRoleDuration","nameLocation":"2422:24:20","nodeType":"FunctionDefinition","parameters":{"id":3976,"nodeType":"ParameterList","parameters":[],"src":"2446:2:20"},"returnParameters":{"id":3979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3978,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3983,"src":"2470:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3977,"name":"uint256","nodeType":"ElementaryTypeName","src":"2470:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2469:9:20"},"scope":4561,"src":"2413:92:20","stateMutability":"pure","virtual":false,"visibility":"public"},{"body":{"id":4012,"nodeType":"Block","src":"2802:202:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3990,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3986,"src":"2830:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3989,"name":"hasPublicRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4560,"src":"2816:13:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2816:22:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":3992,"name":"publicRoleExpiry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3880,"src":"2842:16:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3994,"indexExpression":{"id":3993,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3986,"src":"2859:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2842:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3995,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967292,"src":"2870:5:20","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2876:9:20","memberName":"timestamp","nodeType":"MemberAccess","src":"2870:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2842:43:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2816:69:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4011,"nodeType":"IfStatement","src":"2812:186:20","trueBody":{"id":4010,"nodeType":"Block","src":"2887:111:20","statements":[{"expression":{"arguments":[{"id":4000,"name":"PUBLIC_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3876,"src":"2913:11:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4001,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3986,"src":"2926:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3999,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"2901:11:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":4002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2901:33:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4003,"nodeType":"ExpressionStatement","src":"2901:33:20"},{"eventCall":{"arguments":[{"id":4007,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3986,"src":"2979:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4004,"name":"Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5625,"src":"2954:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Events_$5625_$","typeString":"type(library Events)"}},"id":4006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2961:17:20","memberName":"PublicRoleExpired","nodeType":"MemberAccess","referencedDeclaration":5560,"src":"2954:24:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2954:33:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4009,"nodeType":"EmitStatement","src":"2949:38:20"}]}}]},"documentation":{"id":3984,"nodeType":"StructuredDocumentation","src":"2512:235:20","text":"--------- #  Auto-expiry check (Call periodically) ------- //\n @dev helper to check expiry of `PUBLIC` role\n @param account The account to check for role expiry\n @notice Emits PublicRoleExpired event on expiry"},"functionSelector":"25d5e87e","id":4013,"implemented":true,"kind":"function","modifiers":[],"name":"checkExpiryRoles","nameLocation":"2761:16:20","nodeType":"FunctionDefinition","parameters":{"id":3987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3986,"mutability":"mutable","name":"account","nameLocation":"2786:7:20","nodeType":"VariableDeclaration","scope":4013,"src":"2778:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3985,"name":"address","nodeType":"ElementaryTypeName","src":"2778:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2777:17:20"},"returnParameters":{"id":3988,"nodeType":"ParameterList","parameters":[],"src":"2802:0:20"},"scope":4561,"src":"2752:252:20","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4079,"nodeType":"Block","src":"3411:409:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4026,"name":"roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4017,"src":"3425:5:20","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":4027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3431:6:20","memberName":"length","nodeType":"MemberAccess","src":"3425:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3441:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3425:17:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4030,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4020,"src":"3446:8:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":4031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3455:6:20","memberName":"length","nodeType":"MemberAccess","src":"3446:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3465:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3446:20:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3425:41:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4039,"nodeType":"IfStatement","src":"3421:105:20","trueBody":{"id":4038,"nodeType":"Block","src":"3468:58:20","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4035,"name":"RolesManager__EmptyArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5412,"src":"3489:24:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3489:26:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4037,"nodeType":"RevertStatement","src":"3482:33:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4040,"name":"roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4017,"src":"3539:5:20","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":4041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3545:6:20","memberName":"length","nodeType":"MemberAccess","src":"3539:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":4042,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4020,"src":"3555:8:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":4043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3564:6:20","memberName":"length","nodeType":"MemberAccess","src":"3555:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3539:31:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4049,"nodeType":"IfStatement","src":"3535:104:20","trueBody":{"id":4048,"nodeType":"Block","src":"3572:67:20","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4045,"name":"RolesManager__ArrayLengthMismatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5414,"src":"3593:33:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3593:35:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4047,"nodeType":"RevertStatement","src":"3586:42:20"}]}},{"body":{"id":4070,"nodeType":"Block","src":"3700:58:20","statements":[{"expression":{"arguments":[{"baseExpression":{"id":4062,"name":"roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4017,"src":"3725:5:20","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":4064,"indexExpression":{"id":4063,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4051,"src":"3731:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3725:8:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":4065,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4020,"src":"3735:8:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":4067,"indexExpression":{"id":4066,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4051,"src":"3744:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3735:11:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4061,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"3714:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":4068,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3714:33:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4069,"nodeType":"ExpressionStatement","src":"3714:33:20"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4054,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4051,"src":"3677:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4055,"name":"roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4017,"src":"3681:5:20","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":4056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3687:6:20","memberName":"length","nodeType":"MemberAccess","src":"3681:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3677:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4071,"initializationExpression":{"assignments":[4051],"declarations":[{"constant":false,"id":4051,"mutability":"mutable","name":"i","nameLocation":"3670:1:20","nodeType":"VariableDeclaration","scope":4071,"src":"3662:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4050,"name":"uint256","nodeType":"ElementaryTypeName","src":"3662:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4053,"initialValue":{"hexValue":"30","id":4052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3674:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3662:13:20"},"loopExpression":{"expression":{"id":4059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3695:3:20","subExpression":{"id":4058,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4051,"src":"3695:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4060,"nodeType":"ExpressionStatement","src":"3695:3:20"},"nodeType":"ForStatement","src":"3657:101:20"},{"eventCall":{"arguments":[{"id":4075,"name":"roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4017,"src":"3797:5:20","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":4076,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4020,"src":"3804:8:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}],"expression":{"id":4072,"name":"Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5625,"src":"3773:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Events_$5625_$","typeString":"type(library Events)"}},"id":4074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3780:16:20","memberName":"BulkRolesGranted","nodeType":"MemberAccess","referencedDeclaration":5576,"src":"3773:23:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function (bytes32[] memory,address[] memory)"}},"id":4077,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3773:40:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4078,"nodeType":"EmitStatement","src":"3768:45:20"}]},"documentation":{"id":4014,"nodeType":"StructuredDocumentation","src":"3010:257:20","text":"---------- # Bulk Role Grant(Auto) ------- //\n @dev Bulk grant roles to accounts\n @param roles The array of roles to grant\n @param accounts The array of accounts to grant roles\n emits BulkRolesGranted event on successful grant"},"functionSelector":"61462f0e","id":4080,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4023,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"3391:18:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4024,"kind":"modifierInvocation","modifierName":{"id":4022,"name":"onlyRole","nameLocations":["3382:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"3382:8:20"},"nodeType":"ModifierInvocation","src":"3382:28:20"}],"name":"bulkGrantRoles","nameLocation":"3281:14:20","nodeType":"FunctionDefinition","parameters":{"id":4021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4017,"mutability":"mutable","name":"roles","nameLocation":"3324:5:20","nodeType":"VariableDeclaration","scope":4080,"src":"3305:24:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4015,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3305:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4016,"nodeType":"ArrayTypeName","src":"3305:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":4020,"mutability":"mutable","name":"accounts","nameLocation":"3358:8:20","nodeType":"VariableDeclaration","scope":4080,"src":"3339:27:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4018,"name":"address","nodeType":"ElementaryTypeName","src":"3339:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4019,"nodeType":"ArrayTypeName","src":"3339:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"3295:77:20"},"returnParameters":{"id":4025,"nodeType":"ParameterList","parameters":[],"src":"3411:0:20"},"scope":4561,"src":"3272:548:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4121,"nodeType":"Block","src":"4282:223:20","statements":[{"condition":{"id":4097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4296:20:20","subExpression":{"arguments":[{"id":4094,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4083,"src":"4305:4:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4095,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4085,"src":"4311:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4093,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"4297:7:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":4096,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4297:19:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4102,"nodeType":"IfStatement","src":"4292:90:20","trueBody":{"id":4101,"nodeType":"Block","src":"4318:64:20","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4098,"name":"RolesManager__RoleDoesNotExist","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5416,"src":"4339:30:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4339:32:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4100,"nodeType":"RevertStatement","src":"4332:39:20"}]}},{"expression":{"arguments":[{"id":4104,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4083,"src":"4403:4:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4105,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4085,"src":"4409:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4103,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"4391:11:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":4106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4391:23:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4107,"nodeType":"ExpressionStatement","src":"4391:23:20"},{"expression":{"arguments":[{"id":4109,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4083,"src":"4435:4:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4110,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4087,"src":"4441:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4108,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"4424:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":4111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4424:20:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4112,"nodeType":"ExpressionStatement","src":"4424:20:20"},{"eventCall":{"arguments":[{"id":4116,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4083,"src":"4483:4:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4117,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4085,"src":"4489:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4118,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4087,"src":"4495:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4113,"name":"Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5625,"src":"4460:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Events_$5625_$","typeString":"type(library Events)"}},"id":4115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4467:15:20","memberName":"RoleTransferred","nodeType":"MemberAccess","referencedDeclaration":5568,"src":"4460:22:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":4119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4460:38:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4120,"nodeType":"EmitStatement","src":"4455:43:20"}]},"documentation":{"id":4081,"nodeType":"StructuredDocumentation","src":"3826:319:20","text":"-------- # Safe Role Transfer ------- //\n @dev Transfers a role from one account to another\n @param role The role to transfer\n @param from The account to transfer the role from\n @param to The account to transfer the role to\n @notice Emits RoleTransferred event on successful transfer"},"functionSelector":"5cb87d26","id":4122,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4090,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"4262:18:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4091,"kind":"modifierInvocation","modifierName":{"id":4089,"name":"onlyRole","nameLocations":["4253:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"4253:8:20"},"nodeType":"ModifierInvocation","src":"4253:28:20"}],"name":"transferRole","nameLocation":"4159:12:20","nodeType":"FunctionDefinition","parameters":{"id":4088,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4083,"mutability":"mutable","name":"role","nameLocation":"4189:4:20","nodeType":"VariableDeclaration","scope":4122,"src":"4181:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4082,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4181:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4085,"mutability":"mutable","name":"from","nameLocation":"4211:4:20","nodeType":"VariableDeclaration","scope":4122,"src":"4203:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4084,"name":"address","nodeType":"ElementaryTypeName","src":"4203:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4087,"mutability":"mutable","name":"to","nameLocation":"4233:2:20","nodeType":"VariableDeclaration","scope":4122,"src":"4225:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4086,"name":"address","nodeType":"ElementaryTypeName","src":"4225:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4171:72:20"},"returnParameters":{"id":4092,"nodeType":"ParameterList","parameters":[],"src":"4282:0:20"},"scope":4561,"src":"4150:355:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4171,"nodeType":"Block","src":"4803:366:20","statements":[{"expression":{"components":[{"arguments":[{"id":4142,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"4842:18:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4143,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4124,"src":"4862:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4141,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"4834:7:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":4144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4834:36:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"id":4146,"name":"CERTIFIER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3851,"src":"4892:14:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4147,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4124,"src":"4908:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4145,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"4884:7:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":4148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4884:32:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"id":4150,"name":"INSPECTOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3856,"src":"4938:14:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4151,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4124,"src":"4954:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4149,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"4930:7:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":4152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4930:32:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"id":4154,"name":"AUDITOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3861,"src":"4984:12:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4155,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4124,"src":"4998:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4153,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"4976:7:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":4156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4976:30:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"id":4158,"name":"ENTERPRISE_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3866,"src":"5028:15:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4159,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4124,"src":"5045:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4157,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"5020:7:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":4160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5020:33:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"id":4162,"name":"CERTIFICATE_FACTORY_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3871,"src":"5075:24:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4163,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4124,"src":"5101:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4161,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"5067:7:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":4164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5067:42:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"id":4166,"name":"PUBLIC_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3876,"src":"5131:11:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4167,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4124,"src":"5144:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4165,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"5123:7:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":4168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5123:29:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4169,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4820:342:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bool_$_t_bool_$_t_bool_$_t_bool_$_t_bool_$_t_bool_$","typeString":"tuple(bool,bool,bool,bool,bool,bool,bool)"}},"functionReturnParameters":4140,"id":4170,"nodeType":"Return","src":"4813:349:20"}]},"functionSelector":"b0614db3","id":4172,"implemented":true,"kind":"function","modifiers":[],"name":"getActiveRoles","nameLocation":"4561:14:20","nodeType":"FunctionDefinition","parameters":{"id":4125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4124,"mutability":"mutable","name":"account","nameLocation":"4584:7:20","nodeType":"VariableDeclaration","scope":4172,"src":"4576:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4123,"name":"address","nodeType":"ElementaryTypeName","src":"4576:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4575:17:20"},"returnParameters":{"id":4140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4127,"mutability":"mutable","name":"isAdmin","nameLocation":"4628:7:20","nodeType":"VariableDeclaration","scope":4172,"src":"4623:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4126,"name":"bool","nodeType":"ElementaryTypeName","src":"4623:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4129,"mutability":"mutable","name":"isCertifier","nameLocation":"4650:11:20","nodeType":"VariableDeclaration","scope":4172,"src":"4645:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4128,"name":"bool","nodeType":"ElementaryTypeName","src":"4645:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4131,"mutability":"mutable","name":"isInspector","nameLocation":"4676:11:20","nodeType":"VariableDeclaration","scope":4172,"src":"4671:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4130,"name":"bool","nodeType":"ElementaryTypeName","src":"4671:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4133,"mutability":"mutable","name":"isAuditor","nameLocation":"4702:9:20","nodeType":"VariableDeclaration","scope":4172,"src":"4697:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4132,"name":"bool","nodeType":"ElementaryTypeName","src":"4697:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4135,"mutability":"mutable","name":"isEnterprise","nameLocation":"4726:12:20","nodeType":"VariableDeclaration","scope":4172,"src":"4721:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4134,"name":"bool","nodeType":"ElementaryTypeName","src":"4721:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4137,"mutability":"mutable","name":"isCertificateFactory","nameLocation":"4753:20:20","nodeType":"VariableDeclaration","scope":4172,"src":"4748:25:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4136,"name":"bool","nodeType":"ElementaryTypeName","src":"4748:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4139,"mutability":"mutable","name":"isPublic","nameLocation":"4788:8:20","nodeType":"VariableDeclaration","scope":4172,"src":"4783:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4138,"name":"bool","nodeType":"ElementaryTypeName","src":"4783:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4613:189:20"},"scope":4561,"src":"4552:617:20","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4184,"nodeType":"Block","src":"5248:34:20","statements":[{"expression":{"arguments":[{"id":4180,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"5265:4:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4181,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4176,"src":"5271:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4179,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"5254:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":4182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5254:25:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4183,"nodeType":"ExpressionStatement","src":"5254:25:20"}]},"id":4185,"implemented":true,"kind":"function","modifiers":[],"name":"_setupRole","nameLocation":"5189:10:20","nodeType":"FunctionDefinition","parameters":{"id":4177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4174,"mutability":"mutable","name":"role","nameLocation":"5208:4:20","nodeType":"VariableDeclaration","scope":4185,"src":"5200:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4173,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5200:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4176,"mutability":"mutable","name":"account","nameLocation":"5222:7:20","nodeType":"VariableDeclaration","scope":4185,"src":"5214:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4175,"name":"address","nodeType":"ElementaryTypeName","src":"5214:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5199:31:20"},"returnParameters":{"id":4178,"nodeType":"ParameterList","parameters":[],"src":"5248:0:20"},"scope":4561,"src":"5180:102:20","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":4209,"nodeType":"Block","src":"5885:111:20","statements":[{"expression":{"arguments":[{"id":4198,"name":"CERTIFIER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3851,"src":"5905:14:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4199,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4188,"src":"5921:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4197,"name":"grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"5895:9:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5895:34:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4201,"nodeType":"ExpressionStatement","src":"5895:34:20"},{"eventCall":{"arguments":[{"id":4205,"name":"CERTIFIER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3851,"src":"5964:14:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4206,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4188,"src":"5980:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4202,"name":"Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5625,"src":"5945:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Events_$5625_$","typeString":"type(library Events)"}},"id":4204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5952:11:20","memberName":"RoleGranted","nodeType":"MemberAccess","referencedDeclaration":5582,"src":"5945:18:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5945:43:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4208,"nodeType":"EmitStatement","src":"5940:48:20"}]},"documentation":{"id":4186,"nodeType":"StructuredDocumentation","src":"5575:200:20","text":"---------# GRANTING ROLES ---------//\n @dev Functions to grant roles to!\n @param account The account to grant the role to\n @notice Emits RoleGranted event on successful grant"},"functionSelector":"60376528","id":4210,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4191,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4188,"src":"5847:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4192,"kind":"modifierInvocation","modifierName":{"id":4190,"name":"onlyValidAddress","nameLocations":["5830:16:20"],"nodeType":"IdentifierPath","referencedDeclaration":3897,"src":"5830:16:20"},"nodeType":"ModifierInvocation","src":"5830:25:20"},{"arguments":[{"id":4194,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"5865:18:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4195,"kind":"modifierInvocation","modifierName":{"id":4193,"name":"onlyRole","nameLocations":["5856:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"5856:8:20"},"nodeType":"ModifierInvocation","src":"5856:28:20"}],"name":"grantCertifier","nameLocation":"5789:14:20","nodeType":"FunctionDefinition","parameters":{"id":4189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4188,"mutability":"mutable","name":"account","nameLocation":"5812:7:20","nodeType":"VariableDeclaration","scope":4210,"src":"5804:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4187,"name":"address","nodeType":"ElementaryTypeName","src":"5804:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5803:17:20"},"returnParameters":{"id":4196,"nodeType":"ParameterList","parameters":[],"src":"5885:0:20"},"scope":4561,"src":"5780:216:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4233,"nodeType":"Block","src":"6111:109:20","statements":[{"expression":{"arguments":[{"id":4222,"name":"INSPECTOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3856,"src":"6131:14:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4223,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4212,"src":"6147:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4221,"name":"grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"6121:9:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6121:34:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4225,"nodeType":"ExpressionStatement","src":"6121:34:20"},{"eventCall":{"arguments":[{"id":4229,"name":"INSPECTOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3856,"src":"6189:14:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4230,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4212,"src":"6205:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4226,"name":"Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5625,"src":"6170:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Events_$5625_$","typeString":"type(library Events)"}},"id":4228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6177:11:20","memberName":"RoleGranted","nodeType":"MemberAccess","referencedDeclaration":5582,"src":"6170:18:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6170:43:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4232,"nodeType":"EmitStatement","src":"6165:48:20"}]},"functionSelector":"456f19fc","id":4234,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4215,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4212,"src":"6074:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4216,"kind":"modifierInvocation","modifierName":{"id":4214,"name":"onlyValidAddress","nameLocations":["6057:16:20"],"nodeType":"IdentifierPath","referencedDeclaration":3897,"src":"6057:16:20"},"nodeType":"ModifierInvocation","src":"6057:25:20"},{"arguments":[{"id":4218,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"6092:18:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4219,"kind":"modifierInvocation","modifierName":{"id":4217,"name":"onlyRole","nameLocations":["6083:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"6083:8:20"},"nodeType":"ModifierInvocation","src":"6083:28:20"}],"name":"grantInspector","nameLocation":"6015:14:20","nodeType":"FunctionDefinition","parameters":{"id":4213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4212,"mutability":"mutable","name":"account","nameLocation":"6038:7:20","nodeType":"VariableDeclaration","scope":4234,"src":"6030:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4211,"name":"address","nodeType":"ElementaryTypeName","src":"6030:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6029:18:20"},"returnParameters":{"id":4220,"nodeType":"ParameterList","parameters":[],"src":"6111:0:20"},"scope":4561,"src":"6006:214:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4257,"nodeType":"Block","src":"6329:105:20","statements":[{"expression":{"arguments":[{"id":4246,"name":"AUDITOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3861,"src":"6349:12:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4247,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4236,"src":"6363:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4245,"name":"grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"6339:9:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6339:32:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4249,"nodeType":"ExpressionStatement","src":"6339:32:20"},{"eventCall":{"arguments":[{"id":4253,"name":"AUDITOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3861,"src":"6405:12:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4254,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4236,"src":"6419:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4250,"name":"Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5625,"src":"6386:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Events_$5625_$","typeString":"type(library Events)"}},"id":4252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6393:11:20","memberName":"RoleGranted","nodeType":"MemberAccess","referencedDeclaration":5582,"src":"6386:18:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6386:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4256,"nodeType":"EmitStatement","src":"6381:46:20"}]},"functionSelector":"e55b4f93","id":4258,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4239,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4236,"src":"6291:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4240,"kind":"modifierInvocation","modifierName":{"id":4238,"name":"onlyValidAddress","nameLocations":["6274:16:20"],"nodeType":"IdentifierPath","referencedDeclaration":3897,"src":"6274:16:20"},"nodeType":"ModifierInvocation","src":"6274:25:20"},{"arguments":[{"id":4242,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"6309:18:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4243,"kind":"modifierInvocation","modifierName":{"id":4241,"name":"onlyRole","nameLocations":["6300:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"6300:8:20"},"nodeType":"ModifierInvocation","src":"6300:28:20"}],"name":"grantAuditor","nameLocation":"6235:12:20","nodeType":"FunctionDefinition","parameters":{"id":4237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4236,"mutability":"mutable","name":"account","nameLocation":"6256:7:20","nodeType":"VariableDeclaration","scope":4258,"src":"6248:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4235,"name":"address","nodeType":"ElementaryTypeName","src":"6248:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6247:17:20"},"returnParameters":{"id":4244,"nodeType":"ParameterList","parameters":[],"src":"6329:0:20"},"scope":4561,"src":"6226:208:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4281,"nodeType":"Block","src":"6545:111:20","statements":[{"expression":{"arguments":[{"id":4270,"name":"ENTERPRISE_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3866,"src":"6565:15:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4271,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4260,"src":"6582:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4269,"name":"grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"6555:9:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6555:35:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4273,"nodeType":"ExpressionStatement","src":"6555:35:20"},{"eventCall":{"arguments":[{"id":4277,"name":"ENTERPRISE_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3866,"src":"6624:15:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4278,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4260,"src":"6641:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4274,"name":"Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5625,"src":"6605:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Events_$5625_$","typeString":"type(library Events)"}},"id":4276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6612:11:20","memberName":"RoleGranted","nodeType":"MemberAccess","referencedDeclaration":5582,"src":"6605:18:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6605:44:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4280,"nodeType":"EmitStatement","src":"6600:49:20"}]},"functionSelector":"1e223b2a","id":4282,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4263,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4260,"src":"6508:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4264,"kind":"modifierInvocation","modifierName":{"id":4262,"name":"onlyValidAddress","nameLocations":["6491:16:20"],"nodeType":"IdentifierPath","referencedDeclaration":3897,"src":"6491:16:20"},"nodeType":"ModifierInvocation","src":"6491:25:20"},{"arguments":[{"id":4266,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"6526:18:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4267,"kind":"modifierInvocation","modifierName":{"id":4265,"name":"onlyRole","nameLocations":["6517:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"6517:8:20"},"nodeType":"ModifierInvocation","src":"6517:28:20"}],"name":"grantEnterprise","nameLocation":"6449:15:20","nodeType":"FunctionDefinition","parameters":{"id":4261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4260,"mutability":"mutable","name":"account","nameLocation":"6473:7:20","nodeType":"VariableDeclaration","scope":4282,"src":"6465:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4259,"name":"address","nodeType":"ElementaryTypeName","src":"6465:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6464:17:20"},"returnParameters":{"id":4268,"nodeType":"ParameterList","parameters":[],"src":"6545:0:20"},"scope":4561,"src":"6440:216:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4305,"nodeType":"Block","src":"6781:129:20","statements":[{"expression":{"arguments":[{"id":4294,"name":"CERTIFICATE_FACTORY_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3871,"src":"6801:24:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4295,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"6827:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4293,"name":"grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"6791:9:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6791:44:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4297,"nodeType":"ExpressionStatement","src":"6791:44:20"},{"eventCall":{"arguments":[{"id":4301,"name":"CERTIFICATE_FACTORY_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3871,"src":"6869:24:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4302,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"6895:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4298,"name":"Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5625,"src":"6850:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Events_$5625_$","typeString":"type(library Events)"}},"id":4300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6857:11:20","memberName":"RoleGranted","nodeType":"MemberAccess","referencedDeclaration":5582,"src":"6850:18:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6850:53:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4304,"nodeType":"EmitStatement","src":"6845:58:20"}]},"functionSelector":"aa52617c","id":4306,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4287,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"6743:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4288,"kind":"modifierInvocation","modifierName":{"id":4286,"name":"onlyValidAddress","nameLocations":["6726:16:20"],"nodeType":"IdentifierPath","referencedDeclaration":3897,"src":"6726:16:20"},"nodeType":"ModifierInvocation","src":"6726:25:20"},{"arguments":[{"id":4290,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"6761:18:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4291,"kind":"modifierInvocation","modifierName":{"id":4289,"name":"onlyRole","nameLocations":["6752:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"6752:8:20"},"nodeType":"ModifierInvocation","src":"6752:28:20"}],"name":"grantCertificateFactory","nameLocation":"6676:23:20","nodeType":"FunctionDefinition","parameters":{"id":4285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4284,"mutability":"mutable","name":"account","nameLocation":"6708:7:20","nodeType":"VariableDeclaration","scope":4306,"src":"6700:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4283,"name":"address","nodeType":"ElementaryTypeName","src":"6700:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6699:17:20"},"returnParameters":{"id":4292,"nodeType":"ParameterList","parameters":[],"src":"6781:0:20"},"scope":4561,"src":"6667:243:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4329,"nodeType":"Block","src":"7021:103:20","statements":[{"expression":{"arguments":[{"id":4318,"name":"PUBLIC_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3876,"src":"7041:11:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4319,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4308,"src":"7054:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4317,"name":"grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"7031:9:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7031:31:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4321,"nodeType":"ExpressionStatement","src":"7031:31:20"},{"eventCall":{"arguments":[{"id":4325,"name":"PUBLIC_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3876,"src":"7096:11:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4326,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4308,"src":"7109:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4322,"name":"Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5625,"src":"7077:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Events_$5625_$","typeString":"type(library Events)"}},"id":4324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7084:11:20","memberName":"RoleGranted","nodeType":"MemberAccess","referencedDeclaration":5582,"src":"7077:18:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7077:40:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4328,"nodeType":"EmitStatement","src":"7072:45:20"}]},"functionSelector":"57c03371","id":4330,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4311,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4308,"src":"6984:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4312,"kind":"modifierInvocation","modifierName":{"id":4310,"name":"onlyValidAddress","nameLocations":["6967:16:20"],"nodeType":"IdentifierPath","referencedDeclaration":3897,"src":"6967:16:20"},"nodeType":"ModifierInvocation","src":"6967:25:20"},{"arguments":[{"id":4314,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"7002:18:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4315,"kind":"modifierInvocation","modifierName":{"id":4313,"name":"onlyRole","nameLocations":["6993:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"6993:8:20"},"nodeType":"ModifierInvocation","src":"6993:28:20"}],"name":"grantPublicRole","nameLocation":"6925:15:20","nodeType":"FunctionDefinition","parameters":{"id":4309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4308,"mutability":"mutable","name":"account","nameLocation":"6949:7:20","nodeType":"VariableDeclaration","scope":4330,"src":"6941:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4307,"name":"address","nodeType":"ElementaryTypeName","src":"6941:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6940:17:20"},"returnParameters":{"id":4316,"nodeType":"ParameterList","parameters":[],"src":"7021:0:20"},"scope":4561,"src":"6916:208:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4354,"nodeType":"Block","src":"7831:110:20","statements":[{"expression":{"arguments":[{"id":4343,"name":"CERTIFIER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3851,"src":"7852:14:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4344,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4333,"src":"7868:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4342,"name":"revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"7841:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7841:35:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4346,"nodeType":"ExpressionStatement","src":"7841:35:20"},{"eventCall":{"arguments":[{"id":4350,"name":"CERTIFIER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3851,"src":"7910:14:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4351,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4333,"src":"7926:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4347,"name":"Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5625,"src":"7891:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Events_$5625_$","typeString":"type(library Events)"}},"id":4349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7898:11:20","memberName":"RoleRevoked","nodeType":"MemberAccess","referencedDeclaration":5588,"src":"7891:18:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7891:43:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4353,"nodeType":"EmitStatement","src":"7886:48:20"}]},"documentation":{"id":4331,"nodeType":"StructuredDocumentation","src":"7505:211:20","text":"------------- # REVOKING ROLES ------------- //\n @dev Functions to revoke roles\n @param account The account to revoke the role from\n @notice Emits RoleRevoked event on successful revoke"},"functionSelector":"fc810286","id":4355,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4336,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4333,"src":"7793:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4337,"kind":"modifierInvocation","modifierName":{"id":4335,"name":"onlyValidAddress","nameLocations":["7776:16:20"],"nodeType":"IdentifierPath","referencedDeclaration":3897,"src":"7776:16:20"},"nodeType":"ModifierInvocation","src":"7776:25:20"},{"arguments":[{"id":4339,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"7811:18:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4340,"kind":"modifierInvocation","modifierName":{"id":4338,"name":"onlyRole","nameLocations":["7802:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"7802:8:20"},"nodeType":"ModifierInvocation","src":"7802:28:20"}],"name":"revokeCertifierRole","nameLocation":"7730:19:20","nodeType":"FunctionDefinition","parameters":{"id":4334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4333,"mutability":"mutable","name":"account","nameLocation":"7758:7:20","nodeType":"VariableDeclaration","scope":4355,"src":"7750:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4332,"name":"address","nodeType":"ElementaryTypeName","src":"7750:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7749:17:20"},"returnParameters":{"id":4341,"nodeType":"ParameterList","parameters":[],"src":"7831:0:20"},"scope":4561,"src":"7721:220:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4371,"nodeType":"Block","src":"8056:52:20","statements":[{"expression":{"arguments":[{"id":4367,"name":"INSPECTOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3856,"src":"8077:14:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4368,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4357,"src":"8093:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4366,"name":"revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"8066:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8066:35:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4370,"nodeType":"ExpressionStatement","src":"8066:35:20"}]},"functionSelector":"bd7ca7ba","id":4372,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4360,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4357,"src":"8019:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4361,"kind":"modifierInvocation","modifierName":{"id":4359,"name":"onlyValidAddress","nameLocations":["8002:16:20"],"nodeType":"IdentifierPath","referencedDeclaration":3897,"src":"8002:16:20"},"nodeType":"ModifierInvocation","src":"8002:25:20"},{"arguments":[{"id":4363,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"8037:18:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4364,"kind":"modifierInvocation","modifierName":{"id":4362,"name":"onlyRole","nameLocations":["8028:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"8028:8:20"},"nodeType":"ModifierInvocation","src":"8028:28:20"}],"name":"revokeInspectorRole","nameLocation":"7956:19:20","nodeType":"FunctionDefinition","parameters":{"id":4358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4357,"mutability":"mutable","name":"account","nameLocation":"7984:7:20","nodeType":"VariableDeclaration","scope":4372,"src":"7976:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4356,"name":"address","nodeType":"ElementaryTypeName","src":"7976:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7975:17:20"},"returnParameters":{"id":4365,"nodeType":"ParameterList","parameters":[],"src":"8056:0:20"},"scope":4561,"src":"7947:161:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4395,"nodeType":"Block","src":"8221:98:20","statements":[{"expression":{"arguments":[{"id":4384,"name":"AUDITOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3861,"src":"8238:12:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4385,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4374,"src":"8252:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4383,"name":"revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"8227:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4386,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8227:33:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4387,"nodeType":"ExpressionStatement","src":"8227:33:20"},{"eventCall":{"arguments":[{"id":4391,"name":"AUDITOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3861,"src":"8290:12:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4392,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4374,"src":"8304:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4388,"name":"Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5625,"src":"8271:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Events_$5625_$","typeString":"type(library Events)"}},"id":4390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8278:11:20","memberName":"RoleRevoked","nodeType":"MemberAccess","referencedDeclaration":5588,"src":"8271:18:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8271:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4394,"nodeType":"EmitStatement","src":"8266:46:20"}]},"functionSelector":"3e251518","id":4396,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4377,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4374,"src":"8184:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4378,"kind":"modifierInvocation","modifierName":{"id":4376,"name":"onlyValidAddress","nameLocations":["8167:16:20"],"nodeType":"IdentifierPath","referencedDeclaration":3897,"src":"8167:16:20"},"nodeType":"ModifierInvocation","src":"8167:25:20"},{"arguments":[{"id":4380,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"8202:18:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4381,"kind":"modifierInvocation","modifierName":{"id":4379,"name":"onlyRole","nameLocations":["8193:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"8193:8:20"},"nodeType":"ModifierInvocation","src":"8193:28:20"}],"name":"revokeAuditorRole","nameLocation":"8123:17:20","nodeType":"FunctionDefinition","parameters":{"id":4375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4374,"mutability":"mutable","name":"account","nameLocation":"8149:7:20","nodeType":"VariableDeclaration","scope":4396,"src":"8141:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4373,"name":"address","nodeType":"ElementaryTypeName","src":"8141:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8140:17:20"},"returnParameters":{"id":4382,"nodeType":"ParameterList","parameters":[],"src":"8221:0:20"},"scope":4561,"src":"8114:205:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4419,"nodeType":"Block","src":"8435:112:20","statements":[{"expression":{"arguments":[{"id":4408,"name":"ENTERPRISE_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3866,"src":"8456:15:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4409,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4398,"src":"8473:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4407,"name":"revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"8445:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8445:36:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4411,"nodeType":"ExpressionStatement","src":"8445:36:20"},{"eventCall":{"arguments":[{"id":4415,"name":"ENTERPRISE_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3866,"src":"8515:15:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4416,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4398,"src":"8532:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4412,"name":"Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5625,"src":"8496:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Events_$5625_$","typeString":"type(library Events)"}},"id":4414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8503:11:20","memberName":"RoleRevoked","nodeType":"MemberAccess","referencedDeclaration":5588,"src":"8496:18:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8496:44:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4418,"nodeType":"EmitStatement","src":"8491:49:20"}]},"functionSelector":"7e5effa4","id":4420,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4401,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4398,"src":"8398:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4402,"kind":"modifierInvocation","modifierName":{"id":4400,"name":"onlyValidAddress","nameLocations":["8381:16:20"],"nodeType":"IdentifierPath","referencedDeclaration":3897,"src":"8381:16:20"},"nodeType":"ModifierInvocation","src":"8381:25:20"},{"arguments":[{"id":4404,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"8416:18:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4405,"kind":"modifierInvocation","modifierName":{"id":4403,"name":"onlyRole","nameLocations":["8407:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"8407:8:20"},"nodeType":"ModifierInvocation","src":"8407:28:20"}],"name":"revokeEnterpriseRole","nameLocation":"8334:20:20","nodeType":"FunctionDefinition","parameters":{"id":4399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4398,"mutability":"mutable","name":"account","nameLocation":"8363:7:20","nodeType":"VariableDeclaration","scope":4420,"src":"8355:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4397,"name":"address","nodeType":"ElementaryTypeName","src":"8355:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8354:17:20"},"returnParameters":{"id":4406,"nodeType":"ParameterList","parameters":[],"src":"8435:0:20"},"scope":4561,"src":"8325:222:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4443,"nodeType":"Block","src":"8672:130:20","statements":[{"expression":{"arguments":[{"id":4432,"name":"CERTIFICATE_FACTORY_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3871,"src":"8693:24:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4433,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4422,"src":"8719:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4431,"name":"revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"8682:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4434,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8682:45:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4435,"nodeType":"ExpressionStatement","src":"8682:45:20"},{"eventCall":{"arguments":[{"id":4439,"name":"CERTIFICATE_FACTORY_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3871,"src":"8761:24:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4440,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4422,"src":"8787:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4436,"name":"Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5625,"src":"8742:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Events_$5625_$","typeString":"type(library Events)"}},"id":4438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8749:11:20","memberName":"RoleRevoked","nodeType":"MemberAccess","referencedDeclaration":5588,"src":"8742:18:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4441,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8742:53:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4442,"nodeType":"EmitStatement","src":"8737:58:20"}]},"functionSelector":"261191b7","id":4444,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4425,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4422,"src":"8634:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4426,"kind":"modifierInvocation","modifierName":{"id":4424,"name":"onlyValidAddress","nameLocations":["8617:16:20"],"nodeType":"IdentifierPath","referencedDeclaration":3897,"src":"8617:16:20"},"nodeType":"ModifierInvocation","src":"8617:25:20"},{"arguments":[{"id":4428,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"8652:18:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4429,"kind":"modifierInvocation","modifierName":{"id":4427,"name":"onlyRole","nameLocations":["8643:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"8643:8:20"},"nodeType":"ModifierInvocation","src":"8643:28:20"}],"name":"revokeCertificateFactoryRole","nameLocation":"8562:28:20","nodeType":"FunctionDefinition","parameters":{"id":4423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4422,"mutability":"mutable","name":"account","nameLocation":"8599:7:20","nodeType":"VariableDeclaration","scope":4444,"src":"8591:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4421,"name":"address","nodeType":"ElementaryTypeName","src":"8591:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8590:17:20"},"returnParameters":{"id":4430,"nodeType":"ParameterList","parameters":[],"src":"8672:0:20"},"scope":4561,"src":"8553:249:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4467,"nodeType":"Block","src":"8919:104:20","statements":[{"expression":{"arguments":[{"id":4456,"name":"PUBLIC_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3876,"src":"8940:11:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4457,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4446,"src":"8953:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4455,"name":"revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"8929:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8929:32:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4459,"nodeType":"ExpressionStatement","src":"8929:32:20"},{"eventCall":{"arguments":[{"id":4463,"name":"PUBLIC_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3876,"src":"8995:11:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4464,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4446,"src":"9008:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4460,"name":"Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5625,"src":"8976:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Events_$5625_$","typeString":"type(library Events)"}},"id":4462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8983:11:20","memberName":"RoleRevoked","nodeType":"MemberAccess","referencedDeclaration":5588,"src":"8976:18:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8976:40:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4466,"nodeType":"EmitStatement","src":"8971:45:20"}]},"functionSelector":"0443cd2a","id":4468,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4449,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4446,"src":"8881:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4450,"kind":"modifierInvocation","modifierName":{"id":4448,"name":"onlyValidAddress","nameLocations":["8864:16:20"],"nodeType":"IdentifierPath","referencedDeclaration":3897,"src":"8864:16:20"},"nodeType":"ModifierInvocation","src":"8864:25:20"},{"arguments":[{"id":4452,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"8899:18:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4453,"kind":"modifierInvocation","modifierName":{"id":4451,"name":"onlyRole","nameLocations":["8890:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"8890:8:20"},"nodeType":"ModifierInvocation","src":"8890:28:20"}],"name":"revokePublicRole","nameLocation":"8821:16:20","nodeType":"FunctionDefinition","parameters":{"id":4447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4446,"mutability":"mutable","name":"account","nameLocation":"8846:7:20","nodeType":"VariableDeclaration","scope":4468,"src":"8838:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4445,"name":"address","nodeType":"ElementaryTypeName","src":"8838:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8837:17:20"},"returnParameters":{"id":4454,"nodeType":"ParameterList","parameters":[],"src":"8919:0:20"},"scope":4561,"src":"8812:211:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4481,"nodeType":"Block","src":"9420:60:20","statements":[{"expression":{"arguments":[{"id":4477,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"9445:18:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4478,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4471,"src":"9465:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4476,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"9437:7:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":4479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9437:36:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4475,"id":4480,"nodeType":"Return","src":"9430:43:20"}]},"documentation":{"id":4469,"nodeType":"StructuredDocumentation","src":"9186:164:20","text":"--------- # CHECKING ROLES --------- //\n @dev Functions to check if a certain account has the specified role\n @param account The account to check "},"functionSelector":"c395fcb3","id":4482,"implemented":true,"kind":"function","modifiers":[],"name":"hasAdminRole","nameLocation":"9364:12:20","nodeType":"FunctionDefinition","parameters":{"id":4472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4471,"mutability":"mutable","name":"account","nameLocation":"9385:7:20","nodeType":"VariableDeclaration","scope":4482,"src":"9377:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4470,"name":"address","nodeType":"ElementaryTypeName","src":"9377:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9376:17:20"},"returnParameters":{"id":4475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4474,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4482,"src":"9414:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4473,"name":"bool","nodeType":"ElementaryTypeName","src":"9414:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9413:6:20"},"scope":4561,"src":"9355:125:20","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4494,"nodeType":"Block","src":"9555:57:20","statements":[{"expression":{"arguments":[{"id":4490,"name":"CERTIFIER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3851,"src":"9581:14:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4491,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"9597:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4489,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"9573:7:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":4492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9573:32:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4488,"id":4493,"nodeType":"Return","src":"9566:39:20"}]},"functionSelector":"7bff0975","id":4495,"implemented":true,"kind":"function","modifiers":[],"name":"hasCertifierRole","nameLocation":"9495:16:20","nodeType":"FunctionDefinition","parameters":{"id":4485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4484,"mutability":"mutable","name":"account","nameLocation":"9520:7:20","nodeType":"VariableDeclaration","scope":4495,"src":"9512:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4483,"name":"address","nodeType":"ElementaryTypeName","src":"9512:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9511:17:20"},"returnParameters":{"id":4488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4487,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4495,"src":"9549:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4486,"name":"bool","nodeType":"ElementaryTypeName","src":"9549:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9548:6:20"},"scope":4561,"src":"9486:126:20","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4507,"nodeType":"Block","src":"9688:56:20","statements":[{"expression":{"arguments":[{"id":4503,"name":"INSPECTOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3856,"src":"9713:14:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4504,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4497,"src":"9729:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4502,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"9705:7:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":4505,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9705:32:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4501,"id":4506,"nodeType":"Return","src":"9698:39:20"}]},"functionSelector":"8850845f","id":4508,"implemented":true,"kind":"function","modifiers":[],"name":"hasInspectorRole","nameLocation":"9627:16:20","nodeType":"FunctionDefinition","parameters":{"id":4498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4497,"mutability":"mutable","name":"account","nameLocation":"9652:7:20","nodeType":"VariableDeclaration","scope":4508,"src":"9644:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4496,"name":"address","nodeType":"ElementaryTypeName","src":"9644:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9643:17:20"},"returnParameters":{"id":4501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4500,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4508,"src":"9682:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4499,"name":"bool","nodeType":"ElementaryTypeName","src":"9682:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9681:6:20"},"scope":4561,"src":"9618:126:20","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4520,"nodeType":"Block","src":"9818:54:20","statements":[{"expression":{"arguments":[{"id":4516,"name":"AUDITOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3861,"src":"9843:12:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4517,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4510,"src":"9857:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4515,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"9835:7:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":4518,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9835:30:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4514,"id":4519,"nodeType":"Return","src":"9828:37:20"}]},"functionSelector":"abaa536f","id":4521,"implemented":true,"kind":"function","modifiers":[],"name":"hasAuditorRole","nameLocation":"9759:14:20","nodeType":"FunctionDefinition","parameters":{"id":4511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4510,"mutability":"mutable","name":"account","nameLocation":"9782:7:20","nodeType":"VariableDeclaration","scope":4521,"src":"9774:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4509,"name":"address","nodeType":"ElementaryTypeName","src":"9774:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9773:17:20"},"returnParameters":{"id":4514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4513,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4521,"src":"9812:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4512,"name":"bool","nodeType":"ElementaryTypeName","src":"9812:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9811:6:20"},"scope":4561,"src":"9750:122:20","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4533,"nodeType":"Block","src":"9949:57:20","statements":[{"expression":{"arguments":[{"id":4529,"name":"ENTERPRISE_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3866,"src":"9974:15:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4530,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4523,"src":"9991:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4528,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"9966:7:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":4531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9966:33:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4527,"id":4532,"nodeType":"Return","src":"9959:40:20"}]},"functionSelector":"a1f34163","id":4534,"implemented":true,"kind":"function","modifiers":[],"name":"hasEnterpriseRole","nameLocation":"9887:17:20","nodeType":"FunctionDefinition","parameters":{"id":4524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4523,"mutability":"mutable","name":"account","nameLocation":"9913:7:20","nodeType":"VariableDeclaration","scope":4534,"src":"9905:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4522,"name":"address","nodeType":"ElementaryTypeName","src":"9905:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9904:17:20"},"returnParameters":{"id":4527,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4526,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4534,"src":"9943:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4525,"name":"bool","nodeType":"ElementaryTypeName","src":"9943:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9942:6:20"},"scope":4561,"src":"9878:128:20","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4546,"nodeType":"Block","src":"10091:66:20","statements":[{"expression":{"arguments":[{"id":4542,"name":"CERTIFICATE_FACTORY_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3871,"src":"10116:24:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4543,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4536,"src":"10142:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4541,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"10108:7:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":4544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10108:42:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4540,"id":4545,"nodeType":"Return","src":"10101:49:20"}]},"functionSelector":"52f84b72","id":4547,"implemented":true,"kind":"function","modifiers":[],"name":"hasCertificateFactoryRole","nameLocation":"10021:25:20","nodeType":"FunctionDefinition","parameters":{"id":4537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4536,"mutability":"mutable","name":"account","nameLocation":"10055:7:20","nodeType":"VariableDeclaration","scope":4547,"src":"10047:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4535,"name":"address","nodeType":"ElementaryTypeName","src":"10047:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10046:17:20"},"returnParameters":{"id":4540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4539,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4547,"src":"10085:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4538,"name":"bool","nodeType":"ElementaryTypeName","src":"10085:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10084:6:20"},"scope":4561,"src":"10012:145:20","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4559,"nodeType":"Block","src":"10234:53:20","statements":[{"expression":{"arguments":[{"id":4555,"name":"PUBLIC_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3876,"src":"10259:11:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4556,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4549,"src":"10272:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4554,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"10251:7:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":4557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10251:29:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4553,"id":4558,"nodeType":"Return","src":"10244:36:20"}]},"functionSelector":"f53f5e1e","id":4560,"implemented":true,"kind":"function","modifiers":[],"name":"hasPublicRole","nameLocation":"10176:13:20","nodeType":"FunctionDefinition","parameters":{"id":4550,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4549,"mutability":"mutable","name":"account","nameLocation":"10198:7:20","nodeType":"VariableDeclaration","scope":4560,"src":"10190:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4548,"name":"address","nodeType":"ElementaryTypeName","src":"10190:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10189:17:20"},"returnParameters":{"id":4553,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4552,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4560,"src":"10228:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4551,"name":"bool","nodeType":"ElementaryTypeName","src":"10228:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10227:6:20"},"scope":4561,"src":"10167:120:20","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":4562,"src":"456:9833:20","usedErrors":[305,308,5392,5394,5396,5398,5400,5402,5404,5406,5408,5410,5412,5414,5416,5418,5420,5422,5424,5426,5428,5430,5432,5434,5436,5438,5440,5442,5444,5446,5448,5450],"usedEvents":[317,326,335,5556,5560,5568,5576,5582,5588]}],"src":"32:10257:20"},"id":20},"contracts/modules/InspectionManager.sol":{"ast":{"absolutePath":"contracts/modules/InspectionManager.sol","exportedSymbols":{"CertificationAuthority":[3819],"DataTypes":[5387],"Events":[5625],"InspectionManager":[5286],"RolesManager":[4561]},"id":5287,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4563,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:21"},{"absolutePath":"contracts/core/RolesManager.sol","file":"../core/RolesManager.sol","id":4565,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5287,"sourceUnit":4562,"src":"575:56:21","symbolAliases":[{"foreign":{"id":4564,"name":"RolesManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4561,"src":"584:12:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/core/CertificationAuthority.sol","file":"../core/CertificationAuthority.sol","id":4567,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5287,"sourceUnit":3820,"src":"632:76:21","symbolAliases":[{"foreign":{"id":4566,"name":"CertificationAuthority","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3819,"src":"641:22:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/utils/Events.sol","file":"../utils/Events.sol","id":4569,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5287,"sourceUnit":5626,"src":"709:45:21","symbolAliases":[{"foreign":{"id":4568,"name":"Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5625,"src":"718:6:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/utils/DataTypes.sol","file":"../utils/DataTypes.sol","id":4571,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5287,"sourceUnit":5388,"src":"755:51:21","symbolAliases":[{"foreign":{"id":4570,"name":"DataTypes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5387,"src":"764:9:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4572,"name":"RolesManager","nameLocations":["838:12:21"],"nodeType":"IdentifierPath","referencedDeclaration":4561,"src":"838:12:21"},"id":4573,"nodeType":"InheritanceSpecifier","src":"838:12:21"}],"canonicalName":"InspectionManager","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5286,"linearizedBaseContracts":[5286,4561,5451,295,2183,2195,378,1904],"name":"InspectionManager","nameLocation":"817:17:21","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"a3574c5b","id":4576,"mutability":"immutable","name":"rolesManager","nameLocation":"887:12:21","nodeType":"VariableDeclaration","scope":5286,"src":"857:42:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_RolesManager_$4561","typeString":"contract RolesManager"},"typeName":{"id":4575,"nodeType":"UserDefinedTypeName","pathNode":{"id":4574,"name":"RolesManager","nameLocations":["857:12:21"],"nodeType":"IdentifierPath","referencedDeclaration":4561,"src":"857:12:21"},"referencedDeclaration":4561,"src":"857:12:21","typeDescriptions":{"typeIdentifier":"t_contract$_RolesManager_$4561","typeString":"contract RolesManager"}},"visibility":"public"},{"constant":false,"functionSelector":"99eb08d6","id":4579,"mutability":"immutable","name":"certAuthority","nameLocation":"945:13:21","nodeType":"VariableDeclaration","scope":5286,"src":"905:53:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_CertificationAuthority_$3819","typeString":"contract CertificationAuthority"},"typeName":{"id":4578,"nodeType":"UserDefinedTypeName","pathNode":{"id":4577,"name":"CertificationAuthority","nameLocations":["905:22:21"],"nodeType":"IdentifierPath","referencedDeclaration":3819,"src":"905:22:21"},"referencedDeclaration":3819,"src":"905:22:21","typeDescriptions":{"typeIdentifier":"t_contract$_CertificationAuthority_$3819","typeString":"contract CertificationAuthority"}},"visibility":"public"},{"constant":false,"id":4584,"mutability":"mutable","name":"_enterpriseInspectors","nameLocation":"1035:21:21","nodeType":"VariableDeclaration","scope":5286,"src":"997:59:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[])"},"typeName":{"id":4583,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4580,"name":"address","nodeType":"ElementaryTypeName","src":"1005:7:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"997:29:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[])"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"baseType":{"id":4581,"name":"address","nodeType":"ElementaryTypeName","src":"1016:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4582,"nodeType":"ArrayTypeName","src":"1016:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"visibility":"private"},{"constant":false,"id":4589,"mutability":"mutable","name":"_inspectorEnterprises","nameLocation":"1100:21:21","nodeType":"VariableDeclaration","scope":5286,"src":"1062:59:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[])"},"typeName":{"id":4588,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4585,"name":"address","nodeType":"ElementaryTypeName","src":"1070:7:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1062:29:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[])"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"baseType":{"id":4586,"name":"address","nodeType":"ElementaryTypeName","src":"1081:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4587,"nodeType":"ArrayTypeName","src":"1081:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"visibility":"private"},{"constant":false,"id":4595,"mutability":"mutable","name":"_enterpriseReports","nameLocation":"1219:18:21","nodeType":"VariableDeclaration","scope":5286,"src":"1162:75:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_InspectionReport_$5334_storage_$dyn_storage_$","typeString":"mapping(address => struct DataTypes.InspectionReport[])"},"typeName":{"id":4594,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4590,"name":"address","nodeType":"ElementaryTypeName","src":"1170:7:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1162:48:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_InspectionReport_$5334_storage_$dyn_storage_$","typeString":"mapping(address => struct DataTypes.InspectionReport[])"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"baseType":{"id":4592,"nodeType":"UserDefinedTypeName","pathNode":{"id":4591,"name":"DataTypes.InspectionReport","nameLocations":["1181:9:21","1191:16:21"],"nodeType":"IdentifierPath","referencedDeclaration":5334,"src":"1181:26:21"},"referencedDeclaration":5334,"src":"1181:26:21","typeDescriptions":{"typeIdentifier":"t_struct$_InspectionReport_$5334_storage_ptr","typeString":"struct DataTypes.InspectionReport"}},"id":4593,"nodeType":"ArrayTypeName","src":"1181:28:21","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_InspectionReport_$5334_storage_$dyn_storage_ptr","typeString":"struct DataTypes.InspectionReport[]"}}},"visibility":"private"},{"constant":false,"id":4601,"mutability":"mutable","name":"_lastInspectionTimestamps","nameLocation":"1299:25:21","nodeType":"VariableDeclaration","scope":5286,"src":"1243:81:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":4600,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4596,"name":"address","nodeType":"ElementaryTypeName","src":"1251:7:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1243:47:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4599,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4597,"name":"address","nodeType":"ElementaryTypeName","src":"1270:7:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1262:27:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4598,"name":"uint256","nodeType":"ElementaryTypeName","src":"1281:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":4606,"mutability":"mutable","name":"_flaggedInspections","nameLocation":"1422:19:21","nodeType":"VariableDeclaration","scope":5286,"src":"1366:75:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_FlaggedInspection_$5348_storage_$","typeString":"mapping(uint256 => struct DataTypes.FlaggedInspection)"},"typeName":{"id":4605,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4602,"name":"uint256","nodeType":"ElementaryTypeName","src":"1374:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1366:47:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_FlaggedInspection_$5348_storage_$","typeString":"mapping(uint256 => struct DataTypes.FlaggedInspection)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4604,"nodeType":"UserDefinedTypeName","pathNode":{"id":4603,"name":"DataTypes.FlaggedInspection","nameLocations":["1385:9:21","1395:17:21"],"nodeType":"IdentifierPath","referencedDeclaration":5348,"src":"1385:27:21"},"referencedDeclaration":5348,"src":"1385:27:21","typeDescriptions":{"typeIdentifier":"t_struct$_FlaggedInspection_$5348_storage_ptr","typeString":"struct DataTypes.FlaggedInspection"}}},"visibility":"private"},{"constant":false,"id":4611,"mutability":"mutable","name":"_enterpriseFlaggedReports","nameLocation":"1485:25:21","nodeType":"VariableDeclaration","scope":5286,"src":"1447:63:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[])"},"typeName":{"id":4610,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4607,"name":"address","nodeType":"ElementaryTypeName","src":"1455:7:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1447:29:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[])"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"baseType":{"id":4608,"name":"uint256","nodeType":"ElementaryTypeName","src":"1466:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4609,"nodeType":"ArrayTypeName","src":"1466:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"visibility":"private"},{"constant":false,"id":4613,"mutability":"mutable","name":"_flagCounter","nameLocation":"1532:12:21","nodeType":"VariableDeclaration","scope":5286,"src":"1516:28:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4612,"name":"uint256","nodeType":"ElementaryTypeName","src":"1516:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":4632,"nodeType":"Block","src":"1609:123:21","statements":[{"expression":{"id":4624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4620,"name":"rolesManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4576,"src":"1619:12:21","typeDescriptions":{"typeIdentifier":"t_contract$_RolesManager_$4561","typeString":"contract RolesManager"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4622,"name":"_rolesManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4615,"src":"1647:13:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4621,"name":"RolesManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4561,"src":"1634:12:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_RolesManager_$4561_$","typeString":"type(contract RolesManager)"}},"id":4623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1634:27:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_RolesManager_$4561","typeString":"contract RolesManager"}},"src":"1619:42:21","typeDescriptions":{"typeIdentifier":"t_contract$_RolesManager_$4561","typeString":"contract RolesManager"}},"id":4625,"nodeType":"ExpressionStatement","src":"1619:42:21"},{"expression":{"id":4630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4626,"name":"certAuthority","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4579,"src":"1671:13:21","typeDescriptions":{"typeIdentifier":"t_contract$_CertificationAuthority_$3819","typeString":"contract CertificationAuthority"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4628,"name":"_certAuthority","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4617,"src":"1710:14:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4627,"name":"CertificationAuthority","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3819,"src":"1687:22:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_CertificationAuthority_$3819_$","typeString":"type(contract CertificationAuthority)"}},"id":4629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1687:38:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_CertificationAuthority_$3819","typeString":"contract CertificationAuthority"}},"src":"1671:54:21","typeDescriptions":{"typeIdentifier":"t_contract$_CertificationAuthority_$3819","typeString":"contract CertificationAuthority"}},"id":4631,"nodeType":"ExpressionStatement","src":"1671:54:21"}]},"id":4633,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4618,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4615,"mutability":"mutable","name":"_rolesManager","nameLocation":"1570:13:21","nodeType":"VariableDeclaration","scope":4633,"src":"1562:21:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4614,"name":"address","nodeType":"ElementaryTypeName","src":"1562:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4617,"mutability":"mutable","name":"_certAuthority","nameLocation":"1593:14:21","nodeType":"VariableDeclaration","scope":4633,"src":"1585:22:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4616,"name":"address","nodeType":"ElementaryTypeName","src":"1585:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1561:47:21"},"returnParameters":{"id":4619,"nodeType":"ParameterList","parameters":[],"src":"1609:0:21"},"scope":5286,"src":"1550:182:21","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4646,"nodeType":"Block","src":"1902:132:21","statements":[{"condition":{"id":4639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1916:29:21","subExpression":{"arguments":[{"expression":{"id":4636,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1934:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1938:6:21","memberName":"sender","nodeType":"MemberAccess","src":"1934:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4635,"name":"hasCertifierRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4495,"src":"1917:16:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":4638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1917:28:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4644,"nodeType":"IfStatement","src":"1912:105:21","trueBody":{"id":4643,"nodeType":"Block","src":"1947:70:21","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4640,"name":"RolesManager__NotAuthorizedCertifier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5396,"src":"1968:36:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1968:38:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4642,"nodeType":"RevertStatement","src":"1961:45:21"}]}},{"id":4645,"nodeType":"PlaceholderStatement","src":"2026:1:21"}]},"id":4647,"name":"onlyCertifier","nameLocation":"1886:13:21","nodeType":"ModifierDefinition","parameters":{"id":4634,"nodeType":"ParameterList","parameters":[],"src":"1899:2:21"},"src":"1877:157:21","virtual":false,"visibility":"internal"},{"body":{"id":4687,"nodeType":"Block","src":"2089:429:21","statements":[{"condition":{"id":4655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2104:29:21","subExpression":{"arguments":[{"expression":{"id":4652,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"2122:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2126:6:21","memberName":"sender","nodeType":"MemberAccess","src":"2122:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4651,"name":"hasInspectorRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4508,"src":"2105:16:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":4654,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2105:28:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4660,"nodeType":"IfStatement","src":"2100:105:21","trueBody":{"id":4659,"nodeType":"Block","src":"2135:70:21","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4656,"name":"RolesManager__NotAuthorizedInspector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5398,"src":"2156:36:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2156:38:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4658,"nodeType":"RevertStatement","src":"2149:45:21"}]}},{"condition":{"id":4666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2219:45:21","subExpression":{"arguments":[{"id":4662,"name":"enterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4649,"src":"2241:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":4663,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"2253:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2257:6:21","memberName":"sender","nodeType":"MemberAccess","src":"2253:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4661,"name":"_isInspectorAssigned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4960,"src":"2220:20:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":4665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2220:44:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4671,"nodeType":"IfStatement","src":"2215:127:21","trueBody":{"id":4670,"nodeType":"Block","src":"2266:76:21","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4667,"name":"InspectionManager__NotAssignedToEnterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5438,"src":"2287:42:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2287:44:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4669,"nodeType":"RevertStatement","src":"2280:51:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4672,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967292,"src":"2356:5:21","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2362:9:21","memberName":"timestamp","nodeType":"MemberAccess","src":"2356:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"baseExpression":{"baseExpression":{"id":4674,"name":"_lastInspectionTimestamps","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4601,"src":"2374:25:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":4676,"indexExpression":{"id":4675,"name":"enterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4649,"src":"2400:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2374:37:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4679,"indexExpression":{"expression":{"id":4677,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"2412:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2416:6:21","memberName":"sender","nodeType":"MemberAccess","src":"2412:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2374:49:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2356:67:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4685,"nodeType":"IfStatement","src":"2352:149:21","trueBody":{"id":4684,"nodeType":"Block","src":"2425:76:21","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4681,"name":"InspectionManager__InspectionPeriodExpired","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5436,"src":"2446:42:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2446:44:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4683,"nodeType":"RevertStatement","src":"2439:51:21"}]}},{"id":4686,"nodeType":"PlaceholderStatement","src":"2510:1:21"}]},"id":4688,"name":"onlyActiveInspector","nameLocation":"2049:19:21","nodeType":"ModifierDefinition","parameters":{"id":4650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4649,"mutability":"mutable","name":"enterprise","nameLocation":"2077:10:21","nodeType":"VariableDeclaration","scope":4688,"src":"2069:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4648,"name":"address","nodeType":"ElementaryTypeName","src":"2069:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2068:20:21"},"src":"2040:478:21","virtual":false,"visibility":"internal"},{"body":{"id":4751,"nodeType":"Block","src":"2812:580:21","statements":[{"condition":{"id":4703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2827:47:21","subExpression":{"arguments":[{"id":4701,"name":"enterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4690,"src":"2863:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4699,"name":"certAuthority","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4579,"src":"2828:13:21","typeDescriptions":{"typeIdentifier":"t_contract$_CertificationAuthority_$3819","typeString":"contract CertificationAuthority"}},"id":4700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2842:20:21","memberName":"isCertificationValid","nodeType":"MemberAccess","referencedDeclaration":3685,"src":"2828:34:21","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view external returns (bool)"}},"id":4702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2828:46:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4708,"nodeType":"IfStatement","src":"2823:136:21","trueBody":{"id":4707,"nodeType":"Block","src":"2876:83:21","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4704,"name":"CertificationAuthority__EnterpriseNotCertifiedYet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5426,"src":"2897:49:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2897:51:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4706,"nodeType":"RevertStatement","src":"2890:58:21"}]}},{"condition":{"id":4712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2973:28:21","subExpression":{"arguments":[{"id":4710,"name":"inspector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4692,"src":"2991:9:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4709,"name":"hasInspectorRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4508,"src":"2974:16:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":4711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2974:27:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4717,"nodeType":"IfStatement","src":"2969:104:21","trueBody":{"id":4716,"nodeType":"Block","src":"3003:70:21","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4713,"name":"RolesManager__NotAuthorizedInspector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5398,"src":"3024:36:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3024:38:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4715,"nodeType":"RevertStatement","src":"3017:45:21"}]}},{"expression":{"arguments":[{"id":4722,"name":"inspector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4692,"src":"3122:9:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":4718,"name":"_enterpriseInspectors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4584,"src":"3083:21:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[] storage ref)"}},"id":4720,"indexExpression":{"id":4719,"name":"enterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4690,"src":"3105:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3083:33:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":4721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3117:4:21","memberName":"push","nodeType":"MemberAccess","src":"3083:38:21","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$","typeString":"function (address[] storage pointer,address)"}},"id":4723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3083:49:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4724,"nodeType":"ExpressionStatement","src":"3083:49:21"},{"expression":{"arguments":[{"id":4729,"name":"enterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4690,"src":"3180:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":4725,"name":"_inspectorEnterprises","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4589,"src":"3142:21:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[] storage ref)"}},"id":4727,"indexExpression":{"id":4726,"name":"inspector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4692,"src":"3164:9:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3142:32:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":4728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3175:4:21","memberName":"push","nodeType":"MemberAccess","src":"3142:37:21","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$","typeString":"function (address[] storage pointer,address)"}},"id":4730,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3142:49:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4731,"nodeType":"ExpressionStatement","src":"3142:49:21"},{"expression":{"id":4741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":4732,"name":"_lastInspectionTimestamps","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4601,"src":"3201:25:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":4735,"indexExpression":{"id":4733,"name":"enterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4690,"src":"3227:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3201:37:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4736,"indexExpression":{"id":4734,"name":"inspector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4692,"src":"3239:9:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3201:48:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4737,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967292,"src":"3252:5:21","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3258:9:21","memberName":"timestamp","nodeType":"MemberAccess","src":"3252:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4739,"name":"validityPeriod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4694,"src":"3270:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3252:32:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3201:83:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4742,"nodeType":"ExpressionStatement","src":"3201:83:21"},{"eventCall":{"arguments":[{"id":4746,"name":"enterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4690,"src":"3338:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4747,"name":"inspector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4692,"src":"3350:9:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4748,"name":"validityPeriod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4694,"src":"3361:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4743,"name":"Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5625,"src":"3300:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Events_$5625_$","typeString":"type(library Events)"}},"id":4745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3307:17:21","memberName":"InspectorAssigned","nodeType":"MemberAccess","referencedDeclaration":5506,"src":"3300:24:21","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4749,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3300:85:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4750,"nodeType":"EmitStatement","src":"3295:90:21"}]},"functionSelector":"b1ea540e","id":4752,"implemented":true,"kind":"function","modifiers":[{"id":4697,"kind":"modifierInvocation","modifierName":{"id":4696,"name":"onlyCertifier","nameLocations":["2798:13:21"],"nodeType":"IdentifierPath","referencedDeclaration":4647,"src":"2798:13:21"},"nodeType":"ModifierInvocation","src":"2798:13:21"}],"name":"assignInspector","nameLocation":"2680:15:21","nodeType":"FunctionDefinition","parameters":{"id":4695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4690,"mutability":"mutable","name":"enterprise","nameLocation":"2713:10:21","nodeType":"VariableDeclaration","scope":4752,"src":"2705:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4689,"name":"address","nodeType":"ElementaryTypeName","src":"2705:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4692,"mutability":"mutable","name":"inspector","nameLocation":"2741:9:21","nodeType":"VariableDeclaration","scope":4752,"src":"2733:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4691,"name":"address","nodeType":"ElementaryTypeName","src":"2733:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4694,"mutability":"mutable","name":"validityPeriod","nameLocation":"2768:14:21","nodeType":"VariableDeclaration","scope":4752,"src":"2760:22:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4693,"name":"uint256","nodeType":"ElementaryTypeName","src":"2760:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2695:93:21"},"returnParameters":{"id":4698,"nodeType":"ParameterList","parameters":[],"src":"2812:0:21"},"scope":5286,"src":"2671:721:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4828,"nodeType":"Block","src":"3755:938:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4766,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967292,"src":"3770:5:21","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3776:9:21","memberName":"timestamp","nodeType":"MemberAccess","src":"3770:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"baseExpression":{"baseExpression":{"id":4768,"name":"_lastInspectionTimestamps","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4601,"src":"3788:25:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":4770,"indexExpression":{"id":4769,"name":"_enterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4754,"src":"3814:11:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3788:38:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4773,"indexExpression":{"expression":{"id":4771,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"3827:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3831:6:21","memberName":"sender","nodeType":"MemberAccess","src":"3827:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3788:50:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3770:68:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4779,"nodeType":"IfStatement","src":"3766:150:21","trueBody":{"id":4778,"nodeType":"Block","src":"3840:76:21","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4775,"name":"InspectionManager__InspectionPeriodExpired","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5436,"src":"3861:42:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4776,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3861:44:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4777,"nodeType":"RevertStatement","src":"3854:51:21"}]}},{"assignments":[4784],"declarations":[{"constant":false,"id":4784,"mutability":"mutable","name":"report","nameLocation":"3960:6:21","nodeType":"VariableDeclaration","scope":4828,"src":"3926:40:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_InspectionReport_$5334_memory_ptr","typeString":"struct DataTypes.InspectionReport"},"typeName":{"id":4783,"nodeType":"UserDefinedTypeName","pathNode":{"id":4782,"name":"DataTypes.InspectionReport","nameLocations":["3926:9:21","3936:16:21"],"nodeType":"IdentifierPath","referencedDeclaration":5334,"src":"3926:26:21"},"referencedDeclaration":5334,"src":"3926:26:21","typeDescriptions":{"typeIdentifier":"t_struct$_InspectionReport_$5334_storage_ptr","typeString":"struct DataTypes.InspectionReport"}},"visibility":"internal"}],"id":4797,"initialValue":{"arguments":[{"expression":{"id":4787,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"4021:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4025:6:21","memberName":"sender","nodeType":"MemberAccess","src":"4021:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4789,"name":"_enterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4754,"src":"4057:11:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4790,"name":"_remarks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4758,"src":"4091:8:21","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":4791,"name":"_evidenceURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4760,"src":"4126:12:21","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"expression":{"id":4792,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967292,"src":"4178:5:21","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4184:9:21","memberName":"timestamp","nodeType":"MemberAccess","src":"4178:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4794,"name":"_passed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4756,"src":"4215:7:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"66616c7365","id":4795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4245:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":4785,"name":"DataTypes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5387,"src":"3969:9:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_DataTypes_$5387_$","typeString":"type(library DataTypes)"}},"id":4786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3979:16:21","memberName":"InspectionReport","nodeType":"MemberAccess","referencedDeclaration":5334,"src":"3969:26:21","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_InspectionReport_$5334_storage_ptr_$","typeString":"type(struct DataTypes.InspectionReport storage pointer)"}},"id":4796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["4010:9:21","4045:10:21","4082:7:21","4113:11:21","4165:11:21","4207:6:21","4236:7:21"],"names":["inspector","enterprise","remarks","evidenceURI","inspectedAt","passed","flagged"],"nodeType":"FunctionCall","src":"3969:292:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_InspectionReport_$5334_memory_ptr","typeString":"struct DataTypes.InspectionReport memory"}},"nodeType":"VariableDeclarationStatement","src":"3926:335:21"},{"expression":{"arguments":[{"id":4802,"name":"report","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4784,"src":"4309:6:21","typeDescriptions":{"typeIdentifier":"t_struct$_InspectionReport_$5334_memory_ptr","typeString":"struct DataTypes.InspectionReport memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_InspectionReport_$5334_memory_ptr","typeString":"struct DataTypes.InspectionReport memory"}],"expression":{"baseExpression":{"id":4798,"name":"_enterpriseReports","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4595,"src":"4272:18:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_InspectionReport_$5334_storage_$dyn_storage_$","typeString":"mapping(address => struct DataTypes.InspectionReport storage ref[] storage ref)"}},"id":4800,"indexExpression":{"id":4799,"name":"_enterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4754,"src":"4291:11:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4272:31:21","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_InspectionReport_$5334_storage_$dyn_storage","typeString":"struct DataTypes.InspectionReport storage ref[] storage ref"}},"id":4801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4304:4:21","memberName":"push","nodeType":"MemberAccess","src":"4272:36:21","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_InspectionReport_$5334_storage_$dyn_storage_ptr_$_t_struct$_InspectionReport_$5334_storage_$returns$__$attached_to$_t_array$_t_struct$_InspectionReport_$5334_storage_$dyn_storage_ptr_$","typeString":"function (struct DataTypes.InspectionReport storage ref[] storage pointer,struct DataTypes.InspectionReport storage ref)"}},"id":4803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:44:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4804,"nodeType":"ExpressionStatement","src":"4272:44:21"},{"condition":{"id":4806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4382:8:21","subExpression":{"id":4805,"name":"_passed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4756,"src":"4383:7:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4814,"nodeType":"IfStatement","src":"4378:99:21","trueBody":{"id":4813,"nodeType":"Block","src":"4392:85:21","statements":[{"expression":{"arguments":[{"id":4810,"name":"_enterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4754,"src":"4440:11:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4807,"name":"certAuthority","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4579,"src":"4406:13:21","typeDescriptions":{"typeIdentifier":"t_contract$_CertificationAuthority_$3819","typeString":"contract CertificationAuthority"}},"id":4809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4420:19:21","memberName":"revokeCertification","nodeType":"MemberAccess","referencedDeclaration":3557,"src":"4406:33:21","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$__$","typeString":"function (address) external"}},"id":4811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4406:46:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4812,"nodeType":"ExpressionStatement","src":"4406:46:21"}]}},{"eventCall":{"arguments":[{"expression":{"id":4818,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"4543:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4547:6:21","memberName":"sender","nodeType":"MemberAccess","src":"4543:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4820,"name":"_enterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4754,"src":"4567:11:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4821,"name":"_passed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4756,"src":"4592:7:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":4822,"name":"_remarks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4758,"src":"4613:8:21","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":4823,"name":"_evidenceURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4760,"src":"4635:12:21","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"expression":{"id":4824,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967292,"src":"4661:5:21","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4667:9:21","memberName":"timestamp","nodeType":"MemberAccess","src":"4661:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4815,"name":"Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5625,"src":"4497:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Events_$5625_$","typeString":"type(library Events)"}},"id":4817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4504:25:21","memberName":"InspectionReportSubmitted","nodeType":"MemberAccess","referencedDeclaration":5520,"src":"4497:32:21","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (address,address,bool,string memory,string memory,uint256)"}},"id":4826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4497:189:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4827,"nodeType":"EmitStatement","src":"4492:194:21"}]},"functionSelector":"b1ba3883","id":4829,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4763,"name":"_enterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4754,"src":"3742:11:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4764,"kind":"modifierInvocation","modifierName":{"id":4762,"name":"onlyActiveInspector","nameLocations":["3722:19:21"],"nodeType":"IdentifierPath","referencedDeclaration":4688,"src":"3722:19:21"},"nodeType":"ModifierInvocation","src":"3722:32:21"}],"name":"submitInspectionReport","nameLocation":"3560:22:21","nodeType":"FunctionDefinition","parameters":{"id":4761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4754,"mutability":"mutable","name":"_enterprise","nameLocation":"3601:11:21","nodeType":"VariableDeclaration","scope":4829,"src":"3593:19:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4753,"name":"address","nodeType":"ElementaryTypeName","src":"3593:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4756,"mutability":"mutable","name":"_passed","nameLocation":"3627:7:21","nodeType":"VariableDeclaration","scope":4829,"src":"3622:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4755,"name":"bool","nodeType":"ElementaryTypeName","src":"3622:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4758,"mutability":"mutable","name":"_remarks","nameLocation":"3660:8:21","nodeType":"VariableDeclaration","scope":4829,"src":"3644:24:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":4757,"name":"string","nodeType":"ElementaryTypeName","src":"3644:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4760,"mutability":"mutable","name":"_evidenceURI","nameLocation":"3694:12:21","nodeType":"VariableDeclaration","scope":4829,"src":"3678:28:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":4759,"name":"string","nodeType":"ElementaryTypeName","src":"3678:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3583:129:21"},"returnParameters":{"id":4765,"nodeType":"ParameterList","parameters":[],"src":"3755:0:21"},"scope":5286,"src":"3551:1142:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4921,"nodeType":"Block","src":"5044:1128:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4841,"name":"reportIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4833,"src":"5062:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"baseExpression":{"id":4842,"name":"_enterpriseReports","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4595,"src":"5075:18:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_InspectionReport_$5334_storage_$dyn_storage_$","typeString":"mapping(address => struct DataTypes.InspectionReport storage ref[] storage ref)"}},"id":4844,"indexExpression":{"id":4843,"name":"enterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4831,"src":"5094:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5075:30:21","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_InspectionReport_$5334_storage_$dyn_storage","typeString":"struct DataTypes.InspectionReport storage ref[] storage ref"}},"id":4845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5106:6:21","memberName":"length","nodeType":"MemberAccess","src":"5075:37:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5062:50:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4851,"nodeType":"IfStatement","src":"5058:135:21","trueBody":{"id":4850,"nodeType":"Block","src":"5114:79:21","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4847,"name":"InspectionManager__InvalidReportIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5440,"src":"5139:37:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5139:39:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4849,"nodeType":"RevertStatement","src":"5132:46:21"}]}},{"condition":{"expression":{"baseExpression":{"baseExpression":{"id":4852,"name":"_enterpriseReports","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4595,"src":"5223:18:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_InspectionReport_$5334_storage_$dyn_storage_$","typeString":"mapping(address => struct DataTypes.InspectionReport storage ref[] storage ref)"}},"id":4854,"indexExpression":{"id":4853,"name":"enterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4831,"src":"5242:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5223:30:21","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_InspectionReport_$5334_storage_$dyn_storage","typeString":"struct DataTypes.InspectionReport storage ref[] storage ref"}},"id":4856,"indexExpression":{"id":4855,"name":"reportIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4833,"src":"5254:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5223:43:21","typeDescriptions":{"typeIdentifier":"t_struct$_InspectionReport_$5334_storage","typeString":"struct DataTypes.InspectionReport storage ref"}},"id":4857,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5267:7:21","memberName":"flagged","nodeType":"MemberAccess","referencedDeclaration":5333,"src":"5223:51:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4862,"nodeType":"IfStatement","src":"5219:138:21","trueBody":{"id":4861,"nodeType":"Block","src":"5276:81:21","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4858,"name":"InspectionManager__ReportAlreadyFlagged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5442,"src":"5301:39:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5301:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4860,"nodeType":"RevertStatement","src":"5294:48:21"}]}},{"expression":{"id":4870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"baseExpression":{"id":4863,"name":"_enterpriseReports","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4595,"src":"5371:18:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_InspectionReport_$5334_storage_$dyn_storage_$","typeString":"mapping(address => struct DataTypes.InspectionReport storage ref[] storage ref)"}},"id":4866,"indexExpression":{"id":4864,"name":"enterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4831,"src":"5390:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5371:30:21","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_InspectionReport_$5334_storage_$dyn_storage","typeString":"struct DataTypes.InspectionReport storage ref[] storage ref"}},"id":4867,"indexExpression":{"id":4865,"name":"reportIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4833,"src":"5402:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5371:43:21","typeDescriptions":{"typeIdentifier":"t_struct$_InspectionReport_$5334_storage","typeString":"struct DataTypes.InspectionReport storage ref"}},"id":4868,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5415:7:21","memberName":"flagged","nodeType":"MemberAccess","referencedDeclaration":5333,"src":"5371:51:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":4869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5425:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5371:58:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4871,"nodeType":"ExpressionStatement","src":"5371:58:21"},{"assignments":[4876],"declarations":[{"constant":false,"id":4876,"mutability":"mutable","name":"flagged","nameLocation":"5479:7:21","nodeType":"VariableDeclaration","scope":4921,"src":"5444:42:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_FlaggedInspection_$5348_memory_ptr","typeString":"struct DataTypes.FlaggedInspection"},"typeName":{"id":4875,"nodeType":"UserDefinedTypeName","pathNode":{"id":4874,"name":"DataTypes.FlaggedInspection","nameLocations":["5444:9:21","5454:17:21"],"nodeType":"IdentifierPath","referencedDeclaration":5348,"src":"5444:27:21"},"referencedDeclaration":5348,"src":"5444:27:21","typeDescriptions":{"typeIdentifier":"t_struct$_FlaggedInspection_$5348_storage_ptr","typeString":"struct DataTypes.FlaggedInspection"}},"visibility":"internal"}],"id":4892,"initialValue":{"arguments":[{"id":4879,"name":"enterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4831,"src":"5547:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4880,"name":"reportIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4833,"src":"5588:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"baseExpression":{"id":4881,"name":"_enterpriseReports","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4595,"src":"5625:18:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_InspectionReport_$5334_storage_$dyn_storage_$","typeString":"mapping(address => struct DataTypes.InspectionReport storage ref[] storage ref)"}},"id":4883,"indexExpression":{"id":4882,"name":"enterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4831,"src":"5644:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5625:30:21","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_InspectionReport_$5334_storage_$dyn_storage","typeString":"struct DataTypes.InspectionReport storage ref[] storage ref"}},"id":4885,"indexExpression":{"id":4884,"name":"reportIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4833,"src":"5656:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5625:43:21","typeDescriptions":{"typeIdentifier":"t_struct$_InspectionReport_$5334_storage","typeString":"struct DataTypes.InspectionReport storage ref"}},{"expression":{"id":4886,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"5697:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5701:6:21","memberName":"sender","nodeType":"MemberAccess","src":"5697:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4888,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4835,"src":"5733:6:21","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"expression":{"id":4889,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967292,"src":"5768:5:21","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5774:9:21","memberName":"timestamp","nodeType":"MemberAccess","src":"5768:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_struct$_InspectionReport_$5334_storage","typeString":"struct DataTypes.InspectionReport storage ref"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4877,"name":"DataTypes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5387,"src":"5489:9:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_DataTypes_$5387_$","typeString":"type(library DataTypes)"}},"id":4878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5499:17:21","memberName":"FlaggedInspection","nodeType":"MemberAccess","referencedDeclaration":5348,"src":"5489:27:21","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_FlaggedInspection_$5348_storage_ptr_$","typeString":"type(struct DataTypes.FlaggedInspection storage pointer)"}},"id":4891,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["5535:10:21","5575:11:21","5617:6:21","5686:9:21","5725:6:21","5757:9:21"],"names":["enterprise","reportIndex","report","flaggedBy","reason","flaggedAt"],"nodeType":"FunctionCall","src":"5489:309:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_FlaggedInspection_$5348_memory_ptr","typeString":"struct DataTypes.FlaggedInspection memory"}},"nodeType":"VariableDeclarationStatement","src":"5444:354:21"},{"expression":{"id":4897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4893,"name":"_flaggedInspections","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4606,"src":"5813:19:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_FlaggedInspection_$5348_storage_$","typeString":"mapping(uint256 => struct DataTypes.FlaggedInspection storage ref)"}},"id":4895,"indexExpression":{"id":4894,"name":"_flagCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4613,"src":"5833:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5813:33:21","typeDescriptions":{"typeIdentifier":"t_struct$_FlaggedInspection_$5348_storage","typeString":"struct DataTypes.FlaggedInspection storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4896,"name":"flagged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4876,"src":"5849:7:21","typeDescriptions":{"typeIdentifier":"t_struct$_FlaggedInspection_$5348_memory_ptr","typeString":"struct DataTypes.FlaggedInspection memory"}},"src":"5813:43:21","typeDescriptions":{"typeIdentifier":"t_struct$_FlaggedInspection_$5348_storage","typeString":"struct DataTypes.FlaggedInspection storage ref"}},"id":4898,"nodeType":"ExpressionStatement","src":"5813:43:21"},{"expression":{"arguments":[{"id":4903,"name":"_flagCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4613,"src":"5913:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":4899,"name":"_enterpriseFlaggedReports","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4611,"src":"5870:25:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[] storage ref)"}},"id":4901,"indexExpression":{"id":4900,"name":"enterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4831,"src":"5896:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5870:37:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":4902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5908:4:21","memberName":"push","nodeType":"MemberAccess","src":"5870:42:21","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":4904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5870:56:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4905,"nodeType":"ExpressionStatement","src":"5870:56:21"},{"expression":{"id":4907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5940:14:21","subExpression":{"id":4906,"name":"_flagCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4613,"src":"5940:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4908,"nodeType":"ExpressionStatement","src":"5940:14:21"},{"eventCall":{"arguments":[{"id":4912,"name":"enterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4831,"src":"6022:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4913,"name":"reportIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4833,"src":"6050:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":4914,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"6079:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6083:6:21","memberName":"sender","nodeType":"MemberAccess","src":"6079:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4916,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4835,"src":"6107:6:21","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"expression":{"id":4917,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967292,"src":"6131:5:21","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6137:9:21","memberName":"timestamp","nodeType":"MemberAccess","src":"6131:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4909,"name":"Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5625,"src":"5974:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Events_$5625_$","typeString":"type(library Events)"}},"id":4911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5981:23:21","memberName":"InspectionReportFlagged","nodeType":"MemberAccess","referencedDeclaration":5532,"src":"5974:30:21","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_string_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (address,uint256,address,string memory,uint256)"}},"id":4919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5974:186:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4920,"nodeType":"EmitStatement","src":"5969:191:21"}]},"functionSelector":"4308ac98","id":4922,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4838,"name":"AUDITOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3861,"src":"5030:12:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4839,"kind":"modifierInvocation","modifierName":{"id":4837,"name":"onlyRole","nameLocations":["5021:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"5021:8:21"},"nodeType":"ModifierInvocation","src":"5021:22:21"}],"name":"flagInspection","nameLocation":"4886:14:21","nodeType":"FunctionDefinition","parameters":{"id":4836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4831,"mutability":"mutable","name":"enterprise","nameLocation":"4922:10:21","nodeType":"VariableDeclaration","scope":4922,"src":"4914:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4830,"name":"address","nodeType":"ElementaryTypeName","src":"4914:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4833,"mutability":"mutable","name":"reportIndex","nameLocation":"4954:11:21","nodeType":"VariableDeclaration","scope":4922,"src":"4946:19:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4832,"name":"uint256","nodeType":"ElementaryTypeName","src":"4946:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4835,"mutability":"mutable","name":"reason","nameLocation":"4995:6:21","nodeType":"VariableDeclaration","scope":4922,"src":"4979:22:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":4834,"name":"string","nodeType":"ElementaryTypeName","src":"4979:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4900:111:21"},"returnParameters":{"id":4840,"nodeType":"ParameterList","parameters":[],"src":"5044:0:21"},"scope":5286,"src":"4877:1295:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4959,"nodeType":"Block","src":"6431:232:21","statements":[{"body":{"id":4955,"nodeType":"Block","src":"6512:123:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":4944,"name":"_enterpriseInspectors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4584,"src":"6530:21:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[] storage ref)"}},"id":4946,"indexExpression":{"id":4945,"name":"enterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4924,"src":"6552:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6530:33:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":4948,"indexExpression":{"id":4947,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4932,"src":"6564:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6530:36:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4949,"name":"inspector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4926,"src":"6570:9:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6530:49:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4954,"nodeType":"IfStatement","src":"6526:99:21","trueBody":{"id":4953,"nodeType":"Block","src":"6581:44:21","statements":[{"expression":{"hexValue":"74727565","id":4951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6606:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4930,"id":4952,"nodeType":"Return","src":"6599:11:21"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4935,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4932,"src":"6461:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"baseExpression":{"id":4936,"name":"_enterpriseInspectors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4584,"src":"6465:21:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[] storage ref)"}},"id":4938,"indexExpression":{"id":4937,"name":"enterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4924,"src":"6487:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6465:33:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":4939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6499:6:21","memberName":"length","nodeType":"MemberAccess","src":"6465:40:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6461:44:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4956,"initializationExpression":{"assignments":[4932],"declarations":[{"constant":false,"id":4932,"mutability":"mutable","name":"i","nameLocation":"6454:1:21","nodeType":"VariableDeclaration","scope":4956,"src":"6446:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4931,"name":"uint256","nodeType":"ElementaryTypeName","src":"6446:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4934,"initialValue":{"hexValue":"30","id":4933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6458:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6446:13:21"},"loopExpression":{"expression":{"id":4942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6507:3:21","subExpression":{"id":4941,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4932,"src":"6507:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4943,"nodeType":"ExpressionStatement","src":"6507:3:21"},"nodeType":"ForStatement","src":"6441:194:21"},{"expression":{"hexValue":"66616c7365","id":4957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6651:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":4930,"id":4958,"nodeType":"Return","src":"6644:12:21"}]},"id":4960,"implemented":true,"kind":"function","modifiers":[],"name":"_isInspectorAssigned","nameLocation":"6344:20:21","nodeType":"FunctionDefinition","parameters":{"id":4927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4924,"mutability":"mutable","name":"enterprise","nameLocation":"6373:10:21","nodeType":"VariableDeclaration","scope":4960,"src":"6365:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4923,"name":"address","nodeType":"ElementaryTypeName","src":"6365:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4926,"mutability":"mutable","name":"inspector","nameLocation":"6393:9:21","nodeType":"VariableDeclaration","scope":4960,"src":"6385:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4925,"name":"address","nodeType":"ElementaryTypeName","src":"6385:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6364:39:21"},"returnParameters":{"id":4930,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4929,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4960,"src":"6425:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4928,"name":"bool","nodeType":"ElementaryTypeName","src":"6425:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6424:6:21"},"scope":5286,"src":"6335:328:21","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":5021,"nodeType":"Block","src":"6963:337:21","statements":[{"assignments":[4975],"declarations":[{"constant":false,"id":4975,"mutability":"mutable","name":"inspectors","nameLocation":"6990:10:21","nodeType":"VariableDeclaration","scope":5021,"src":"6973:27:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4973,"name":"address","nodeType":"ElementaryTypeName","src":"6973:7:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4974,"nodeType":"ArrayTypeName","src":"6973:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":4979,"initialValue":{"baseExpression":{"id":4976,"name":"_enterpriseInspectors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4584,"src":"7003:21:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[] storage ref)"}},"id":4978,"indexExpression":{"id":4977,"name":"enterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4962,"src":"7025:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7003:33:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"nodeType":"VariableDeclarationStatement","src":"6973:63:21"},{"assignments":[4984],"declarations":[{"constant":false,"id":4984,"mutability":"mutable","name":"periods","nameLocation":"7063:7:21","nodeType":"VariableDeclaration","scope":5021,"src":"7046:24:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4982,"name":"uint256","nodeType":"ElementaryTypeName","src":"7046:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4983,"nodeType":"ArrayTypeName","src":"7046:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":4991,"initialValue":{"arguments":[{"expression":{"id":4988,"name":"inspectors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4975,"src":"7087:10:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7098:6:21","memberName":"length","nodeType":"MemberAccess","src":"7087:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4987,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"7073:13:21","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":4985,"name":"uint256","nodeType":"ElementaryTypeName","src":"7077:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4986,"nodeType":"ArrayTypeName","src":"7077:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":4990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7073:32:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7046:59:21"},{"body":{"id":5015,"nodeType":"Block","src":"7164:90:21","statements":[{"expression":{"id":5013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5003,"name":"periods","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4984,"src":"7178:7:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5005,"indexExpression":{"id":5004,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4993,"src":"7186:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7178:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"baseExpression":{"id":5006,"name":"_lastInspectionTimestamps","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4601,"src":"7191:25:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":5008,"indexExpression":{"id":5007,"name":"enterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4962,"src":"7217:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7191:37:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5012,"indexExpression":{"baseExpression":{"id":5009,"name":"inspectors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4975,"src":"7229:10:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":5011,"indexExpression":{"id":5010,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4993,"src":"7240:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7229:13:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7191:52:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7178:65:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5014,"nodeType":"ExpressionStatement","src":"7178:65:21"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4996,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4993,"src":"7136:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4997,"name":"inspectors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4975,"src":"7140:10:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7151:6:21","memberName":"length","nodeType":"MemberAccess","src":"7140:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7136:21:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5016,"initializationExpression":{"assignments":[4993],"declarations":[{"constant":false,"id":4993,"mutability":"mutable","name":"i","nameLocation":"7129:1:21","nodeType":"VariableDeclaration","scope":5016,"src":"7121:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4992,"name":"uint256","nodeType":"ElementaryTypeName","src":"7121:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4995,"initialValue":{"hexValue":"30","id":4994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7133:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7121:13:21"},"loopExpression":{"expression":{"id":5001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"7159:3:21","subExpression":{"id":5000,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4993,"src":"7159:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5002,"nodeType":"ExpressionStatement","src":"7159:3:21"},"nodeType":"ForStatement","src":"7116:138:21"},{"expression":{"components":[{"id":5017,"name":"inspectors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4975,"src":"7272:10:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},{"id":5018,"name":"periods","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4984,"src":"7284:7:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"id":5019,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7271:21:21","typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_address_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"tuple(address[] memory,uint256[] memory)"}},"functionReturnParameters":4970,"id":5020,"nodeType":"Return","src":"7264:28:21"}]},"functionSelector":"08d0aef7","id":5022,"implemented":true,"kind":"function","modifiers":[],"name":"getEnterpriseInspectors","nameLocation":"6828:23:21","nodeType":"FunctionDefinition","parameters":{"id":4963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4962,"mutability":"mutable","name":"enterprise","nameLocation":"6860:10:21","nodeType":"VariableDeclaration","scope":5022,"src":"6852:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4961,"name":"address","nodeType":"ElementaryTypeName","src":"6852:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6851:20:21"},"returnParameters":{"id":4970,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4966,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5022,"src":"6906:16:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4964,"name":"address","nodeType":"ElementaryTypeName","src":"6906:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4965,"nodeType":"ArrayTypeName","src":"6906:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":4969,"mutability":"mutable","name":"validityPeriods","nameLocation":"6941:15:21","nodeType":"VariableDeclaration","scope":5022,"src":"6924:32:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4967,"name":"uint256","nodeType":"ElementaryTypeName","src":"6924:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4968,"nodeType":"ArrayTypeName","src":"6924:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6905:52:21"},"scope":5286,"src":"6819:481:21","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5138,"nodeType":"Block","src":"7430:784:21","statements":[{"assignments":[5035],"declarations":[{"constant":false,"id":5035,"mutability":"mutable","name":"enterprises","nameLocation":"7456:11:21","nodeType":"VariableDeclaration","scope":5138,"src":"7439:28:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":5033,"name":"address","nodeType":"ElementaryTypeName","src":"7439:7:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5034,"nodeType":"ArrayTypeName","src":"7439:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":5039,"initialValue":{"baseExpression":{"id":5036,"name":"_inspectorEnterprises","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4589,"src":"7470:21:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[] storage ref)"}},"id":5038,"indexExpression":{"id":5037,"name":"inspector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5024,"src":"7492:9:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7470:32:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"nodeType":"VariableDeclarationStatement","src":"7439:63:21"},{"assignments":[5041],"declarations":[{"constant":false,"id":5041,"mutability":"mutable","name":"totalReports","nameLocation":"7518:12:21","nodeType":"VariableDeclaration","scope":5138,"src":"7510:20:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5040,"name":"uint256","nodeType":"ElementaryTypeName","src":"7510:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5042,"nodeType":"VariableDeclarationStatement","src":"7510:20:21"},{"body":{"id":5063,"nodeType":"Block","src":"7623:76:21","statements":[{"expression":{"id":5061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5054,"name":"totalReports","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5041,"src":"7633:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"baseExpression":{"id":5055,"name":"_enterpriseReports","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4595,"src":"7649:18:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_InspectionReport_$5334_storage_$dyn_storage_$","typeString":"mapping(address => struct DataTypes.InspectionReport storage ref[] storage ref)"}},"id":5059,"indexExpression":{"baseExpression":{"id":5056,"name":"enterprises","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5035,"src":"7668:11:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":5058,"indexExpression":{"id":5057,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5044,"src":"7680:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7668:14:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7649:34:21","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_InspectionReport_$5334_storage_$dyn_storage","typeString":"struct DataTypes.InspectionReport storage ref[] storage ref"}},"id":5060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7684:6:21","memberName":"length","nodeType":"MemberAccess","src":"7649:41:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7633:57:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5062,"nodeType":"ExpressionStatement","src":"7633:57:21"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5047,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5044,"src":"7594:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5048,"name":"enterprises","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5035,"src":"7598:11:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":5049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7610:6:21","memberName":"length","nodeType":"MemberAccess","src":"7598:18:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7594:22:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5064,"initializationExpression":{"assignments":[5044],"declarations":[{"constant":false,"id":5044,"mutability":"mutable","name":"i","nameLocation":"7587:1:21","nodeType":"VariableDeclaration","scope":5064,"src":"7579:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5043,"name":"uint256","nodeType":"ElementaryTypeName","src":"7579:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5046,"initialValue":{"hexValue":"30","id":5045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7591:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7579:13:21"},"loopExpression":{"expression":{"id":5052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"7618:3:21","subExpression":{"id":5051,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5044,"src":"7618:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5053,"nodeType":"ExpressionStatement","src":"7618:3:21"},"nodeType":"ForStatement","src":"7574:125:21"},{"assignments":[5070],"declarations":[{"constant":false,"id":5070,"mutability":"mutable","name":"reports","nameLocation":"7778:7:21","nodeType":"VariableDeclaration","scope":5138,"src":"7742:43:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_InspectionReport_$5334_memory_ptr_$dyn_memory_ptr","typeString":"struct DataTypes.InspectionReport[]"},"typeName":{"baseType":{"id":5068,"nodeType":"UserDefinedTypeName","pathNode":{"id":5067,"name":"DataTypes.InspectionReport","nameLocations":["7742:9:21","7752:16:21"],"nodeType":"IdentifierPath","referencedDeclaration":5334,"src":"7742:26:21"},"referencedDeclaration":5334,"src":"7742:26:21","typeDescriptions":{"typeIdentifier":"t_struct$_InspectionReport_$5334_storage_ptr","typeString":"struct DataTypes.InspectionReport"}},"id":5069,"nodeType":"ArrayTypeName","src":"7742:28:21","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_InspectionReport_$5334_storage_$dyn_storage_ptr","typeString":"struct DataTypes.InspectionReport[]"}},"visibility":"internal"}],"id":5077,"initialValue":{"arguments":[{"id":5075,"name":"totalReports","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5041,"src":"7821:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5074,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"7788:32:21","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_InspectionReport_$5334_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct DataTypes.InspectionReport memory[] memory)"},"typeName":{"baseType":{"id":5072,"nodeType":"UserDefinedTypeName","pathNode":{"id":5071,"name":"DataTypes.InspectionReport","nameLocations":["7792:9:21","7802:16:21"],"nodeType":"IdentifierPath","referencedDeclaration":5334,"src":"7792:26:21"},"referencedDeclaration":5334,"src":"7792:26:21","typeDescriptions":{"typeIdentifier":"t_struct$_InspectionReport_$5334_storage_ptr","typeString":"struct DataTypes.InspectionReport"}},"id":5073,"nodeType":"ArrayTypeName","src":"7792:28:21","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_InspectionReport_$5334_storage_$dyn_storage_ptr","typeString":"struct DataTypes.InspectionReport[]"}}},"id":5076,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7788:46:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_InspectionReport_$5334_memory_ptr_$dyn_memory_ptr","typeString":"struct DataTypes.InspectionReport memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7742:92:21"},{"assignments":[5079],"declarations":[{"constant":false,"id":5079,"mutability":"mutable","name":"counter","nameLocation":"7848:7:21","nodeType":"VariableDeclaration","scope":5138,"src":"7840:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5078,"name":"uint256","nodeType":"ElementaryTypeName","src":"7840:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5080,"nodeType":"VariableDeclarationStatement","src":"7840:15:21"},{"body":{"id":5134,"nodeType":"Block","src":"7911:268:21","statements":[{"body":{"id":5132,"nodeType":"Block","src":"7992:181:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"baseExpression":{"id":5107,"name":"_enterpriseReports","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4595,"src":"8010:18:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_InspectionReport_$5334_storage_$dyn_storage_$","typeString":"mapping(address => struct DataTypes.InspectionReport storage ref[] storage ref)"}},"id":5111,"indexExpression":{"baseExpression":{"id":5108,"name":"enterprises","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5035,"src":"8029:11:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":5110,"indexExpression":{"id":5109,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5082,"src":"8041:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8029:14:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8010:34:21","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_InspectionReport_$5334_storage_$dyn_storage","typeString":"struct DataTypes.InspectionReport storage ref[] storage ref"}},"id":5113,"indexExpression":{"id":5112,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5093,"src":"8045:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8010:37:21","typeDescriptions":{"typeIdentifier":"t_struct$_InspectionReport_$5334_storage","typeString":"struct DataTypes.InspectionReport storage ref"}},"id":5114,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8048:9:21","memberName":"inspector","nodeType":"MemberAccess","referencedDeclaration":5321,"src":"8010:47:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5115,"name":"inspector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5024,"src":"8061:9:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8010:60:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5131,"nodeType":"IfStatement","src":"8006:157:21","trueBody":{"id":5130,"nodeType":"Block","src":"8072:91:21","statements":[{"expression":{"id":5128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5117,"name":"reports","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5070,"src":"8090:7:21","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_InspectionReport_$5334_memory_ptr_$dyn_memory_ptr","typeString":"struct DataTypes.InspectionReport memory[] memory"}},"id":5120,"indexExpression":{"id":5119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8098:9:21","subExpression":{"id":5118,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5079,"src":"8098:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8090:18:21","typeDescriptions":{"typeIdentifier":"t_struct$_InspectionReport_$5334_memory_ptr","typeString":"struct DataTypes.InspectionReport memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"baseExpression":{"id":5121,"name":"_enterpriseReports","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4595,"src":"8111:18:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_InspectionReport_$5334_storage_$dyn_storage_$","typeString":"mapping(address => struct DataTypes.InspectionReport storage ref[] storage ref)"}},"id":5125,"indexExpression":{"baseExpression":{"id":5122,"name":"enterprises","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5035,"src":"8130:11:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":5124,"indexExpression":{"id":5123,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5082,"src":"8142:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8130:14:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8111:34:21","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_InspectionReport_$5334_storage_$dyn_storage","typeString":"struct DataTypes.InspectionReport storage ref[] storage ref"}},"id":5127,"indexExpression":{"id":5126,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5093,"src":"8146:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8111:37:21","typeDescriptions":{"typeIdentifier":"t_struct$_InspectionReport_$5334_storage","typeString":"struct DataTypes.InspectionReport storage ref"}},"src":"8090:58:21","typeDescriptions":{"typeIdentifier":"t_struct$_InspectionReport_$5334_memory_ptr","typeString":"struct DataTypes.InspectionReport memory"}},"id":5129,"nodeType":"ExpressionStatement","src":"8090:58:21"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5096,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5093,"src":"7941:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"baseExpression":{"id":5097,"name":"_enterpriseReports","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4595,"src":"7944:18:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_InspectionReport_$5334_storage_$dyn_storage_$","typeString":"mapping(address => struct DataTypes.InspectionReport storage ref[] storage ref)"}},"id":5101,"indexExpression":{"baseExpression":{"id":5098,"name":"enterprises","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5035,"src":"7963:11:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":5100,"indexExpression":{"id":5099,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5082,"src":"7975:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7963:14:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7944:34:21","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_InspectionReport_$5334_storage_$dyn_storage","typeString":"struct DataTypes.InspectionReport storage ref[] storage ref"}},"id":5102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7979:6:21","memberName":"length","nodeType":"MemberAccess","src":"7944:41:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7941:44:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5133,"initializationExpression":{"assignments":[5093],"declarations":[{"constant":false,"id":5093,"mutability":"mutable","name":"j","nameLocation":"7934:1:21","nodeType":"VariableDeclaration","scope":5133,"src":"7926:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5092,"name":"uint256","nodeType":"ElementaryTypeName","src":"7926:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5095,"initialValue":{"hexValue":"30","id":5094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7938:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7926:13:21"},"loopExpression":{"expression":{"id":5105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"7987:3:21","subExpression":{"id":5104,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5093,"src":"7987:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5106,"nodeType":"ExpressionStatement","src":"7987:3:21"},"nodeType":"ForStatement","src":"7921:252:21"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5085,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5082,"src":"7882:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5086,"name":"enterprises","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5035,"src":"7886:11:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":5087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7898:6:21","memberName":"length","nodeType":"MemberAccess","src":"7886:18:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7882:22:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5135,"initializationExpression":{"assignments":[5082],"declarations":[{"constant":false,"id":5082,"mutability":"mutable","name":"i","nameLocation":"7875:1:21","nodeType":"VariableDeclaration","scope":5135,"src":"7867:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5081,"name":"uint256","nodeType":"ElementaryTypeName","src":"7867:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5084,"initialValue":{"hexValue":"30","id":5083,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7879:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7867:13:21"},"loopExpression":{"expression":{"id":5090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"7906:3:21","subExpression":{"id":5089,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5082,"src":"7906:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5091,"nodeType":"ExpressionStatement","src":"7906:3:21"},"nodeType":"ForStatement","src":"7862:317:21"},{"expression":{"id":5136,"name":"reports","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5070,"src":"8200:7:21","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_InspectionReport_$5334_memory_ptr_$dyn_memory_ptr","typeString":"struct DataTypes.InspectionReport memory[] memory"}},"functionReturnParameters":5030,"id":5137,"nodeType":"Return","src":"8193:14:21"}]},"functionSelector":"cc5ed5ea","id":5139,"implemented":true,"kind":"function","modifiers":[],"name":"getInspectorReports","nameLocation":"7315:19:21","nodeType":"FunctionDefinition","parameters":{"id":5025,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5024,"mutability":"mutable","name":"inspector","nameLocation":"7343:9:21","nodeType":"VariableDeclaration","scope":5139,"src":"7335:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5023,"name":"address","nodeType":"ElementaryTypeName","src":"7335:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7334:19:21"},"returnParameters":{"id":5030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5029,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5139,"src":"7393:35:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_InspectionReport_$5334_memory_ptr_$dyn_memory_ptr","typeString":"struct DataTypes.InspectionReport[]"},"typeName":{"baseType":{"id":5027,"nodeType":"UserDefinedTypeName","pathNode":{"id":5026,"name":"DataTypes.InspectionReport","nameLocations":["7393:9:21","7403:16:21"],"nodeType":"IdentifierPath","referencedDeclaration":5334,"src":"7393:26:21"},"referencedDeclaration":5334,"src":"7393:26:21","typeDescriptions":{"typeIdentifier":"t_struct$_InspectionReport_$5334_storage_ptr","typeString":"struct DataTypes.InspectionReport"}},"id":5028,"nodeType":"ArrayTypeName","src":"7393:28:21","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_InspectionReport_$5334_storage_$dyn_storage_ptr","typeString":"struct DataTypes.InspectionReport[]"}},"visibility":"internal"}],"src":"7392:37:21"},"scope":5286,"src":"7306:908:21","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5164,"nodeType":"Block","src":"8479:198:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":5149,"name":"_enterpriseReports","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4595,"src":"8494:18:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_InspectionReport_$5334_storage_$dyn_storage_$","typeString":"mapping(address => struct DataTypes.InspectionReport storage ref[] storage ref)"}},"id":5151,"indexExpression":{"id":5150,"name":"enterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5142,"src":"8513:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8494:30:21","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_InspectionReport_$5334_storage_$dyn_storage","typeString":"struct DataTypes.InspectionReport storage ref[] storage ref"}},"id":5152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8525:6:21","memberName":"length","nodeType":"MemberAccess","src":"8494:37:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8535:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8494:42:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5159,"nodeType":"IfStatement","src":"8490:134:21","trueBody":{"id":5158,"nodeType":"Block","src":"8538:86:21","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5155,"name":"InspectionManager__NoReportsAssociatedWithEnterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5444,"src":"8559:52:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8559:54:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5157,"nodeType":"RevertStatement","src":"8552:61:21"}]}},{"expression":{"baseExpression":{"id":5160,"name":"_enterpriseReports","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4595,"src":"8640:18:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_InspectionReport_$5334_storage_$dyn_storage_$","typeString":"mapping(address => struct DataTypes.InspectionReport storage ref[] storage ref)"}},"id":5162,"indexExpression":{"id":5161,"name":"enterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5142,"src":"8659:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8640:30:21","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_InspectionReport_$5334_storage_$dyn_storage","typeString":"struct DataTypes.InspectionReport storage ref[] storage ref"}},"functionReturnParameters":5148,"id":5163,"nodeType":"Return","src":"8633:37:21"}]},"documentation":{"id":5140,"nodeType":"StructuredDocumentation","src":"8266:41:21","text":"Simple reports getter for testing////"},"functionSelector":"9a98163b","id":5165,"implemented":true,"kind":"function","modifiers":[],"name":"getEnterpriseInspectionReports","nameLocation":"8369:30:21","nodeType":"FunctionDefinition","parameters":{"id":5143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5142,"mutability":"mutable","name":"enterprise","nameLocation":"8408:10:21","nodeType":"VariableDeclaration","scope":5165,"src":"8400:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5141,"name":"address","nodeType":"ElementaryTypeName","src":"8400:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8399:20:21"},"returnParameters":{"id":5148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5147,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5165,"src":"8442:35:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_InspectionReport_$5334_memory_ptr_$dyn_memory_ptr","typeString":"struct DataTypes.InspectionReport[]"},"typeName":{"baseType":{"id":5145,"nodeType":"UserDefinedTypeName","pathNode":{"id":5144,"name":"DataTypes.InspectionReport","nameLocations":["8442:9:21","8452:16:21"],"nodeType":"IdentifierPath","referencedDeclaration":5334,"src":"8442:26:21"},"referencedDeclaration":5334,"src":"8442:26:21","typeDescriptions":{"typeIdentifier":"t_struct$_InspectionReport_$5334_storage_ptr","typeString":"struct DataTypes.InspectionReport"}},"id":5146,"nodeType":"ArrayTypeName","src":"8442:28:21","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_InspectionReport_$5334_storage_$dyn_storage_ptr","typeString":"struct DataTypes.InspectionReport[]"}},"visibility":"internal"}],"src":"8441:37:21"},"scope":5286,"src":"8360:317:21","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5226,"nodeType":"Block","src":"8961:368:21","statements":[{"assignments":[5177],"declarations":[{"constant":false,"id":5177,"mutability":"mutable","name":"resultSize","nameLocation":"8983:10:21","nodeType":"VariableDeclaration","scope":5226,"src":"8975:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5176,"name":"uint256","nodeType":"ElementaryTypeName","src":"8975:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5188,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5178,"name":"limit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5167,"src":"8996:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5179,"name":"_flagCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4613,"src":"9004:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":5180,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5169,"src":"9019:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9004:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8996:29:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":5186,"name":"limit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5167,"src":"9053:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8996:62:21","trueExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5183,"name":"_flagCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4613,"src":"9029:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":5184,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5169,"src":"9044:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9029:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8975:83:21"},{"assignments":[5194],"declarations":[{"constant":false,"id":5194,"mutability":"mutable","name":"result","nameLocation":"9109:6:21","nodeType":"VariableDeclaration","scope":5226,"src":"9072:43:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FlaggedInspection_$5348_memory_ptr_$dyn_memory_ptr","typeString":"struct DataTypes.FlaggedInspection[]"},"typeName":{"baseType":{"id":5192,"nodeType":"UserDefinedTypeName","pathNode":{"id":5191,"name":"DataTypes.FlaggedInspection","nameLocations":["9072:9:21","9082:17:21"],"nodeType":"IdentifierPath","referencedDeclaration":5348,"src":"9072:27:21"},"referencedDeclaration":5348,"src":"9072:27:21","typeDescriptions":{"typeIdentifier":"t_struct$_FlaggedInspection_$5348_storage_ptr","typeString":"struct DataTypes.FlaggedInspection"}},"id":5193,"nodeType":"ArrayTypeName","src":"9072:29:21","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FlaggedInspection_$5348_storage_$dyn_storage_ptr","typeString":"struct DataTypes.FlaggedInspection[]"}},"visibility":"internal"}],"id":5201,"initialValue":{"arguments":[{"id":5199,"name":"resultSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5177,"src":"9152:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5198,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"9118:33:21","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_FlaggedInspection_$5348_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct DataTypes.FlaggedInspection memory[] memory)"},"typeName":{"baseType":{"id":5196,"nodeType":"UserDefinedTypeName","pathNode":{"id":5195,"name":"DataTypes.FlaggedInspection","nameLocations":["9122:9:21","9132:17:21"],"nodeType":"IdentifierPath","referencedDeclaration":5348,"src":"9122:27:21"},"referencedDeclaration":5348,"src":"9122:27:21","typeDescriptions":{"typeIdentifier":"t_struct$_FlaggedInspection_$5348_storage_ptr","typeString":"struct DataTypes.FlaggedInspection"}},"id":5197,"nodeType":"ArrayTypeName","src":"9122:29:21","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FlaggedInspection_$5348_storage_$dyn_storage_ptr","typeString":"struct DataTypes.FlaggedInspection[]"}}},"id":5200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9118:45:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FlaggedInspection_$5348_memory_ptr_$dyn_memory_ptr","typeString":"struct DataTypes.FlaggedInspection memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"9072:91:21"},{"body":{"id":5222,"nodeType":"Block","src":"9219:76:21","statements":[{"expression":{"id":5220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5212,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5194,"src":"9237:6:21","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FlaggedInspection_$5348_memory_ptr_$dyn_memory_ptr","typeString":"struct DataTypes.FlaggedInspection memory[] memory"}},"id":5214,"indexExpression":{"id":5213,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5203,"src":"9244:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9237:9:21","typeDescriptions":{"typeIdentifier":"t_struct$_FlaggedInspection_$5348_memory_ptr","typeString":"struct DataTypes.FlaggedInspection memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":5215,"name":"_flaggedInspections","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4606,"src":"9249:19:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_FlaggedInspection_$5348_storage_$","typeString":"mapping(uint256 => struct DataTypes.FlaggedInspection storage ref)"}},"id":5219,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5216,"name":"offset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5169,"src":"9269:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5217,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5203,"src":"9278:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9269:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9249:31:21","typeDescriptions":{"typeIdentifier":"t_struct$_FlaggedInspection_$5348_storage","typeString":"struct DataTypes.FlaggedInspection storage ref"}},"src":"9237:43:21","typeDescriptions":{"typeIdentifier":"t_struct$_FlaggedInspection_$5348_memory_ptr","typeString":"struct DataTypes.FlaggedInspection memory"}},"id":5221,"nodeType":"ExpressionStatement","src":"9237:43:21"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5206,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5203,"src":"9198:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5207,"name":"resultSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5177,"src":"9202:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9198:14:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5223,"initializationExpression":{"assignments":[5203],"declarations":[{"constant":false,"id":5203,"mutability":"mutable","name":"i","nameLocation":"9191:1:21","nodeType":"VariableDeclaration","scope":5223,"src":"9183:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5202,"name":"uint256","nodeType":"ElementaryTypeName","src":"9183:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5205,"initialValue":{"hexValue":"30","id":5204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9195:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9183:13:21"},"loopExpression":{"expression":{"id":5210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"9214:3:21","subExpression":{"id":5209,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5203,"src":"9214:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5211,"nodeType":"ExpressionStatement","src":"9214:3:21"},"nodeType":"ForStatement","src":"9178:117:21"},{"expression":{"id":5224,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5194,"src":"9316:6:21","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FlaggedInspection_$5348_memory_ptr_$dyn_memory_ptr","typeString":"struct DataTypes.FlaggedInspection memory[] memory"}},"functionReturnParameters":5175,"id":5225,"nodeType":"Return","src":"9309:13:21"}]},"functionSelector":"4e4ddb92","id":5227,"implemented":true,"kind":"function","modifiers":[],"name":"getFlaggedInspections","nameLocation":"8832:21:21","nodeType":"FunctionDefinition","parameters":{"id":5170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5167,"mutability":"mutable","name":"limit","nameLocation":"8862:5:21","nodeType":"VariableDeclaration","scope":5227,"src":"8854:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5166,"name":"uint256","nodeType":"ElementaryTypeName","src":"8854:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5169,"mutability":"mutable","name":"offset","nameLocation":"8877:6:21","nodeType":"VariableDeclaration","scope":5227,"src":"8869:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5168,"name":"uint256","nodeType":"ElementaryTypeName","src":"8869:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8853:31:21"},"returnParameters":{"id":5175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5174,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5227,"src":"8923:36:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FlaggedInspection_$5348_memory_ptr_$dyn_memory_ptr","typeString":"struct DataTypes.FlaggedInspection[]"},"typeName":{"baseType":{"id":5172,"nodeType":"UserDefinedTypeName","pathNode":{"id":5171,"name":"DataTypes.FlaggedInspection","nameLocations":["8923:9:21","8933:17:21"],"nodeType":"IdentifierPath","referencedDeclaration":5348,"src":"8923:27:21"},"referencedDeclaration":5348,"src":"8923:27:21","typeDescriptions":{"typeIdentifier":"t_struct$_FlaggedInspection_$5348_storage_ptr","typeString":"struct DataTypes.FlaggedInspection"}},"id":5173,"nodeType":"ArrayTypeName","src":"8923:29:21","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FlaggedInspection_$5348_storage_$dyn_storage_ptr","typeString":"struct DataTypes.FlaggedInspection[]"}},"visibility":"internal"}],"src":"8922:38:21"},"scope":5286,"src":"8823:506:21","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5284,"nodeType":"Block","src":"9462:344:21","statements":[{"assignments":[5240],"declarations":[{"constant":false,"id":5240,"mutability":"mutable","name":"flaggedIds","nameLocation":"9489:10:21","nodeType":"VariableDeclaration","scope":5284,"src":"9472:27:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5238,"name":"uint256","nodeType":"ElementaryTypeName","src":"9472:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5239,"nodeType":"ArrayTypeName","src":"9472:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":5244,"initialValue":{"baseExpression":{"id":5241,"name":"_enterpriseFlaggedReports","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4611,"src":"9502:25:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[] storage ref)"}},"id":5243,"indexExpression":{"id":5242,"name":"enterprise","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5229,"src":"9528:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9502:37:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"nodeType":"VariableDeclarationStatement","src":"9472:67:21"},{"assignments":[5250],"declarations":[{"constant":false,"id":5250,"mutability":"mutable","name":"result","nameLocation":"9586:6:21","nodeType":"VariableDeclaration","scope":5284,"src":"9549:43:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FlaggedInspection_$5348_memory_ptr_$dyn_memory_ptr","typeString":"struct DataTypes.FlaggedInspection[]"},"typeName":{"baseType":{"id":5248,"nodeType":"UserDefinedTypeName","pathNode":{"id":5247,"name":"DataTypes.FlaggedInspection","nameLocations":["9549:9:21","9559:17:21"],"nodeType":"IdentifierPath","referencedDeclaration":5348,"src":"9549:27:21"},"referencedDeclaration":5348,"src":"9549:27:21","typeDescriptions":{"typeIdentifier":"t_struct$_FlaggedInspection_$5348_storage_ptr","typeString":"struct DataTypes.FlaggedInspection"}},"id":5249,"nodeType":"ArrayTypeName","src":"9549:29:21","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FlaggedInspection_$5348_storage_$dyn_storage_ptr","typeString":"struct DataTypes.FlaggedInspection[]"}},"visibility":"internal"}],"id":5258,"initialValue":{"arguments":[{"expression":{"id":5255,"name":"flaggedIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5240,"src":"9629:10:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9640:6:21","memberName":"length","nodeType":"MemberAccess","src":"9629:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5254,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"9595:33:21","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_FlaggedInspection_$5348_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct DataTypes.FlaggedInspection memory[] memory)"},"typeName":{"baseType":{"id":5252,"nodeType":"UserDefinedTypeName","pathNode":{"id":5251,"name":"DataTypes.FlaggedInspection","nameLocations":["9599:9:21","9609:17:21"],"nodeType":"IdentifierPath","referencedDeclaration":5348,"src":"9599:27:21"},"referencedDeclaration":5348,"src":"9599:27:21","typeDescriptions":{"typeIdentifier":"t_struct$_FlaggedInspection_$5348_storage_ptr","typeString":"struct DataTypes.FlaggedInspection"}},"id":5253,"nodeType":"ArrayTypeName","src":"9599:29:21","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FlaggedInspection_$5348_storage_$dyn_storage_ptr","typeString":"struct DataTypes.FlaggedInspection[]"}}},"id":5257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9595:52:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FlaggedInspection_$5348_memory_ptr_$dyn_memory_ptr","typeString":"struct DataTypes.FlaggedInspection memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"9549:98:21"},{"body":{"id":5280,"nodeType":"Block","src":"9706:71:21","statements":[{"expression":{"id":5278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5270,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5250,"src":"9720:6:21","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FlaggedInspection_$5348_memory_ptr_$dyn_memory_ptr","typeString":"struct DataTypes.FlaggedInspection memory[] memory"}},"id":5272,"indexExpression":{"id":5271,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5260,"src":"9727:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9720:9:21","typeDescriptions":{"typeIdentifier":"t_struct$_FlaggedInspection_$5348_memory_ptr","typeString":"struct DataTypes.FlaggedInspection memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":5273,"name":"_flaggedInspections","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4606,"src":"9732:19:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_FlaggedInspection_$5348_storage_$","typeString":"mapping(uint256 => struct DataTypes.FlaggedInspection storage ref)"}},"id":5277,"indexExpression":{"baseExpression":{"id":5274,"name":"flaggedIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5240,"src":"9752:10:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5276,"indexExpression":{"id":5275,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5260,"src":"9763:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9752:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9732:34:21","typeDescriptions":{"typeIdentifier":"t_struct$_FlaggedInspection_$5348_storage","typeString":"struct DataTypes.FlaggedInspection storage ref"}},"src":"9720:46:21","typeDescriptions":{"typeIdentifier":"t_struct$_FlaggedInspection_$5348_memory_ptr","typeString":"struct DataTypes.FlaggedInspection memory"}},"id":5279,"nodeType":"ExpressionStatement","src":"9720:46:21"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5263,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5260,"src":"9678:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5264,"name":"flaggedIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5240,"src":"9682:10:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9693:6:21","memberName":"length","nodeType":"MemberAccess","src":"9682:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9678:21:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5281,"initializationExpression":{"assignments":[5260],"declarations":[{"constant":false,"id":5260,"mutability":"mutable","name":"i","nameLocation":"9671:1:21","nodeType":"VariableDeclaration","scope":5281,"src":"9663:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5259,"name":"uint256","nodeType":"ElementaryTypeName","src":"9663:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5262,"initialValue":{"hexValue":"30","id":5261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9675:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9663:13:21"},"loopExpression":{"expression":{"id":5268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"9701:3:21","subExpression":{"id":5267,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5260,"src":"9701:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5269,"nodeType":"ExpressionStatement","src":"9701:3:21"},"nodeType":"ForStatement","src":"9658:119:21"},{"expression":{"id":5282,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5250,"src":"9793:6:21","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FlaggedInspection_$5348_memory_ptr_$dyn_memory_ptr","typeString":"struct DataTypes.FlaggedInspection memory[] memory"}},"functionReturnParameters":5235,"id":5283,"nodeType":"Return","src":"9786:13:21"}]},"functionSelector":"68b688c1","id":5285,"implemented":true,"kind":"function","modifiers":[],"name":"getEnterpriseFlaggedReports","nameLocation":"9344:27:21","nodeType":"FunctionDefinition","parameters":{"id":5230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5229,"mutability":"mutable","name":"enterprise","nameLocation":"9380:10:21","nodeType":"VariableDeclaration","scope":5285,"src":"9372:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5228,"name":"address","nodeType":"ElementaryTypeName","src":"9372:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9371:20:21"},"returnParameters":{"id":5235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5234,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5285,"src":"9424:36:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FlaggedInspection_$5348_memory_ptr_$dyn_memory_ptr","typeString":"struct DataTypes.FlaggedInspection[]"},"typeName":{"baseType":{"id":5232,"nodeType":"UserDefinedTypeName","pathNode":{"id":5231,"name":"DataTypes.FlaggedInspection","nameLocations":["9424:9:21","9434:17:21"],"nodeType":"IdentifierPath","referencedDeclaration":5348,"src":"9424:27:21"},"referencedDeclaration":5348,"src":"9424:27:21","typeDescriptions":{"typeIdentifier":"t_struct$_FlaggedInspection_$5348_storage_ptr","typeString":"struct DataTypes.FlaggedInspection"}},"id":5233,"nodeType":"ArrayTypeName","src":"9424:29:21","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FlaggedInspection_$5348_storage_$dyn_storage_ptr","typeString":"struct DataTypes.FlaggedInspection[]"}},"visibility":"internal"}],"src":"9423:38:21"},"scope":5286,"src":"9335:471:21","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":5287,"src":"808:9000:21","usedErrors":[305,308,5392,5394,5396,5398,5400,5402,5404,5406,5408,5410,5412,5414,5416,5418,5420,5422,5424,5426,5428,5430,5432,5434,5436,5438,5440,5442,5444,5446,5448,5450],"usedEvents":[317,326,335,5506,5520,5532,5556,5560,5568,5576,5582,5588]}],"src":"32:9776:21"},"id":21},"contracts/utils/DataTypes.sol":{"ast":{"absolutePath":"contracts/utils/DataTypes.sol","exportedSymbols":{"DataTypes":[5387]},"id":5388,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5288,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:22"},{"abstract":false,"baseContracts":[],"canonicalName":"DataTypes","contractDependencies":[],"contractKind":"library","documentation":{"id":5289,"nodeType":"StructuredDocumentation","src":"58:164:22","text":" @author @0xJonaseb11\n @dev This library contains the data types used by the contracts\n @dev These structs hold a huge role in maintaining contract states"},"fullyImplemented":true,"id":5387,"linearizedBaseContracts":[5387],"name":"DataTypes","nameLocation":"231:9:22","nodeType":"ContractDefinition","nodes":[{"canonicalName":"DataTypes.Certification","id":5302,"members":[{"constant":false,"id":5291,"mutability":"mutable","name":"industry","nameLocation":"285:8:22","nodeType":"VariableDeclaration","scope":5302,"src":"278:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":5290,"name":"string","nodeType":"ElementaryTypeName","src":"278:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5293,"mutability":"mutable","name":"metadataURI","nameLocation":"310:11:22","nodeType":"VariableDeclaration","scope":5302,"src":"303:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":5292,"name":"string","nodeType":"ElementaryTypeName","src":"303:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5295,"mutability":"mutable","name":"certifiedAt","nameLocation":"339:11:22","nodeType":"VariableDeclaration","scope":5302,"src":"331:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5294,"name":"uint256","nodeType":"ElementaryTypeName","src":"331:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5297,"mutability":"mutable","name":"expiryDate","nameLocation":"368:10:22","nodeType":"VariableDeclaration","scope":5302,"src":"360:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5296,"name":"uint256","nodeType":"ElementaryTypeName","src":"360:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5299,"mutability":"mutable","name":"isCertified","nameLocation":"393:11:22","nodeType":"VariableDeclaration","scope":5302,"src":"388:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5298,"name":"bool","nodeType":"ElementaryTypeName","src":"388:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5301,"mutability":"mutable","name":"tokenId","nameLocation":"422:7:22","nodeType":"VariableDeclaration","scope":5302,"src":"414:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5300,"name":"uint256","nodeType":"ElementaryTypeName","src":"414:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Certification","nameLocation":"254:13:22","nodeType":"StructDefinition","scope":5387,"src":"247:189:22","visibility":"public"},{"canonicalName":"DataTypes.Enterprise","id":5319,"members":[{"constant":false,"id":5304,"mutability":"mutable","name":"enterpriseAddress","nameLocation":"478:17:22","nodeType":"VariableDeclaration","scope":5319,"src":"470:25:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5303,"name":"address","nodeType":"ElementaryTypeName","src":"470:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5306,"mutability":"mutable","name":"name","nameLocation":"512:4:22","nodeType":"VariableDeclaration","scope":5319,"src":"505:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":5305,"name":"string","nodeType":"ElementaryTypeName","src":"505:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5308,"mutability":"mutable","name":"industry","nameLocation":"533:8:22","nodeType":"VariableDeclaration","scope":5319,"src":"526:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":5307,"name":"string","nodeType":"ElementaryTypeName","src":"526:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5310,"mutability":"mutable","name":"metadataURI","nameLocation":"558:11:22","nodeType":"VariableDeclaration","scope":5319,"src":"551:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":5309,"name":"string","nodeType":"ElementaryTypeName","src":"551:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5312,"mutability":"mutable","name":"isRegistered","nameLocation":"584:12:22","nodeType":"VariableDeclaration","scope":5319,"src":"579:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5311,"name":"bool","nodeType":"ElementaryTypeName","src":"579:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5314,"mutability":"mutable","name":"registrationDate","nameLocation":"614:16:22","nodeType":"VariableDeclaration","scope":5319,"src":"606:24:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5313,"name":"uint256","nodeType":"ElementaryTypeName","src":"606:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5316,"mutability":"mutable","name":"lastUpdated","nameLocation":"648:11:22","nodeType":"VariableDeclaration","scope":5319,"src":"640:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5315,"name":"uint256","nodeType":"ElementaryTypeName","src":"640:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5318,"mutability":"mutable","name":"certificateId","nameLocation":"677:13:22","nodeType":"VariableDeclaration","scope":5319,"src":"669:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5317,"name":"uint256","nodeType":"ElementaryTypeName","src":"669:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Enterprise","nameLocation":"449:10:22","nodeType":"StructDefinition","scope":5387,"src":"442:255:22","visibility":"public"},{"canonicalName":"DataTypes.InspectionReport","id":5334,"members":[{"constant":false,"id":5321,"mutability":"mutable","name":"inspector","nameLocation":"745:9:22","nodeType":"VariableDeclaration","scope":5334,"src":"737:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5320,"name":"address","nodeType":"ElementaryTypeName","src":"737:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5323,"mutability":"mutable","name":"enterprise","nameLocation":"772:10:22","nodeType":"VariableDeclaration","scope":5334,"src":"764:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5322,"name":"address","nodeType":"ElementaryTypeName","src":"764:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5325,"mutability":"mutable","name":"remarks","nameLocation":"799:7:22","nodeType":"VariableDeclaration","scope":5334,"src":"792:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":5324,"name":"string","nodeType":"ElementaryTypeName","src":"792:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5327,"mutability":"mutable","name":"evidenceURI","nameLocation":"823:11:22","nodeType":"VariableDeclaration","scope":5334,"src":"816:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":5326,"name":"string","nodeType":"ElementaryTypeName","src":"816:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5329,"mutability":"mutable","name":"inspectedAt","nameLocation":"865:11:22","nodeType":"VariableDeclaration","scope":5334,"src":"857:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5328,"name":"uint256","nodeType":"ElementaryTypeName","src":"857:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5331,"mutability":"mutable","name":"passed","nameLocation":"891:6:22","nodeType":"VariableDeclaration","scope":5334,"src":"886:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5330,"name":"bool","nodeType":"ElementaryTypeName","src":"886:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5333,"mutability":"mutable","name":"flagged","nameLocation":"912:7:22","nodeType":"VariableDeclaration","scope":5334,"src":"907:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5332,"name":"bool","nodeType":"ElementaryTypeName","src":"907:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"InspectionReport","nameLocation":"710:16:22","nodeType":"StructDefinition","scope":5387,"src":"703:223:22","visibility":"public"},{"canonicalName":"DataTypes.FlaggedInspection","id":5348,"members":[{"constant":false,"id":5336,"mutability":"mutable","name":"enterprise","nameLocation":"975:10:22","nodeType":"VariableDeclaration","scope":5348,"src":"967:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5335,"name":"address","nodeType":"ElementaryTypeName","src":"967:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5338,"mutability":"mutable","name":"reportIndex","nameLocation":"1003:11:22","nodeType":"VariableDeclaration","scope":5348,"src":"995:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5337,"name":"uint256","nodeType":"ElementaryTypeName","src":"995:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5341,"mutability":"mutable","name":"report","nameLocation":"1041:6:22","nodeType":"VariableDeclaration","scope":5348,"src":"1024:23:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_InspectionReport_$5334_storage_ptr","typeString":"struct DataTypes.InspectionReport"},"typeName":{"id":5340,"nodeType":"UserDefinedTypeName","pathNode":{"id":5339,"name":"InspectionReport","nameLocations":["1024:16:22"],"nodeType":"IdentifierPath","referencedDeclaration":5334,"src":"1024:16:22"},"referencedDeclaration":5334,"src":"1024:16:22","typeDescriptions":{"typeIdentifier":"t_struct$_InspectionReport_$5334_storage_ptr","typeString":"struct DataTypes.InspectionReport"}},"visibility":"internal"},{"constant":false,"id":5343,"mutability":"mutable","name":"flaggedBy","nameLocation":"1065:9:22","nodeType":"VariableDeclaration","scope":5348,"src":"1057:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5342,"name":"address","nodeType":"ElementaryTypeName","src":"1057:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5345,"mutability":"mutable","name":"reason","nameLocation":"1091:6:22","nodeType":"VariableDeclaration","scope":5348,"src":"1084:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":5344,"name":"string","nodeType":"ElementaryTypeName","src":"1084:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5347,"mutability":"mutable","name":"flaggedAt","nameLocation":"1115:9:22","nodeType":"VariableDeclaration","scope":5348,"src":"1107:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5346,"name":"uint256","nodeType":"ElementaryTypeName","src":"1107:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"FlaggedInspection","nameLocation":"939:17:22","nodeType":"StructDefinition","scope":5387,"src":"932:199:22","visibility":"public"},{"canonicalName":"DataTypes.NFTCertificate","id":5359,"members":[{"constant":false,"id":5350,"mutability":"mutable","name":"enterprise","nameLocation":"1173:10:22","nodeType":"VariableDeclaration","scope":5359,"src":"1165:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5349,"name":"address","nodeType":"ElementaryTypeName","src":"1165:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5352,"mutability":"mutable","name":"issuer","nameLocation":"1197:6:22","nodeType":"VariableDeclaration","scope":5359,"src":"1189:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5351,"name":"address","nodeType":"ElementaryTypeName","src":"1189:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5354,"mutability":"mutable","name":"issuedAt","nameLocation":"1217:8:22","nodeType":"VariableDeclaration","scope":5359,"src":"1209:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5353,"name":"uint256","nodeType":"ElementaryTypeName","src":"1209:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5356,"mutability":"mutable","name":"expiresAt","nameLocation":"1239:9:22","nodeType":"VariableDeclaration","scope":5359,"src":"1231:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5355,"name":"uint256","nodeType":"ElementaryTypeName","src":"1231:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5358,"mutability":"mutable","name":"isRevoked","nameLocation":"1259:9:22","nodeType":"VariableDeclaration","scope":5359,"src":"1254:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5357,"name":"bool","nodeType":"ElementaryTypeName","src":"1254:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"NFTCertificate","nameLocation":"1144:14:22","nodeType":"StructDefinition","scope":5387,"src":"1137:138:22","visibility":"public"},{"canonicalName":"DataTypes.AuditCase","id":5381,"members":[{"constant":false,"id":5361,"mutability":"mutable","name":"id","nameLocation":"1316:2:22","nodeType":"VariableDeclaration","scope":5381,"src":"1308:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5360,"name":"uint256","nodeType":"ElementaryTypeName","src":"1308:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5363,"mutability":"mutable","name":"targetEnterprise","nameLocation":"1336:16:22","nodeType":"VariableDeclaration","scope":5381,"src":"1328:24:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5362,"name":"address","nodeType":"ElementaryTypeName","src":"1328:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5365,"mutability":"mutable","name":"inspectionId","nameLocation":"1370:12:22","nodeType":"VariableDeclaration","scope":5381,"src":"1362:20:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5364,"name":"uint256","nodeType":"ElementaryTypeName","src":"1362:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5367,"mutability":"mutable","name":"auditor","nameLocation":"1400:7:22","nodeType":"VariableDeclaration","scope":5381,"src":"1392:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5366,"name":"address","nodeType":"ElementaryTypeName","src":"1392:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5369,"mutability":"mutable","name":"reason","nameLocation":"1424:6:22","nodeType":"VariableDeclaration","scope":5381,"src":"1417:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":5368,"name":"string","nodeType":"ElementaryTypeName","src":"1417:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5371,"mutability":"mutable","name":"evidenceURI","nameLocation":"1447:11:22","nodeType":"VariableDeclaration","scope":5381,"src":"1440:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":5370,"name":"string","nodeType":"ElementaryTypeName","src":"1440:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5373,"mutability":"mutable","name":"depositAmount","nameLocation":"1476:13:22","nodeType":"VariableDeclaration","scope":5381,"src":"1468:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5372,"name":"uint256","nodeType":"ElementaryTypeName","src":"1468:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5376,"mutability":"mutable","name":"status","nameLocation":"1511:6:22","nodeType":"VariableDeclaration","scope":5381,"src":"1499:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_AuditStatus_$5386","typeString":"enum DataTypes.AuditStatus"},"typeName":{"id":5375,"nodeType":"UserDefinedTypeName","pathNode":{"id":5374,"name":"AuditStatus","nameLocations":["1499:11:22"],"nodeType":"IdentifierPath","referencedDeclaration":5386,"src":"1499:11:22"},"referencedDeclaration":5386,"src":"1499:11:22","typeDescriptions":{"typeIdentifier":"t_enum$_AuditStatus_$5386","typeString":"enum DataTypes.AuditStatus"}},"visibility":"internal"},{"constant":false,"id":5378,"mutability":"mutable","name":"createdAt","nameLocation":"1535:9:22","nodeType":"VariableDeclaration","scope":5381,"src":"1527:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5377,"name":"uint256","nodeType":"ElementaryTypeName","src":"1527:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5380,"mutability":"mutable","name":"resolvedAt","nameLocation":"1562:10:22","nodeType":"VariableDeclaration","scope":5381,"src":"1554:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5379,"name":"uint256","nodeType":"ElementaryTypeName","src":"1554:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"AuditCase","nameLocation":"1288:9:22","nodeType":"StructDefinition","scope":5387,"src":"1281:298:22","visibility":"public"},{"canonicalName":"DataTypes.AuditStatus","id":5386,"members":[{"id":5382,"name":"Pending","nameLocation":"1612:7:22","nodeType":"EnumValue","src":"1612:7:22"},{"id":5383,"name":"Upheld","nameLocation":"1629:6:22","nodeType":"EnumValue","src":"1629:6:22"},{"id":5384,"name":"Rejected","nameLocation":"1645:8:22","nodeType":"EnumValue","src":"1645:8:22"},{"id":5385,"name":"Appealed","nameLocation":"1663:8:22","nodeType":"EnumValue","src":"1663:8:22"}],"name":"AuditStatus","nameLocation":"1590:11:22","nodeType":"EnumDefinition","src":"1585:92:22"}],"scope":5388,"src":"223:1456:22","usedErrors":[],"usedEvents":[]}],"src":"32:1647:22"},"id":22},"contracts/utils/Errors.sol":{"ast":{"absolutePath":"contracts/utils/Errors.sol","exportedSymbols":{"Errors":[5451]},"id":5452,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5389,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:23"},{"abstract":false,"baseContracts":[],"canonicalName":"Errors","contractDependencies":[],"contractKind":"contract","documentation":{"id":5390,"nodeType":"StructuredDocumentation","src":"58:151:23","text":" @author @0xJonaseb11\n @dev contains the custom errors emitted by the contracts\n@notice All the contracts inherit this to handle custom errors"},"fullyImplemented":true,"id":5451,"linearizedBaseContracts":[5451],"name":"Errors","nameLocation":"220:6:23","nodeType":"ContractDefinition","nodes":[{"errorSelector":"e6c4247b","id":5392,"name":"InvalidAddress","nameLocation":"239:14:23","nodeType":"ErrorDefinition","parameters":{"id":5391,"nodeType":"ParameterList","parameters":[],"src":"253:2:23"},"src":"233:23:23"},{"errorSelector":"b1af8488","id":5394,"name":"RolesManager__UnauthorizedToPerformAction","nameLocation":"318:41:23","nodeType":"ErrorDefinition","parameters":{"id":5393,"nodeType":"ParameterList","parameters":[],"src":"359:2:23"},"src":"312:50:23"},{"errorSelector":"6dfd26e2","id":5396,"name":"RolesManager__NotAuthorizedCertifier","nameLocation":"373:36:23","nodeType":"ErrorDefinition","parameters":{"id":5395,"nodeType":"ParameterList","parameters":[],"src":"409:2:23"},"src":"367:45:23"},{"errorSelector":"e9aab751","id":5398,"name":"RolesManager__NotAuthorizedInspector","nameLocation":"423:36:23","nodeType":"ErrorDefinition","parameters":{"id":5397,"nodeType":"ParameterList","parameters":[],"src":"459:2:23"},"src":"417:45:23"},{"errorSelector":"ca93e5db","id":5400,"name":"RolesManager__NotAuthorizedAuditor","nameLocation":"473:34:23","nodeType":"ErrorDefinition","parameters":{"id":5399,"nodeType":"ParameterList","parameters":[],"src":"507:2:23"},"src":"467:43:23"},{"errorSelector":"c7dd51e6","id":5402,"name":"RolesManager__NotAuthorizedEnterprise","nameLocation":"521:37:23","nodeType":"ErrorDefinition","parameters":{"id":5401,"nodeType":"ParameterList","parameters":[],"src":"558:2:23"},"src":"515:46:23"},{"errorSelector":"113742bc","id":5404,"name":"RolesManager__NotAuthorizedCertificateFactory","nameLocation":"572:45:23","nodeType":"ErrorDefinition","parameters":{"id":5403,"nodeType":"ParameterList","parameters":[],"src":"617:2:23"},"src":"566:54:23"},{"errorSelector":"1b6c0fe0","id":5406,"name":"RolesManager__NotAuthorizedPublicUser","nameLocation":"631:37:23","nodeType":"ErrorDefinition","parameters":{"id":5405,"nodeType":"ParameterList","parameters":[],"src":"668:2:23"},"src":"625:46:23"},{"errorSelector":"510a5833","id":5408,"name":"RolesManager__AlreadyHasRole","nameLocation":"682:28:23","nodeType":"ErrorDefinition","parameters":{"id":5407,"nodeType":"ParameterList","parameters":[],"src":"710:2:23"},"src":"676:37:23"},{"errorSelector":"72942210","id":5410,"name":"RolesManager__InvalidDuration","nameLocation":"724:29:23","nodeType":"ErrorDefinition","parameters":{"id":5409,"nodeType":"ParameterList","parameters":[],"src":"753:2:23"},"src":"718:38:23"},{"errorSelector":"7d6eaf93","id":5412,"name":"RolesManager__EmptyArray","nameLocation":"767:24:23","nodeType":"ErrorDefinition","parameters":{"id":5411,"nodeType":"ParameterList","parameters":[],"src":"791:2:23"},"src":"761:33:23"},{"errorSelector":"90a2f793","id":5414,"name":"RolesManager__ArrayLengthMismatch","nameLocation":"805:33:23","nodeType":"ErrorDefinition","parameters":{"id":5413,"nodeType":"ParameterList","parameters":[],"src":"838:2:23"},"src":"799:42:23"},{"errorSelector":"ccf0793a","id":5416,"name":"RolesManager__RoleDoesNotExist","nameLocation":"852:30:23","nodeType":"ErrorDefinition","parameters":{"id":5415,"nodeType":"ParameterList","parameters":[],"src":"882:2:23"},"src":"846:39:23"},{"errorSelector":"994ced15","id":5418,"name":"EnterpriseRegistry__EnterpriseAlreadyExists","nameLocation":"948:43:23","nodeType":"ErrorDefinition","parameters":{"id":5417,"nodeType":"ParameterList","parameters":[],"src":"991:2:23"},"src":"942:52:23"},{"errorSelector":"02bdbd09","id":5420,"name":"EnterpriseRegistry__EnterpriseDoesNotExist","nameLocation":"1005:42:23","nodeType":"ErrorDefinition","parameters":{"id":5419,"nodeType":"ParameterList","parameters":[],"src":"1047:2:23"},"src":"999:51:23"},{"errorSelector":"4c512b83","id":5422,"name":"EnterpriseRegistry__InvalidStart","nameLocation":"1061:32:23","nodeType":"ErrorDefinition","parameters":{"id":5421,"nodeType":"ParameterList","parameters":[],"src":"1093:2:23"},"src":"1055:41:23"},{"errorSelector":"69136c81","id":5424,"name":"CertificationAuthority__EnterpriseAlreadyCertified","nameLocation":"1157:50:23","nodeType":"ErrorDefinition","parameters":{"id":5423,"nodeType":"ParameterList","parameters":[],"src":"1207:2:23"},"src":"1151:59:23"},{"errorSelector":"114444ee","id":5426,"name":"CertificationAuthority__EnterpriseNotCertifiedYet","nameLocation":"1221:49:23","nodeType":"ErrorDefinition","parameters":{"id":5425,"nodeType":"ParameterList","parameters":[],"src":"1270:2:23"},"src":"1215:58:23"},{"errorSelector":"c15b33b2","id":5428,"name":"CertificationAuthority__CertificationNotExpiredYet","nameLocation":"1284:50:23","nodeType":"ErrorDefinition","parameters":{"id":5427,"nodeType":"ParameterList","parameters":[],"src":"1334:2:23"},"src":"1278:59:23"},{"errorSelector":"bda052e8","id":5430,"name":"CertificateNFT__EnterpriseAlreadyCertified","nameLocation":"1393:42:23","nodeType":"ErrorDefinition","parameters":{"id":5429,"nodeType":"ParameterList","parameters":[],"src":"1435:2:23"},"src":"1387:51:23"},{"errorSelector":"d2b9de38","id":5432,"name":"CertificateNFT__CertificateDoesNotExist","nameLocation":"1449:39:23","nodeType":"ErrorDefinition","parameters":{"id":5431,"nodeType":"ParameterList","parameters":[],"src":"1488:2:23"},"src":"1443:48:23"},{"errorSelector":"6293e524","id":5434,"name":"InspectionManager__InspectorAlreadyAssigned","nameLocation":"1551:43:23","nodeType":"ErrorDefinition","parameters":{"id":5433,"nodeType":"ParameterList","parameters":[],"src":"1594:2:23"},"src":"1545:52:23"},{"errorSelector":"2f4f0a3e","id":5436,"name":"InspectionManager__InspectionPeriodExpired","nameLocation":"1608:42:23","nodeType":"ErrorDefinition","parameters":{"id":5435,"nodeType":"ParameterList","parameters":[],"src":"1650:2:23"},"src":"1602:51:23"},{"errorSelector":"3dec104f","id":5438,"name":"InspectionManager__NotAssignedToEnterprise","nameLocation":"1664:42:23","nodeType":"ErrorDefinition","parameters":{"id":5437,"nodeType":"ParameterList","parameters":[],"src":"1706:2:23"},"src":"1658:51:23"},{"errorSelector":"15c25ffd","id":5440,"name":"InspectionManager__InvalidReportIndex","nameLocation":"1720:37:23","nodeType":"ErrorDefinition","parameters":{"id":5439,"nodeType":"ParameterList","parameters":[],"src":"1757:2:23"},"src":"1714:46:23"},{"errorSelector":"c2d1c491","id":5442,"name":"InspectionManager__ReportAlreadyFlagged","nameLocation":"1771:39:23","nodeType":"ErrorDefinition","parameters":{"id":5441,"nodeType":"ParameterList","parameters":[],"src":"1810:2:23"},"src":"1765:48:23"},{"errorSelector":"fc325983","id":5444,"name":"InspectionManager__NoReportsAssociatedWithEnterprise","nameLocation":"1824:52:23","nodeType":"ErrorDefinition","parameters":{"id":5443,"nodeType":"ParameterList","parameters":[],"src":"1876:2:23"},"src":"1818:61:23"},{"errorSelector":"06c9d5d8","id":5446,"name":"AuditorOversight__NotAuthorizedEnterpriseOwner","nameLocation":"1943:46:23","nodeType":"ErrorDefinition","parameters":{"id":5445,"nodeType":"ParameterList","parameters":[],"src":"1989:2:23"},"src":"1937:55:23"},{"errorSelector":"b8e8d56f","id":5448,"name":"AuditorOversight__AppealWindowClosed","nameLocation":"2003:36:23","nodeType":"ErrorDefinition","parameters":{"id":5447,"nodeType":"ParameterList","parameters":[],"src":"2039:2:23"},"src":"1997:45:23"},{"errorSelector":"b3709f80","id":5450,"name":"AuditorOversight__CaseNotPending","nameLocation":"2053:32:23","nodeType":"ErrorDefinition","parameters":{"id":5449,"nodeType":"ParameterList","parameters":[],"src":"2085:2:23"},"src":"2047:41:23"}],"scope":5452,"src":"211:1880:23","usedErrors":[5392,5394,5396,5398,5400,5402,5404,5406,5408,5410,5412,5414,5416,5418,5420,5422,5424,5426,5428,5430,5432,5434,5436,5438,5440,5442,5444,5446,5448,5450],"usedEvents":[]}],"src":"32:2059:23"},"id":23},"contracts/utils/Events.sol":{"ast":{"absolutePath":"contracts/utils/Events.sol","exportedSymbols":{"Events":[5625]},"id":5626,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5453,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:24"},{"abstract":false,"baseContracts":[],"canonicalName":"Events","contractDependencies":[],"contractKind":"library","documentation":{"id":5454,"nodeType":"StructuredDocumentation","src":"57:149:24","text":" @author @0xJonaseb11\n @dev This library contains the events emitted by the contracts\n @dev All the contracts inherit this to handle events"},"fullyImplemented":true,"id":5625,"linearizedBaseContracts":[5625],"name":"Events","nameLocation":"216:6:24","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"56a1f3fa57a4cc6a9be7aaa185ba31c140ea18678a1b45900756c2e5e1ba8dd2","id":5464,"name":"CertificationGranted","nameLocation":"235:20:24","nodeType":"EventDefinition","parameters":{"id":5463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5456,"indexed":true,"mutability":"mutable","name":"enterprise","nameLocation":"272:10:24","nodeType":"VariableDeclaration","scope":5464,"src":"256:26:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5455,"name":"address","nodeType":"ElementaryTypeName","src":"256:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5458,"indexed":false,"mutability":"mutable","name":"industry","nameLocation":"291:8:24","nodeType":"VariableDeclaration","scope":5464,"src":"284:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5457,"name":"string","nodeType":"ElementaryTypeName","src":"284:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5460,"indexed":false,"mutability":"mutable","name":"metadataURI","nameLocation":"308:11:24","nodeType":"VariableDeclaration","scope":5464,"src":"301:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5459,"name":"string","nodeType":"ElementaryTypeName","src":"301:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5462,"indexed":false,"mutability":"mutable","name":"expiryDate","nameLocation":"329:10:24","nodeType":"VariableDeclaration","scope":5464,"src":"321:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5461,"name":"uint256","nodeType":"ElementaryTypeName","src":"321:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"255:85:24"},"src":"229:112:24"},{"anonymous":false,"eventSelector":"ddbc5d6ff23c8e382806a60af54f0614adddcbcb9b76b279a95a318414d7635b","id":5468,"name":"CertificationRevoked","nameLocation":"352:20:24","nodeType":"EventDefinition","parameters":{"id":5467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5466,"indexed":true,"mutability":"mutable","name":"enterprise","nameLocation":"389:10:24","nodeType":"VariableDeclaration","scope":5468,"src":"373:26:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5465,"name":"address","nodeType":"ElementaryTypeName","src":"373:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"372:28:24"},"src":"346:55:24"},{"anonymous":false,"eventSelector":"4a9038a38263b38736ddc315c982f0f7ba9999b67c66a31efc9e1efb3677f4c2","id":5474,"name":"CertificationUpdated","nameLocation":"412:20:24","nodeType":"EventDefinition","parameters":{"id":5473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5470,"indexed":true,"mutability":"mutable","name":"enterprise","nameLocation":"449:10:24","nodeType":"VariableDeclaration","scope":5474,"src":"433:26:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5469,"name":"address","nodeType":"ElementaryTypeName","src":"433:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5472,"indexed":false,"mutability":"mutable","name":"newMetadataURI","nameLocation":"468:14:24","nodeType":"VariableDeclaration","scope":5474,"src":"461:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5471,"name":"string","nodeType":"ElementaryTypeName","src":"461:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"432:51:24"},"src":"406:78:24"},{"anonymous":false,"eventSelector":"b50e304bc7ed3e883d934fa4433b1f296fa9a8d5631659d4f61cb6581335ee03","id":5486,"name":"EnterpriseRegistered","nameLocation":"496:20:24","nodeType":"EventDefinition","parameters":{"id":5485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5476,"indexed":true,"mutability":"mutable","name":"enterprise","nameLocation":"533:10:24","nodeType":"VariableDeclaration","scope":5486,"src":"517:26:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5475,"name":"address","nodeType":"ElementaryTypeName","src":"517:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5478,"indexed":false,"mutability":"mutable","name":"name","nameLocation":"552:4:24","nodeType":"VariableDeclaration","scope":5486,"src":"545:11:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5477,"name":"string","nodeType":"ElementaryTypeName","src":"545:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5480,"indexed":false,"mutability":"mutable","name":"industry","nameLocation":"565:8:24","nodeType":"VariableDeclaration","scope":5486,"src":"558:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5479,"name":"string","nodeType":"ElementaryTypeName","src":"558:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5482,"indexed":false,"mutability":"mutable","name":"metadataURI","nameLocation":"582:11:24","nodeType":"VariableDeclaration","scope":5486,"src":"575:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5481,"name":"string","nodeType":"ElementaryTypeName","src":"575:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5484,"indexed":false,"mutability":"mutable","name":"certificateId","nameLocation":"603:13:24","nodeType":"VariableDeclaration","scope":5486,"src":"595:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5483,"name":"uint256","nodeType":"ElementaryTypeName","src":"595:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"516:101:24"},"src":"490:128:24"},{"anonymous":false,"eventSelector":"5ac4129413bed9cf9afb0946b31ca2bc15f2e714a7cf6ec2ef4aa6ebdbbc59f9","id":5492,"name":"EnterpriseUpdated","nameLocation":"629:17:24","nodeType":"EventDefinition","parameters":{"id":5491,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5488,"indexed":true,"mutability":"mutable","name":"enterprise","nameLocation":"663:10:24","nodeType":"VariableDeclaration","scope":5492,"src":"647:26:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5487,"name":"address","nodeType":"ElementaryTypeName","src":"647:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5490,"indexed":false,"mutability":"mutable","name":"newMetadataURI","nameLocation":"682:14:24","nodeType":"VariableDeclaration","scope":5492,"src":"675:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5489,"name":"string","nodeType":"ElementaryTypeName","src":"675:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"646:51:24"},"src":"623:75:24"},{"anonymous":false,"eventSelector":"aa4851f4db5fea12fcb0c52afc6bc6387f0aa8f3545624fdbd04c9ba85fb651e","id":5498,"name":"EnterpriseDeregistered","nameLocation":"709:22:24","nodeType":"EventDefinition","parameters":{"id":5497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5494,"indexed":true,"mutability":"mutable","name":"enterprise","nameLocation":"748:10:24","nodeType":"VariableDeclaration","scope":5498,"src":"732:26:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5493,"name":"address","nodeType":"ElementaryTypeName","src":"732:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5496,"indexed":false,"mutability":"mutable","name":"deregisteredAt","nameLocation":"768:14:24","nodeType":"VariableDeclaration","scope":5498,"src":"760:22:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5495,"name":"uint256","nodeType":"ElementaryTypeName","src":"760:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"731:52:24"},"src":"703:81:24"},{"anonymous":false,"eventSelector":"0eb676771c16d4fb5bc9e83f804be8ad19cd67426581c189e482796624a1ac9f","id":5506,"name":"InspectorAssigned","nameLocation":"800:17:24","nodeType":"EventDefinition","parameters":{"id":5505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5500,"indexed":true,"mutability":"mutable","name":"enterprise","nameLocation":"834:10:24","nodeType":"VariableDeclaration","scope":5506,"src":"818:26:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5499,"name":"address","nodeType":"ElementaryTypeName","src":"818:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5502,"indexed":true,"mutability":"mutable","name":"inspector","nameLocation":"862:9:24","nodeType":"VariableDeclaration","scope":5506,"src":"846:25:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5501,"name":"address","nodeType":"ElementaryTypeName","src":"846:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5504,"indexed":false,"mutability":"mutable","name":"validityPeriod","nameLocation":"881:14:24","nodeType":"VariableDeclaration","scope":5506,"src":"873:22:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5503,"name":"uint256","nodeType":"ElementaryTypeName","src":"873:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"817:79:24"},"src":"794:103:24"},{"anonymous":false,"eventSelector":"d1b5f5f27a6c067d892d5201d9160332ad987f12ed191d83be7d4fb4dc876716","id":5520,"name":"InspectionReportSubmitted","nameLocation":"908:25:24","nodeType":"EventDefinition","parameters":{"id":5519,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5508,"indexed":true,"mutability":"mutable","name":"inspector","nameLocation":"950:9:24","nodeType":"VariableDeclaration","scope":5520,"src":"934:25:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5507,"name":"address","nodeType":"ElementaryTypeName","src":"934:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5510,"indexed":true,"mutability":"mutable","name":"enterprise","nameLocation":"977:10:24","nodeType":"VariableDeclaration","scope":5520,"src":"961:26:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5509,"name":"address","nodeType":"ElementaryTypeName","src":"961:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5512,"indexed":false,"mutability":"mutable","name":"passed","nameLocation":"994:6:24","nodeType":"VariableDeclaration","scope":5520,"src":"989:11:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5511,"name":"bool","nodeType":"ElementaryTypeName","src":"989:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5514,"indexed":false,"mutability":"mutable","name":"remarks","nameLocation":"1009:7:24","nodeType":"VariableDeclaration","scope":5520,"src":"1002:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5513,"name":"string","nodeType":"ElementaryTypeName","src":"1002:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5516,"indexed":false,"mutability":"mutable","name":"evidenceURI","nameLocation":"1025:11:24","nodeType":"VariableDeclaration","scope":5520,"src":"1018:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5515,"name":"string","nodeType":"ElementaryTypeName","src":"1018:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5518,"indexed":false,"mutability":"mutable","name":"ReportedAt","nameLocation":"1046:10:24","nodeType":"VariableDeclaration","scope":5520,"src":"1038:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5517,"name":"uint256","nodeType":"ElementaryTypeName","src":"1038:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"933:124:24"},"src":"902:156:24"},{"anonymous":false,"eventSelector":"7b1f7b3dacb5afdc95a1242e036c2e87a67f32d97cb111111215f3305223b666","id":5532,"name":"InspectionReportFlagged","nameLocation":"1069:23:24","nodeType":"EventDefinition","parameters":{"id":5531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5522,"indexed":true,"mutability":"mutable","name":"enterprise","nameLocation":"1109:10:24","nodeType":"VariableDeclaration","scope":5532,"src":"1093:26:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5521,"name":"address","nodeType":"ElementaryTypeName","src":"1093:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5524,"indexed":true,"mutability":"mutable","name":"reportIndex","nameLocation":"1137:11:24","nodeType":"VariableDeclaration","scope":5532,"src":"1121:27:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5523,"name":"uint256","nodeType":"ElementaryTypeName","src":"1121:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5526,"indexed":false,"mutability":"mutable","name":"flaggedBy","nameLocation":"1158:9:24","nodeType":"VariableDeclaration","scope":5532,"src":"1150:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5525,"name":"address","nodeType":"ElementaryTypeName","src":"1150:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5528,"indexed":false,"mutability":"mutable","name":"reason","nameLocation":"1176:6:24","nodeType":"VariableDeclaration","scope":5532,"src":"1169:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5527,"name":"string","nodeType":"ElementaryTypeName","src":"1169:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5530,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"1192:9:24","nodeType":"VariableDeclaration","scope":5532,"src":"1184:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5529,"name":"uint256","nodeType":"ElementaryTypeName","src":"1184:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1092:110:24"},"src":"1063:140:24"},{"anonymous":false,"eventSelector":"4d11bba94ed08338c093ab404c84f6c0615c1b51439f9b666edd217b326ce9b6","id":5542,"name":"CertificateMinted","nameLocation":"1219:17:24","nodeType":"EventDefinition","parameters":{"id":5541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5534,"indexed":false,"mutability":"mutable","name":"certificateId","nameLocation":"1245:13:24","nodeType":"VariableDeclaration","scope":5542,"src":"1237:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5533,"name":"uint256","nodeType":"ElementaryTypeName","src":"1237:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5536,"indexed":true,"mutability":"mutable","name":"enterprise","nameLocation":"1276:10:24","nodeType":"VariableDeclaration","scope":5542,"src":"1260:26:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5535,"name":"address","nodeType":"ElementaryTypeName","src":"1260:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5538,"indexed":true,"mutability":"mutable","name":"certifier","nameLocation":"1304:9:24","nodeType":"VariableDeclaration","scope":5542,"src":"1288:25:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5537,"name":"address","nodeType":"ElementaryTypeName","src":"1288:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5540,"indexed":false,"mutability":"mutable","name":"mintedAt","nameLocation":"1323:8:24","nodeType":"VariableDeclaration","scope":5542,"src":"1315:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5539,"name":"uint256","nodeType":"ElementaryTypeName","src":"1315:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1236:96:24"},"src":"1213:120:24"},{"anonymous":false,"eventSelector":"1adbf4393900ce3a2332405b86649270c35d1316887336d83190dcbae6a423b9","id":5550,"name":"CertificateRevoked","nameLocation":"1344:18:24","nodeType":"EventDefinition","parameters":{"id":5549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5544,"indexed":false,"mutability":"mutable","name":"certificateId","nameLocation":"1371:13:24","nodeType":"VariableDeclaration","scope":5550,"src":"1363:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5543,"name":"uint256","nodeType":"ElementaryTypeName","src":"1363:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5546,"indexed":true,"mutability":"mutable","name":"revoker","nameLocation":"1402:7:24","nodeType":"VariableDeclaration","scope":5550,"src":"1386:23:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5545,"name":"address","nodeType":"ElementaryTypeName","src":"1386:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5548,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"1419:9:24","nodeType":"VariableDeclaration","scope":5550,"src":"1411:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5547,"name":"uint256","nodeType":"ElementaryTypeName","src":"1411:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1362:67:24"},"src":"1338:92:24"},{"anonymous":false,"eventSelector":"c526cdae63c288ea4504281fe29b0ae3352c8a9ccae61eba8c21cd25a949e0f1","id":5556,"name":"PublicRoleGranted","nameLocation":"1443:17:24","nodeType":"EventDefinition","parameters":{"id":5555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5552,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"1477:4:24","nodeType":"VariableDeclaration","scope":5556,"src":"1461:20:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5551,"name":"address","nodeType":"ElementaryTypeName","src":"1461:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5554,"indexed":false,"mutability":"mutable","name":"duration","nameLocation":"1491:8:24","nodeType":"VariableDeclaration","scope":5556,"src":"1483:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5553,"name":"uint256","nodeType":"ElementaryTypeName","src":"1483:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1460:40:24"},"src":"1437:64:24"},{"anonymous":false,"eventSelector":"a6f32bcbc7de829d50e1c9cbc1c5b4dafb4c7a0b8329757aee62a9b394d71c3b","id":5560,"name":"PublicRoleExpired","nameLocation":"1512:17:24","nodeType":"EventDefinition","parameters":{"id":5559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5558,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"1546:4:24","nodeType":"VariableDeclaration","scope":5560,"src":"1530:20:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5557,"name":"address","nodeType":"ElementaryTypeName","src":"1530:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1529:22:24"},"src":"1506:46:24"},{"anonymous":false,"eventSelector":"274dd4127a55dcb6f6c12ed38fec5007d965d2afffa8b0bc75c3dc8f3f6b2224","id":5568,"name":"RoleTransferred","nameLocation":"1563:15:24","nodeType":"EventDefinition","parameters":{"id":5567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5562,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1595:4:24","nodeType":"VariableDeclaration","scope":5568,"src":"1579:20:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5561,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1579:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5564,"indexed":false,"mutability":"mutable","name":"from","nameLocation":"1609:4:24","nodeType":"VariableDeclaration","scope":5568,"src":"1601:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5563,"name":"address","nodeType":"ElementaryTypeName","src":"1601:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5566,"indexed":false,"mutability":"mutable","name":"to","nameLocation":"1623:2:24","nodeType":"VariableDeclaration","scope":5568,"src":"1615:10:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5565,"name":"address","nodeType":"ElementaryTypeName","src":"1615:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1578:48:24"},"src":"1557:70:24"},{"anonymous":false,"eventSelector":"f4d52c90739c68c4e82d39cfbeee6b6613784bf9b28d2cdb3a02203799cf0606","id":5576,"name":"BulkRolesGranted","nameLocation":"1638:16:24","nodeType":"EventDefinition","parameters":{"id":5575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5571,"indexed":false,"mutability":"mutable","name":"roles","nameLocation":"1665:5:24","nodeType":"VariableDeclaration","scope":5576,"src":"1655:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":5569,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1655:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5570,"nodeType":"ArrayTypeName","src":"1655:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":5574,"indexed":true,"mutability":"mutable","name":"accounts","nameLocation":"1690:8:24","nodeType":"VariableDeclaration","scope":5576,"src":"1672:26:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":5572,"name":"address","nodeType":"ElementaryTypeName","src":"1672:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5573,"nodeType":"ArrayTypeName","src":"1672:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"1654:45:24"},"src":"1632:68:24"},{"anonymous":false,"eventSelector":"2ae6a113c0ed5b78a53413ffbb7679881f11145ccfba4fb92e863dfcd5a1d2f3","id":5582,"name":"RoleGranted","nameLocation":"1711:11:24","nodeType":"EventDefinition","parameters":{"id":5581,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5578,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1739:4:24","nodeType":"VariableDeclaration","scope":5582,"src":"1723:20:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5577,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1723:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5580,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1761:7:24","nodeType":"VariableDeclaration","scope":5582,"src":"1745:23:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5579,"name":"address","nodeType":"ElementaryTypeName","src":"1745:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1722:47:24"},"src":"1705:65:24"},{"anonymous":false,"eventSelector":"155aaafb6329a2098580462df33ec4b7441b19729b9601c5fc17ae1cf99a8a52","id":5588,"name":"RoleRevoked","nameLocation":"1781:11:24","nodeType":"EventDefinition","parameters":{"id":5587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5584,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1809:4:24","nodeType":"VariableDeclaration","scope":5588,"src":"1793:20:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5583,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1793:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5586,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1831:7:24","nodeType":"VariableDeclaration","scope":5588,"src":"1815:23:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5585,"name":"address","nodeType":"ElementaryTypeName","src":"1815:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1792:47:24"},"src":"1775:65:24"},{"anonymous":false,"eventSelector":"1226c69d11817637190759da9257a6df1ff4bb6110f10ccf0255d12f8f5ea75e","id":5602,"name":"AuditInitiated","nameLocation":"1852:14:24","nodeType":"EventDefinition","parameters":{"id":5601,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5590,"indexed":true,"mutability":"mutable","name":"caseId","nameLocation":"1883:6:24","nodeType":"VariableDeclaration","scope":5602,"src":"1867:22:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5589,"name":"uint256","nodeType":"ElementaryTypeName","src":"1867:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5592,"indexed":true,"mutability":"mutable","name":"enterprise","nameLocation":"1907:10:24","nodeType":"VariableDeclaration","scope":5602,"src":"1891:26:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5591,"name":"address","nodeType":"ElementaryTypeName","src":"1891:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5594,"indexed":false,"mutability":"mutable","name":"inspectionId","nameLocation":"1927:12:24","nodeType":"VariableDeclaration","scope":5602,"src":"1919:20:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5593,"name":"uint256","nodeType":"ElementaryTypeName","src":"1919:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5596,"indexed":false,"mutability":"mutable","name":"auditor","nameLocation":"1949:7:24","nodeType":"VariableDeclaration","scope":5602,"src":"1941:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5595,"name":"address","nodeType":"ElementaryTypeName","src":"1941:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5598,"indexed":false,"mutability":"mutable","name":"reason","nameLocation":"1965:6:24","nodeType":"VariableDeclaration","scope":5602,"src":"1958:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5597,"name":"string","nodeType":"ElementaryTypeName","src":"1958:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5600,"indexed":false,"mutability":"mutable","name":"evidenceURI","nameLocation":"1980:11:24","nodeType":"VariableDeclaration","scope":5602,"src":"1973:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5599,"name":"string","nodeType":"ElementaryTypeName","src":"1973:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1866:126:24"},"src":"1846:147:24"},{"anonymous":false,"eventSelector":"301df41f47409571451409165715dde2b276daea32c1bdb4a82853d9a845e679","id":5614,"name":"AuditResolved","nameLocation":"2004:13:24","nodeType":"EventDefinition","parameters":{"id":5613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5604,"indexed":true,"mutability":"mutable","name":"caseId","nameLocation":"2034:6:24","nodeType":"VariableDeclaration","scope":5614,"src":"2018:22:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5603,"name":"uint256","nodeType":"ElementaryTypeName","src":"2018:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5606,"indexed":true,"mutability":"mutable","name":"enterprise","nameLocation":"2058:10:24","nodeType":"VariableDeclaration","scope":5614,"src":"2042:26:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5605,"name":"address","nodeType":"ElementaryTypeName","src":"2042:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5608,"indexed":false,"mutability":"mutable","name":"resolvedBy","nameLocation":"2078:10:24","nodeType":"VariableDeclaration","scope":5614,"src":"2070:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5607,"name":"address","nodeType":"ElementaryTypeName","src":"2070:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5610,"indexed":false,"mutability":"mutable","name":"upheld","nameLocation":"2095:6:24","nodeType":"VariableDeclaration","scope":5614,"src":"2090:11:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5609,"name":"bool","nodeType":"ElementaryTypeName","src":"2090:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5612,"indexed":false,"mutability":"mutable","name":"remarks","nameLocation":"2110:7:24","nodeType":"VariableDeclaration","scope":5614,"src":"2103:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5611,"name":"string","nodeType":"ElementaryTypeName","src":"2103:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2017:101:24"},"src":"1998:121:24"},{"anonymous":false,"eventSelector":"67a062a8c0dedbbe4c7c23d0ea74b2a2f174287b28e7ccf43dc83047a9cf2fbb","id":5624,"name":"AppealFiled","nameLocation":"2130:11:24","nodeType":"EventDefinition","parameters":{"id":5623,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5616,"indexed":true,"mutability":"mutable","name":"caseid","nameLocation":"2158:6:24","nodeType":"VariableDeclaration","scope":5624,"src":"2142:22:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5615,"name":"uint256","nodeType":"ElementaryTypeName","src":"2142:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5618,"indexed":true,"mutability":"mutable","name":"enterprise","nameLocation":"2182:10:24","nodeType":"VariableDeclaration","scope":5624,"src":"2166:26:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5617,"name":"address","nodeType":"ElementaryTypeName","src":"2166:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5620,"indexed":false,"mutability":"mutable","name":"counterEvidenceURI","nameLocation":"2201:18:24","nodeType":"VariableDeclaration","scope":5624,"src":"2194:25:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5619,"name":"string","nodeType":"ElementaryTypeName","src":"2194:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5622,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"2229:9:24","nodeType":"VariableDeclaration","scope":5624,"src":"2221:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5621,"name":"uint256","nodeType":"ElementaryTypeName","src":"2221:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2141:98:24"},"src":"2124:116:24"}],"scope":5626,"src":"208:2035:24","usedErrors":[],"usedEvents":[5464,5468,5474,5486,5492,5498,5506,5520,5532,5542,5550,5556,5560,5568,5576,5582,5588,5602,5614,5624]}],"src":"32:2215:24"},"id":24}},"contracts":{"@openzeppelin/contracts/access/AccessControl.sol":{"AccessControl":{"abi":[{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.","errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}]},"events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":26,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"_roles","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_struct(RoleData)21_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)21_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)21_storage"},"t_struct(RoleData)21_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":18,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"hasRole","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":20,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/IAccessControl.sol":{"IAccessControl":{"abi":[{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"External interface of AccessControl declared to support ERC165 detection.","errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}]},"events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/IERC4906.sol":{"IERC4906":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_fromTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_toTokenId","type":"uint256"}],"name":"BatchMetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"MetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"BatchMetadataUpdate(uint256,uint256)":{"details":"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."},"MetadataUpdate(uint256)":{"details":"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"EIP-721 Metadata Update Extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"EIP-721 Metadata Update Extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC4906.sol\":\"IERC4906\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0xb31b86c03f4677dcffa4655285d62433509513be9bafa0e04984565052d34e44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"IERC1155Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC1155InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC1155InvalidApprover","type":"error"},{"inputs":[{"internalType":"uint256","name":"idsLength","type":"uint256"},{"internalType":"uint256","name":"valuesLength","type":"uint256"}],"name":"ERC1155InvalidArrayLength","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC1155InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC1155InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC1155InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC1155MissingApprovalForAll","type":"error"}],"devdoc":{"details":"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.","errors":{"ERC1155InsufficientBalance(address,uint256,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC1155InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC1155InvalidArrayLength(uint256,uint256)":[{"details":"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.","params":{"idsLength":"Length of the array of token identifiers","valuesLength":"Length of the array of token amounts"}}],"ERC1155InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC1155InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC1155InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC1155MissingApprovalForAll(address,address)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","owner":"Address of the current owner of a token."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC20Errors":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"}],"devdoc":{"details":"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.","errors":{"ERC20InsufficientAllowance(address,uint256,uint256)":[{"details":"Indicates a failure with the `spender`’s `allowance`. Used in transfers.","params":{"allowance":"Amount of tokens a `spender` is allowed to operate with.","needed":"Minimum amount required to perform a transfer.","spender":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC20InsufficientBalance(address,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred."}}],"ERC20InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC20InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC20InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC20InvalidSpender(address)":[{"details":"Indicates a failure with the `spender` to be approved. Used in approvals.","params":{"spender":"Address that may be allowed to operate on tokens without being their owner."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC721Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"}],"devdoc":{"details":"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.","errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ERC721":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"constructor":{"details":"Initializes the contract by setting a `name` and a `symbol` to the token collection."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":580,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":582,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":586,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":590,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":594,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":600,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol":{"ERC721Burnable":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"ERC721 Token that can be burned (destroyed).","errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"burn(uint256)":{"details":"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"title":"ERC721 Burnable Token","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(uint256)":"42966c68","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC721 Token that can be burned (destroyed).\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"title\":\"ERC721 Burnable Token\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":\"ERC721Burnable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        _update(address(0), tokenId, _msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xc48434419baa510862ba4b4802bc0500ccddadd02ae2f195548af748c3206b20\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":580,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol:ERC721Burnable","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":582,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol:ERC721Burnable","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":586,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol:ERC721Burnable","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":590,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol:ERC721Burnable","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":594,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol:ERC721Burnable","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":600,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol:ERC721Burnable","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"ERC721URIStorage":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_fromTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_toTokenId","type":"uint256"}],"name":"BatchMetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"MetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"ERC721 token with storage based token URI management.","errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"BatchMetadataUpdate(uint256,uint256)":{"details":"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."},"MetadataUpdate(uint256)":{"details":"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}"},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC721 token with storage based token URI management.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":\"ERC721URIStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0xb31b86c03f4677dcffa4655285d62433509513be9bafa0e04984565052d34e44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xcc6f49e0c57072d6a18eef0d5fc22a4cc20462c18f0c365d2dd9a2c732fde670\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":580,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":582,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":586,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":590,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":594,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":600,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":1748,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_tokenURIs","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_string_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"length","type":"uint256"}],"name":"StringsInsufficientHexLength","type":"error"}],"devdoc":{"details":"String operations.","errors":{"StringsInsufficientHexLength(uint256,uint256)":[{"details":"The `value` string doesn't fit in the specified `length`."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122014361ae278094b127bedfe2e8cb2fd31667231c7b831bedf7b6576e352ff5d4464736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EQ CALLDATASIZE BYTE 0xE2 PUSH25 0x94B127BEDFE2E8CB2FD31667231C7B831BEDF7B6576E352FF 0x5D PREVRANDAO PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"251:2847:13:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;251:2847:13;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122014361ae278094b127bedfe2e8cb2fd31667231c7b831bedf7b6576e352ff5d4464736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EQ CALLDATASIZE BYTE 0xE2 PUSH25 0x94B127BEDFE2E8CB2FD31667231C7B831BEDF7B6576E352FF 0x5D PREVRANDAO PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"251:2847:13:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite","toStringSigned(int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"String operations.\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[{"inputs":[],"name":"MathOverflowedMulDiv","type":"error"}],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","errors":{"MathOverflowedMulDiv()":[{"details":"Muldiv operation overflow."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205668e942167f71b57b39fdd3181a46cc44d9e606ae111ad83102b2d9038f111564736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMP PUSH9 0xE942167F71B57B39FD 0xD3 XOR BYTE CHAINID 0xCC PREVRANDAO 0xD9 0xE6 MOD 0xAE GT BYTE 0xD8 BALANCE MUL 0xB2 0xD9 SUB DUP16 GT ISZERO PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"203:14914:16:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;203:14914:16;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205668e942167f71b57b39fdd3181a46cc44d9e606ae111ad83102b2d9038f111564736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMP PUSH9 0xE942167F71B57B39FD 0xD3 XOR BYTE CHAINID 0xCC PREVRANDAO 0xD9 0xE6 MOD 0xAE GT BYTE 0xD8 BALANCE MUL 0xB2 0xD9 SUB DUP16 GT ISZERO PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"203:14914:16:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite","unsignedRoundsUp(enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f4964af4e40dcf6c065c71071b1bffd923984b12e9cb29e4e7ca16d1e7e7840264736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DELEGATECALL SWAP7 0x4A DELEGATECALL 0xE4 0xD 0xCF PUSH13 0x65C71071B1BFFD923984B12E9 0xCB 0x29 0xE4 0xE7 0xCA AND 0xD1 0xE7 0xE7 DUP5 MUL PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"216:1047:17:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;216:1047:17;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f4964af4e40dcf6c065c71071b1bffd923984b12e9cb29e4e7ca16d1e7e7840264736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DELEGATECALL SWAP7 0x4A DELEGATECALL 0xE4 0xD 0xCF PUSH13 0x65C71071B1BFFD923984B12E9 0xCB 0x29 0xE4 0xE7 0xCA AND 0xD1 0xE7 0xE7 DUP5 MUL PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"216:1047:17:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/core/CertificationAuthority.sol":{"CertificationAuthority":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"inputs":[],"name":"AuditorOversight__AppealWindowClosed","type":"error"},{"inputs":[],"name":"AuditorOversight__CaseNotPending","type":"error"},{"inputs":[],"name":"AuditorOversight__NotAuthorizedEnterpriseOwner","type":"error"},{"inputs":[],"name":"CertificateNFT__CertificateDoesNotExist","type":"error"},{"inputs":[],"name":"CertificateNFT__EnterpriseAlreadyCertified","type":"error"},{"inputs":[],"name":"CertificationAuthority__CertificationNotExpiredYet","type":"error"},{"inputs":[],"name":"CertificationAuthority__EnterpriseAlreadyCertified","type":"error"},{"inputs":[],"name":"CertificationAuthority__EnterpriseNotCertifiedYet","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"inputs":[],"name":"EnterpriseRegistry__EnterpriseAlreadyExists","type":"error"},{"inputs":[],"name":"EnterpriseRegistry__EnterpriseDoesNotExist","type":"error"},{"inputs":[],"name":"EnterpriseRegistry__InvalidStart","type":"error"},{"inputs":[],"name":"InspectionManager__InspectionPeriodExpired","type":"error"},{"inputs":[],"name":"InspectionManager__InspectorAlreadyAssigned","type":"error"},{"inputs":[],"name":"InspectionManager__InvalidReportIndex","type":"error"},{"inputs":[],"name":"InspectionManager__NoReportsAssociatedWithEnterprise","type":"error"},{"inputs":[],"name":"InspectionManager__NotAssignedToEnterprise","type":"error"},{"inputs":[],"name":"InspectionManager__ReportAlreadyFlagged","type":"error"},{"inputs":[],"name":"InvalidAddress","type":"error"},{"inputs":[],"name":"RolesManager__AlreadyHasRole","type":"error"},{"inputs":[],"name":"RolesManager__ArrayLengthMismatch","type":"error"},{"inputs":[],"name":"RolesManager__EmptyArray","type":"error"},{"inputs":[],"name":"RolesManager__InvalidDuration","type":"error"},{"inputs":[],"name":"RolesManager__NotAuthorizedAuditor","type":"error"},{"inputs":[],"name":"RolesManager__NotAuthorizedCertificateFactory","type":"error"},{"inputs":[],"name":"RolesManager__NotAuthorizedCertifier","type":"error"},{"inputs":[],"name":"RolesManager__NotAuthorizedEnterprise","type":"error"},{"inputs":[],"name":"RolesManager__NotAuthorizedInspector","type":"error"},{"inputs":[],"name":"RolesManager__NotAuthorizedPublicUser","type":"error"},{"inputs":[],"name":"RolesManager__RoleDoesNotExist","type":"error"},{"inputs":[],"name":"RolesManager__UnauthorizedToPerformAction","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_fromTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_toTokenId","type":"uint256"}],"name":"BatchMetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32[]","name":"roles","type":"bytes32[]"},{"indexed":true,"internalType":"address[]","name":"accounts","type":"address[]"}],"name":"BulkRolesGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"enterprise","type":"address"},{"indexed":false,"internalType":"string","name":"industry","type":"string"},{"indexed":false,"internalType":"string","name":"metadataURI","type":"string"},{"indexed":false,"internalType":"uint256","name":"expiryDate","type":"uint256"}],"name":"CertificationGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"enterprise","type":"address"}],"name":"CertificationRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"enterprise","type":"address"},{"indexed":false,"internalType":"string","name":"newMetadataURI","type":"string"}],"name":"CertificationUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"MetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"}],"name":"PublicRoleExpired","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"duration","type":"uint256"}],"name":"PublicRoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"address","name":"to","type":"address"}],"name":"RoleTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"AUDITOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CERTIFICATE_FACTORY_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CERTIFIER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ENTERPRISE_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"INSPECTOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PUBLIC_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"roles","type":"bytes32[]"},{"internalType":"address[]","name":"accounts","type":"address[]"}],"name":"bulkGrantRoles","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"certifications","outputs":[{"internalType":"string","name":"industry","type":"string"},{"internalType":"string","name":"metadataURI","type":"string"},{"internalType":"uint256","name":"certifiedAt","type":"uint256"},{"internalType":"uint256","name":"expiryDate","type":"uint256"},{"internalType":"bool","name":"isCertified","type":"bool"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"enterpriseAddress","type":"address"},{"internalType":"string","name":"_industry","type":"string"},{"internalType":"string","name":"_metadataURI","type":"string"},{"internalType":"uint256","name":"validityDurationSeconds","type":"uint256"}],"name":"certifyEnterprise","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"checkExpiryRoles","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"durationInHours","type":"uint256"}],"name":"claimTemporaryPublicRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"getActiveRoles","outputs":[{"internalType":"bool","name":"isAdmin","type":"bool"},{"internalType":"bool","name":"isCertifier","type":"bool"},{"internalType":"bool","name":"isInspector","type":"bool"},{"internalType":"bool","name":"isAuditor","type":"bool"},{"internalType":"bool","name":"isEnterprise","type":"bool"},{"internalType":"bool","name":"isCertificateFactory","type":"bool"},{"internalType":"bool","name":"isPublic","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"enterpriseAddress","type":"address"}],"name":"getCertification","outputs":[{"components":[{"internalType":"string","name":"industry","type":"string"},{"internalType":"string","name":"metadataURI","type":"string"},{"internalType":"uint256","name":"certifiedAt","type":"uint256"},{"internalType":"uint256","name":"expiryDate","type":"uint256"},{"internalType":"bool","name":"isCertified","type":"bool"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"internalType":"struct DataTypes.Certification","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getEnterpriseByTokenId","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMaxPublicRoleDuration","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"grantAuditor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"grantCertificateFactory","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"grantCertifier","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"grantEnterprise","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"grantInspector","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"grantPublicRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"hasAdminRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"hasAuditorRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"hasCertificateFactoryRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"hasCertifierRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"hasEnterpriseRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"hasInspectorRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"hasPublicRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"isCertificateValid","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"enterpriseAddress","type":"address"}],"name":"isCertificationValid","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"publicRoleExpiry","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"revokeAuditorRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"revokeCertificateFactoryRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"enterpriseAddress","type":"address"}],"name":"revokeCertification","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"revokeCertifierRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"revokeEnterpriseRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"enterpriseAddress","type":"address"}],"name":"revokeIfExpired","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"revokeInspectorRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"revokePublicRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"}],"name":"transferRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"enterpriseAddress","type":"address"},{"internalType":"string","name":"newMetadataURI","type":"string"}],"name":"updateCertificationMetadata","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}],"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"BatchMetadataUpdate(uint256,uint256)":{"details":"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."},"MetadataUpdate(uint256)":{"details":"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."},"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"bulkGrantRoles(bytes32[],address[])":{"details":"Bulk grant roles to accounts","params":{"accounts":"The array of accounts to grant roles emits BulkRolesGranted event on successful grant","roles":"The array of roles to grant"}},"burn(uint256)":{"details":"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."},"certifyEnterprise(address,string,string,uint256)":{"details":"This function is used to certify enterprisesOnly the Certifier can certify enterprisesmints and assigns NFT certificate to an enterprisesets token URI to metadata URI of a certificate","params":{"_industry":"The industry of the enterprise to be certified","_metadataURI":"The metadata URI of the certificate (IPFS hash)","enterpriseAddress":"The address of the enterprise to be certified","validityDurationSeconds":"The validity duration of the certificate in seconds"}},"checkExpiryRoles(address)":{"details":"helper to check expiry of `PUBLIC` role","params":{"account":"The account to check for role expiry"}},"claimTemporaryPublicRole(uint256)":{"details":"allows users to claim temporary `PUBLIC` role for `durationInHours` hours on their visit to platform","params":{"durationInHours":"The duration in hours the user will have the `PUBLIC` role"}},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantCertifier(address)":{"details":"Functions to grant roles to!","params":{"account":"The account to grant the role to"}},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasAdminRole(address)":{"details":"Functions to check if a certain account has the specified role","params":{"account":"The account to check "}},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."},"revokeCertification(address)":{"details":"allows the revocation of certifications from enterprisesOnly the `Certifier` or `Super Admin` can revoke certificationsallows automatic destruction of NFT certificates via oppenzeppelin's`burn` function","params":{"enterpriseAddress":"The address of the enterprise to be revoked"}},"revokeCertifierRole(address)":{"details":"Functions to revoke roles","params":{"account":"The account to revoke the role from"}},"revokeIfExpired(address)":{"details":"alloes automatic revokation of NFT certificates after expiry duration callable by anyone as long as expiry date kicks in"},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."},"transferRole(bytes32,address,address)":{"details":"Transfers a role from one account to another","params":{"from":"The account to transfer the role from","role":"The role to transfer","to":"The account to transfer the role to"}},"updateCertificationMetadata(address,string)":{"details":"updates the metadata URI of the NFT certificateOnly the `Certifier` can update certification metadata URI","params":{"enterpriseAddress":"The address of the enterprise to be updated","newMetadataURI":"The new metadata URI of the certificate"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_3416":{"entryPoint":null,"id":3416,"parameterSlots":0,"returnSlots":0},"@_3913":{"entryPoint":null,"id":3913,"parameterSlots":0,"returnSlots":0},"@_617":{"entryPoint":null,"id":617,"parameterSlots":2,"returnSlots":0},"@_grantRole_256":{"entryPoint":236,"id":256,"parameterSlots":2,"returnSlots":1},"@_msgSender_1886":{"entryPoint":null,"id":1886,"parameterSlots":0,"returnSlots":1},"@_setupRole_4185":{"entryPoint":219,"id":4185,"parameterSlots":2,"returnSlots":0},"@hasRole_80":{"entryPoint":null,"id":80,"parameterSlots":2,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":493,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":575,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":433,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":411,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:2732:25","statements":[{"nodeType":"YulBlock","src":"6:3:25","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:25"},"nodeType":"YulFunctionCall","src":"66:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:25"},"nodeType":"YulFunctionCall","src":"56:31:25"},"nodeType":"YulExpressionStatement","src":"56:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:25","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:25"},"nodeType":"YulFunctionCall","src":"96:15:25"},"nodeType":"YulExpressionStatement","src":"96:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:25"},"nodeType":"YulFunctionCall","src":"120:15:25"},"nodeType":"YulExpressionStatement","src":"120:15:25"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:25"},{"body":{"nodeType":"YulBlock","src":"201:325:25","statements":[{"nodeType":"YulAssignment","src":"211:22:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"225:1:25","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"228:4:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"221:3:25"},"nodeType":"YulFunctionCall","src":"221:12:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"211:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"242:38:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"272:4:25"},{"kind":"number","nodeType":"YulLiteral","src":"278:1:25","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"268:3:25"},"nodeType":"YulFunctionCall","src":"268:12:25"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"246:18:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"319:31:25","statements":[{"nodeType":"YulAssignment","src":"321:27:25","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"335:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"343:4:25","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"331:3:25"},"nodeType":"YulFunctionCall","src":"331:17:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"321:6:25"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"299:18:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"292:6:25"},"nodeType":"YulFunctionCall","src":"292:26:25"},"nodeType":"YulIf","src":"289:61:25"},{"body":{"nodeType":"YulBlock","src":"409:111:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"430:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"437:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"442:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"433:3:25"},"nodeType":"YulFunctionCall","src":"433:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"423:6:25"},"nodeType":"YulFunctionCall","src":"423:31:25"},"nodeType":"YulExpressionStatement","src":"423:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"474:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"477:4:25","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"467:6:25"},"nodeType":"YulFunctionCall","src":"467:15:25"},"nodeType":"YulExpressionStatement","src":"467:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"502:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"505:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"495:6:25"},"nodeType":"YulFunctionCall","src":"495:15:25"},"nodeType":"YulExpressionStatement","src":"495:15:25"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"365:18:25"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"388:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"396:2:25","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"385:2:25"},"nodeType":"YulFunctionCall","src":"385:14:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"362:2:25"},"nodeType":"YulFunctionCall","src":"362:38:25"},"nodeType":"YulIf","src":"359:161:25"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"181:4:25","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"190:6:25","type":""}],"src":"146:380:25"},{"body":{"nodeType":"YulBlock","src":"587:65:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"604:1:25","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"607:3:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"597:6:25"},"nodeType":"YulFunctionCall","src":"597:14:25"},"nodeType":"YulExpressionStatement","src":"597:14:25"},{"nodeType":"YulAssignment","src":"620:26:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"638:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"641:4:25","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"628:9:25"},"nodeType":"YulFunctionCall","src":"628:18:25"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"620:4:25"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"570:3:25","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"578:4:25","type":""}],"src":"531:121:25"},{"body":{"nodeType":"YulBlock","src":"738:464:25","statements":[{"body":{"nodeType":"YulBlock","src":"771:425:25","statements":[{"nodeType":"YulVariableDeclaration","src":"785:11:25","value":{"kind":"number","nodeType":"YulLiteral","src":"795:1:25","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"789:2:25","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"816:2:25"},{"name":"array","nodeType":"YulIdentifier","src":"820:5:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"809:6:25"},"nodeType":"YulFunctionCall","src":"809:17:25"},"nodeType":"YulExpressionStatement","src":"809:17:25"},{"nodeType":"YulVariableDeclaration","src":"839:31:25","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"861:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"865:4:25","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"851:9:25"},"nodeType":"YulFunctionCall","src":"851:19:25"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"843:4:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"883:57:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"906:4:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"916:1:25","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"923:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"935:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"919:3:25"},"nodeType":"YulFunctionCall","src":"919:19:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"912:3:25"},"nodeType":"YulFunctionCall","src":"912:27:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"902:3:25"},"nodeType":"YulFunctionCall","src":"902:38:25"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"887:11:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"977:23:25","statements":[{"nodeType":"YulAssignment","src":"979:19:25","value":{"name":"data","nodeType":"YulIdentifier","src":"994:4:25"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"979:11:25"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"959:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"971:4:25","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"956:2:25"},"nodeType":"YulFunctionCall","src":"956:20:25"},"nodeType":"YulIf","src":"953:47:25"},{"nodeType":"YulVariableDeclaration","src":"1013:41:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1027:4:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1037:1:25","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"1044:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"1049:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1040:3:25"},"nodeType":"YulFunctionCall","src":"1040:12:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1033:3:25"},"nodeType":"YulFunctionCall","src":"1033:20:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1023:3:25"},"nodeType":"YulFunctionCall","src":"1023:31:25"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1017:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1067:24:25","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"1080:11:25"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"1071:5:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"1165:21:25","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1174:5:25"},{"name":"_1","nodeType":"YulIdentifier","src":"1181:2:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"1167:6:25"},"nodeType":"YulFunctionCall","src":"1167:17:25"},"nodeType":"YulExpressionStatement","src":"1167:17:25"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1115:5:25"},{"name":"_2","nodeType":"YulIdentifier","src":"1122:2:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1112:2:25"},"nodeType":"YulFunctionCall","src":"1112:13:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1126:26:25","statements":[{"nodeType":"YulAssignment","src":"1128:22:25","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1141:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"1148:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1137:3:25"},"nodeType":"YulFunctionCall","src":"1137:13:25"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"1128:5:25"}]}]},"pre":{"nodeType":"YulBlock","src":"1108:3:25","statements":[]},"src":"1104:82:25"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"754:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"759:2:25","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"751:2:25"},"nodeType":"YulFunctionCall","src":"751:11:25"},"nodeType":"YulIf","src":"748:448:25"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"710:5:25","type":""},{"name":"len","nodeType":"YulTypedName","src":"717:3:25","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"722:10:25","type":""}],"src":"657:545:25"},{"body":{"nodeType":"YulBlock","src":"1292:81:25","statements":[{"nodeType":"YulAssignment","src":"1302:65:25","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1317:4:25"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1335:1:25","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"1338:3:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1331:3:25"},"nodeType":"YulFunctionCall","src":"1331:11:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1348:1:25","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1344:3:25"},"nodeType":"YulFunctionCall","src":"1344:6:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1327:3:25"},"nodeType":"YulFunctionCall","src":"1327:24:25"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1323:3:25"},"nodeType":"YulFunctionCall","src":"1323:29:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1313:3:25"},"nodeType":"YulFunctionCall","src":"1313:40:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1359:1:25","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"1362:3:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1355:3:25"},"nodeType":"YulFunctionCall","src":"1355:11:25"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1310:2:25"},"nodeType":"YulFunctionCall","src":"1310:57:25"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"1302:4:25"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1269:4:25","type":""},{"name":"len","nodeType":"YulTypedName","src":"1275:3:25","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"1283:4:25","type":""}],"src":"1207:166:25"},{"body":{"nodeType":"YulBlock","src":"1474:1256:25","statements":[{"nodeType":"YulVariableDeclaration","src":"1484:24:25","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1504:3:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1498:5:25"},"nodeType":"YulFunctionCall","src":"1498:10:25"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"1488:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"1551:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1553:16:25"},"nodeType":"YulFunctionCall","src":"1553:18:25"},"nodeType":"YulExpressionStatement","src":"1553:18:25"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"1523:6:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1539:2:25","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1543:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1535:3:25"},"nodeType":"YulFunctionCall","src":"1535:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"1547:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1531:3:25"},"nodeType":"YulFunctionCall","src":"1531:18:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1520:2:25"},"nodeType":"YulFunctionCall","src":"1520:30:25"},"nodeType":"YulIf","src":"1517:56:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"1626:4:25"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"1664:4:25"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"1658:5:25"},"nodeType":"YulFunctionCall","src":"1658:11:25"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"1632:25:25"},"nodeType":"YulFunctionCall","src":"1632:38:25"},{"name":"newLen","nodeType":"YulIdentifier","src":"1672:6:25"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"1582:43:25"},"nodeType":"YulFunctionCall","src":"1582:97:25"},"nodeType":"YulExpressionStatement","src":"1582:97:25"},{"nodeType":"YulVariableDeclaration","src":"1688:18:25","value":{"kind":"number","nodeType":"YulLiteral","src":"1705:1:25","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"1692:9:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1715:23:25","value":{"kind":"number","nodeType":"YulLiteral","src":"1734:4:25","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"1719:11:25","type":""}]},{"nodeType":"YulAssignment","src":"1747:24:25","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"1760:11:25"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"1747:9:25"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"1817:656:25","statements":[{"nodeType":"YulVariableDeclaration","src":"1831:35:25","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"1850:6:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1862:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1858:3:25"},"nodeType":"YulFunctionCall","src":"1858:7:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1846:3:25"},"nodeType":"YulFunctionCall","src":"1846:20:25"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"1835:7:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1879:49:25","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"1923:4:25"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"1893:29:25"},"nodeType":"YulFunctionCall","src":"1893:35:25"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"1883:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1941:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"1950:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1945:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"2028:172:25","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2053:6:25"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2071:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2076:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2067:3:25"},"nodeType":"YulFunctionCall","src":"2067:19:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2061:5:25"},"nodeType":"YulFunctionCall","src":"2061:26:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2046:6:25"},"nodeType":"YulFunctionCall","src":"2046:42:25"},"nodeType":"YulExpressionStatement","src":"2046:42:25"},{"nodeType":"YulAssignment","src":"2105:24:25","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2119:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"2127:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2115:3:25"},"nodeType":"YulFunctionCall","src":"2115:14:25"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2105:6:25"}]},{"nodeType":"YulAssignment","src":"2146:40:25","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"2163:9:25"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"2174:11:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2159:3:25"},"nodeType":"YulFunctionCall","src":"2159:27:25"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"2146:9:25"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1975:1:25"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"1978:7:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1972:2:25"},"nodeType":"YulFunctionCall","src":"1972:14:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1987:28:25","statements":[{"nodeType":"YulAssignment","src":"1989:24:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1998:1:25"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"2001:11:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1994:3:25"},"nodeType":"YulFunctionCall","src":"1994:19:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1989:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"1968:3:25","statements":[]},"src":"1964:236:25"},{"body":{"nodeType":"YulBlock","src":"2248:166:25","statements":[{"nodeType":"YulVariableDeclaration","src":"2266:43:25","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2293:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2298:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2289:3:25"},"nodeType":"YulFunctionCall","src":"2289:19:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2283:5:25"},"nodeType":"YulFunctionCall","src":"2283:26:25"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"2270:9:25","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2333:6:25"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"2345:9:25"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2372:1:25","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"2375:6:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2368:3:25"},"nodeType":"YulFunctionCall","src":"2368:14:25"},{"kind":"number","nodeType":"YulLiteral","src":"2384:3:25","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2364:3:25"},"nodeType":"YulFunctionCall","src":"2364:24:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2394:1:25","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2390:3:25"},"nodeType":"YulFunctionCall","src":"2390:6:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2360:3:25"},"nodeType":"YulFunctionCall","src":"2360:37:25"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2356:3:25"},"nodeType":"YulFunctionCall","src":"2356:42:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2341:3:25"},"nodeType":"YulFunctionCall","src":"2341:58:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2326:6:25"},"nodeType":"YulFunctionCall","src":"2326:74:25"},"nodeType":"YulExpressionStatement","src":"2326:74:25"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"2219:7:25"},{"name":"newLen","nodeType":"YulIdentifier","src":"2228:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2216:2:25"},"nodeType":"YulFunctionCall","src":"2216:19:25"},"nodeType":"YulIf","src":"2213:201:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2434:4:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2448:1:25","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"2451:6:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2444:3:25"},"nodeType":"YulFunctionCall","src":"2444:14:25"},{"kind":"number","nodeType":"YulLiteral","src":"2460:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2440:3:25"},"nodeType":"YulFunctionCall","src":"2440:22:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2427:6:25"},"nodeType":"YulFunctionCall","src":"2427:36:25"},"nodeType":"YulExpressionStatement","src":"2427:36:25"}]},"nodeType":"YulCase","src":"1810:663:25","value":{"kind":"number","nodeType":"YulLiteral","src":"1815:1:25","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"2490:234:25","statements":[{"nodeType":"YulVariableDeclaration","src":"2504:14:25","value":{"kind":"number","nodeType":"YulLiteral","src":"2517:1:25","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2508:5:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"2553:67:25","statements":[{"nodeType":"YulAssignment","src":"2571:35:25","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2590:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2595:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2586:3:25"},"nodeType":"YulFunctionCall","src":"2586:19:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2580:5:25"},"nodeType":"YulFunctionCall","src":"2580:26:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2571:5:25"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"2534:6:25"},"nodeType":"YulIf","src":"2531:89:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2640:4:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2699:5:25"},{"name":"newLen","nodeType":"YulIdentifier","src":"2706:6:25"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"2646:52:25"},"nodeType":"YulFunctionCall","src":"2646:67:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2633:6:25"},"nodeType":"YulFunctionCall","src":"2633:81:25"},"nodeType":"YulExpressionStatement","src":"2633:81:25"}]},"nodeType":"YulCase","src":"2482:242:25","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"1790:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"1798:2:25","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1787:2:25"},"nodeType":"YulFunctionCall","src":"1787:14:25"},"nodeType":"YulSwitch","src":"1780:944:25"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"1459:4:25","type":""},{"name":"src","nodeType":"YulTypedName","src":"1465:3:25","type":""}],"src":"1378:1352:25"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":25,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b50604080518082018252601581527f456e746572707269736543657274696669636174650000000000000000000000602080830191909152825180840190935260058352641150d1549560da1b908301529062000070600033620000db565b6200008b6000805160206200375d83398151915233620000db565b60026200009983826200023f565b506003620000a882826200023f565b50620000ba91506000905033620000db565b620000d56000805160206200375d83398151915233620000db565b6200030b565b620000e78282620000ec565b505050565b6000828152602081815260408083206001600160a01b038516845290915281205460ff1662000191576000838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055620001483390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600162000195565b5060005b92915050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620001c657607f821691505b602082108103620001e757634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620000e757600081815260208120601f850160051c81016020861015620002165750805b601f850160051c820191505b81811015620002375782815560010162000222565b505050505050565b81516001600160401b038111156200025b576200025b6200019b565b62000273816200026c8454620001b1565b84620001ed565b602080601f831160018114620002ab5760008415620002925750858301515b600019600386901b1c1916600185901b17855562000237565b600085815260208120601f198616915b82811015620002dc57888601518255948401946001909101908401620002bb565b5085821015620002fb5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b613442806200031b6000396000f3fe608060405234801561001057600080fd5b50600436106103af5760003560e01c80637780e9c1116101f4578063abaa536f1161011a578063c87b56dd116100ad578063e55b4f931161007c578063e55b4f93146108ab578063e985e9c5146108be578063f53f5e1e146108d1578063fc810286146108e457600080fd5b8063c87b56dd14610850578063c88cc6ac14610863578063d547741f14610883578063e3a3c5221461089657600080fd5b8063b88d4fde116100e9578063b88d4fde14610810578063b8ad415e14610823578063bd7ca7ba1461082a578063c395fcb31461083d57600080fd5b8063abaa536f14610776578063b0614db314610789578063b5617ef7146107dd578063b83cc3b3146107fd57600080fd5b806390f201be11610192578063a217fddf11610161578063a217fddf14610735578063a22cb4651461073d578063a5ce413a14610750578063aa52617c1461076357600080fd5b806390f201be146106f457806391d148541461070757806395d89b411461071a578063a1f341631461072257600080fd5b80637e5effa4116101ce5780637e5effa414610692578063808b0557146106a55780638850845f146106b857806389a912e0146106cb57600080fd5b80637780e9c114610657578063784fee0e1461066a5780637bff09751461067f57600080fd5b80633ca7c02a116102d95780635cb87d261161027757806368dd17a51161024657806368dd17a51461060557806369d0b5171461061a5780636e1d616e1461062f57806370a082311461064457600080fd5b80635cb87d26146105b957806360376528146105cc57806361462f0e146105df5780636352211e146105f257600080fd5b806342966c68116102b357806342966c681461056d578063456f19fc1461058057806352f84b721461059357806357c03371146105a657600080fd5b80633ca7c02a146105325780633e2515181461054757806342842e0e1461055a57600080fd5b8063236e092911610351578063261191b711610320578063261191b7146104e6578063261e85cd146104f95780632f2ff15d1461050c57806336568abe1461051f57600080fd5b8063236e09291461046a57806323b872dd1461048f578063248a9ca3146104a257806325d5e87e146104d357600080fd5b8063081812fc1161038d578063081812fc14610406578063095ea7b3146104315780630bcce45b146104445780631e223b2a1461045757600080fd5b806301ffc9a7146103b45780630443cd2a146103dc57806306fdde03146103f1575b600080fd5b6103c76103c2366004612990565b6108f7565b60405190151581526020015b60405180910390f35b6103ef6103ea3660046129c9565b610908565b005b6103f961098a565b6040516103d39190612a34565b610419610414366004612a47565b610a1c565b6040516001600160a01b0390911681526020016103d3565b6103ef61043f366004612a60565b610a45565b6103ef610452366004612b36565b610a54565b6103ef6104653660046129c9565b610c20565b61047d6104783660046129c9565b610ca2565b6040516103d396959493929190612bb2565b6103ef61049d366004612bfd565b610ded565b6104c56104b0366004612a47565b60009081526020819052604090206001015490565b6040519081526020016103d3565b6103ef6104e13660046129c9565b610e7d565b6103ef6104f43660046129c9565b610eff565b6103c76105073660046129c9565b610f81565b6103ef61051a366004612c39565b610fb8565b6103ef61052d366004612c39565b610fdd565b6104c560008051602061334d83398151915281565b6103ef6105553660046129c9565b611015565b6103ef610568366004612bfd565b611097565b6103ef61057b366004612a47565b6110b2565b6103ef61058e3660046129c9565b6110be565b6103c76105a13660046129c9565b611140565b6103ef6105b43660046129c9565b61115a565b6103ef6105c7366004612c65565b6111dc565b6103ef6105da3660046129c9565b61126f565b6103ef6105ed366004612ced565b6112f1565b610419610600366004612a47565b611404565b6104c560008051602061330d83398151915281565b6104c560008051602061336d83398151915281565b6104c56000805160206133ad83398151915281565b6104c56106523660046129c9565b61140f565b6103ef610665366004612a47565b611457565b6104c560008051602061338d83398151915281565b6103c761068d3660046129c9565b611544565b6103ef6106a03660046129c9565b61155e565b6103ef6106b33660046129c9565b6115e0565b6103c76106c63660046129c9565b6116bf565b6104196106d9366004612a47565b6000908152600a60205260409020546001600160a01b031690565b6103ef610702366004612d59565b6116d9565b6103c7610715366004612c39565b6117ff565b6103f9611828565b6103c76107303660046129c9565b611837565b6104c5600081565b6103ef61074b366004612ddc565b611851565b6103c761075e366004612a47565b61185c565b6103ef6107713660046129c9565b61187d565b6103c76107843660046129c9565b6118ff565b61079c6107973660046129c9565b611919565b60408051971515885295151560208801529315159486019490945290151560608501521515608084015290151560a0830152151560c082015260e0016103d3565b6104c56107eb3660046129c9565b60016020526000908152604090205481565b6103ef61080b3660046129c9565b6119d2565b6103ef61081e366004612e18565b611ada565b60186104c5565b6103ef6108383660046129c9565b611af1565b6103c761084b3660046129c9565b611b3c565b6103f961085e366004612a47565b611b48565b6108766108713660046129c9565b611b53565b6040516103d39190612e94565b6103ef610891366004612c39565b611d08565b6104c56000805160206133cd83398151915281565b6103ef6108b93660046129c9565b611d2d565b6103c76108cc366004612f04565b611daf565b6103c76108df3660046129c9565b611ddd565b6103ef6108f23660046129c9565b611df7565b600061090282611e79565b92915050565b806001600160a01b0381166109305760405163e6c4247b60e01b815260040160405180910390fd5b600061093b81611e9e565b61095360008051602061334d83398151915284611d08565b6040516001600160a01b0384169060008051602061334d833981519152906000805160206133ed83398151915290600090a3505050565b60606002805461099990612f2e565b80601f01602080910402602001604051908101604052809291908181526020018280546109c590612f2e565b8015610a125780601f106109e757610100808354040283529160200191610a12565b820191906000526020600020905b8154815290600101906020018083116109f557829003601f168201915b5050505050905090565b6000610a2782611ea8565b506000828152600660205260409020546001600160a01b0316610902565b610a50828233611ee1565b5050565b836001600160a01b038116610a7c5760405163e6c4247b60e01b815260040160405180910390fd5b60008051602061336d833981519152610a9481611e9e565b6001600160a01b03861660009081526009602052604090206004015460ff1615610ad1576040516369136c8160e01b815260040160405180910390fd5b600b805460009182610ae283612f7e565b919050559050610af28782611eee565b610afc8186611f08565b6040518060c001604052808781526020018681526020014281526020018542610b259190612f97565b8152600160208083019190915260409182018490526001600160a01b038a16600090815260099091522081518190610b5d9082612ff8565b5060208201516001820190610b729082612ff8565b50604082810151600283015560608301516003830155608083015160048301805460ff191691151591909117905560a0909201516005909101556000828152600a6020522080546001600160a01b0319166001600160a01b0389169081179091557f56a1f3fa57a4cc6a9be7aaa185ba31c140ea18678a1b45900756c2e5e1ba8dd28787610c008842612f97565b604051610c0f939291906130b8565b60405180910390a250505050505050565b806001600160a01b038116610c485760405163e6c4247b60e01b815260040160405180910390fd5b6000610c5381611e9e565b610c6b60008051602061330d83398151915284610fb8565b6040516001600160a01b0384169060008051602061330d8339815191529060008051602061332d83398151915290600090a3505050565b600960205260009081526040902080548190610cbd90612f2e565b80601f0160208091040260200160405190810160405280929190818152602001828054610ce990612f2e565b8015610d365780601f10610d0b57610100808354040283529160200191610d36565b820191906000526020600020905b815481529060010190602001808311610d1957829003601f168201915b505050505090806001018054610d4b90612f2e565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7790612f2e565b8015610dc45780601f10610d9957610100808354040283529160200191610dc4565b820191906000526020600020905b815481529060010190602001808311610da757829003601f168201915b5050506002840154600385015460048601546005909601549495919490935060ff909116915086565b6001600160a01b038216610e1c57604051633250574960e11b8152600060048201526024015b60405180910390fd5b6000610e29838333611f58565b9050836001600160a01b0316816001600160a01b031614610e77576040516364283d7b60e01b81526001600160a01b0380861660048301526024820184905282166044820152606401610e13565b50505050565b610e8681611ddd565b8015610ea957506001600160a01b03811660009081526001602052604090205442115b15610efc57610ec660008051602061334d83398151915282611fdd565b506040516001600160a01b038216907fa6f32bcbc7de829d50e1c9cbc1c5b4dafb4c7a0b8329757aee62a9b394d71c3b90600090a25b50565b806001600160a01b038116610f275760405163e6c4247b60e01b815260040160405180910390fd5b6000610f3281611e9e565b610f4a60008051602061338d83398151915284611d08565b6040516001600160a01b0384169060008051602061338d833981519152906000805160206133ed83398151915290600090a3505050565b6001600160a01b0381166000908152600960205260408120600481015460ff168015610fb1575080600301544211155b9392505050565b600082815260208190526040902060010154610fd381611e9e565b610e778383612050565b6001600160a01b03811633146110065760405163334bd91960e11b815260040160405180910390fd5b6110108282611fdd565b505050565b806001600160a01b03811661103d5760405163e6c4247b60e01b815260040160405180910390fd5b600061104881611e9e565b6110606000805160206133ad83398151915284611d08565b6040516001600160a01b038416906000805160206133ad833981519152906000805160206133ed83398151915290600090a3505050565b61101083838360405180602001604052806000815250611ada565b610a5060008233611f58565b806001600160a01b0381166110e65760405163e6c4247b60e01b815260040160405180910390fd5b60006110f181611e9e565b6111096000805160206133cd83398151915284610fb8565b6040516001600160a01b038416906000805160206133cd8339815191529060008051602061332d83398151915290600090a3505050565b600061090260008051602061338d833981519152836117ff565b806001600160a01b0381166111825760405163e6c4247b60e01b815260040160405180910390fd5b600061118d81611e9e565b6111a560008051602061334d83398151915284610fb8565b6040516001600160a01b0384169060008051602061334d8339815191529060008051602061332d83398151915290600090a3505050565b60006111e781611e9e565b6111f184846117ff565b61120e576040516366783c9d60e11b815260040160405180910390fd5b6112188484611fdd565b506112238483612050565b50604080516001600160a01b0380861682528416602082015285917f274dd4127a55dcb6f6c12ed38fec5007d965d2afffa8b0bc75c3dc8f3f6b2224910160405180910390a250505050565b806001600160a01b0381166112975760405163e6c4247b60e01b815260040160405180910390fd5b60006112a281611e9e565b6112ba60008051602061336d83398151915284610fb8565b6040516001600160a01b0384169060008051602061336d8339815191529060008051602061332d83398151915290600090a3505050565b60006112fc81611e9e565b831580611307575081155b1561132557604051637d6eaf9360e01b815260040160405180910390fd5b838214611345576040516390a2f79360e01b815260040160405180910390fd5b60005b848110156113ab57611398868683818110611365576113656130ee565b9050602002013585858481811061137e5761137e6130ee565b905060200201602081019061139391906129c9565b612050565b50806113a381612f7e565b915050611348565b5082826040516113bc929190613104565b60405180910390207ff4d52c90739c68c4e82d39cfbeee6b6613784bf9b28d2cdb3a02203799cf060686866040516113f5929190613144565b60405180910390a25050505050565b600061090282611ea8565b60006001600160a01b03821661143b576040516322718ad960e21b815260006004820152602401610e13565b506001600160a01b031660009081526005602052604090205490565b61146033611ddd565b1561147e5760405163510a583360e01b815260040160405180910390fd5b801561149d57604051630729422160e41b815260040160405180910390fd5b60188111156114bf57604051630729422160e41b815260040160405180910390fd5b60006114cd82610e1061317d565b90506114e760008051602061334d83398151915233612050565b506114f28142612f97565b33600081815260016020526040908190209290925590517fc526cdae63c288ea4504281fe29b0ae3352c8a9ccae61eba8c21cd25a949e0f1906115389085815260200190565b60405180910390a25050565b600061090260008051602061336d833981519152836117ff565b806001600160a01b0381166115865760405163e6c4247b60e01b815260040160405180910390fd5b600061159181611e9e565b6115a960008051602061330d83398151915284611d08565b6040516001600160a01b0384169060008051602061330d833981519152906000805160206133ed83398151915290600090a3505050565b6001600160a01b0381166000908152600960205260409020600481015460ff1661161d576040516308a2227760e11b815260040160405180910390fd5b8060030154421015611642576040516360ad99d960e11b815260040160405180910390fd5b60058101541561167b5761165981600501546110b2565b60058101546000908152600a6020526040902080546001600160a01b03191690555b60048101805460ff191690556040516001600160a01b038316907fddbc5d6ff23c8e382806a60af54f0614adddcbcb9b76b279a95a318414d7635b90600090a25050565b60006109026000805160206133cd833981519152836117ff565b826001600160a01b0381166117015760405163e6c4247b60e01b815260040160405180910390fd5b60008051602061336d83398151915261171981611e9e565b6001600160a01b0385166000908152600960205260409020600481015460ff16611756576040516308a2227760e11b815260040160405180910390fd5b6005810154156117a4576117a4816005015486868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611f0892505050565b600181016117b3858783613194565b50856001600160a01b03167f4a9038a38263b38736ddc315c982f0f7ba9999b67c66a31efc9e1efb3677f4c286866040516117ef929190613254565b60405180910390a2505050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60606003805461099990612f2e565b600061090260008051602061330d833981519152836117ff565b610a503383836120da565b6000818152600a60205260408120546001600160a01b0316610fb181610f81565b806001600160a01b0381166118a55760405163e6c4247b60e01b815260040160405180910390fd5b60006118b081611e9e565b6118c860008051602061338d83398151915284610fb8565b6040516001600160a01b0384169060008051602061338d8339815191529060008051602061332d83398151915290600090a3505050565b60006109026000805160206133ad833981519152836117ff565b600080808080808061192b81896117ff565b61194360008051602061336d8339815191528a6117ff565b61195b6000805160206133cd8339815191528b6117ff565b6119736000805160206133ad8339815191528c6117ff565b61198b60008051602061330d8339815191528d6117ff565b6119a360008051602061338d8339815191528e6117ff565b6119bb60008051602061334d8339815191528f6117ff565b959e949d50929b5090995097509550909350915050565b806001600160a01b0381166119fa5760405163e6c4247b60e01b815260040160405180910390fd5b60008051602061336d833981519152611a1281611e9e565b6000611a1d81611e9e565b6001600160a01b0384166000908152600960205260409020600481015460ff16611a5a576040516308a2227760e11b815260040160405180910390fd5b600581015415611a9357611a7181600501546110b2565b60058101546000908152600a6020526040902080546001600160a01b03191690555b60048101805460ff191690556040516001600160a01b038616907fddbc5d6ff23c8e382806a60af54f0614adddcbcb9b76b279a95a318414d7635b90600090a25050505050565b611ae5848484610ded565b610e7784848484612179565b806001600160a01b038116611b195760405163e6c4247b60e01b815260040160405180910390fd5b6000611b2481611e9e565b6110106000805160206133cd83398151915284611d08565b600061090281836117ff565b6060610902826122a2565b611b8e6040518060c0016040528060608152602001606081526020016000815260200160008152602001600015158152602001600081525090565b6001600160a01b03821660009081526009602052604090819020815160c08101909252805482908290611bc090612f2e565b80601f0160208091040260200160405190810160405280929190818152602001828054611bec90612f2e565b8015611c395780601f10611c0e57610100808354040283529160200191611c39565b820191906000526020600020905b815481529060010190602001808311611c1c57829003601f168201915b50505050508152602001600182018054611c5290612f2e565b80601f0160208091040260200160405190810160405280929190818152602001828054611c7e90612f2e565b8015611ccb5780601f10611ca057610100808354040283529160200191611ccb565b820191906000526020600020905b815481529060010190602001808311611cae57829003601f168201915b50505091835250506002820154602082015260038201546040820152600482015460ff161515606082015260059091015460809091015292915050565b600082815260208190526040902060010154611d2381611e9e565b610e778383611fdd565b806001600160a01b038116611d555760405163e6c4247b60e01b815260040160405180910390fd5b6000611d6081611e9e565b611d786000805160206133ad83398151915284610fb8565b6040516001600160a01b038416906000805160206133ad8339815191529060008051602061332d83398151915290600090a3505050565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b600061090260008051602061334d833981519152836117ff565b806001600160a01b038116611e1f5760405163e6c4247b60e01b815260040160405180910390fd5b6000611e2a81611e9e565b611e4260008051602061336d83398151915284611d08565b6040516001600160a01b0384169060008051602061336d833981519152906000805160206133ed83398151915290600090a3505050565b60006001600160e01b03198216632483248360e11b14806109025750610902826123ab565b610efc81336123eb565b6000818152600460205260408120546001600160a01b03168061090257604051637e27328960e01b815260048101849052602401610e13565b6110108383836001612424565b610a5082826040518060200160405280600081525061252a565b6000828152600860205260409020611f208282612ff8565b506040518281527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce79060200160405180910390a15050565b60006001600160a01b03821615611fca576001600160a01b03841615611fca5760405162461bcd60e51b815260206004820152602160248201527f43657274696669636174657320617265206e6f6e2d7472616e7366657261626c6044820152606560f81b6064820152608401610e13565b611fd5848484612541565b949350505050565b6000611fe983836117ff565b15612048576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610902565b506000610902565b600061205c83836117ff565b612048576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556120923390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610902565b6001600160a01b03821661210c57604051630b61174360e31b81526001600160a01b0383166004820152602401610e13565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b15610e7757604051630a85bd0160e11b81526001600160a01b0384169063150b7a02906121bb903390889087908790600401613283565b6020604051808303816000875af19250505080156121f6575060408051601f3d908101601f191682019092526121f3918101906132c0565b60015b61225f573d808015612224576040519150601f19603f3d011682016040523d82523d6000602084013e612229565b606091505b50805160000361225757604051633250574960e11b81526001600160a01b0385166004820152602401610e13565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b1461229b57604051633250574960e11b81526001600160a01b0385166004820152602401610e13565b5050505050565b60606122ad82611ea8565b50600082815260086020526040812080546122c790612f2e565b80601f01602080910402602001604051908101604052809291908181526020018280546122f390612f2e565b80156123405780601f1061231557610100808354040283529160200191612340565b820191906000526020600020905b81548152906001019060200180831161232357829003601f168201915b50505050509050600061235e60408051602081019091526000815290565b90508051600003612370575092915050565b8151156123a257808260405160200161238a9291906132dd565b60405160208183030381529060405292505050919050565b611fd58461263a565b60006001600160e01b031982166380ac58cd60e01b14806123dc57506001600160e01b03198216635b5e139f60e01b145b806109025750610902826126ae565b6123f582826117ff565b610a505760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610e13565b808061243857506001600160a01b03821615155b156124fa57600061244884611ea8565b90506001600160a01b038316158015906124745750826001600160a01b0316816001600160a01b031614155b801561248757506124858184611daf565b155b156124b05760405163a9fbf51f60e01b81526001600160a01b0384166004820152602401610e13565b81156124f85783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260066020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b61253483836126e3565b6110106000848484612179565b6000828152600460205260408120546001600160a01b039081169083161561256e5761256e818486612748565b6001600160a01b038116156125ac5761258b600085600080612424565b6001600160a01b038116600090815260056020526040902080546000190190555b6001600160a01b038516156125db576001600160a01b0385166000908152600560205260409020805460010190555b60008481526004602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b606061264582611ea8565b50600061265d60408051602081019091526000815290565b9050600081511161267d5760405180602001604052806000815250610fb1565b80612687846127ac565b6040516020016126989291906132dd565b6040516020818303038152906040529392505050565b60006001600160e01b03198216637965db0b60e01b148061090257506301ffc9a760e01b6001600160e01b0319831614610902565b6001600160a01b03821661270d57604051633250574960e11b815260006004820152602401610e13565b600061271b83836000611f58565b90506001600160a01b03811615611010576040516339e3563760e11b815260006004820152602401610e13565b61275383838361283f565b611010576001600160a01b03831661278157604051637e27328960e01b815260048101829052602401610e13565b60405163177e802f60e01b81526001600160a01b038316600482015260248101829052604401610e13565b606060006127b9836128a2565b600101905060008167ffffffffffffffff8111156127d9576127d9612a8a565b6040519080825280601f01601f191660200182016040528015612803576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461280d57509392505050565b60006001600160a01b03831615801590611fd55750826001600160a01b0316846001600160a01b0316148061287957506128798484611daf565b80611fd55750506000908152600660205260409020546001600160a01b03908116911614919050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106128e15772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061290d576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061292b57662386f26fc10000830492506010015b6305f5e1008310612943576305f5e100830492506008015b612710831061295757612710830492506004015b60648310612969576064830492506002015b600a83106109025760010192915050565b6001600160e01b031981168114610efc57600080fd5b6000602082840312156129a257600080fd5b8135610fb18161297a565b80356001600160a01b03811681146129c457600080fd5b919050565b6000602082840312156129db57600080fd5b610fb1826129ad565b60005b838110156129ff5781810151838201526020016129e7565b50506000910152565b60008151808452612a208160208601602086016129e4565b601f01601f19169290920160200192915050565b602081526000610fb16020830184612a08565b600060208284031215612a5957600080fd5b5035919050565b60008060408385031215612a7357600080fd5b612a7c836129ad565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115612abb57612abb612a8a565b604051601f8501601f19908116603f01168101908282118183101715612ae357612ae3612a8a565b81604052809350858152868686011115612afc57600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112612b2757600080fd5b610fb183833560208501612aa0565b60008060008060808587031215612b4c57600080fd5b612b55856129ad565b9350602085013567ffffffffffffffff80821115612b7257600080fd5b612b7e88838901612b16565b94506040870135915080821115612b9457600080fd5b50612ba187828801612b16565b949793965093946060013593505050565b60c081526000612bc560c0830189612a08565b8281036020840152612bd78189612a08565b604084019790975250506060810193909352901515608083015260a09091015292915050565b600080600060608486031215612c1257600080fd5b612c1b846129ad565b9250612c29602085016129ad565b9150604084013590509250925092565b60008060408385031215612c4c57600080fd5b82359150612c5c602084016129ad565b90509250929050565b600080600060608486031215612c7a57600080fd5b83359250612c8a602085016129ad565b9150612c98604085016129ad565b90509250925092565b60008083601f840112612cb357600080fd5b50813567ffffffffffffffff811115612ccb57600080fd5b6020830191508360208260051b8501011115612ce657600080fd5b9250929050565b60008060008060408587031215612d0357600080fd5b843567ffffffffffffffff80821115612d1b57600080fd5b612d2788838901612ca1565b90965094506020870135915080821115612d4057600080fd5b50612d4d87828801612ca1565b95989497509550505050565b600080600060408486031215612d6e57600080fd5b612d77846129ad565b9250602084013567ffffffffffffffff80821115612d9457600080fd5b818601915086601f830112612da857600080fd5b813581811115612db757600080fd5b876020828501011115612dc957600080fd5b6020830194508093505050509250925092565b60008060408385031215612def57600080fd5b612df8836129ad565b915060208301358015158114612e0d57600080fd5b809150509250929050565b60008060008060808587031215612e2e57600080fd5b612e37856129ad565b9350612e45602086016129ad565b925060408501359150606085013567ffffffffffffffff811115612e6857600080fd5b8501601f81018713612e7957600080fd5b612e8887823560208401612aa0565b91505092959194509250565b602081526000825160c06020840152612eb060e0840182612a08565b90506020840151601f19848303016040850152612ecd8282612a08565b91505060408401516060840152606084015160808401526080840151151560a084015260a084015160c08401528091505092915050565b60008060408385031215612f1757600080fd5b612f20836129ad565b9150612c5c602084016129ad565b600181811c90821680612f4257607f821691505b602082108103612f6257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600060018201612f9057612f90612f68565b5060010190565b8082018082111561090257610902612f68565b601f82111561101057600081815260208120601f850160051c81016020861015612fd15750805b601f850160051c820191505b81811015612ff057828155600101612fdd565b505050505050565b815167ffffffffffffffff81111561301257613012612a8a565b613026816130208454612f2e565b84612faa565b602080601f83116001811461305b57600084156130435750858301515b600019600386901b1c1916600185901b178555612ff0565b600085815260208120601f198616915b8281101561308a5788860151825594840194600190910190840161306b565b50858210156130a85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6060815260006130cb6060830186612a08565b82810360208401526130dd8186612a08565b915050826040830152949350505050565b634e487b7160e01b600052603260045260246000fd5b60008184825b85811015613139576001600160a01b03613123836129ad565b168352602092830192919091019060010161310a565b509095945050505050565b6020808252810182905260006001600160fb1b0383111561316457600080fd5b8260051b80856040850137919091016040019392505050565b808202811582820484141761090257610902612f68565b67ffffffffffffffff8311156131ac576131ac612a8a565b6131c0836131ba8354612f2e565b83612faa565b6000601f8411600181146131f457600085156131dc5750838201355b600019600387901b1c1916600186901b17835561229b565b600083815260209020601f19861690835b828110156132255786850135825560209485019460019092019101613205565b50868210156132425760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906132b690830184612a08565b9695505050505050565b6000602082840312156132d257600080fd5b8151610fb18161297a565b600083516132ef8184602088016129e4565b8351908301906133038183602088016129e4565b0194935050505056fe920994fc3bfe282f3f20cdccf1b7c5e46c63d963e822d98efff90abd41c12e212ae6a113c0ed5b78a53413ffbb7679881f11145ccfba4fb92e863dfcd5a1d2f3ee244ef9da0b2f89a74b208ea9fe1a639ebdf634027d9e1f092b58c39954fa37c41a06b26ced3a23b7bf835a0918ade784f4055ded86d18305f528f47a726052aa0ec51d0bf03ce5511c9ffc9de2b423d73d1faacd808abf2ac89ccea8a3ecf259a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f506fa31d7a92d9fa9a8898ac41d86ee9b13863605a361c85ae5d6010d5de4f280155aaafb6329a2098580462df33ec4b7441b19729b9601c5fc17ae1cf99a8a52a26469706673582212207bee0f297e881bceac35b2347794371a3c52e792d1864202b4b3584b52f9d14764736f6c63430008140033c41a06b26ced3a23b7bf835a0918ade784f4055ded86d18305f528f47a726052","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x15 DUP2 MSTORE PUSH32 0x456E746572707269736543657274696669636174650000000000000000000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE PUSH1 0x5 DUP4 MSTORE PUSH5 0x1150D15495 PUSH1 0xDA SHL SWAP1 DUP4 ADD MSTORE SWAP1 PUSH3 0x70 PUSH1 0x0 CALLER PUSH3 0xDB JUMP JUMPDEST PUSH3 0x8B PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x375D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH3 0xDB JUMP JUMPDEST PUSH1 0x2 PUSH3 0x99 DUP4 DUP3 PUSH3 0x23F JUMP JUMPDEST POP PUSH1 0x3 PUSH3 0xA8 DUP3 DUP3 PUSH3 0x23F JUMP JUMPDEST POP PUSH3 0xBA SWAP2 POP PUSH1 0x0 SWAP1 POP CALLER PUSH3 0xDB JUMP JUMPDEST PUSH3 0xD5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x375D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH3 0xDB JUMP JUMPDEST PUSH3 0x30B JUMP JUMPDEST PUSH3 0xE7 DUP3 DUP3 PUSH3 0xEC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH3 0x191 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH3 0x148 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH1 0x1 PUSH3 0x195 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x1C6 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x1E7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0xE7 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x216 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x237 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x222 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x25B JUMPI PUSH3 0x25B PUSH3 0x19B JUMP JUMPDEST PUSH3 0x273 DUP2 PUSH3 0x26C DUP5 SLOAD PUSH3 0x1B1 JUMP JUMPDEST DUP5 PUSH3 0x1ED JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x2AB JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x292 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x237 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x2DC JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x2BB JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x2FB JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x3442 DUP1 PUSH3 0x31B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3AF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7780E9C1 GT PUSH2 0x1F4 JUMPI DUP1 PUSH4 0xABAA536F GT PUSH2 0x11A JUMPI DUP1 PUSH4 0xC87B56DD GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xE55B4F93 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xE55B4F93 EQ PUSH2 0x8AB JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x8BE JUMPI DUP1 PUSH4 0xF53F5E1E EQ PUSH2 0x8D1 JUMPI DUP1 PUSH4 0xFC810286 EQ PUSH2 0x8E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x850 JUMPI DUP1 PUSH4 0xC88CC6AC EQ PUSH2 0x863 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x883 JUMPI DUP1 PUSH4 0xE3A3C522 EQ PUSH2 0x896 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB88D4FDE GT PUSH2 0xE9 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x810 JUMPI DUP1 PUSH4 0xB8AD415E EQ PUSH2 0x823 JUMPI DUP1 PUSH4 0xBD7CA7BA EQ PUSH2 0x82A JUMPI DUP1 PUSH4 0xC395FCB3 EQ PUSH2 0x83D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xABAA536F EQ PUSH2 0x776 JUMPI DUP1 PUSH4 0xB0614DB3 EQ PUSH2 0x789 JUMPI DUP1 PUSH4 0xB5617EF7 EQ PUSH2 0x7DD JUMPI DUP1 PUSH4 0xB83CC3B3 EQ PUSH2 0x7FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x90F201BE GT PUSH2 0x192 JUMPI DUP1 PUSH4 0xA217FDDF GT PUSH2 0x161 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x735 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x73D JUMPI DUP1 PUSH4 0xA5CE413A EQ PUSH2 0x750 JUMPI DUP1 PUSH4 0xAA52617C EQ PUSH2 0x763 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x90F201BE EQ PUSH2 0x6F4 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x707 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x71A JUMPI DUP1 PUSH4 0xA1F34163 EQ PUSH2 0x722 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7E5EFFA4 GT PUSH2 0x1CE JUMPI DUP1 PUSH4 0x7E5EFFA4 EQ PUSH2 0x692 JUMPI DUP1 PUSH4 0x808B0557 EQ PUSH2 0x6A5 JUMPI DUP1 PUSH4 0x8850845F EQ PUSH2 0x6B8 JUMPI DUP1 PUSH4 0x89A912E0 EQ PUSH2 0x6CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7780E9C1 EQ PUSH2 0x657 JUMPI DUP1 PUSH4 0x784FEE0E EQ PUSH2 0x66A JUMPI DUP1 PUSH4 0x7BFF0975 EQ PUSH2 0x67F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3CA7C02A GT PUSH2 0x2D9 JUMPI DUP1 PUSH4 0x5CB87D26 GT PUSH2 0x277 JUMPI DUP1 PUSH4 0x68DD17A5 GT PUSH2 0x246 JUMPI DUP1 PUSH4 0x68DD17A5 EQ PUSH2 0x605 JUMPI DUP1 PUSH4 0x69D0B517 EQ PUSH2 0x61A JUMPI DUP1 PUSH4 0x6E1D616E EQ PUSH2 0x62F JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x644 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5CB87D26 EQ PUSH2 0x5B9 JUMPI DUP1 PUSH4 0x60376528 EQ PUSH2 0x5CC JUMPI DUP1 PUSH4 0x61462F0E EQ PUSH2 0x5DF JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x5F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x42966C68 GT PUSH2 0x2B3 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x56D JUMPI DUP1 PUSH4 0x456F19FC EQ PUSH2 0x580 JUMPI DUP1 PUSH4 0x52F84B72 EQ PUSH2 0x593 JUMPI DUP1 PUSH4 0x57C03371 EQ PUSH2 0x5A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3CA7C02A EQ PUSH2 0x532 JUMPI DUP1 PUSH4 0x3E251518 EQ PUSH2 0x547 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x55A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x236E0929 GT PUSH2 0x351 JUMPI DUP1 PUSH4 0x261191B7 GT PUSH2 0x320 JUMPI DUP1 PUSH4 0x261191B7 EQ PUSH2 0x4E6 JUMPI DUP1 PUSH4 0x261E85CD EQ PUSH2 0x4F9 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x50C JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x51F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x236E0929 EQ PUSH2 0x46A JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x48F JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x4A2 JUMPI DUP1 PUSH4 0x25D5E87E EQ PUSH2 0x4D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x81812FC GT PUSH2 0x38D JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x406 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x431 JUMPI DUP1 PUSH4 0xBCCE45B EQ PUSH2 0x444 JUMPI DUP1 PUSH4 0x1E223B2A EQ PUSH2 0x457 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x3B4 JUMPI DUP1 PUSH4 0x443CD2A EQ PUSH2 0x3DC JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x3F1 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3C7 PUSH2 0x3C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x2990 JUMP JUMPDEST PUSH2 0x8F7 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3EF PUSH2 0x3EA CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x908 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3F9 PUSH2 0x98A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3D3 SWAP2 SWAP1 PUSH2 0x2A34 JUMP JUMPDEST PUSH2 0x419 PUSH2 0x414 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A47 JUMP JUMPDEST PUSH2 0xA1C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3D3 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x43F CALLDATASIZE PUSH1 0x4 PUSH2 0x2A60 JUMP JUMPDEST PUSH2 0xA45 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x452 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B36 JUMP JUMPDEST PUSH2 0xA54 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x465 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0xC20 JUMP JUMPDEST PUSH2 0x47D PUSH2 0x478 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0xCA2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3D3 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2BB2 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x49D CALLDATASIZE PUSH1 0x4 PUSH2 0x2BFD JUMP JUMPDEST PUSH2 0xDED JUMP JUMPDEST PUSH2 0x4C5 PUSH2 0x4B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A47 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3D3 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x4E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0xE7D JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x4F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0xEFF JUMP JUMPDEST PUSH2 0x3C7 PUSH2 0x507 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0xF81 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x51A CALLDATASIZE PUSH1 0x4 PUSH2 0x2C39 JUMP JUMPDEST PUSH2 0xFB8 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x52D CALLDATASIZE PUSH1 0x4 PUSH2 0x2C39 JUMP JUMPDEST PUSH2 0xFDD JUMP JUMPDEST PUSH2 0x4C5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x334D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x555 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x1015 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x568 CALLDATASIZE PUSH1 0x4 PUSH2 0x2BFD JUMP JUMPDEST PUSH2 0x1097 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x57B CALLDATASIZE PUSH1 0x4 PUSH2 0x2A47 JUMP JUMPDEST PUSH2 0x10B2 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x58E CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x10BE JUMP JUMPDEST PUSH2 0x3C7 PUSH2 0x5A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x1140 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x5B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x115A JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x5C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2C65 JUMP JUMPDEST PUSH2 0x11DC JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x5DA CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x126F JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x5ED CALLDATASIZE PUSH1 0x4 PUSH2 0x2CED JUMP JUMPDEST PUSH2 0x12F1 JUMP JUMPDEST PUSH2 0x419 PUSH2 0x600 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A47 JUMP JUMPDEST PUSH2 0x1404 JUMP JUMPDEST PUSH2 0x4C5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x330D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x4C5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x336D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x4C5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33AD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x4C5 PUSH2 0x652 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x140F JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x665 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A47 JUMP JUMPDEST PUSH2 0x1457 JUMP JUMPDEST PUSH2 0x4C5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x338D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x3C7 PUSH2 0x68D CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x1544 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x6A0 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x155E JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x6B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x15E0 JUMP JUMPDEST PUSH2 0x3C7 PUSH2 0x6C6 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x16BF JUMP JUMPDEST PUSH2 0x419 PUSH2 0x6D9 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A47 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x702 CALLDATASIZE PUSH1 0x4 PUSH2 0x2D59 JUMP JUMPDEST PUSH2 0x16D9 JUMP JUMPDEST PUSH2 0x3C7 PUSH2 0x715 CALLDATASIZE PUSH1 0x4 PUSH2 0x2C39 JUMP JUMPDEST PUSH2 0x17FF JUMP JUMPDEST PUSH2 0x3F9 PUSH2 0x1828 JUMP JUMPDEST PUSH2 0x3C7 PUSH2 0x730 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x1837 JUMP JUMPDEST PUSH2 0x4C5 PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x74B CALLDATASIZE PUSH1 0x4 PUSH2 0x2DDC JUMP JUMPDEST PUSH2 0x1851 JUMP JUMPDEST PUSH2 0x3C7 PUSH2 0x75E CALLDATASIZE PUSH1 0x4 PUSH2 0x2A47 JUMP JUMPDEST PUSH2 0x185C JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x771 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x187D JUMP JUMPDEST PUSH2 0x3C7 PUSH2 0x784 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x18FF JUMP JUMPDEST PUSH2 0x79C PUSH2 0x797 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x1919 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP8 ISZERO ISZERO DUP9 MSTORE SWAP6 ISZERO ISZERO PUSH1 0x20 DUP9 ADD MSTORE SWAP4 ISZERO ISZERO SWAP5 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x60 DUP6 ADD MSTORE ISZERO ISZERO PUSH1 0x80 DUP5 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0xA0 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD PUSH2 0x3D3 JUMP JUMPDEST PUSH2 0x4C5 PUSH2 0x7EB CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x80B CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x19D2 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x81E CALLDATASIZE PUSH1 0x4 PUSH2 0x2E18 JUMP JUMPDEST PUSH2 0x1ADA JUMP JUMPDEST PUSH1 0x18 PUSH2 0x4C5 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x838 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x1AF1 JUMP JUMPDEST PUSH2 0x3C7 PUSH2 0x84B CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x1B3C JUMP JUMPDEST PUSH2 0x3F9 PUSH2 0x85E CALLDATASIZE PUSH1 0x4 PUSH2 0x2A47 JUMP JUMPDEST PUSH2 0x1B48 JUMP JUMPDEST PUSH2 0x876 PUSH2 0x871 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x1B53 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3D3 SWAP2 SWAP1 PUSH2 0x2E94 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x891 CALLDATASIZE PUSH1 0x4 PUSH2 0x2C39 JUMP JUMPDEST PUSH2 0x1D08 JUMP JUMPDEST PUSH2 0x4C5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33CD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x8B9 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x1D2D JUMP JUMPDEST PUSH2 0x3C7 PUSH2 0x8CC CALLDATASIZE PUSH1 0x4 PUSH2 0x2F04 JUMP JUMPDEST PUSH2 0x1DAF JUMP JUMPDEST PUSH2 0x3C7 PUSH2 0x8DF CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x1DDD JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x8F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x1DF7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x902 DUP3 PUSH2 0x1E79 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x930 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x93B DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x953 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x334D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x334D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33ED DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x999 SWAP1 PUSH2 0x2F2E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x9C5 SWAP1 PUSH2 0x2F2E JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA12 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x9E7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA12 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x9F5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA27 DUP3 PUSH2 0x1EA8 JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x902 JUMP JUMPDEST PUSH2 0xA50 DUP3 DUP3 CALLER PUSH2 0x1EE1 JUMP JUMPDEST POP POP JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xA7C JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x336D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xA94 DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xAD1 JUMPI PUSH1 0x40 MLOAD PUSH4 0x69136C81 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH1 0x0 SWAP2 DUP3 PUSH2 0xAE2 DUP4 PUSH2 0x2F7E JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE SWAP1 POP PUSH2 0xAF2 DUP8 DUP3 PUSH2 0x1EEE JUMP JUMPDEST PUSH2 0xAFC DUP2 DUP7 PUSH2 0x1F08 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE PUSH1 0x20 ADD DUP6 TIMESTAMP PUSH2 0xB25 SWAP2 SWAP1 PUSH2 0x2F97 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 SWAP1 SWAP2 MSTORE KECCAK256 DUP2 MLOAD DUP2 SWAP1 PUSH2 0xB5D SWAP1 DUP3 PUSH2 0x2FF8 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP3 ADD SWAP1 PUSH2 0xB72 SWAP1 DUP3 PUSH2 0x2FF8 JUMP JUMPDEST POP PUSH1 0x40 DUP3 DUP2 ADD MLOAD PUSH1 0x2 DUP4 ADD SSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x3 DUP4 ADD SSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x4 DUP4 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0xA0 SWAP1 SWAP3 ADD MLOAD PUSH1 0x5 SWAP1 SWAP2 ADD SSTORE PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH32 0x56A1F3FA57A4CC6A9BE7AAA185BA31C140EA18678A1B45900756C2E5E1BA8DD2 DUP8 DUP8 PUSH2 0xC00 DUP9 TIMESTAMP PUSH2 0x2F97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC0F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x30B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xC48 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xC53 DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0xC6B PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x330D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xFB8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x330D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x332D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP2 SWAP1 PUSH2 0xCBD SWAP1 PUSH2 0x2F2E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xCE9 SWAP1 PUSH2 0x2F2E JUMP JUMPDEST DUP1 ISZERO PUSH2 0xD36 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xD0B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xD36 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xD19 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xD4B SWAP1 PUSH2 0x2F2E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xD77 SWAP1 PUSH2 0x2F2E JUMP JUMPDEST DUP1 ISZERO PUSH2 0xDC4 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xD99 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xDC4 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xDA7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP PUSH1 0x2 DUP5 ADD SLOAD PUSH1 0x3 DUP6 ADD SLOAD PUSH1 0x4 DUP7 ADD SLOAD PUSH1 0x5 SWAP1 SWAP7 ADD SLOAD SWAP5 SWAP6 SWAP2 SWAP5 SWAP1 SWAP4 POP PUSH1 0xFF SWAP1 SWAP2 AND SWAP2 POP DUP7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xE1C JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xE29 DUP4 DUP4 CALLER PUSH2 0x1F58 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xE77 JUMPI PUSH1 0x40 MLOAD PUSH4 0x64283D7B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE13 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0xE86 DUP2 PUSH2 0x1DDD JUMP JUMPDEST DUP1 ISZERO PUSH2 0xEA9 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD TIMESTAMP GT JUMPDEST ISZERO PUSH2 0xEFC JUMPI PUSH2 0xEC6 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x334D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH2 0x1FDD JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xA6F32BCBC7DE829D50E1C9CBC1C5B4DAFB4C7A0B8329757AEE62A9B394D71C3B SWAP1 PUSH1 0x0 SWAP1 LOG2 JUMPDEST POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xF27 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xF32 DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0xF4A PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x338D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x338D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33ED DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0xFF AND DUP1 ISZERO PUSH2 0xFB1 JUMPI POP DUP1 PUSH1 0x3 ADD SLOAD TIMESTAMP GT ISZERO JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xFD3 DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0xE77 DUP4 DUP4 PUSH2 0x2050 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x1006 JUMPI PUSH1 0x40 MLOAD PUSH4 0x334BD919 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1010 DUP3 DUP3 PUSH2 0x1FDD JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x103D JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1048 DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x1060 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33AD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33AD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33ED DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1010 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1ADA JUMP JUMPDEST PUSH2 0xA50 PUSH1 0x0 DUP3 CALLER PUSH2 0x1F58 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x10E6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x10F1 DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x1109 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33CD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xFB8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33CD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x332D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x902 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x338D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0x17FF JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1182 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x118D DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x11A5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x334D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xFB8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x334D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x332D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11E7 DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x11F1 DUP5 DUP5 PUSH2 0x17FF JUMP JUMPDEST PUSH2 0x120E JUMPI PUSH1 0x40 MLOAD PUSH4 0x66783C9D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1218 DUP5 DUP5 PUSH2 0x1FDD JUMP JUMPDEST POP PUSH2 0x1223 DUP5 DUP4 PUSH2 0x2050 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP6 SWAP2 PUSH32 0x274DD4127A55DCB6F6C12ED38FEC5007D965D2AFFFA8B0BC75C3DC8F3F6B2224 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1297 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x12A2 DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x12BA PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x336D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xFB8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x336D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x332D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12FC DUP2 PUSH2 0x1E9E JUMP JUMPDEST DUP4 ISZERO DUP1 PUSH2 0x1307 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x1325 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7D6EAF93 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP3 EQ PUSH2 0x1345 JUMPI PUSH1 0x40 MLOAD PUSH4 0x90A2F793 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x13AB JUMPI PUSH2 0x1398 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x1365 JUMPI PUSH2 0x1365 PUSH2 0x30EE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x137E JUMPI PUSH2 0x137E PUSH2 0x30EE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1393 SWAP2 SWAP1 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x2050 JUMP JUMPDEST POP DUP1 PUSH2 0x13A3 DUP2 PUSH2 0x2F7E JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1348 JUMP JUMPDEST POP DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x13BC SWAP3 SWAP2 SWAP1 PUSH2 0x3104 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH32 0xF4D52C90739C68C4E82D39CFBEEE6B6613784BF9B28D2CDB3A02203799CF0606 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x13F5 SWAP3 SWAP2 SWAP1 PUSH2 0x3144 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x902 DUP3 PUSH2 0x1EA8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x143B JUMPI PUSH1 0x40 MLOAD PUSH4 0x22718AD9 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xE13 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1460 CALLER PUSH2 0x1DDD JUMP JUMPDEST ISZERO PUSH2 0x147E JUMPI PUSH1 0x40 MLOAD PUSH4 0x510A5833 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 ISZERO PUSH2 0x149D JUMPI PUSH1 0x40 MLOAD PUSH4 0x7294221 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x18 DUP2 GT ISZERO PUSH2 0x14BF JUMPI PUSH1 0x40 MLOAD PUSH4 0x7294221 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x14CD DUP3 PUSH2 0xE10 PUSH2 0x317D JUMP JUMPDEST SWAP1 POP PUSH2 0x14E7 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x334D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x2050 JUMP JUMPDEST POP PUSH2 0x14F2 DUP2 TIMESTAMP PUSH2 0x2F97 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 MLOAD PUSH32 0xC526CDAE63C288EA4504281FE29B0AE3352C8A9CCAE61EBA8C21CD25A949E0F1 SWAP1 PUSH2 0x1538 SWAP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x902 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x336D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0x17FF JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1586 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1591 DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x15A9 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x330D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x330D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33ED DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0xFF AND PUSH2 0x161D JUMPI PUSH1 0x40 MLOAD PUSH4 0x8A22277 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3 ADD SLOAD TIMESTAMP LT ISZERO PUSH2 0x1642 JUMPI PUSH1 0x40 MLOAD PUSH4 0x60AD99D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 DUP2 ADD SLOAD ISZERO PUSH2 0x167B JUMPI PUSH2 0x1659 DUP2 PUSH1 0x5 ADD SLOAD PUSH2 0x10B2 JUMP JUMPDEST PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMPDEST PUSH1 0x4 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0xDDBC5D6FF23C8E382806A60AF54F0614ADDDCBCB9B76B279A95A318414D7635B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x902 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33CD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0x17FF JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1701 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x336D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x1719 DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0xFF AND PUSH2 0x1756 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8A22277 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 DUP2 ADD SLOAD ISZERO PUSH2 0x17A4 JUMPI PUSH2 0x17A4 DUP2 PUSH1 0x5 ADD SLOAD DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x1F08 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 ADD PUSH2 0x17B3 DUP6 DUP8 DUP4 PUSH2 0x3194 JUMP JUMPDEST POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A9038A38263B38736DDC315C982F0F7BA9999B67C66A31EFC9E1EFB3677F4C2 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x17EF SWAP3 SWAP2 SWAP1 PUSH2 0x3254 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x999 SWAP1 PUSH2 0x2F2E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x902 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x330D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0x17FF JUMP JUMPDEST PUSH2 0xA50 CALLER DUP4 DUP4 PUSH2 0x20DA JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xFB1 DUP2 PUSH2 0xF81 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x18A5 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x18B0 DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x18C8 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x338D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xFB8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x338D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x332D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x902 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33AD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0x17FF JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x192B DUP2 DUP10 PUSH2 0x17FF JUMP JUMPDEST PUSH2 0x1943 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x336D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP11 PUSH2 0x17FF JUMP JUMPDEST PUSH2 0x195B PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33CD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP12 PUSH2 0x17FF JUMP JUMPDEST PUSH2 0x1973 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33AD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP13 PUSH2 0x17FF JUMP JUMPDEST PUSH2 0x198B PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x330D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP14 PUSH2 0x17FF JUMP JUMPDEST PUSH2 0x19A3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x338D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP15 PUSH2 0x17FF JUMP JUMPDEST PUSH2 0x19BB PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x334D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP16 PUSH2 0x17FF JUMP JUMPDEST SWAP6 SWAP15 SWAP5 SWAP14 POP SWAP3 SWAP12 POP SWAP1 SWAP10 POP SWAP8 POP SWAP6 POP SWAP1 SWAP4 POP SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x19FA JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x336D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x1A12 DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A1D DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0xFF AND PUSH2 0x1A5A JUMPI PUSH1 0x40 MLOAD PUSH4 0x8A22277 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 DUP2 ADD SLOAD ISZERO PUSH2 0x1A93 JUMPI PUSH2 0x1A71 DUP2 PUSH1 0x5 ADD SLOAD PUSH2 0x10B2 JUMP JUMPDEST PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMPDEST PUSH1 0x4 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH32 0xDDBC5D6FF23C8E382806A60AF54F0614ADDDCBCB9B76B279A95A318414D7635B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1AE5 DUP5 DUP5 DUP5 PUSH2 0xDED JUMP JUMPDEST PUSH2 0xE77 DUP5 DUP5 DUP5 DUP5 PUSH2 0x2179 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1B19 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1B24 DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x1010 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33CD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x902 DUP2 DUP4 PUSH2 0x17FF JUMP JUMPDEST PUSH1 0x60 PUSH2 0x902 DUP3 PUSH2 0x22A2 JUMP JUMPDEST PUSH2 0x1B8E PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP2 MLOAD PUSH1 0xC0 DUP2 ADD SWAP1 SWAP3 MSTORE DUP1 SLOAD DUP3 SWAP1 DUP3 SWAP1 PUSH2 0x1BC0 SWAP1 PUSH2 0x2F2E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1BEC SWAP1 PUSH2 0x2F2E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1C39 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1C0E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1C39 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1C1C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH2 0x1C52 SWAP1 PUSH2 0x2F2E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1C7E SWAP1 PUSH2 0x2F2E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1CCB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1CA0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1CCB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1CAE JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x5 SWAP1 SWAP2 ADD SLOAD PUSH1 0x80 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x1D23 DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0xE77 DUP4 DUP4 PUSH2 0x1FDD JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1D55 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1D60 DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x1D78 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33AD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xFB8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33AD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x332D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x902 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x334D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0x17FF JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1E1F JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1E2A DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x1E42 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x336D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x336D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33ED DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x24832483 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x902 JUMPI POP PUSH2 0x902 DUP3 PUSH2 0x23AB JUMP JUMPDEST PUSH2 0xEFC DUP2 CALLER PUSH2 0x23EB JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x902 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xE13 JUMP JUMPDEST PUSH2 0x1010 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x2424 JUMP JUMPDEST PUSH2 0xA50 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x252A JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x1F20 DUP3 DUP3 PUSH2 0x2FF8 JUMP JUMPDEST POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH32 0xF8E1A15ABA9398E019F0B49DF1A4FDE98EE17AE345CB5F6B5E2C27F5033E8CE7 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0x1FCA JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x1FCA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43657274696669636174657320617265206E6F6E2D7472616E7366657261626C PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x65 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE13 JUMP JUMPDEST PUSH2 0x1FD5 DUP5 DUP5 DUP5 PUSH2 0x2541 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FE9 DUP4 DUP4 PUSH2 0x17FF JUMP JUMPDEST ISZERO PUSH2 0x2048 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP7 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x902 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x902 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x205C DUP4 DUP4 PUSH2 0x17FF JUMP JUMPDEST PUSH2 0x2048 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x2092 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x902 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x210C JUMPI PUSH1 0x40 MLOAD PUSH4 0xB611743 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xE13 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO PUSH2 0xE77 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x21BB SWAP1 CALLER SWAP1 DUP9 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x3283 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x21F6 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x21F3 SWAP2 DUP2 ADD SWAP1 PUSH2 0x32C0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x225F JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2224 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2229 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x2257 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xE13 JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ PUSH2 0x229B JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xE13 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x22AD DUP3 PUSH2 0x1EA8 JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0x22C7 SWAP1 PUSH2 0x2F2E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x22F3 SWAP1 PUSH2 0x2F2E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2340 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2315 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2340 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2323 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x235E PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x2370 JUMPI POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x23A2 JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x238A SWAP3 SWAP2 SWAP1 PUSH2 0x32DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1FD5 DUP5 PUSH2 0x263A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x23DC JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x902 JUMPI POP PUSH2 0x902 DUP3 PUSH2 0x26AE JUMP JUMPDEST PUSH2 0x23F5 DUP3 DUP3 PUSH2 0x17FF JUMP JUMPDEST PUSH2 0xA50 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE2517D3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xE13 JUMP JUMPDEST DUP1 DUP1 PUSH2 0x2438 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x24FA JUMPI PUSH1 0x0 PUSH2 0x2448 DUP5 PUSH2 0x1EA8 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x2474 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x2487 JUMPI POP PUSH2 0x2485 DUP2 DUP5 PUSH2 0x1DAF JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x24B0 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA9FBF51F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xE13 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x24F8 JUMPI DUP4 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2534 DUP4 DUP4 PUSH2 0x26E3 JUMP JUMPDEST PUSH2 0x1010 PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x2179 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP4 AND ISZERO PUSH2 0x256E JUMPI PUSH2 0x256E DUP2 DUP5 DUP7 PUSH2 0x2748 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x25AC JUMPI PUSH2 0x258B PUSH1 0x0 DUP6 PUSH1 0x0 DUP1 PUSH2 0x2424 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND ISZERO PUSH2 0x25DB JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP8 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2645 DUP3 PUSH2 0x1EA8 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x265D PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x267D JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xFB1 JUMP JUMPDEST DUP1 PUSH2 0x2687 DUP5 PUSH2 0x27AC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2698 SWAP3 SWAP2 SWAP1 PUSH2 0x32DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x902 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x902 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x270D JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xE13 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x271B DUP4 DUP4 PUSH1 0x0 PUSH2 0x1F58 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x1010 JUMPI PUSH1 0x40 MLOAD PUSH4 0x39E35637 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xE13 JUMP JUMPDEST PUSH2 0x2753 DUP4 DUP4 DUP4 PUSH2 0x283F JUMP JUMPDEST PUSH2 0x1010 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x2781 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xE13 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x177E802F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xE13 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x27B9 DUP4 PUSH2 0x28A2 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x27D9 JUMPI PUSH2 0x27D9 PUSH2 0x2A8A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2803 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x280D JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1FD5 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x2879 JUMPI POP PUSH2 0x2879 DUP5 DUP5 PUSH2 0x1DAF JUMP JUMPDEST DUP1 PUSH2 0x1FD5 JUMPI POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x28E1 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x290D JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x292B JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x2943 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x2957 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x2969 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x902 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xEFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x29A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xFB1 DUP2 PUSH2 0x297A JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x29C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x29DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFB1 DUP3 PUSH2 0x29AD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x29FF JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x29E7 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2A20 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x29E4 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xFB1 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2A08 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2A73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A7C DUP4 PUSH2 0x29AD JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP5 GT ISZERO PUSH2 0x2ABB JUMPI PUSH2 0x2ABB PUSH2 0x2A8A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP6 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x2AE3 JUMPI PUSH2 0x2AE3 PUSH2 0x2A8A JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP1 SWAP4 POP DUP6 DUP2 MSTORE DUP7 DUP7 DUP7 ADD GT ISZERO PUSH2 0x2AFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP8 DUP4 ADD ADD MSTORE POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2B27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFB1 DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH2 0x2AA0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2B4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2B55 DUP6 PUSH2 0x29AD JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2B72 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2B7E DUP9 DUP4 DUP10 ADD PUSH2 0x2B16 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2B94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BA1 DUP8 DUP3 DUP9 ADD PUSH2 0x2B16 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0xC0 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2BC5 PUSH1 0xC0 DUP4 ADD DUP10 PUSH2 0x2A08 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2BD7 DUP2 DUP10 PUSH2 0x2A08 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD SWAP8 SWAP1 SWAP8 MSTORE POP POP PUSH1 0x60 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2C12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C1B DUP5 PUSH2 0x29AD JUMP JUMPDEST SWAP3 POP PUSH2 0x2C29 PUSH1 0x20 DUP6 ADD PUSH2 0x29AD JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2C4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x2C5C PUSH1 0x20 DUP5 ADD PUSH2 0x29AD JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2C7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH2 0x2C8A PUSH1 0x20 DUP6 ADD PUSH2 0x29AD JUMP JUMPDEST SWAP2 POP PUSH2 0x2C98 PUSH1 0x40 DUP6 ADD PUSH2 0x29AD JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2CB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2CCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x2CE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2D03 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2D1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2D27 DUP9 DUP4 DUP10 ADD PUSH2 0x2CA1 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2D40 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D4D DUP8 DUP3 DUP9 ADD PUSH2 0x2CA1 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2D6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2D77 DUP5 PUSH2 0x29AD JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2D94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2DA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x2DB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2DC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2DEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2DF8 DUP4 PUSH2 0x29AD JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2E0D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2E2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2E37 DUP6 PUSH2 0x29AD JUMP JUMPDEST SWAP4 POP PUSH2 0x2E45 PUSH1 0x20 DUP7 ADD PUSH2 0x29AD JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2E68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x2E79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2E88 DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x2AA0 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH1 0xC0 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2EB0 PUSH1 0xE0 DUP5 ADD DUP3 PUSH2 0x2A08 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x1F NOT DUP5 DUP4 SUB ADD PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x2ECD DUP3 DUP3 PUSH2 0x2A08 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x80 DUP5 ADD MLOAD ISZERO ISZERO PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xA0 DUP5 ADD MLOAD PUSH1 0xC0 DUP5 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2F17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2F20 DUP4 PUSH2 0x29AD JUMP JUMPDEST SWAP2 POP PUSH2 0x2C5C PUSH1 0x20 DUP5 ADD PUSH2 0x29AD JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2F42 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2F62 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2F90 JUMPI PUSH2 0x2F90 PUSH2 0x2F68 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x902 JUMPI PUSH2 0x902 PUSH2 0x2F68 JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x1010 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x2FD1 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2FF0 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2FDD JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3012 JUMPI PUSH2 0x3012 PUSH2 0x2A8A JUMP JUMPDEST PUSH2 0x3026 DUP2 PUSH2 0x3020 DUP5 SLOAD PUSH2 0x2F2E JUMP JUMPDEST DUP5 PUSH2 0x2FAA JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x305B JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x3043 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x2FF0 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x308A JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x306B JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x30A8 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH2 0x30CB PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x2A08 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x30DD DUP2 DUP7 PUSH2 0x2A08 JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP3 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x3139 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x3123 DUP4 PUSH2 0x29AD JUMP JUMPDEST AND DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x310A JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFB SHL SUB DUP4 GT ISZERO PUSH2 0x3164 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP6 PUSH1 0x40 DUP6 ADD CALLDATACOPY SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x902 JUMPI PUSH2 0x902 PUSH2 0x2F68 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x31AC JUMPI PUSH2 0x31AC PUSH2 0x2A8A JUMP JUMPDEST PUSH2 0x31C0 DUP4 PUSH2 0x31BA DUP4 SLOAD PUSH2 0x2F2E JUMP JUMPDEST DUP4 PUSH2 0x2FAA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP5 GT PUSH1 0x1 DUP2 EQ PUSH2 0x31F4 JUMPI PUSH1 0x0 DUP6 ISZERO PUSH2 0x31DC JUMPI POP DUP4 DUP3 ADD CALLDATALOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP8 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP7 SWAP1 SHL OR DUP4 SSTORE PUSH2 0x229B JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP1 DUP4 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3225 JUMPI DUP7 DUP6 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x3205 JUMP JUMPDEST POP DUP7 DUP3 LT ISZERO PUSH2 0x3242 JUMPI PUSH1 0x0 NOT PUSH1 0xF8 DUP9 PUSH1 0x3 SHL AND SHR NOT DUP5 DUP8 ADD CALLDATALOAD AND DUP2 SSTORE JUMPDEST POP POP PUSH1 0x1 DUP6 PUSH1 0x1 SHL ADD DUP4 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH1 0x1F NOT AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x32B6 SWAP1 DUP4 ADD DUP5 PUSH2 0x2A08 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x32D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xFB1 DUP2 PUSH2 0x297A JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x32EF DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x29E4 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x3303 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x29E4 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP INVALID SWAP3 MULMOD SWAP5 0xFC EXTCODESIZE INVALID 0x28 0x2F EXTCODEHASH KECCAK256 0xCD 0xCC CALL 0xB7 0xC5 0xE4 PUSH13 0x63D963E822D98EFFF90ABD41C1 0x2E 0x21 0x2A 0xE6 LOG1 SGT 0xC0 0xED JUMPDEST PUSH25 0xA53413FFBB7679881F11145CCFBA4FB92E863DFCD5A1D2F3EE 0x24 0x4E 0xF9 0xDA SIGNEXTEND 0x2F DUP10 0xA7 0x4B KECCAK256 DUP15 0xA9 INVALID BYTE PUSH4 0x9EBDF634 MUL PUSH30 0x9E1F092B58C39954FA37C41A06B26CED3A23B7BF835A0918ADE784F4055D 0xED DUP7 0xD1 DUP4 SDIV CREATE2 0x28 DELEGATECALL PUSH27 0x726052AA0EC51D0BF03CE5511C9FFC9DE2B423D73D1FAACD808ABF 0x2A 0xC8 SWAP13 0xCE 0xA8 LOG3 0xEC CALLCODE MSIZE LOG1 0xC4 DUP15 PC CALLDATACOPY 0xAD PUSH27 0x7F3DCEDCBE129BF3249EC4FBF651FD4F5E2600EAD39FE2F506FA31 0xD7 0xA9 0x2D SWAP16 0xA9 0xA8 DUP10 DUP11 0xC4 SAR DUP7 0xEE SWAP12 SGT DUP7 CALLDATASIZE SDIV LOG3 PUSH2 0xC85A 0xE5 0xD6 ADD 0xD 0x5D 0xE4 CALLCODE DUP1 ISZERO GAS 0xAA 0xFB PUSH4 0x29A20985 DUP1 CHAINID 0x2D RETURN RETURNDATACOPY 0xC4 0xB7 PREVRANDAO SHL NOT PUSH19 0x9B9601C5FC17AE1CF99A8A52A2646970667358 0x22 SLT KECCAK256 PUSH28 0xEE0F297E881BCEAC35B2347794371A3C52E792D1864202B4B3584B52 0xF9 0xD1 SELFBALANCE PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER 0xC4 BYTE MOD 0xB2 PUSH13 0xED3A23B7BF835A0918ADE784F4 SDIV 0x5D 0xED DUP7 0xD1 DUP4 SDIV CREATE2 0x28 DELEGATECALL PUSH27 0x726052000000000000000000000000000000000000000000000000 ","sourceMap":"809:7885:18:-:0;;;1214:162;;;;;;;;;-1:-1:-1;1381:113:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1381:113:6;;;;;1220:42:20;-1:-1:-1;1251:10:20;1220;:42::i;:::-;1272:39;-1:-1:-1;;;;;;;;;;;1300:10:20;1272;:39::i;:::-;1447:5:6;:13;1455:5;1447;:13;:::i;:::-;-1:-1:-1;1470:7:6;:17;1480:7;1470;:17;:::i;:::-;-1:-1:-1;1279:42:18::1;::::0;-1:-1:-1;2232:4:0::1;::::0;-1:-1:-1;1310:10:18::1;1279;:42::i;:::-;1331:38;-1:-1:-1::0;;;;;;;;;;;1358:10:18::1;1331;:38::i;:::-;809:7885:::0;;5180:102:20;5254:25;5265:4;5271:7;5254:10;:25::i;:::-;;5180:102;;:::o;6179:316:0:-;6256:4;2954:12;;;;;;;;;;;-1:-1:-1;;;;;2954:29:0;;;;;;;;;;;;6272:217;;6315:6;:12;;;;;;;;;;;-1:-1:-1;;;;;6315:29:0;;;;;;;;;:36;;-1:-1:-1;;6315:36:0;6347:4;6315:36;;;6397:12;735:10:12;;656:96;6397:12:0;-1:-1:-1;;;;;6370:40:0;6388:7;-1:-1:-1;;;;;6370:40:0;6382:4;6370:40;;;;;;;;;;-1:-1:-1;6431:4:0;6424:11;;6272:217;-1:-1:-1;6473:5:0;6272:217;6179:316;;;;:::o;14:127:25:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:380;225:1;221:12;;;;268;;;289:61;;343:4;335:6;331:17;321:27;;289:61;396:2;388:6;385:14;365:18;362:38;359:161;;442:10;437:3;433:20;430:1;423:31;477:4;474:1;467:15;505:4;502:1;495:15;359:161;;146:380;;;:::o;657:545::-;759:2;754:3;751:11;748:448;;;795:1;820:5;816:2;809:17;865:4;861:2;851:19;935:2;923:10;919:19;916:1;912:27;906:4;902:38;971:4;959:10;956:20;953:47;;;-1:-1:-1;994:4:25;953:47;1049:2;1044:3;1040:12;1037:1;1033:20;1027:4;1023:31;1013:41;;1104:82;1122:2;1115:5;1112:13;1104:82;;;1167:17;;;1148:1;1137:13;1104:82;;;1108:3;;;657:545;;;:::o;1378:1352::-;1498:10;;-1:-1:-1;;;;;1520:30:25;;1517:56;;;1553:18;;:::i;:::-;1582:97;1672:6;1632:38;1664:4;1658:11;1632:38;:::i;:::-;1626:4;1582:97;:::i;:::-;1734:4;;1798:2;1787:14;;1815:1;1810:663;;;;2517:1;2534:6;2531:89;;;-1:-1:-1;2586:19:25;;;2580:26;2531:89;-1:-1:-1;;1335:1:25;1331:11;;;1327:24;1323:29;1313:40;1359:1;1355:11;;;1310:57;2633:81;;1780:944;;1810:663;604:1;597:14;;;641:4;628:18;;-1:-1:-1;;1846:20:25;;;1964:236;1978:7;1975:1;1972:14;1964:236;;;2067:19;;;2061:26;2046:42;;2159:27;;;;2127:1;2115:14;;;;1994:19;;1964:236;;;1968:3;2228:6;2219:7;2216:19;2213:201;;;2289:19;;;2283:26;-1:-1:-1;;2372:1:25;2368:14;;;2384:3;2364:24;2360:37;2356:42;2341:58;2326:74;;2213:201;-1:-1:-1;;;;;2460:1:25;2444:14;;;2440:22;2427:36;;-1:-1:-1;1378:1352:25:o;:::-;809:7885:18;;;;;;"},"deployedBytecode":{"functionDebugData":{"@AUDITOR_ROLE_3861":{"entryPoint":null,"id":3861,"parameterSlots":0,"returnSlots":0},"@CERTIFICATE_FACTORY_ROLE_3871":{"entryPoint":null,"id":3871,"parameterSlots":0,"returnSlots":0},"@CERTIFIER_ROLE_3851":{"entryPoint":null,"id":3851,"parameterSlots":0,"returnSlots":0},"@DEFAULT_ADMIN_ROLE_29":{"entryPoint":null,"id":29,"parameterSlots":0,"returnSlots":0},"@ENTERPRISE_ROLE_3866":{"entryPoint":null,"id":3866,"parameterSlots":0,"returnSlots":0},"@INSPECTOR_ROLE_3856":{"entryPoint":null,"id":3856,"parameterSlots":0,"returnSlots":0},"@PUBLIC_ROLE_3876":{"entryPoint":null,"id":3876,"parameterSlots":0,"returnSlots":0},"@_approve_1359":{"entryPoint":7905,"id":1359,"parameterSlots":3,"returnSlots":0},"@_approve_1425":{"entryPoint":9252,"id":1425,"parameterSlots":4,"returnSlots":0},"@_baseURI_752":{"entryPoint":null,"id":752,"parameterSlots":0,"returnSlots":1},"@_checkAuthorized_1007":{"entryPoint":10056,"id":1007,"parameterSlots":3,"returnSlots":0},"@_checkOnERC721Received_1555":{"entryPoint":8569,"id":1555,"parameterSlots":4,"returnSlots":0},"@_checkRole_114":{"entryPoint":9195,"id":114,"parameterSlots":2,"returnSlots":0},"@_checkRole_93":{"entryPoint":7838,"id":93,"parameterSlots":1,"returnSlots":0},"@_getApproved_934":{"entryPoint":null,"id":934,"parameterSlots":1,"returnSlots":1},"@_grantRole_256":{"entryPoint":8272,"id":256,"parameterSlots":2,"returnSlots":1},"@_isAuthorized_970":{"entryPoint":10303,"id":970,"parameterSlots":3,"returnSlots":1},"@_mint_1163":{"entryPoint":9955,"id":1163,"parameterSlots":2,"returnSlots":0},"@_msgSender_1886":{"entryPoint":null,"id":1886,"parameterSlots":0,"returnSlots":1},"@_ownerOf_921":{"entryPoint":null,"id":921,"parameterSlots":1,"returnSlots":1},"@_requireOwned_1491":{"entryPoint":7848,"id":1491,"parameterSlots":1,"returnSlots":1},"@_revokeRole_294":{"entryPoint":8157,"id":294,"parameterSlots":2,"returnSlots":1},"@_safeMint_1178":{"entryPoint":7918,"id":1178,"parameterSlots":2,"returnSlots":0},"@_safeMint_1204":{"entryPoint":9514,"id":1204,"parameterSlots":3,"returnSlots":0},"@_setApprovalForAll_1462":{"entryPoint":8410,"id":1462,"parameterSlots":3,"returnSlots":0},"@_setTokenURI_1845":{"entryPoint":7944,"id":1845,"parameterSlots":2,"returnSlots":0},"@_update_1113":{"entryPoint":9537,"id":1113,"parameterSlots":3,"returnSlots":1},"@_update_3659":{"entryPoint":8024,"id":3659,"parameterSlots":3,"returnSlots":1},"@approve_768":{"entryPoint":2629,"id":768,"parameterSlots":2,"returnSlots":0},"@balanceOf_676":{"entryPoint":5135,"id":676,"parameterSlots":1,"returnSlots":1},"@bulkGrantRoles_4080":{"entryPoint":4849,"id":4080,"parameterSlots":4,"returnSlots":0},"@burn_1719":{"entryPoint":4274,"id":1719,"parameterSlots":1,"returnSlots":0},"@certifications_3390":{"entryPoint":3234,"id":3390,"parameterSlots":0,"returnSlots":0},"@certifyEnterprise_3495":{"entryPoint":2644,"id":3495,"parameterSlots":4,"returnSlots":0},"@checkExpiryRoles_4013":{"entryPoint":3709,"id":4013,"parameterSlots":1,"returnSlots":0},"@claimTemporaryPublicRole_3975":{"entryPoint":5207,"id":3975,"parameterSlots":1,"returnSlots":0},"@getActiveRoles_4172":{"entryPoint":6425,"id":4172,"parameterSlots":1,"returnSlots":7},"@getApproved_785":{"entryPoint":2588,"id":785,"parameterSlots":1,"returnSlots":1},"@getCertification_3773":{"entryPoint":6995,"id":3773,"parameterSlots":1,"returnSlots":1},"@getEnterpriseByTokenId_3785":{"entryPoint":null,"id":3785,"parameterSlots":1,"returnSlots":1},"@getMaxPublicRoleDuration_3983":{"entryPoint":null,"id":3983,"parameterSlots":0,"returnSlots":1},"@getRoleAdmin_128":{"entryPoint":null,"id":128,"parameterSlots":1,"returnSlots":1},"@grantAuditor_4258":{"entryPoint":7469,"id":4258,"parameterSlots":1,"returnSlots":0},"@grantCertificateFactory_4306":{"entryPoint":6269,"id":4306,"parameterSlots":1,"returnSlots":0},"@grantCertifier_4210":{"entryPoint":4719,"id":4210,"parameterSlots":1,"returnSlots":0},"@grantEnterprise_4282":{"entryPoint":3104,"id":4282,"parameterSlots":1,"returnSlots":0},"@grantInspector_4234":{"entryPoint":4286,"id":4234,"parameterSlots":1,"returnSlots":0},"@grantPublicRole_4330":{"entryPoint":4442,"id":4330,"parameterSlots":1,"returnSlots":0},"@grantRole_147":{"entryPoint":4024,"id":147,"parameterSlots":2,"returnSlots":0},"@hasAdminRole_4482":{"entryPoint":6972,"id":4482,"parameterSlots":1,"returnSlots":1},"@hasAuditorRole_4521":{"entryPoint":6399,"id":4521,"parameterSlots":1,"returnSlots":1},"@hasCertificateFactoryRole_4547":{"entryPoint":4416,"id":4547,"parameterSlots":1,"returnSlots":1},"@hasCertifierRole_4495":{"entryPoint":5444,"id":4495,"parameterSlots":1,"returnSlots":1},"@hasEnterpriseRole_4534":{"entryPoint":6199,"id":4534,"parameterSlots":1,"returnSlots":1},"@hasInspectorRole_4508":{"entryPoint":5823,"id":4508,"parameterSlots":1,"returnSlots":1},"@hasPublicRole_4560":{"entryPoint":7645,"id":4560,"parameterSlots":1,"returnSlots":1},"@hasRole_80":{"entryPoint":6143,"id":80,"parameterSlots":2,"returnSlots":1},"@isApprovedForAll_818":{"entryPoint":7599,"id":818,"parameterSlots":2,"returnSlots":1},"@isCertificateValid_3703":{"entryPoint":6236,"id":3703,"parameterSlots":1,"returnSlots":1},"@isCertificationValid_3685":{"entryPoint":3969,"id":3685,"parameterSlots":1,"returnSlots":1},"@log10_3069":{"entryPoint":10402,"id":3069,"parameterSlots":1,"returnSlots":1},"@name_698":{"entryPoint":2442,"id":698,"parameterSlots":0,"returnSlots":1},"@ownerOf_689":{"entryPoint":5124,"id":689,"parameterSlots":1,"returnSlots":1},"@publicRoleExpiry_3880":{"entryPoint":null,"id":3880,"parameterSlots":0,"returnSlots":0},"@renounceRole_189":{"entryPoint":4061,"id":189,"parameterSlots":2,"returnSlots":0},"@revokeAuditorRole_4396":{"entryPoint":4117,"id":4396,"parameterSlots":1,"returnSlots":0},"@revokeCertificateFactoryRole_4444":{"entryPoint":3839,"id":4444,"parameterSlots":1,"returnSlots":0},"@revokeCertification_3557":{"entryPoint":6610,"id":3557,"parameterSlots":1,"returnSlots":0},"@revokeCertifierRole_4355":{"entryPoint":7671,"id":4355,"parameterSlots":1,"returnSlots":0},"@revokeEnterpriseRole_4420":{"entryPoint":5470,"id":4420,"parameterSlots":1,"returnSlots":0},"@revokeIfExpired_3620":{"entryPoint":5600,"id":3620,"parameterSlots":1,"returnSlots":0},"@revokeInspectorRole_4372":{"entryPoint":6897,"id":4372,"parameterSlots":1,"returnSlots":0},"@revokePublicRole_4468":{"entryPoint":2312,"id":4468,"parameterSlots":1,"returnSlots":0},"@revokeRole_166":{"entryPoint":7432,"id":166,"parameterSlots":2,"returnSlots":0},"@safeTransferFrom_882":{"entryPoint":4247,"id":882,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_908":{"entryPoint":6874,"id":908,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_801":{"entryPoint":6225,"id":801,"parameterSlots":2,"returnSlots":0},"@supportsInterface_1769":{"entryPoint":7801,"id":1769,"parameterSlots":1,"returnSlots":1},"@supportsInterface_2182":{"entryPoint":null,"id":2182,"parameterSlots":1,"returnSlots":1},"@supportsInterface_3818":{"entryPoint":2295,"id":3818,"parameterSlots":1,"returnSlots":1},"@supportsInterface_62":{"entryPoint":9902,"id":62,"parameterSlots":1,"returnSlots":1},"@supportsInterface_648":{"entryPoint":9131,"id":648,"parameterSlots":1,"returnSlots":1},"@symbol_707":{"entryPoint":6184,"id":707,"parameterSlots":0,"returnSlots":1},"@toString_1972":{"entryPoint":10156,"id":1972,"parameterSlots":1,"returnSlots":1},"@tokenURI_1826":{"entryPoint":8866,"id":1826,"parameterSlots":1,"returnSlots":1},"@tokenURI_3801":{"entryPoint":6984,"id":3801,"parameterSlots":1,"returnSlots":1},"@tokenURI_743":{"entryPoint":9786,"id":743,"parameterSlots":1,"returnSlots":1},"@transferFrom_864":{"entryPoint":3565,"id":864,"parameterSlots":3,"returnSlots":0},"@transferRole_4122":{"entryPoint":4572,"id":4122,"parameterSlots":3,"returnSlots":0},"@updateCertificationMetadata_3760":{"entryPoint":5849,"id":3760,"parameterSlots":3,"returnSlots":0},"abi_decode_address":{"entryPoint":10669,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_bytes32_dyn_calldata":{"entryPoint":11425,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_available_length_string":{"entryPoint":10912,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_string":{"entryPoint":11030,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":10697,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":12036,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":11261,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":11800,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":11740,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_string_calldata_ptr":{"entryPoint":11609,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_string_memory_ptrt_string_memory_ptrt_uint256":{"entryPoint":11062,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":10848,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_array$_t_address_$dyn_calldata_ptr":{"entryPoint":11501,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":11321,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_addresst_address":{"entryPoint":11365,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes4":{"entryPoint":10640,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":12992,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":10823,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":10760,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_array$_t_address_$dyn_calldata_ptr__to_t_array$_t_address_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":12548,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":13021,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":12931,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr__to_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":12612,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool__to_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12884,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10804,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_uint256__to_t_string_memory_ptr_t_string_memory_ptr_t_uint256__fromStack_reversed":{"entryPoint":12472,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_uint256_t_bool_t_uint256__to_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_uint256_t_bool_t_uint256__fromStack_reversed":{"entryPoint":11186,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3054708b0a11b38511bc7d353b1f656d5fdd977e39d245846af7029381d44603__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_struct$_Certification_$5302_memory_ptr__to_t_struct$_Certification_$5302_memory_ptr__fromStack_reversed":{"entryPoint":11924,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":12183,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":12669,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":12202,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_calldata_ptr_to_t_string_storage":{"entryPoint":12692,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":12280,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":10724,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":12078,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":12158,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":12136,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":12526,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":10890,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":10618,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:20234:25","statements":[{"nodeType":"YulBlock","src":"6:3:25","statements":[]},{"body":{"nodeType":"YulBlock","src":"58:87:25","statements":[{"body":{"nodeType":"YulBlock","src":"123:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"132:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"125:6:25"},"nodeType":"YulFunctionCall","src":"125:12:25"},"nodeType":"YulExpressionStatement","src":"125:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"81:5:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"92:5:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"108:10:25","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"99:3:25"},"nodeType":"YulFunctionCall","src":"99:20:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"88:3:25"},"nodeType":"YulFunctionCall","src":"88:32:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"78:2:25"},"nodeType":"YulFunctionCall","src":"78:43:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"71:6:25"},"nodeType":"YulFunctionCall","src":"71:51:25"},"nodeType":"YulIf","src":"68:71:25"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"47:5:25","type":""}],"src":"14:131:25"},{"body":{"nodeType":"YulBlock","src":"219:176:25","statements":[{"body":{"nodeType":"YulBlock","src":"265:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"274:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"277:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"267:6:25"},"nodeType":"YulFunctionCall","src":"267:12:25"},"nodeType":"YulExpressionStatement","src":"267:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"240:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"249:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"236:3:25"},"nodeType":"YulFunctionCall","src":"236:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"261:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"232:3:25"},"nodeType":"YulFunctionCall","src":"232:32:25"},"nodeType":"YulIf","src":"229:52:25"},{"nodeType":"YulVariableDeclaration","src":"290:36:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"316:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"303:12:25"},"nodeType":"YulFunctionCall","src":"303:23:25"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"294:5:25","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"359:5:25"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"335:23:25"},"nodeType":"YulFunctionCall","src":"335:30:25"},"nodeType":"YulExpressionStatement","src":"335:30:25"},{"nodeType":"YulAssignment","src":"374:15:25","value":{"name":"value","nodeType":"YulIdentifier","src":"384:5:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"374:6:25"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"185:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"196:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"208:6:25","type":""}],"src":"150:245:25"},{"body":{"nodeType":"YulBlock","src":"495:92:25","statements":[{"nodeType":"YulAssignment","src":"505:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"517:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"528:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"513:3:25"},"nodeType":"YulFunctionCall","src":"513:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"505:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"547:9:25"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"572:6:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"565:6:25"},"nodeType":"YulFunctionCall","src":"565:14:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"558:6:25"},"nodeType":"YulFunctionCall","src":"558:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"540:6:25"},"nodeType":"YulFunctionCall","src":"540:41:25"},"nodeType":"YulExpressionStatement","src":"540:41:25"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"464:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"475:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"486:4:25","type":""}],"src":"400:187:25"},{"body":{"nodeType":"YulBlock","src":"641:124:25","statements":[{"nodeType":"YulAssignment","src":"651:29:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"673:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"660:12:25"},"nodeType":"YulFunctionCall","src":"660:20:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"651:5:25"}]},{"body":{"nodeType":"YulBlock","src":"743:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"752:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"755:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"745:6:25"},"nodeType":"YulFunctionCall","src":"745:12:25"},"nodeType":"YulExpressionStatement","src":"745:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"702:5:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"713:5:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"728:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"733:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"724:3:25"},"nodeType":"YulFunctionCall","src":"724:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"737:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"720:3:25"},"nodeType":"YulFunctionCall","src":"720:19:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"709:3:25"},"nodeType":"YulFunctionCall","src":"709:31:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"699:2:25"},"nodeType":"YulFunctionCall","src":"699:42:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"692:6:25"},"nodeType":"YulFunctionCall","src":"692:50:25"},"nodeType":"YulIf","src":"689:70:25"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"620:6:25","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"631:5:25","type":""}],"src":"592:173:25"},{"body":{"nodeType":"YulBlock","src":"840:116:25","statements":[{"body":{"nodeType":"YulBlock","src":"886:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"895:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"898:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"888:6:25"},"nodeType":"YulFunctionCall","src":"888:12:25"},"nodeType":"YulExpressionStatement","src":"888:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"861:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"870:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"857:3:25"},"nodeType":"YulFunctionCall","src":"857:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"882:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"853:3:25"},"nodeType":"YulFunctionCall","src":"853:32:25"},"nodeType":"YulIf","src":"850:52:25"},{"nodeType":"YulAssignment","src":"911:39:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"940:9:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"921:18:25"},"nodeType":"YulFunctionCall","src":"921:29:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"911:6:25"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"806:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"817:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"829:6:25","type":""}],"src":"770:186:25"},{"body":{"nodeType":"YulBlock","src":"1027:184:25","statements":[{"nodeType":"YulVariableDeclaration","src":"1037:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"1046:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1041:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"1106:63:25","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1131:3:25"},{"name":"i","nodeType":"YulIdentifier","src":"1136:1:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1127:3:25"},"nodeType":"YulFunctionCall","src":"1127:11:25"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1150:3:25"},{"name":"i","nodeType":"YulIdentifier","src":"1155:1:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1146:3:25"},"nodeType":"YulFunctionCall","src":"1146:11:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1140:5:25"},"nodeType":"YulFunctionCall","src":"1140:18:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1120:6:25"},"nodeType":"YulFunctionCall","src":"1120:39:25"},"nodeType":"YulExpressionStatement","src":"1120:39:25"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1067:1:25"},{"name":"length","nodeType":"YulIdentifier","src":"1070:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1064:2:25"},"nodeType":"YulFunctionCall","src":"1064:13:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1078:19:25","statements":[{"nodeType":"YulAssignment","src":"1080:15:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1089:1:25"},{"kind":"number","nodeType":"YulLiteral","src":"1092:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1085:3:25"},"nodeType":"YulFunctionCall","src":"1085:10:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1080:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"1060:3:25","statements":[]},"src":"1056:113:25"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1189:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"1194:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1185:3:25"},"nodeType":"YulFunctionCall","src":"1185:16:25"},{"kind":"number","nodeType":"YulLiteral","src":"1203:1:25","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1178:6:25"},"nodeType":"YulFunctionCall","src":"1178:27:25"},"nodeType":"YulExpressionStatement","src":"1178:27:25"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1005:3:25","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1010:3:25","type":""},{"name":"length","nodeType":"YulTypedName","src":"1015:6:25","type":""}],"src":"961:250:25"},{"body":{"nodeType":"YulBlock","src":"1266:221:25","statements":[{"nodeType":"YulVariableDeclaration","src":"1276:26:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1296:5:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1290:5:25"},"nodeType":"YulFunctionCall","src":"1290:12:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1280:6:25","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1318:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"1323:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1311:6:25"},"nodeType":"YulFunctionCall","src":"1311:19:25"},"nodeType":"YulExpressionStatement","src":"1311:19:25"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1378:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"1385:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1374:3:25"},"nodeType":"YulFunctionCall","src":"1374:16:25"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1396:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"1401:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1392:3:25"},"nodeType":"YulFunctionCall","src":"1392:14:25"},{"name":"length","nodeType":"YulIdentifier","src":"1408:6:25"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"1339:34:25"},"nodeType":"YulFunctionCall","src":"1339:76:25"},"nodeType":"YulExpressionStatement","src":"1339:76:25"},{"nodeType":"YulAssignment","src":"1424:57:25","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1439:3:25"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1452:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"1460:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1448:3:25"},"nodeType":"YulFunctionCall","src":"1448:15:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1469:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1465:3:25"},"nodeType":"YulFunctionCall","src":"1465:7:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1444:3:25"},"nodeType":"YulFunctionCall","src":"1444:29:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1435:3:25"},"nodeType":"YulFunctionCall","src":"1435:39:25"},{"kind":"number","nodeType":"YulLiteral","src":"1476:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1431:3:25"},"nodeType":"YulFunctionCall","src":"1431:50:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1424:3:25"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1243:5:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1250:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"1258:3:25","type":""}],"src":"1216:271:25"},{"body":{"nodeType":"YulBlock","src":"1613:99:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1630:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"1641:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1623:6:25"},"nodeType":"YulFunctionCall","src":"1623:21:25"},"nodeType":"YulExpressionStatement","src":"1623:21:25"},{"nodeType":"YulAssignment","src":"1653:53:25","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1679:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1691:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"1702:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1687:3:25"},"nodeType":"YulFunctionCall","src":"1687:18:25"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"1661:17:25"},"nodeType":"YulFunctionCall","src":"1661:45:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1653:4:25"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1582:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1593:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1604:4:25","type":""}],"src":"1492:220:25"},{"body":{"nodeType":"YulBlock","src":"1787:110:25","statements":[{"body":{"nodeType":"YulBlock","src":"1833:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1842:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1845:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1835:6:25"},"nodeType":"YulFunctionCall","src":"1835:12:25"},"nodeType":"YulExpressionStatement","src":"1835:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1808:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"1817:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1804:3:25"},"nodeType":"YulFunctionCall","src":"1804:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"1829:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1800:3:25"},"nodeType":"YulFunctionCall","src":"1800:32:25"},"nodeType":"YulIf","src":"1797:52:25"},{"nodeType":"YulAssignment","src":"1858:33:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1881:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1868:12:25"},"nodeType":"YulFunctionCall","src":"1868:23:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1858:6:25"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1753:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1764:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1776:6:25","type":""}],"src":"1717:180:25"},{"body":{"nodeType":"YulBlock","src":"2003:102:25","statements":[{"nodeType":"YulAssignment","src":"2013:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2025:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"2036:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2021:3:25"},"nodeType":"YulFunctionCall","src":"2021:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2013:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2055:9:25"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2070:6:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2086:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2091:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2082:3:25"},"nodeType":"YulFunctionCall","src":"2082:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"2095:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2078:3:25"},"nodeType":"YulFunctionCall","src":"2078:19:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2066:3:25"},"nodeType":"YulFunctionCall","src":"2066:32:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2048:6:25"},"nodeType":"YulFunctionCall","src":"2048:51:25"},"nodeType":"YulExpressionStatement","src":"2048:51:25"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1972:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1983:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1994:4:25","type":""}],"src":"1902:203:25"},{"body":{"nodeType":"YulBlock","src":"2197:167:25","statements":[{"body":{"nodeType":"YulBlock","src":"2243:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2252:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2255:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2245:6:25"},"nodeType":"YulFunctionCall","src":"2245:12:25"},"nodeType":"YulExpressionStatement","src":"2245:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2218:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"2227:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2214:3:25"},"nodeType":"YulFunctionCall","src":"2214:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"2239:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2210:3:25"},"nodeType":"YulFunctionCall","src":"2210:32:25"},"nodeType":"YulIf","src":"2207:52:25"},{"nodeType":"YulAssignment","src":"2268:39:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2297:9:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2278:18:25"},"nodeType":"YulFunctionCall","src":"2278:29:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2268:6:25"}]},{"nodeType":"YulAssignment","src":"2316:42:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2343:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"2354:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2339:3:25"},"nodeType":"YulFunctionCall","src":"2339:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2326:12:25"},"nodeType":"YulFunctionCall","src":"2326:32:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2316:6:25"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2155:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2166:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2178:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2186:6:25","type":""}],"src":"2110:254:25"},{"body":{"nodeType":"YulBlock","src":"2401:95:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2418:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2425:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2430:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2421:3:25"},"nodeType":"YulFunctionCall","src":"2421:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2411:6:25"},"nodeType":"YulFunctionCall","src":"2411:31:25"},"nodeType":"YulExpressionStatement","src":"2411:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2458:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2461:4:25","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2451:6:25"},"nodeType":"YulFunctionCall","src":"2451:15:25"},"nodeType":"YulExpressionStatement","src":"2451:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2482:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2485:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2475:6:25"},"nodeType":"YulFunctionCall","src":"2475:15:25"},"nodeType":"YulExpressionStatement","src":"2475:15:25"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"2369:127:25"},{"body":{"nodeType":"YulBlock","src":"2576:557:25","statements":[{"nodeType":"YulVariableDeclaration","src":"2586:28:25","value":{"kind":"number","nodeType":"YulLiteral","src":"2596:18:25","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2590:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"2641:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2643:16:25"},"nodeType":"YulFunctionCall","src":"2643:18:25"},"nodeType":"YulExpressionStatement","src":"2643:18:25"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2629:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"2637:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2626:2:25"},"nodeType":"YulFunctionCall","src":"2626:14:25"},"nodeType":"YulIf","src":"2623:40:25"},{"nodeType":"YulVariableDeclaration","src":"2672:17:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2686:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2682:3:25"},"nodeType":"YulFunctionCall","src":"2682:7:25"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2676:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2698:23:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2718:2:25","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2712:5:25"},"nodeType":"YulFunctionCall","src":"2712:9:25"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"2702:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2730:73:25","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2752:6:25"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2776:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"2784:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2772:3:25"},"nodeType":"YulFunctionCall","src":"2772:15:25"},{"name":"_2","nodeType":"YulIdentifier","src":"2789:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2768:3:25"},"nodeType":"YulFunctionCall","src":"2768:24:25"},{"kind":"number","nodeType":"YulLiteral","src":"2794:2:25","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2764:3:25"},"nodeType":"YulFunctionCall","src":"2764:33:25"},{"name":"_2","nodeType":"YulIdentifier","src":"2799:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2760:3:25"},"nodeType":"YulFunctionCall","src":"2760:42:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2748:3:25"},"nodeType":"YulFunctionCall","src":"2748:55:25"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2734:10:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"2862:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2864:16:25"},"nodeType":"YulFunctionCall","src":"2864:18:25"},"nodeType":"YulExpressionStatement","src":"2864:18:25"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2821:10:25"},{"name":"_1","nodeType":"YulIdentifier","src":"2833:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2818:2:25"},"nodeType":"YulFunctionCall","src":"2818:18:25"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2841:10:25"},{"name":"memPtr","nodeType":"YulIdentifier","src":"2853:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2838:2:25"},"nodeType":"YulFunctionCall","src":"2838:22:25"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2815:2:25"},"nodeType":"YulFunctionCall","src":"2815:46:25"},"nodeType":"YulIf","src":"2812:72:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2900:2:25","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2904:10:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2893:6:25"},"nodeType":"YulFunctionCall","src":"2893:22:25"},"nodeType":"YulExpressionStatement","src":"2893:22:25"},{"nodeType":"YulAssignment","src":"2924:15:25","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"2933:6:25"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2924:5:25"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2955:6:25"},{"name":"length","nodeType":"YulIdentifier","src":"2963:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2948:6:25"},"nodeType":"YulFunctionCall","src":"2948:22:25"},"nodeType":"YulExpressionStatement","src":"2948:22:25"},{"body":{"nodeType":"YulBlock","src":"3008:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3017:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3020:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3010:6:25"},"nodeType":"YulFunctionCall","src":"3010:12:25"},"nodeType":"YulExpressionStatement","src":"3010:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2989:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"2994:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2985:3:25"},"nodeType":"YulFunctionCall","src":"2985:16:25"},{"name":"end","nodeType":"YulIdentifier","src":"3003:3:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2982:2:25"},"nodeType":"YulFunctionCall","src":"2982:25:25"},"nodeType":"YulIf","src":"2979:45:25"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3050:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"3058:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3046:3:25"},"nodeType":"YulFunctionCall","src":"3046:17:25"},{"name":"src","nodeType":"YulIdentifier","src":"3065:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"3070:6:25"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"3033:12:25"},"nodeType":"YulFunctionCall","src":"3033:44:25"},"nodeType":"YulExpressionStatement","src":"3033:44:25"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3101:6:25"},{"name":"length","nodeType":"YulIdentifier","src":"3109:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3097:3:25"},"nodeType":"YulFunctionCall","src":"3097:19:25"},{"kind":"number","nodeType":"YulLiteral","src":"3118:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3093:3:25"},"nodeType":"YulFunctionCall","src":"3093:30:25"},{"kind":"number","nodeType":"YulLiteral","src":"3125:1:25","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3086:6:25"},"nodeType":"YulFunctionCall","src":"3086:41:25"},"nodeType":"YulExpressionStatement","src":"3086:41:25"}]},"name":"abi_decode_available_length_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"2545:3:25","type":""},{"name":"length","nodeType":"YulTypedName","src":"2550:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"2558:3:25","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2566:5:25","type":""}],"src":"2501:632:25"},{"body":{"nodeType":"YulBlock","src":"3191:169:25","statements":[{"body":{"nodeType":"YulBlock","src":"3240:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3249:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3252:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3242:6:25"},"nodeType":"YulFunctionCall","src":"3242:12:25"},"nodeType":"YulExpressionStatement","src":"3242:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3219:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"3227:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3215:3:25"},"nodeType":"YulFunctionCall","src":"3215:17:25"},{"name":"end","nodeType":"YulIdentifier","src":"3234:3:25"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3211:3:25"},"nodeType":"YulFunctionCall","src":"3211:27:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3204:6:25"},"nodeType":"YulFunctionCall","src":"3204:35:25"},"nodeType":"YulIf","src":"3201:55:25"},{"nodeType":"YulAssignment","src":"3265:89:25","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3313:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"3321:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3309:3:25"},"nodeType":"YulFunctionCall","src":"3309:17:25"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3341:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3328:12:25"},"nodeType":"YulFunctionCall","src":"3328:20:25"},{"name":"end","nodeType":"YulIdentifier","src":"3350:3:25"}],"functionName":{"name":"abi_decode_available_length_string","nodeType":"YulIdentifier","src":"3274:34:25"},"nodeType":"YulFunctionCall","src":"3274:80:25"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3265:5:25"}]}]},"name":"abi_decode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3165:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"3173:3:25","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3181:5:25","type":""}],"src":"3138:222:25"},{"body":{"nodeType":"YulBlock","src":"3506:545:25","statements":[{"body":{"nodeType":"YulBlock","src":"3553:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3562:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3565:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3555:6:25"},"nodeType":"YulFunctionCall","src":"3555:12:25"},"nodeType":"YulExpressionStatement","src":"3555:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3527:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"3536:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3523:3:25"},"nodeType":"YulFunctionCall","src":"3523:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"3548:3:25","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3519:3:25"},"nodeType":"YulFunctionCall","src":"3519:33:25"},"nodeType":"YulIf","src":"3516:53:25"},{"nodeType":"YulAssignment","src":"3578:39:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3607:9:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3588:18:25"},"nodeType":"YulFunctionCall","src":"3588:29:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3578:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"3626:46:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3657:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"3668:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3653:3:25"},"nodeType":"YulFunctionCall","src":"3653:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3640:12:25"},"nodeType":"YulFunctionCall","src":"3640:32:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3630:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3681:28:25","value":{"kind":"number","nodeType":"YulLiteral","src":"3691:18:25","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3685:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"3736:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3745:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3748:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3738:6:25"},"nodeType":"YulFunctionCall","src":"3738:12:25"},"nodeType":"YulExpressionStatement","src":"3738:12:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3724:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"3732:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3721:2:25"},"nodeType":"YulFunctionCall","src":"3721:14:25"},"nodeType":"YulIf","src":"3718:34:25"},{"nodeType":"YulAssignment","src":"3761:60:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3793:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"3804:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3789:3:25"},"nodeType":"YulFunctionCall","src":"3789:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3813:7:25"}],"functionName":{"name":"abi_decode_string","nodeType":"YulIdentifier","src":"3771:17:25"},"nodeType":"YulFunctionCall","src":"3771:50:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3761:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"3830:48:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3863:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"3874:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3859:3:25"},"nodeType":"YulFunctionCall","src":"3859:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3846:12:25"},"nodeType":"YulFunctionCall","src":"3846:32:25"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"3834:8:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"3907:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3916:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3919:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3909:6:25"},"nodeType":"YulFunctionCall","src":"3909:12:25"},"nodeType":"YulExpressionStatement","src":"3909:12:25"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"3893:8:25"},{"name":"_1","nodeType":"YulIdentifier","src":"3903:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3890:2:25"},"nodeType":"YulFunctionCall","src":"3890:16:25"},"nodeType":"YulIf","src":"3887:36:25"},{"nodeType":"YulAssignment","src":"3932:62:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3964:9:25"},{"name":"offset_1","nodeType":"YulIdentifier","src":"3975:8:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3960:3:25"},"nodeType":"YulFunctionCall","src":"3960:24:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3986:7:25"}],"functionName":{"name":"abi_decode_string","nodeType":"YulIdentifier","src":"3942:17:25"},"nodeType":"YulFunctionCall","src":"3942:52:25"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3932:6:25"}]},{"nodeType":"YulAssignment","src":"4003:42:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4030:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"4041:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4026:3:25"},"nodeType":"YulFunctionCall","src":"4026:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4013:12:25"},"nodeType":"YulFunctionCall","src":"4013:32:25"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4003:6:25"}]}]},"name":"abi_decode_tuple_t_addresst_string_memory_ptrt_string_memory_ptrt_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3448:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3459:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3471:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3479:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3487:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3495:6:25","type":""}],"src":"3365:686:25"},{"body":{"nodeType":"YulBlock","src":"4331:406:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4348:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"4359:3:25","type":"","value":"192"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4341:6:25"},"nodeType":"YulFunctionCall","src":"4341:22:25"},"nodeType":"YulExpressionStatement","src":"4341:22:25"},{"nodeType":"YulVariableDeclaration","src":"4372:60:25","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4404:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4416:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"4427:3:25","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4412:3:25"},"nodeType":"YulFunctionCall","src":"4412:19:25"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"4386:17:25"},"nodeType":"YulFunctionCall","src":"4386:46:25"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"4376:6:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4452:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"4463:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4448:3:25"},"nodeType":"YulFunctionCall","src":"4448:18:25"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"4472:6:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"4480:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4468:3:25"},"nodeType":"YulFunctionCall","src":"4468:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4441:6:25"},"nodeType":"YulFunctionCall","src":"4441:50:25"},"nodeType":"YulExpressionStatement","src":"4441:50:25"},{"nodeType":"YulAssignment","src":"4500:41:25","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"4526:6:25"},{"name":"tail_1","nodeType":"YulIdentifier","src":"4534:6:25"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"4508:17:25"},"nodeType":"YulFunctionCall","src":"4508:33:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4500:4:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4561:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"4572:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4557:3:25"},"nodeType":"YulFunctionCall","src":"4557:18:25"},{"name":"value2","nodeType":"YulIdentifier","src":"4577:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4550:6:25"},"nodeType":"YulFunctionCall","src":"4550:34:25"},"nodeType":"YulExpressionStatement","src":"4550:34:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4604:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"4615:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4600:3:25"},"nodeType":"YulFunctionCall","src":"4600:18:25"},{"name":"value3","nodeType":"YulIdentifier","src":"4620:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4593:6:25"},"nodeType":"YulFunctionCall","src":"4593:34:25"},"nodeType":"YulExpressionStatement","src":"4593:34:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4647:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"4658:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4643:3:25"},"nodeType":"YulFunctionCall","src":"4643:19:25"},{"arguments":[{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"4678:6:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4671:6:25"},"nodeType":"YulFunctionCall","src":"4671:14:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4664:6:25"},"nodeType":"YulFunctionCall","src":"4664:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4636:6:25"},"nodeType":"YulFunctionCall","src":"4636:51:25"},"nodeType":"YulExpressionStatement","src":"4636:51:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4707:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"4718:3:25","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4703:3:25"},"nodeType":"YulFunctionCall","src":"4703:19:25"},{"name":"value5","nodeType":"YulIdentifier","src":"4724:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4696:6:25"},"nodeType":"YulFunctionCall","src":"4696:35:25"},"nodeType":"YulExpressionStatement","src":"4696:35:25"}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_uint256_t_bool_t_uint256__to_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_uint256_t_bool_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4260:9:25","type":""},{"name":"value5","nodeType":"YulTypedName","src":"4271:6:25","type":""},{"name":"value4","nodeType":"YulTypedName","src":"4279:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4287:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4295:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4303:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4311:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4322:4:25","type":""}],"src":"4056:681:25"},{"body":{"nodeType":"YulBlock","src":"4846:224:25","statements":[{"body":{"nodeType":"YulBlock","src":"4892:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4901:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4904:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4894:6:25"},"nodeType":"YulFunctionCall","src":"4894:12:25"},"nodeType":"YulExpressionStatement","src":"4894:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4867:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"4876:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4863:3:25"},"nodeType":"YulFunctionCall","src":"4863:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"4888:2:25","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4859:3:25"},"nodeType":"YulFunctionCall","src":"4859:32:25"},"nodeType":"YulIf","src":"4856:52:25"},{"nodeType":"YulAssignment","src":"4917:39:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4946:9:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4927:18:25"},"nodeType":"YulFunctionCall","src":"4927:29:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4917:6:25"}]},{"nodeType":"YulAssignment","src":"4965:48:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4998:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"5009:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4994:3:25"},"nodeType":"YulFunctionCall","src":"4994:18:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4975:18:25"},"nodeType":"YulFunctionCall","src":"4975:38:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4965:6:25"}]},{"nodeType":"YulAssignment","src":"5022:42:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5049:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"5060:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5045:3:25"},"nodeType":"YulFunctionCall","src":"5045:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5032:12:25"},"nodeType":"YulFunctionCall","src":"5032:32:25"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5022:6:25"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4796:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4807:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4819:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4827:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4835:6:25","type":""}],"src":"4742:328:25"},{"body":{"nodeType":"YulBlock","src":"5145:110:25","statements":[{"body":{"nodeType":"YulBlock","src":"5191:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5200:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5203:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5193:6:25"},"nodeType":"YulFunctionCall","src":"5193:12:25"},"nodeType":"YulExpressionStatement","src":"5193:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5166:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"5175:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5162:3:25"},"nodeType":"YulFunctionCall","src":"5162:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"5187:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5158:3:25"},"nodeType":"YulFunctionCall","src":"5158:32:25"},"nodeType":"YulIf","src":"5155:52:25"},{"nodeType":"YulAssignment","src":"5216:33:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5239:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5226:12:25"},"nodeType":"YulFunctionCall","src":"5226:23:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5216:6:25"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5111:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5122:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5134:6:25","type":""}],"src":"5075:180:25"},{"body":{"nodeType":"YulBlock","src":"5361:76:25","statements":[{"nodeType":"YulAssignment","src":"5371:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5383:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"5394:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5379:3:25"},"nodeType":"YulFunctionCall","src":"5379:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5371:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5413:9:25"},{"name":"value0","nodeType":"YulIdentifier","src":"5424:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5406:6:25"},"nodeType":"YulFunctionCall","src":"5406:25:25"},"nodeType":"YulExpressionStatement","src":"5406:25:25"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5330:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5341:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5352:4:25","type":""}],"src":"5260:177:25"},{"body":{"nodeType":"YulBlock","src":"5529:167:25","statements":[{"body":{"nodeType":"YulBlock","src":"5575:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5584:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5587:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5577:6:25"},"nodeType":"YulFunctionCall","src":"5577:12:25"},"nodeType":"YulExpressionStatement","src":"5577:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5550:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"5559:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5546:3:25"},"nodeType":"YulFunctionCall","src":"5546:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"5571:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5542:3:25"},"nodeType":"YulFunctionCall","src":"5542:32:25"},"nodeType":"YulIf","src":"5539:52:25"},{"nodeType":"YulAssignment","src":"5600:33:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5623:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5610:12:25"},"nodeType":"YulFunctionCall","src":"5610:23:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5600:6:25"}]},{"nodeType":"YulAssignment","src":"5642:48:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5675:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"5686:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5671:3:25"},"nodeType":"YulFunctionCall","src":"5671:18:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5652:18:25"},"nodeType":"YulFunctionCall","src":"5652:38:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5642:6:25"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5487:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5498:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5510:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5518:6:25","type":""}],"src":"5442:254:25"},{"body":{"nodeType":"YulBlock","src":"5805:224:25","statements":[{"body":{"nodeType":"YulBlock","src":"5851:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5860:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5863:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5853:6:25"},"nodeType":"YulFunctionCall","src":"5853:12:25"},"nodeType":"YulExpressionStatement","src":"5853:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5826:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"5835:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5822:3:25"},"nodeType":"YulFunctionCall","src":"5822:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"5847:2:25","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5818:3:25"},"nodeType":"YulFunctionCall","src":"5818:32:25"},"nodeType":"YulIf","src":"5815:52:25"},{"nodeType":"YulAssignment","src":"5876:33:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5899:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5886:12:25"},"nodeType":"YulFunctionCall","src":"5886:23:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5876:6:25"}]},{"nodeType":"YulAssignment","src":"5918:48:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5951:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"5962:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5947:3:25"},"nodeType":"YulFunctionCall","src":"5947:18:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5928:18:25"},"nodeType":"YulFunctionCall","src":"5928:38:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5918:6:25"}]},{"nodeType":"YulAssignment","src":"5975:48:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6008:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"6019:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6004:3:25"},"nodeType":"YulFunctionCall","src":"6004:18:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5985:18:25"},"nodeType":"YulFunctionCall","src":"5985:38:25"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5975:6:25"}]}]},"name":"abi_decode_tuple_t_bytes32t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5755:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5766:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5778:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5786:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5794:6:25","type":""}],"src":"5701:328:25"},{"body":{"nodeType":"YulBlock","src":"6118:283:25","statements":[{"body":{"nodeType":"YulBlock","src":"6167:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6176:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6179:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6169:6:25"},"nodeType":"YulFunctionCall","src":"6169:12:25"},"nodeType":"YulExpressionStatement","src":"6169:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6146:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"6154:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6142:3:25"},"nodeType":"YulFunctionCall","src":"6142:17:25"},{"name":"end","nodeType":"YulIdentifier","src":"6161:3:25"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6138:3:25"},"nodeType":"YulFunctionCall","src":"6138:27:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6131:6:25"},"nodeType":"YulFunctionCall","src":"6131:35:25"},"nodeType":"YulIf","src":"6128:55:25"},{"nodeType":"YulAssignment","src":"6192:30:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6215:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6202:12:25"},"nodeType":"YulFunctionCall","src":"6202:20:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6192:6:25"}]},{"body":{"nodeType":"YulBlock","src":"6265:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6274:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6277:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6267:6:25"},"nodeType":"YulFunctionCall","src":"6267:12:25"},"nodeType":"YulExpressionStatement","src":"6267:12:25"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6237:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"6245:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6234:2:25"},"nodeType":"YulFunctionCall","src":"6234:30:25"},"nodeType":"YulIf","src":"6231:50:25"},{"nodeType":"YulAssignment","src":"6290:29:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6306:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"6314:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6302:3:25"},"nodeType":"YulFunctionCall","src":"6302:17:25"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"6290:8:25"}]},{"body":{"nodeType":"YulBlock","src":"6379:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6388:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6391:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6381:6:25"},"nodeType":"YulFunctionCall","src":"6381:12:25"},"nodeType":"YulExpressionStatement","src":"6381:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6342:6:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6354:1:25","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"6357:6:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6350:3:25"},"nodeType":"YulFunctionCall","src":"6350:14:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6338:3:25"},"nodeType":"YulFunctionCall","src":"6338:27:25"},{"kind":"number","nodeType":"YulLiteral","src":"6367:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6334:3:25"},"nodeType":"YulFunctionCall","src":"6334:38:25"},{"name":"end","nodeType":"YulIdentifier","src":"6374:3:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6331:2:25"},"nodeType":"YulFunctionCall","src":"6331:47:25"},"nodeType":"YulIf","src":"6328:67:25"}]},"name":"abi_decode_array_bytes32_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6081:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"6089:3:25","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"6097:8:25","type":""},{"name":"length","nodeType":"YulTypedName","src":"6107:6:25","type":""}],"src":"6034:367:25"},{"body":{"nodeType":"YulBlock","src":"6563:616:25","statements":[{"body":{"nodeType":"YulBlock","src":"6609:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6618:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6621:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6611:6:25"},"nodeType":"YulFunctionCall","src":"6611:12:25"},"nodeType":"YulExpressionStatement","src":"6611:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6584:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"6593:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6580:3:25"},"nodeType":"YulFunctionCall","src":"6580:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"6605:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6576:3:25"},"nodeType":"YulFunctionCall","src":"6576:32:25"},"nodeType":"YulIf","src":"6573:52:25"},{"nodeType":"YulVariableDeclaration","src":"6634:37:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6661:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6648:12:25"},"nodeType":"YulFunctionCall","src":"6648:23:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6638:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6680:28:25","value":{"kind":"number","nodeType":"YulLiteral","src":"6690:18:25","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6684:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"6735:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6744:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6747:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6737:6:25"},"nodeType":"YulFunctionCall","src":"6737:12:25"},"nodeType":"YulExpressionStatement","src":"6737:12:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6723:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"6731:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6720:2:25"},"nodeType":"YulFunctionCall","src":"6720:14:25"},"nodeType":"YulIf","src":"6717:34:25"},{"nodeType":"YulVariableDeclaration","src":"6760:96:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6828:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"6839:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6824:3:25"},"nodeType":"YulFunctionCall","src":"6824:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6848:7:25"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nodeType":"YulIdentifier","src":"6786:37:25"},"nodeType":"YulFunctionCall","src":"6786:70:25"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"6764:8:25","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"6774:8:25","type":""}]},{"nodeType":"YulAssignment","src":"6865:18:25","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"6875:8:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6865:6:25"}]},{"nodeType":"YulAssignment","src":"6892:18:25","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"6902:8:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6892:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"6919:48:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6952:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"6963:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6948:3:25"},"nodeType":"YulFunctionCall","src":"6948:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6935:12:25"},"nodeType":"YulFunctionCall","src":"6935:32:25"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"6923:8:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"6996:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7005:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7008:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6998:6:25"},"nodeType":"YulFunctionCall","src":"6998:12:25"},"nodeType":"YulExpressionStatement","src":"6998:12:25"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"6982:8:25"},{"name":"_1","nodeType":"YulIdentifier","src":"6992:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6979:2:25"},"nodeType":"YulFunctionCall","src":"6979:16:25"},"nodeType":"YulIf","src":"6976:36:25"},{"nodeType":"YulVariableDeclaration","src":"7021:98:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7089:9:25"},{"name":"offset_1","nodeType":"YulIdentifier","src":"7100:8:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7085:3:25"},"nodeType":"YulFunctionCall","src":"7085:24:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7111:7:25"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nodeType":"YulIdentifier","src":"7047:37:25"},"nodeType":"YulFunctionCall","src":"7047:72:25"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"7025:8:25","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"7035:8:25","type":""}]},{"nodeType":"YulAssignment","src":"7128:18:25","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"7138:8:25"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7128:6:25"}]},{"nodeType":"YulAssignment","src":"7155:18:25","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"7165:8:25"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"7155:6:25"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_array$_t_address_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6505:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6516:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6528:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6536:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6544:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"6552:6:25","type":""}],"src":"6406:773:25"},{"body":{"nodeType":"YulBlock","src":"7285:76:25","statements":[{"nodeType":"YulAssignment","src":"7295:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7307:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"7318:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7303:3:25"},"nodeType":"YulFunctionCall","src":"7303:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7295:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7337:9:25"},{"name":"value0","nodeType":"YulIdentifier","src":"7348:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7330:6:25"},"nodeType":"YulFunctionCall","src":"7330:25:25"},"nodeType":"YulExpressionStatement","src":"7330:25:25"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7254:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7265:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7276:4:25","type":""}],"src":"7184:177:25"},{"body":{"nodeType":"YulBlock","src":"7473:559:25","statements":[{"body":{"nodeType":"YulBlock","src":"7519:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7528:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7531:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7521:6:25"},"nodeType":"YulFunctionCall","src":"7521:12:25"},"nodeType":"YulExpressionStatement","src":"7521:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7494:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"7503:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7490:3:25"},"nodeType":"YulFunctionCall","src":"7490:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"7515:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7486:3:25"},"nodeType":"YulFunctionCall","src":"7486:32:25"},"nodeType":"YulIf","src":"7483:52:25"},{"nodeType":"YulAssignment","src":"7544:39:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7573:9:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7554:18:25"},"nodeType":"YulFunctionCall","src":"7554:29:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7544:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"7592:46:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7623:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"7634:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7619:3:25"},"nodeType":"YulFunctionCall","src":"7619:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7606:12:25"},"nodeType":"YulFunctionCall","src":"7606:32:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7596:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7647:28:25","value":{"kind":"number","nodeType":"YulLiteral","src":"7657:18:25","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7651:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"7702:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7711:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7714:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7704:6:25"},"nodeType":"YulFunctionCall","src":"7704:12:25"},"nodeType":"YulExpressionStatement","src":"7704:12:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7690:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"7698:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7687:2:25"},"nodeType":"YulFunctionCall","src":"7687:14:25"},"nodeType":"YulIf","src":"7684:34:25"},{"nodeType":"YulVariableDeclaration","src":"7727:32:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7741:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"7752:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7737:3:25"},"nodeType":"YulFunctionCall","src":"7737:22:25"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"7731:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"7807:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7816:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7819:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7809:6:25"},"nodeType":"YulFunctionCall","src":"7809:12:25"},"nodeType":"YulExpressionStatement","src":"7809:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7786:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"7790:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7782:3:25"},"nodeType":"YulFunctionCall","src":"7782:13:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7797:7:25"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7778:3:25"},"nodeType":"YulFunctionCall","src":"7778:27:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7771:6:25"},"nodeType":"YulFunctionCall","src":"7771:35:25"},"nodeType":"YulIf","src":"7768:55:25"},{"nodeType":"YulVariableDeclaration","src":"7832:30:25","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7859:2:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7846:12:25"},"nodeType":"YulFunctionCall","src":"7846:16:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7836:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"7889:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7898:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7901:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7891:6:25"},"nodeType":"YulFunctionCall","src":"7891:12:25"},"nodeType":"YulExpressionStatement","src":"7891:12:25"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7877:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"7885:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7874:2:25"},"nodeType":"YulFunctionCall","src":"7874:14:25"},"nodeType":"YulIf","src":"7871:34:25"},{"body":{"nodeType":"YulBlock","src":"7955:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7964:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7967:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7957:6:25"},"nodeType":"YulFunctionCall","src":"7957:12:25"},"nodeType":"YulExpressionStatement","src":"7957:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7928:2:25"},{"name":"length","nodeType":"YulIdentifier","src":"7932:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7924:3:25"},"nodeType":"YulFunctionCall","src":"7924:15:25"},{"kind":"number","nodeType":"YulLiteral","src":"7941:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7920:3:25"},"nodeType":"YulFunctionCall","src":"7920:24:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7946:7:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7917:2:25"},"nodeType":"YulFunctionCall","src":"7917:37:25"},"nodeType":"YulIf","src":"7914:57:25"},{"nodeType":"YulAssignment","src":"7980:21:25","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7994:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"7998:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7990:3:25"},"nodeType":"YulFunctionCall","src":"7990:11:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7980:6:25"}]},{"nodeType":"YulAssignment","src":"8010:16:25","value":{"name":"length","nodeType":"YulIdentifier","src":"8020:6:25"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"8010:6:25"}]}]},"name":"abi_decode_tuple_t_addresst_string_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7423:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7434:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7446:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7454:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7462:6:25","type":""}],"src":"7366:666:25"},{"body":{"nodeType":"YulBlock","src":"8121:263:25","statements":[{"body":{"nodeType":"YulBlock","src":"8167:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8176:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8179:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8169:6:25"},"nodeType":"YulFunctionCall","src":"8169:12:25"},"nodeType":"YulExpressionStatement","src":"8169:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8142:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"8151:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8138:3:25"},"nodeType":"YulFunctionCall","src":"8138:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"8163:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8134:3:25"},"nodeType":"YulFunctionCall","src":"8134:32:25"},"nodeType":"YulIf","src":"8131:52:25"},{"nodeType":"YulAssignment","src":"8192:39:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8221:9:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"8202:18:25"},"nodeType":"YulFunctionCall","src":"8202:29:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8192:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"8240:45:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8270:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8281:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8266:3:25"},"nodeType":"YulFunctionCall","src":"8266:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8253:12:25"},"nodeType":"YulFunctionCall","src":"8253:32:25"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"8244:5:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"8338:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8347:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8350:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8340:6:25"},"nodeType":"YulFunctionCall","src":"8340:12:25"},"nodeType":"YulExpressionStatement","src":"8340:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8307:5:25"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8328:5:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8321:6:25"},"nodeType":"YulFunctionCall","src":"8321:13:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8314:6:25"},"nodeType":"YulFunctionCall","src":"8314:21:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8304:2:25"},"nodeType":"YulFunctionCall","src":"8304:32:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8297:6:25"},"nodeType":"YulFunctionCall","src":"8297:40:25"},"nodeType":"YulIf","src":"8294:60:25"},{"nodeType":"YulAssignment","src":"8363:15:25","value":{"name":"value","nodeType":"YulIdentifier","src":"8373:5:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8363:6:25"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8079:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8090:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8102:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8110:6:25","type":""}],"src":"8037:347:25"},{"body":{"nodeType":"YulBlock","src":"8616:450:25","statements":[{"nodeType":"YulAssignment","src":"8626:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8638:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8649:3:25","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8634:3:25"},"nodeType":"YulFunctionCall","src":"8634:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8626:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8669:9:25"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8694:6:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8687:6:25"},"nodeType":"YulFunctionCall","src":"8687:14:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8680:6:25"},"nodeType":"YulFunctionCall","src":"8680:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8662:6:25"},"nodeType":"YulFunctionCall","src":"8662:41:25"},"nodeType":"YulExpressionStatement","src":"8662:41:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8723:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8734:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8719:3:25"},"nodeType":"YulFunctionCall","src":"8719:18:25"},{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"8753:6:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8746:6:25"},"nodeType":"YulFunctionCall","src":"8746:14:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8739:6:25"},"nodeType":"YulFunctionCall","src":"8739:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8712:6:25"},"nodeType":"YulFunctionCall","src":"8712:50:25"},"nodeType":"YulExpressionStatement","src":"8712:50:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8782:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8793:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8778:3:25"},"nodeType":"YulFunctionCall","src":"8778:18:25"},{"arguments":[{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"8812:6:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8805:6:25"},"nodeType":"YulFunctionCall","src":"8805:14:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8798:6:25"},"nodeType":"YulFunctionCall","src":"8798:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8771:6:25"},"nodeType":"YulFunctionCall","src":"8771:50:25"},"nodeType":"YulExpressionStatement","src":"8771:50:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8841:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8852:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8837:3:25"},"nodeType":"YulFunctionCall","src":"8837:18:25"},{"arguments":[{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"8871:6:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8864:6:25"},"nodeType":"YulFunctionCall","src":"8864:14:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8857:6:25"},"nodeType":"YulFunctionCall","src":"8857:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8830:6:25"},"nodeType":"YulFunctionCall","src":"8830:50:25"},"nodeType":"YulExpressionStatement","src":"8830:50:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8900:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8911:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8896:3:25"},"nodeType":"YulFunctionCall","src":"8896:19:25"},{"arguments":[{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"8931:6:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8924:6:25"},"nodeType":"YulFunctionCall","src":"8924:14:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8917:6:25"},"nodeType":"YulFunctionCall","src":"8917:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8889:6:25"},"nodeType":"YulFunctionCall","src":"8889:51:25"},"nodeType":"YulExpressionStatement","src":"8889:51:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8960:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8971:3:25","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8956:3:25"},"nodeType":"YulFunctionCall","src":"8956:19:25"},{"arguments":[{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"8991:6:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8984:6:25"},"nodeType":"YulFunctionCall","src":"8984:14:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8977:6:25"},"nodeType":"YulFunctionCall","src":"8977:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8949:6:25"},"nodeType":"YulFunctionCall","src":"8949:51:25"},"nodeType":"YulExpressionStatement","src":"8949:51:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9020:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9031:3:25","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9016:3:25"},"nodeType":"YulFunctionCall","src":"9016:19:25"},{"arguments":[{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"9051:6:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9044:6:25"},"nodeType":"YulFunctionCall","src":"9044:14:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9037:6:25"},"nodeType":"YulFunctionCall","src":"9037:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9009:6:25"},"nodeType":"YulFunctionCall","src":"9009:51:25"},"nodeType":"YulExpressionStatement","src":"9009:51:25"}]},"name":"abi_encode_tuple_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool__to_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8537:9:25","type":""},{"name":"value6","nodeType":"YulTypedName","src":"8548:6:25","type":""},{"name":"value5","nodeType":"YulTypedName","src":"8556:6:25","type":""},{"name":"value4","nodeType":"YulTypedName","src":"8564:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"8572:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8580:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8588:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8596:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8607:4:25","type":""}],"src":"8389:677:25"},{"body":{"nodeType":"YulBlock","src":"9201:537:25","statements":[{"body":{"nodeType":"YulBlock","src":"9248:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9257:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9260:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9250:6:25"},"nodeType":"YulFunctionCall","src":"9250:12:25"},"nodeType":"YulExpressionStatement","src":"9250:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9222:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"9231:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9218:3:25"},"nodeType":"YulFunctionCall","src":"9218:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"9243:3:25","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9214:3:25"},"nodeType":"YulFunctionCall","src":"9214:33:25"},"nodeType":"YulIf","src":"9211:53:25"},{"nodeType":"YulAssignment","src":"9273:39:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9302:9:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"9283:18:25"},"nodeType":"YulFunctionCall","src":"9283:29:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9273:6:25"}]},{"nodeType":"YulAssignment","src":"9321:48:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9354:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9365:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9350:3:25"},"nodeType":"YulFunctionCall","src":"9350:18:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"9331:18:25"},"nodeType":"YulFunctionCall","src":"9331:38:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9321:6:25"}]},{"nodeType":"YulAssignment","src":"9378:42:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9405:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9416:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9401:3:25"},"nodeType":"YulFunctionCall","src":"9401:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9388:12:25"},"nodeType":"YulFunctionCall","src":"9388:32:25"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"9378:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"9429:46:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9460:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9471:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9456:3:25"},"nodeType":"YulFunctionCall","src":"9456:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9443:12:25"},"nodeType":"YulFunctionCall","src":"9443:32:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9433:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"9518:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9527:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9530:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9520:6:25"},"nodeType":"YulFunctionCall","src":"9520:12:25"},"nodeType":"YulExpressionStatement","src":"9520:12:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9490:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"9498:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9487:2:25"},"nodeType":"YulFunctionCall","src":"9487:30:25"},"nodeType":"YulIf","src":"9484:50:25"},{"nodeType":"YulVariableDeclaration","src":"9543:32:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9557:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"9568:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9553:3:25"},"nodeType":"YulFunctionCall","src":"9553:22:25"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9547:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"9623:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9632:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9635:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9625:6:25"},"nodeType":"YulFunctionCall","src":"9625:12:25"},"nodeType":"YulExpressionStatement","src":"9625:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"9602:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"9606:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9598:3:25"},"nodeType":"YulFunctionCall","src":"9598:13:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9613:7:25"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9594:3:25"},"nodeType":"YulFunctionCall","src":"9594:27:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9587:6:25"},"nodeType":"YulFunctionCall","src":"9587:35:25"},"nodeType":"YulIf","src":"9584:55:25"},{"nodeType":"YulAssignment","src":"9648:84:25","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"9697:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"9701:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9693:3:25"},"nodeType":"YulFunctionCall","src":"9693:11:25"},{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"9719:2:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9706:12:25"},"nodeType":"YulFunctionCall","src":"9706:16:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9724:7:25"}],"functionName":{"name":"abi_decode_available_length_string","nodeType":"YulIdentifier","src":"9658:34:25"},"nodeType":"YulFunctionCall","src":"9658:74:25"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"9648:6:25"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9143:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9154:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9166:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9174:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9182:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9190:6:25","type":""}],"src":"9071:667:25"},{"body":{"nodeType":"YulBlock","src":"9906:666:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9923:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9934:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9916:6:25"},"nodeType":"YulFunctionCall","src":"9916:21:25"},"nodeType":"YulExpressionStatement","src":"9916:21:25"},{"nodeType":"YulVariableDeclaration","src":"9946:33:25","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9972:6:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9966:5:25"},"nodeType":"YulFunctionCall","src":"9966:13:25"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"9950:12:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9999:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"10010:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9995:3:25"},"nodeType":"YulFunctionCall","src":"9995:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"10015:4:25","type":"","value":"0xc0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9988:6:25"},"nodeType":"YulFunctionCall","src":"9988:32:25"},"nodeType":"YulExpressionStatement","src":"9988:32:25"},{"nodeType":"YulVariableDeclaration","src":"10029:66:25","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"10061:12:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10079:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"10090:3:25","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10075:3:25"},"nodeType":"YulFunctionCall","src":"10075:19:25"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"10043:17:25"},"nodeType":"YulFunctionCall","src":"10043:52:25"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"10033:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10104:44:25","value":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10136:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"10144:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10132:3:25"},"nodeType":"YulFunctionCall","src":"10132:15:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10126:5:25"},"nodeType":"YulFunctionCall","src":"10126:22:25"},"variables":[{"name":"memberValue0_1","nodeType":"YulTypedName","src":"10108:14:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10168:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"10179:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10164:3:25"},"nodeType":"YulFunctionCall","src":"10164:18:25"},{"arguments":[{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"10192:6:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"10200:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10188:3:25"},"nodeType":"YulFunctionCall","src":"10188:22:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10216:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"10212:3:25"},"nodeType":"YulFunctionCall","src":"10212:7:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10184:3:25"},"nodeType":"YulFunctionCall","src":"10184:36:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10157:6:25"},"nodeType":"YulFunctionCall","src":"10157:64:25"},"nodeType":"YulExpressionStatement","src":"10157:64:25"},{"nodeType":"YulVariableDeclaration","src":"10230:55:25","value":{"arguments":[{"name":"memberValue0_1","nodeType":"YulIdentifier","src":"10262:14:25"},{"name":"tail_1","nodeType":"YulIdentifier","src":"10278:6:25"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"10244:17:25"},"nodeType":"YulFunctionCall","src":"10244:41:25"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"10234:6:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10305:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"10316:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10301:3:25"},"nodeType":"YulFunctionCall","src":"10301:18:25"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10331:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"10339:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10327:3:25"},"nodeType":"YulFunctionCall","src":"10327:15:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10321:5:25"},"nodeType":"YulFunctionCall","src":"10321:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10294:6:25"},"nodeType":"YulFunctionCall","src":"10294:50:25"},"nodeType":"YulExpressionStatement","src":"10294:50:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10364:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"10375:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10360:3:25"},"nodeType":"YulFunctionCall","src":"10360:19:25"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10391:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"10399:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10387:3:25"},"nodeType":"YulFunctionCall","src":"10387:15:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10381:5:25"},"nodeType":"YulFunctionCall","src":"10381:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10353:6:25"},"nodeType":"YulFunctionCall","src":"10353:51:25"},"nodeType":"YulExpressionStatement","src":"10353:51:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10424:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"10435:3:25","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10420:3:25"},"nodeType":"YulFunctionCall","src":"10420:19:25"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10465:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"10473:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10461:3:25"},"nodeType":"YulFunctionCall","src":"10461:16:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10455:5:25"},"nodeType":"YulFunctionCall","src":"10455:23:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10448:6:25"},"nodeType":"YulFunctionCall","src":"10448:31:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10441:6:25"},"nodeType":"YulFunctionCall","src":"10441:39:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10413:6:25"},"nodeType":"YulFunctionCall","src":"10413:68:25"},"nodeType":"YulExpressionStatement","src":"10413:68:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10501:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"10512:4:25","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10497:3:25"},"nodeType":"YulFunctionCall","src":"10497:20:25"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10529:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"10537:3:25","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10525:3:25"},"nodeType":"YulFunctionCall","src":"10525:16:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10519:5:25"},"nodeType":"YulFunctionCall","src":"10519:23:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10490:6:25"},"nodeType":"YulFunctionCall","src":"10490:53:25"},"nodeType":"YulExpressionStatement","src":"10490:53:25"},{"nodeType":"YulAssignment","src":"10552:14:25","value":{"name":"tail_2","nodeType":"YulIdentifier","src":"10560:6:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10552:4:25"}]}]},"name":"abi_encode_tuple_t_struct$_Certification_$5302_memory_ptr__to_t_struct$_Certification_$5302_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9875:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9886:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9897:4:25","type":""}],"src":"9743:829:25"},{"body":{"nodeType":"YulBlock","src":"10664:173:25","statements":[{"body":{"nodeType":"YulBlock","src":"10710:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10719:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10722:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10712:6:25"},"nodeType":"YulFunctionCall","src":"10712:12:25"},"nodeType":"YulExpressionStatement","src":"10712:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10685:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"10694:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10681:3:25"},"nodeType":"YulFunctionCall","src":"10681:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"10706:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10677:3:25"},"nodeType":"YulFunctionCall","src":"10677:32:25"},"nodeType":"YulIf","src":"10674:52:25"},{"nodeType":"YulAssignment","src":"10735:39:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10764:9:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"10745:18:25"},"nodeType":"YulFunctionCall","src":"10745:29:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10735:6:25"}]},{"nodeType":"YulAssignment","src":"10783:48:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10816:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"10827:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10812:3:25"},"nodeType":"YulFunctionCall","src":"10812:18:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"10793:18:25"},"nodeType":"YulFunctionCall","src":"10793:38:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10783:6:25"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10622:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10633:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10645:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10653:6:25","type":""}],"src":"10577:260:25"},{"body":{"nodeType":"YulBlock","src":"10897:325:25","statements":[{"nodeType":"YulAssignment","src":"10907:22:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10921:1:25","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"10924:4:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"10917:3:25"},"nodeType":"YulFunctionCall","src":"10917:12:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10907:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"10938:38:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10968:4:25"},{"kind":"number","nodeType":"YulLiteral","src":"10974:1:25","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10964:3:25"},"nodeType":"YulFunctionCall","src":"10964:12:25"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"10942:18:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"11015:31:25","statements":[{"nodeType":"YulAssignment","src":"11017:27:25","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"11031:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"11039:4:25","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11027:3:25"},"nodeType":"YulFunctionCall","src":"11027:17:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"11017:6:25"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"10995:18:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10988:6:25"},"nodeType":"YulFunctionCall","src":"10988:26:25"},"nodeType":"YulIf","src":"10985:61:25"},{"body":{"nodeType":"YulBlock","src":"11105:111:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11126:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11133:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"11138:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11129:3:25"},"nodeType":"YulFunctionCall","src":"11129:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11119:6:25"},"nodeType":"YulFunctionCall","src":"11119:31:25"},"nodeType":"YulExpressionStatement","src":"11119:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11170:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"11173:4:25","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11163:6:25"},"nodeType":"YulFunctionCall","src":"11163:15:25"},"nodeType":"YulExpressionStatement","src":"11163:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11198:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11201:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11191:6:25"},"nodeType":"YulFunctionCall","src":"11191:15:25"},"nodeType":"YulExpressionStatement","src":"11191:15:25"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"11061:18:25"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"11084:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"11092:2:25","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"11081:2:25"},"nodeType":"YulFunctionCall","src":"11081:14:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"11058:2:25"},"nodeType":"YulFunctionCall","src":"11058:38:25"},"nodeType":"YulIf","src":"11055:161:25"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"10877:4:25","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"10886:6:25","type":""}],"src":"10842:380:25"},{"body":{"nodeType":"YulBlock","src":"11259:95:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11276:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11283:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"11288:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11279:3:25"},"nodeType":"YulFunctionCall","src":"11279:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11269:6:25"},"nodeType":"YulFunctionCall","src":"11269:31:25"},"nodeType":"YulExpressionStatement","src":"11269:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11316:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"11319:4:25","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11309:6:25"},"nodeType":"YulFunctionCall","src":"11309:15:25"},"nodeType":"YulExpressionStatement","src":"11309:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11340:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11343:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11333:6:25"},"nodeType":"YulFunctionCall","src":"11333:15:25"},"nodeType":"YulExpressionStatement","src":"11333:15:25"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"11227:127:25"},{"body":{"nodeType":"YulBlock","src":"11406:88:25","statements":[{"body":{"nodeType":"YulBlock","src":"11437:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11439:16:25"},"nodeType":"YulFunctionCall","src":"11439:18:25"},"nodeType":"YulExpressionStatement","src":"11439:18:25"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11422:5:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11433:1:25","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11429:3:25"},"nodeType":"YulFunctionCall","src":"11429:6:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"11419:2:25"},"nodeType":"YulFunctionCall","src":"11419:17:25"},"nodeType":"YulIf","src":"11416:43:25"},{"nodeType":"YulAssignment","src":"11468:20:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11479:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"11486:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11475:3:25"},"nodeType":"YulFunctionCall","src":"11475:13:25"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"11468:3:25"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11388:5:25","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"11398:3:25","type":""}],"src":"11359:135:25"},{"body":{"nodeType":"YulBlock","src":"11547:77:25","statements":[{"nodeType":"YulAssignment","src":"11557:16:25","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11568:1:25"},{"name":"y","nodeType":"YulIdentifier","src":"11571:1:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11564:3:25"},"nodeType":"YulFunctionCall","src":"11564:9:25"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"11557:3:25"}]},{"body":{"nodeType":"YulBlock","src":"11596:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11598:16:25"},"nodeType":"YulFunctionCall","src":"11598:18:25"},"nodeType":"YulExpressionStatement","src":"11598:18:25"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11588:1:25"},{"name":"sum","nodeType":"YulIdentifier","src":"11591:3:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11585:2:25"},"nodeType":"YulFunctionCall","src":"11585:10:25"},"nodeType":"YulIf","src":"11582:36:25"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11530:1:25","type":""},{"name":"y","nodeType":"YulTypedName","src":"11533:1:25","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"11539:3:25","type":""}],"src":"11499:125:25"},{"body":{"nodeType":"YulBlock","src":"11685:65:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11702:1:25","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"11705:3:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11695:6:25"},"nodeType":"YulFunctionCall","src":"11695:14:25"},"nodeType":"YulExpressionStatement","src":"11695:14:25"},{"nodeType":"YulAssignment","src":"11718:26:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11736:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11739:4:25","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"11726:9:25"},"nodeType":"YulFunctionCall","src":"11726:18:25"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"11718:4:25"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"11668:3:25","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"11676:4:25","type":""}],"src":"11629:121:25"},{"body":{"nodeType":"YulBlock","src":"11836:464:25","statements":[{"body":{"nodeType":"YulBlock","src":"11869:425:25","statements":[{"nodeType":"YulVariableDeclaration","src":"11883:11:25","value":{"kind":"number","nodeType":"YulLiteral","src":"11893:1:25","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"11887:2:25","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"11914:2:25"},{"name":"array","nodeType":"YulIdentifier","src":"11918:5:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11907:6:25"},"nodeType":"YulFunctionCall","src":"11907:17:25"},"nodeType":"YulExpressionStatement","src":"11907:17:25"},{"nodeType":"YulVariableDeclaration","src":"11937:31:25","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"11959:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"11963:4:25","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"11949:9:25"},"nodeType":"YulFunctionCall","src":"11949:19:25"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"11941:4:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"11981:57:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"12004:4:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12014:1:25","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"12021:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"12033:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12017:3:25"},"nodeType":"YulFunctionCall","src":"12017:19:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"12010:3:25"},"nodeType":"YulFunctionCall","src":"12010:27:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12000:3:25"},"nodeType":"YulFunctionCall","src":"12000:38:25"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"11985:11:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"12075:23:25","statements":[{"nodeType":"YulAssignment","src":"12077:19:25","value":{"name":"data","nodeType":"YulIdentifier","src":"12092:4:25"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"12077:11:25"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"12057:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"12069:4:25","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12054:2:25"},"nodeType":"YulFunctionCall","src":"12054:20:25"},"nodeType":"YulIf","src":"12051:47:25"},{"nodeType":"YulVariableDeclaration","src":"12111:41:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"12125:4:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12135:1:25","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"12142:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"12147:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12138:3:25"},"nodeType":"YulFunctionCall","src":"12138:12:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"12131:3:25"},"nodeType":"YulFunctionCall","src":"12131:20:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12121:3:25"},"nodeType":"YulFunctionCall","src":"12121:31:25"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"12115:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12165:24:25","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"12178:11:25"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"12169:5:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"12263:21:25","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"12272:5:25"},{"name":"_1","nodeType":"YulIdentifier","src":"12279:2:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"12265:6:25"},"nodeType":"YulFunctionCall","src":"12265:17:25"},"nodeType":"YulExpressionStatement","src":"12265:17:25"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"12213:5:25"},{"name":"_2","nodeType":"YulIdentifier","src":"12220:2:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12210:2:25"},"nodeType":"YulFunctionCall","src":"12210:13:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"12224:26:25","statements":[{"nodeType":"YulAssignment","src":"12226:22:25","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"12239:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"12246:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12235:3:25"},"nodeType":"YulFunctionCall","src":"12235:13:25"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"12226:5:25"}]}]},"pre":{"nodeType":"YulBlock","src":"12206:3:25","statements":[]},"src":"12202:82:25"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"11852:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"11857:2:25","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11849:2:25"},"nodeType":"YulFunctionCall","src":"11849:11:25"},"nodeType":"YulIf","src":"11846:448:25"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"11808:5:25","type":""},{"name":"len","nodeType":"YulTypedName","src":"11815:3:25","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"11820:10:25","type":""}],"src":"11755:545:25"},{"body":{"nodeType":"YulBlock","src":"12390:81:25","statements":[{"nodeType":"YulAssignment","src":"12400:65:25","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"12415:4:25"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12433:1:25","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"12436:3:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12429:3:25"},"nodeType":"YulFunctionCall","src":"12429:11:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12446:1:25","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"12442:3:25"},"nodeType":"YulFunctionCall","src":"12442:6:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"12425:3:25"},"nodeType":"YulFunctionCall","src":"12425:24:25"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"12421:3:25"},"nodeType":"YulFunctionCall","src":"12421:29:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12411:3:25"},"nodeType":"YulFunctionCall","src":"12411:40:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12457:1:25","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"12460:3:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12453:3:25"},"nodeType":"YulFunctionCall","src":"12453:11:25"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"12408:2:25"},"nodeType":"YulFunctionCall","src":"12408:57:25"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"12400:4:25"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"12367:4:25","type":""},{"name":"len","nodeType":"YulTypedName","src":"12373:3:25","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"12381:4:25","type":""}],"src":"12305:166:25"},{"body":{"nodeType":"YulBlock","src":"12572:1256:25","statements":[{"nodeType":"YulVariableDeclaration","src":"12582:24:25","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"12602:3:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12596:5:25"},"nodeType":"YulFunctionCall","src":"12596:10:25"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"12586:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"12649:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"12651:16:25"},"nodeType":"YulFunctionCall","src":"12651:18:25"},"nodeType":"YulExpressionStatement","src":"12651:18:25"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"12621:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"12629:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12618:2:25"},"nodeType":"YulFunctionCall","src":"12618:30:25"},"nodeType":"YulIf","src":"12615:56:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"12724:4:25"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"12762:4:25"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"12756:5:25"},"nodeType":"YulFunctionCall","src":"12756:11:25"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"12730:25:25"},"nodeType":"YulFunctionCall","src":"12730:38:25"},{"name":"newLen","nodeType":"YulIdentifier","src":"12770:6:25"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"12680:43:25"},"nodeType":"YulFunctionCall","src":"12680:97:25"},"nodeType":"YulExpressionStatement","src":"12680:97:25"},{"nodeType":"YulVariableDeclaration","src":"12786:18:25","value":{"kind":"number","nodeType":"YulLiteral","src":"12803:1:25","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"12790:9:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12813:23:25","value":{"kind":"number","nodeType":"YulLiteral","src":"12832:4:25","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"12817:11:25","type":""}]},{"nodeType":"YulAssignment","src":"12845:24:25","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"12858:11:25"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"12845:9:25"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"12915:656:25","statements":[{"nodeType":"YulVariableDeclaration","src":"12929:35:25","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"12948:6:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12960:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"12956:3:25"},"nodeType":"YulFunctionCall","src":"12956:7:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12944:3:25"},"nodeType":"YulFunctionCall","src":"12944:20:25"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"12933:7:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12977:49:25","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"13021:4:25"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"12991:29:25"},"nodeType":"YulFunctionCall","src":"12991:35:25"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"12981:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13039:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"13048:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"13043:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"13126:172:25","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"13151:6:25"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"13169:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"13174:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13165:3:25"},"nodeType":"YulFunctionCall","src":"13165:19:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13159:5:25"},"nodeType":"YulFunctionCall","src":"13159:26:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"13144:6:25"},"nodeType":"YulFunctionCall","src":"13144:42:25"},"nodeType":"YulExpressionStatement","src":"13144:42:25"},{"nodeType":"YulAssignment","src":"13203:24:25","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"13217:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"13225:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13213:3:25"},"nodeType":"YulFunctionCall","src":"13213:14:25"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"13203:6:25"}]},{"nodeType":"YulAssignment","src":"13244:40:25","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"13261:9:25"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"13272:11:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13257:3:25"},"nodeType":"YulFunctionCall","src":"13257:27:25"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"13244:9:25"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"13073:1:25"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"13076:7:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"13070:2:25"},"nodeType":"YulFunctionCall","src":"13070:14:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"13085:28:25","statements":[{"nodeType":"YulAssignment","src":"13087:24:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"13096:1:25"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"13099:11:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13092:3:25"},"nodeType":"YulFunctionCall","src":"13092:19:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"13087:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"13066:3:25","statements":[]},"src":"13062:236:25"},{"body":{"nodeType":"YulBlock","src":"13346:166:25","statements":[{"nodeType":"YulVariableDeclaration","src":"13364:43:25","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"13391:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"13396:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13387:3:25"},"nodeType":"YulFunctionCall","src":"13387:19:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13381:5:25"},"nodeType":"YulFunctionCall","src":"13381:26:25"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"13368:9:25","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"13431:6:25"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"13443:9:25"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13470:1:25","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"13473:6:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13466:3:25"},"nodeType":"YulFunctionCall","src":"13466:14:25"},{"kind":"number","nodeType":"YulLiteral","src":"13482:3:25","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13462:3:25"},"nodeType":"YulFunctionCall","src":"13462:24:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13492:1:25","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"13488:3:25"},"nodeType":"YulFunctionCall","src":"13488:6:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"13458:3:25"},"nodeType":"YulFunctionCall","src":"13458:37:25"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"13454:3:25"},"nodeType":"YulFunctionCall","src":"13454:42:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13439:3:25"},"nodeType":"YulFunctionCall","src":"13439:58:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"13424:6:25"},"nodeType":"YulFunctionCall","src":"13424:74:25"},"nodeType":"YulExpressionStatement","src":"13424:74:25"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"13317:7:25"},{"name":"newLen","nodeType":"YulIdentifier","src":"13326:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"13314:2:25"},"nodeType":"YulFunctionCall","src":"13314:19:25"},"nodeType":"YulIf","src":"13311:201:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"13532:4:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13546:1:25","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"13549:6:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13542:3:25"},"nodeType":"YulFunctionCall","src":"13542:14:25"},{"kind":"number","nodeType":"YulLiteral","src":"13558:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13538:3:25"},"nodeType":"YulFunctionCall","src":"13538:22:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"13525:6:25"},"nodeType":"YulFunctionCall","src":"13525:36:25"},"nodeType":"YulExpressionStatement","src":"13525:36:25"}]},"nodeType":"YulCase","src":"12908:663:25","value":{"kind":"number","nodeType":"YulLiteral","src":"12913:1:25","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"13588:234:25","statements":[{"nodeType":"YulVariableDeclaration","src":"13602:14:25","value":{"kind":"number","nodeType":"YulLiteral","src":"13615:1:25","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"13606:5:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"13651:67:25","statements":[{"nodeType":"YulAssignment","src":"13669:35:25","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"13688:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"13693:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13684:3:25"},"nodeType":"YulFunctionCall","src":"13684:19:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13678:5:25"},"nodeType":"YulFunctionCall","src":"13678:26:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"13669:5:25"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"13632:6:25"},"nodeType":"YulIf","src":"13629:89:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"13738:4:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13797:5:25"},{"name":"newLen","nodeType":"YulIdentifier","src":"13804:6:25"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"13744:52:25"},"nodeType":"YulFunctionCall","src":"13744:67:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"13731:6:25"},"nodeType":"YulFunctionCall","src":"13731:81:25"},"nodeType":"YulExpressionStatement","src":"13731:81:25"}]},"nodeType":"YulCase","src":"13580:242:25","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"12888:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"12896:2:25","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12885:2:25"},"nodeType":"YulFunctionCall","src":"12885:14:25"},"nodeType":"YulSwitch","src":"12878:944:25"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"12557:4:25","type":""},{"name":"src","nodeType":"YulTypedName","src":"12563:3:25","type":""}],"src":"12476:1352:25"},{"body":{"nodeType":"YulBlock","src":"14030:257:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14047:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14058:2:25","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14040:6:25"},"nodeType":"YulFunctionCall","src":"14040:21:25"},"nodeType":"YulExpressionStatement","src":"14040:21:25"},{"nodeType":"YulVariableDeclaration","src":"14070:59:25","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14102:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14114:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14125:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14110:3:25"},"nodeType":"YulFunctionCall","src":"14110:18:25"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"14084:17:25"},"nodeType":"YulFunctionCall","src":"14084:45:25"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"14074:6:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14149:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14160:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14145:3:25"},"nodeType":"YulFunctionCall","src":"14145:18:25"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"14169:6:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"14177:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14165:3:25"},"nodeType":"YulFunctionCall","src":"14165:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14138:6:25"},"nodeType":"YulFunctionCall","src":"14138:50:25"},"nodeType":"YulExpressionStatement","src":"14138:50:25"},{"nodeType":"YulAssignment","src":"14197:41:25","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"14223:6:25"},{"name":"tail_1","nodeType":"YulIdentifier","src":"14231:6:25"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"14205:17:25"},"nodeType":"YulFunctionCall","src":"14205:33:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14197:4:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14258:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14269:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14254:3:25"},"nodeType":"YulFunctionCall","src":"14254:18:25"},{"name":"value2","nodeType":"YulIdentifier","src":"14274:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14247:6:25"},"nodeType":"YulFunctionCall","src":"14247:34:25"},"nodeType":"YulExpressionStatement","src":"14247:34:25"}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_uint256__to_t_string_memory_ptr_t_string_memory_ptr_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13983:9:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"13994:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14002:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14010:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14021:4:25","type":""}],"src":"13833:454:25"},{"body":{"nodeType":"YulBlock","src":"14449:218:25","statements":[{"nodeType":"YulAssignment","src":"14459:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14471:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14482:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14467:3:25"},"nodeType":"YulFunctionCall","src":"14467:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14459:4:25"}]},{"nodeType":"YulVariableDeclaration","src":"14494:29:25","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14512:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"14517:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"14508:3:25"},"nodeType":"YulFunctionCall","src":"14508:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"14521:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14504:3:25"},"nodeType":"YulFunctionCall","src":"14504:19:25"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"14498:2:25","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14539:9:25"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14554:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"14562:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14550:3:25"},"nodeType":"YulFunctionCall","src":"14550:15:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14532:6:25"},"nodeType":"YulFunctionCall","src":"14532:34:25"},"nodeType":"YulExpressionStatement","src":"14532:34:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14586:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14597:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14582:3:25"},"nodeType":"YulFunctionCall","src":"14582:18:25"},{"name":"value1","nodeType":"YulIdentifier","src":"14602:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14575:6:25"},"nodeType":"YulFunctionCall","src":"14575:34:25"},"nodeType":"YulExpressionStatement","src":"14575:34:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14629:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14640:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14625:3:25"},"nodeType":"YulFunctionCall","src":"14625:18:25"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"14649:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"14657:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14645:3:25"},"nodeType":"YulFunctionCall","src":"14645:15:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14618:6:25"},"nodeType":"YulFunctionCall","src":"14618:43:25"},"nodeType":"YulExpressionStatement","src":"14618:43:25"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14402:9:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"14413:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14421:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14429:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14440:4:25","type":""}],"src":"14292:375:25"},{"body":{"nodeType":"YulBlock","src":"14801:175:25","statements":[{"nodeType":"YulAssignment","src":"14811:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14823:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14834:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14819:3:25"},"nodeType":"YulFunctionCall","src":"14819:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14811:4:25"}]},{"nodeType":"YulVariableDeclaration","src":"14846:29:25","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14864:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"14869:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"14860:3:25"},"nodeType":"YulFunctionCall","src":"14860:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"14873:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14856:3:25"},"nodeType":"YulFunctionCall","src":"14856:19:25"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"14850:2:25","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14891:9:25"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14906:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"14914:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14902:3:25"},"nodeType":"YulFunctionCall","src":"14902:15:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14884:6:25"},"nodeType":"YulFunctionCall","src":"14884:34:25"},"nodeType":"YulExpressionStatement","src":"14884:34:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14938:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14949:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14934:3:25"},"nodeType":"YulFunctionCall","src":"14934:18:25"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"14958:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"14966:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14954:3:25"},"nodeType":"YulFunctionCall","src":"14954:15:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14927:6:25"},"nodeType":"YulFunctionCall","src":"14927:43:25"},"nodeType":"YulExpressionStatement","src":"14927:43:25"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14762:9:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14773:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14781:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14792:4:25","type":""}],"src":"14672:304:25"},{"body":{"nodeType":"YulBlock","src":"15013:95:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15030:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15037:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"15042:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15033:3:25"},"nodeType":"YulFunctionCall","src":"15033:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15023:6:25"},"nodeType":"YulFunctionCall","src":"15023:31:25"},"nodeType":"YulExpressionStatement","src":"15023:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15070:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"15073:4:25","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15063:6:25"},"nodeType":"YulFunctionCall","src":"15063:15:25"},"nodeType":"YulExpressionStatement","src":"15063:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15094:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15097:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15087:6:25"},"nodeType":"YulFunctionCall","src":"15087:15:25"},"nodeType":"YulExpressionStatement","src":"15087:15:25"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"14981:127:25"},{"body":{"nodeType":"YulBlock","src":"15292:372:25","statements":[{"nodeType":"YulVariableDeclaration","src":"15302:16:25","value":{"name":"pos","nodeType":"YulIdentifier","src":"15315:3:25"},"variables":[{"name":"pos_1","nodeType":"YulTypedName","src":"15306:5:25","type":""}]},{"nodeType":"YulAssignment","src":"15327:12:25","value":{"name":"pos","nodeType":"YulIdentifier","src":"15336:3:25"},"variableNames":[{"name":"pos_1","nodeType":"YulIdentifier","src":"15327:5:25"}]},{"nodeType":"YulVariableDeclaration","src":"15348:20:25","value":{"name":"value0","nodeType":"YulIdentifier","src":"15362:6:25"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"15352:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"15377:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"15386:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"15381:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"15445:192:25","statements":[{"expression":{"arguments":[{"name":"pos_1","nodeType":"YulIdentifier","src":"15466:5:25"},{"arguments":[{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"15496:6:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"15477:18:25"},"nodeType":"YulFunctionCall","src":"15477:26:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15513:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"15518:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15509:3:25"},"nodeType":"YulFunctionCall","src":"15509:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"15522:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15505:3:25"},"nodeType":"YulFunctionCall","src":"15505:19:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15473:3:25"},"nodeType":"YulFunctionCall","src":"15473:52:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15459:6:25"},"nodeType":"YulFunctionCall","src":"15459:67:25"},"nodeType":"YulExpressionStatement","src":"15459:67:25"},{"nodeType":"YulVariableDeclaration","src":"15539:14:25","value":{"kind":"number","nodeType":"YulLiteral","src":"15549:4:25","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"15543:2:25","type":""}]},{"nodeType":"YulAssignment","src":"15566:23:25","value":{"arguments":[{"name":"pos_1","nodeType":"YulIdentifier","src":"15579:5:25"},{"name":"_1","nodeType":"YulIdentifier","src":"15586:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15575:3:25"},"nodeType":"YulFunctionCall","src":"15575:14:25"},"variableNames":[{"name":"pos_1","nodeType":"YulIdentifier","src":"15566:5:25"}]},{"nodeType":"YulAssignment","src":"15602:25:25","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"15616:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"15624:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15612:3:25"},"nodeType":"YulFunctionCall","src":"15612:15:25"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"15602:6:25"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"15407:1:25"},{"name":"value1","nodeType":"YulIdentifier","src":"15410:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"15404:2:25"},"nodeType":"YulFunctionCall","src":"15404:13:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"15418:18:25","statements":[{"nodeType":"YulAssignment","src":"15420:14:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"15429:1:25"},{"kind":"number","nodeType":"YulLiteral","src":"15432:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15425:3:25"},"nodeType":"YulFunctionCall","src":"15425:9:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"15420:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"15400:3:25","statements":[]},"src":"15396:241:25"},{"nodeType":"YulAssignment","src":"15646:12:25","value":{"name":"pos_1","nodeType":"YulIdentifier","src":"15653:5:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15646:3:25"}]}]},"name":"abi_encode_tuple_packed_t_array$_t_address_$dyn_calldata_ptr__to_t_array$_t_address_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15260:3:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15265:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15273:6:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15284:3:25","type":""}],"src":"15113:551:25"},{"body":{"nodeType":"YulBlock","src":"15830:282:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15847:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15858:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15840:6:25"},"nodeType":"YulFunctionCall","src":"15840:21:25"},"nodeType":"YulExpressionStatement","src":"15840:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15881:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15892:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15877:3:25"},"nodeType":"YulFunctionCall","src":"15877:18:25"},{"name":"value1","nodeType":"YulIdentifier","src":"15897:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15870:6:25"},"nodeType":"YulFunctionCall","src":"15870:34:25"},"nodeType":"YulExpressionStatement","src":"15870:34:25"},{"body":{"nodeType":"YulBlock","src":"15948:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15957:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15960:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15950:6:25"},"nodeType":"YulFunctionCall","src":"15950:12:25"},"nodeType":"YulExpressionStatement","src":"15950:12:25"}]},"condition":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"15919:6:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15935:3:25","type":"","value":"251"},{"kind":"number","nodeType":"YulLiteral","src":"15940:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15931:3:25"},"nodeType":"YulFunctionCall","src":"15931:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"15944:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15927:3:25"},"nodeType":"YulFunctionCall","src":"15927:19:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15916:2:25"},"nodeType":"YulFunctionCall","src":"15916:31:25"},"nodeType":"YulIf","src":"15913:51:25"},{"nodeType":"YulVariableDeclaration","src":"15973:28:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15991:1:25","type":"","value":"5"},{"name":"value1","nodeType":"YulIdentifier","src":"15994:6:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15987:3:25"},"nodeType":"YulFunctionCall","src":"15987:14:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"15977:6:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16027:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"16038:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16023:3:25"},"nodeType":"YulFunctionCall","src":"16023:18:25"},{"name":"value0","nodeType":"YulIdentifier","src":"16043:6:25"},{"name":"length","nodeType":"YulIdentifier","src":"16051:6:25"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"16010:12:25"},"nodeType":"YulFunctionCall","src":"16010:48:25"},"nodeType":"YulExpressionStatement","src":"16010:48:25"},{"nodeType":"YulAssignment","src":"16067:39:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16083:9:25"},{"name":"length","nodeType":"YulIdentifier","src":"16094:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16079:3:25"},"nodeType":"YulFunctionCall","src":"16079:22:25"},{"kind":"number","nodeType":"YulLiteral","src":"16103:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16075:3:25"},"nodeType":"YulFunctionCall","src":"16075:31:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16067:4:25"}]}]},"name":"abi_encode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr__to_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15791:9:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15802:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15810:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15821:4:25","type":""}],"src":"15669:443:25"},{"body":{"nodeType":"YulBlock","src":"16169:116:25","statements":[{"nodeType":"YulAssignment","src":"16179:20:25","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"16194:1:25"},{"name":"y","nodeType":"YulIdentifier","src":"16197:1:25"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"16190:3:25"},"nodeType":"YulFunctionCall","src":"16190:9:25"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"16179:7:25"}]},{"body":{"nodeType":"YulBlock","src":"16257:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"16259:16:25"},"nodeType":"YulFunctionCall","src":"16259:18:25"},"nodeType":"YulExpressionStatement","src":"16259:18:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"16228:1:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"16221:6:25"},"nodeType":"YulFunctionCall","src":"16221:9:25"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"16235:1:25"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"16242:7:25"},{"name":"x","nodeType":"YulIdentifier","src":"16251:1:25"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"16238:3:25"},"nodeType":"YulFunctionCall","src":"16238:15:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"16232:2:25"},"nodeType":"YulFunctionCall","src":"16232:22:25"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"16218:2:25"},"nodeType":"YulFunctionCall","src":"16218:37:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"16211:6:25"},"nodeType":"YulFunctionCall","src":"16211:45:25"},"nodeType":"YulIf","src":"16208:71:25"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"16148:1:25","type":""},{"name":"y","nodeType":"YulTypedName","src":"16151:1:25","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"16157:7:25","type":""}],"src":"16117:168:25"},{"body":{"nodeType":"YulBlock","src":"16393:1103:25","statements":[{"body":{"nodeType":"YulBlock","src":"16434:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"16436:16:25"},"nodeType":"YulFunctionCall","src":"16436:18:25"},"nodeType":"YulExpressionStatement","src":"16436:18:25"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"16409:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"16414:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16406:2:25"},"nodeType":"YulFunctionCall","src":"16406:27:25"},"nodeType":"YulIf","src":"16403:53:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"16509:4:25"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"16547:4:25"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"16541:5:25"},"nodeType":"YulFunctionCall","src":"16541:11:25"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"16515:25:25"},"nodeType":"YulFunctionCall","src":"16515:38:25"},{"name":"len","nodeType":"YulIdentifier","src":"16555:3:25"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"16465:43:25"},"nodeType":"YulFunctionCall","src":"16465:94:25"},"nodeType":"YulExpressionStatement","src":"16465:94:25"},{"nodeType":"YulVariableDeclaration","src":"16568:18:25","value":{"kind":"number","nodeType":"YulLiteral","src":"16585:1:25","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"16572:9:25","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"16629:609:25","statements":[{"nodeType":"YulVariableDeclaration","src":"16643:32:25","value":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"16662:3:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16671:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"16667:3:25"},"nodeType":"YulFunctionCall","src":"16667:7:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16658:3:25"},"nodeType":"YulFunctionCall","src":"16658:17:25"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"16647:7:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16688:49:25","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"16732:4:25"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"16702:29:25"},"nodeType":"YulFunctionCall","src":"16702:35:25"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"16692:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16750:18:25","value":{"name":"srcOffset","nodeType":"YulIdentifier","src":"16759:9:25"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"16754:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"16838:172:25","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"16863:6:25"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"16888:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"16893:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16884:3:25"},"nodeType":"YulFunctionCall","src":"16884:19:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"16871:12:25"},"nodeType":"YulFunctionCall","src":"16871:33:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"16856:6:25"},"nodeType":"YulFunctionCall","src":"16856:49:25"},"nodeType":"YulExpressionStatement","src":"16856:49:25"},{"nodeType":"YulAssignment","src":"16922:24:25","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"16936:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"16944:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16932:3:25"},"nodeType":"YulFunctionCall","src":"16932:14:25"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"16922:6:25"}]},{"nodeType":"YulAssignment","src":"16963:33:25","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"16980:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"16991:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16976:3:25"},"nodeType":"YulFunctionCall","src":"16976:20:25"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"16963:9:25"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"16792:1:25"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"16795:7:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16789:2:25"},"nodeType":"YulFunctionCall","src":"16789:14:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"16804:21:25","statements":[{"nodeType":"YulAssignment","src":"16806:17:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"16815:1:25"},{"kind":"number","nodeType":"YulLiteral","src":"16818:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16811:3:25"},"nodeType":"YulFunctionCall","src":"16811:12:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"16806:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"16785:3:25","statements":[]},"src":"16781:229:25"},{"body":{"nodeType":"YulBlock","src":"17055:127:25","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"17080:6:25"},{"arguments":[{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"17109:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"17114:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17105:3:25"},"nodeType":"YulFunctionCall","src":"17105:19:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"17092:12:25"},"nodeType":"YulFunctionCall","src":"17092:33:25"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17143:1:25","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"17146:3:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"17139:3:25"},"nodeType":"YulFunctionCall","src":"17139:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"17152:3:25","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17135:3:25"},"nodeType":"YulFunctionCall","src":"17135:21:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17162:1:25","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"17158:3:25"},"nodeType":"YulFunctionCall","src":"17158:6:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"17131:3:25"},"nodeType":"YulFunctionCall","src":"17131:34:25"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"17127:3:25"},"nodeType":"YulFunctionCall","src":"17127:39:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17088:3:25"},"nodeType":"YulFunctionCall","src":"17088:79:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"17073:6:25"},"nodeType":"YulFunctionCall","src":"17073:95:25"},"nodeType":"YulExpressionStatement","src":"17073:95:25"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"17029:7:25"},{"name":"len","nodeType":"YulIdentifier","src":"17038:3:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"17026:2:25"},"nodeType":"YulFunctionCall","src":"17026:16:25"},"nodeType":"YulIf","src":"17023:159:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"17202:4:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17216:1:25","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"17219:3:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"17212:3:25"},"nodeType":"YulFunctionCall","src":"17212:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"17225:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17208:3:25"},"nodeType":"YulFunctionCall","src":"17208:19:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"17195:6:25"},"nodeType":"YulFunctionCall","src":"17195:33:25"},"nodeType":"YulExpressionStatement","src":"17195:33:25"}]},"nodeType":"YulCase","src":"16622:616:25","value":{"kind":"number","nodeType":"YulLiteral","src":"16627:1:25","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"17255:235:25","statements":[{"nodeType":"YulVariableDeclaration","src":"17269:14:25","value":{"kind":"number","nodeType":"YulLiteral","src":"17282:1:25","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"17273:5:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"17315:74:25","statements":[{"nodeType":"YulAssignment","src":"17333:42:25","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"17359:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"17364:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17355:3:25"},"nodeType":"YulFunctionCall","src":"17355:19:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"17342:12:25"},"nodeType":"YulFunctionCall","src":"17342:33:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"17333:5:25"}]}]},"condition":{"name":"len","nodeType":"YulIdentifier","src":"17299:3:25"},"nodeType":"YulIf","src":"17296:93:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"17409:4:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17468:5:25"},{"name":"len","nodeType":"YulIdentifier","src":"17475:3:25"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"17415:52:25"},"nodeType":"YulFunctionCall","src":"17415:64:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"17402:6:25"},"nodeType":"YulFunctionCall","src":"17402:78:25"},"nodeType":"YulExpressionStatement","src":"17402:78:25"}]},"nodeType":"YulCase","src":"17247:243:25","value":"default"}],"expression":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"16605:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"16610:2:25","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16602:2:25"},"nodeType":"YulFunctionCall","src":"16602:11:25"},"nodeType":"YulSwitch","src":"16595:895:25"}]},"name":"copy_byte_array_to_storage_from_t_string_calldata_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"16373:4:25","type":""},{"name":"src","nodeType":"YulTypedName","src":"16379:3:25","type":""},{"name":"len","nodeType":"YulTypedName","src":"16384:3:25","type":""}],"src":"16290:1206:25"},{"body":{"nodeType":"YulBlock","src":"17632:259:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17649:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"17660:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17642:6:25"},"nodeType":"YulFunctionCall","src":"17642:21:25"},"nodeType":"YulExpressionStatement","src":"17642:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17683:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"17694:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17679:3:25"},"nodeType":"YulFunctionCall","src":"17679:18:25"},{"name":"value1","nodeType":"YulIdentifier","src":"17699:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17672:6:25"},"nodeType":"YulFunctionCall","src":"17672:34:25"},"nodeType":"YulExpressionStatement","src":"17672:34:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17732:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"17743:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17728:3:25"},"nodeType":"YulFunctionCall","src":"17728:18:25"},{"name":"value0","nodeType":"YulIdentifier","src":"17748:6:25"},{"name":"value1","nodeType":"YulIdentifier","src":"17756:6:25"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"17715:12:25"},"nodeType":"YulFunctionCall","src":"17715:48:25"},"nodeType":"YulExpressionStatement","src":"17715:48:25"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17787:9:25"},{"name":"value1","nodeType":"YulIdentifier","src":"17798:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17783:3:25"},"nodeType":"YulFunctionCall","src":"17783:22:25"},{"kind":"number","nodeType":"YulLiteral","src":"17807:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17779:3:25"},"nodeType":"YulFunctionCall","src":"17779:31:25"},{"kind":"number","nodeType":"YulLiteral","src":"17812:1:25","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17772:6:25"},"nodeType":"YulFunctionCall","src":"17772:42:25"},"nodeType":"YulExpressionStatement","src":"17772:42:25"},{"nodeType":"YulAssignment","src":"17823:62:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17839:9:25"},{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17858:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"17866:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17854:3:25"},"nodeType":"YulFunctionCall","src":"17854:15:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17875:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"17871:3:25"},"nodeType":"YulFunctionCall","src":"17871:7:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17850:3:25"},"nodeType":"YulFunctionCall","src":"17850:29:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17835:3:25"},"nodeType":"YulFunctionCall","src":"17835:45:25"},{"kind":"number","nodeType":"YulLiteral","src":"17882:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17831:3:25"},"nodeType":"YulFunctionCall","src":"17831:54:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17823:4:25"}]}]},"name":"abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17593:9:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17604:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17612:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17623:4:25","type":""}],"src":"17501:390:25"},{"body":{"nodeType":"YulBlock","src":"18070:223:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18087:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"18098:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18080:6:25"},"nodeType":"YulFunctionCall","src":"18080:21:25"},"nodeType":"YulExpressionStatement","src":"18080:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18121:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"18132:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18117:3:25"},"nodeType":"YulFunctionCall","src":"18117:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"18137:2:25","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18110:6:25"},"nodeType":"YulFunctionCall","src":"18110:30:25"},"nodeType":"YulExpressionStatement","src":"18110:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18160:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"18171:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18156:3:25"},"nodeType":"YulFunctionCall","src":"18156:18:25"},{"hexValue":"43657274696669636174657320617265206e6f6e2d7472616e7366657261626c","kind":"string","nodeType":"YulLiteral","src":"18176:34:25","type":"","value":"Certificates are non-transferabl"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18149:6:25"},"nodeType":"YulFunctionCall","src":"18149:62:25"},"nodeType":"YulExpressionStatement","src":"18149:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18231:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"18242:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18227:3:25"},"nodeType":"YulFunctionCall","src":"18227:18:25"},{"hexValue":"65","kind":"string","nodeType":"YulLiteral","src":"18247:3:25","type":"","value":"e"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18220:6:25"},"nodeType":"YulFunctionCall","src":"18220:31:25"},"nodeType":"YulExpressionStatement","src":"18220:31:25"},{"nodeType":"YulAssignment","src":"18260:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18272:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"18283:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18268:3:25"},"nodeType":"YulFunctionCall","src":"18268:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18260:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_3054708b0a11b38511bc7d353b1f656d5fdd977e39d245846af7029381d44603__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18047:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18061:4:25","type":""}],"src":"17896:397:25"},{"body":{"nodeType":"YulBlock","src":"18501:286:25","statements":[{"nodeType":"YulVariableDeclaration","src":"18511:29:25","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18529:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"18534:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"18525:3:25"},"nodeType":"YulFunctionCall","src":"18525:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"18538:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18521:3:25"},"nodeType":"YulFunctionCall","src":"18521:19:25"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"18515:2:25","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18556:9:25"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18571:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"18579:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18567:3:25"},"nodeType":"YulFunctionCall","src":"18567:15:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18549:6:25"},"nodeType":"YulFunctionCall","src":"18549:34:25"},"nodeType":"YulExpressionStatement","src":"18549:34:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18603:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"18614:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18599:3:25"},"nodeType":"YulFunctionCall","src":"18599:18:25"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"18623:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"18631:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18619:3:25"},"nodeType":"YulFunctionCall","src":"18619:15:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18592:6:25"},"nodeType":"YulFunctionCall","src":"18592:43:25"},"nodeType":"YulExpressionStatement","src":"18592:43:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18655:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"18666:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18651:3:25"},"nodeType":"YulFunctionCall","src":"18651:18:25"},{"name":"value2","nodeType":"YulIdentifier","src":"18671:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18644:6:25"},"nodeType":"YulFunctionCall","src":"18644:34:25"},"nodeType":"YulExpressionStatement","src":"18644:34:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18698:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"18709:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18694:3:25"},"nodeType":"YulFunctionCall","src":"18694:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"18714:3:25","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18687:6:25"},"nodeType":"YulFunctionCall","src":"18687:31:25"},"nodeType":"YulExpressionStatement","src":"18687:31:25"},{"nodeType":"YulAssignment","src":"18727:54:25","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"18753:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18765:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"18776:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18761:3:25"},"nodeType":"YulFunctionCall","src":"18761:19:25"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"18735:17:25"},"nodeType":"YulFunctionCall","src":"18735:46:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18727:4:25"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18446:9:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"18457:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"18465:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"18473:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18481:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18492:4:25","type":""}],"src":"18298:489:25"},{"body":{"nodeType":"YulBlock","src":"18872:169:25","statements":[{"body":{"nodeType":"YulBlock","src":"18918:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18927:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18930:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18920:6:25"},"nodeType":"YulFunctionCall","src":"18920:12:25"},"nodeType":"YulExpressionStatement","src":"18920:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"18893:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"18902:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18889:3:25"},"nodeType":"YulFunctionCall","src":"18889:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"18914:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"18885:3:25"},"nodeType":"YulFunctionCall","src":"18885:32:25"},"nodeType":"YulIf","src":"18882:52:25"},{"nodeType":"YulVariableDeclaration","src":"18943:29:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18962:9:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18956:5:25"},"nodeType":"YulFunctionCall","src":"18956:16:25"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"18947:5:25","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19005:5:25"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"18981:23:25"},"nodeType":"YulFunctionCall","src":"18981:30:25"},"nodeType":"YulExpressionStatement","src":"18981:30:25"},{"nodeType":"YulAssignment","src":"19020:15:25","value":{"name":"value","nodeType":"YulIdentifier","src":"19030:5:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"19020:6:25"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18838:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"18849:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"18861:6:25","type":""}],"src":"18792:249:25"},{"body":{"nodeType":"YulBlock","src":"19233:309:25","statements":[{"nodeType":"YulVariableDeclaration","src":"19243:27:25","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19263:6:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19257:5:25"},"nodeType":"YulFunctionCall","src":"19257:13:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"19247:6:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19318:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"19326:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19314:3:25"},"nodeType":"YulFunctionCall","src":"19314:17:25"},{"name":"pos","nodeType":"YulIdentifier","src":"19333:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"19338:6:25"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"19279:34:25"},"nodeType":"YulFunctionCall","src":"19279:66:25"},"nodeType":"YulExpressionStatement","src":"19279:66:25"},{"nodeType":"YulVariableDeclaration","src":"19354:29:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19371:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"19376:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19367:3:25"},"nodeType":"YulFunctionCall","src":"19367:16:25"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"19358:5:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"19392:29:25","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"19414:6:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19408:5:25"},"nodeType":"YulFunctionCall","src":"19408:13:25"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"19396:8:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"19469:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"19477:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19465:3:25"},"nodeType":"YulFunctionCall","src":"19465:17:25"},{"name":"end_1","nodeType":"YulIdentifier","src":"19484:5:25"},{"name":"length_1","nodeType":"YulIdentifier","src":"19491:8:25"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"19430:34:25"},"nodeType":"YulFunctionCall","src":"19430:70:25"},"nodeType":"YulExpressionStatement","src":"19430:70:25"},{"nodeType":"YulAssignment","src":"19509:27:25","value":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"19520:5:25"},{"name":"length_1","nodeType":"YulIdentifier","src":"19527:8:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19516:3:25"},"nodeType":"YulFunctionCall","src":"19516:20:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19509:3:25"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19201:3:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19206:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19214:6:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19225:3:25","type":""}],"src":"19046:496:25"},{"body":{"nodeType":"YulBlock","src":"19676:145:25","statements":[{"nodeType":"YulAssignment","src":"19686:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19698:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"19709:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19694:3:25"},"nodeType":"YulFunctionCall","src":"19694:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19686:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19728:9:25"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19743:6:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19759:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"19764:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"19755:3:25"},"nodeType":"YulFunctionCall","src":"19755:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"19768:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19751:3:25"},"nodeType":"YulFunctionCall","src":"19751:19:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19739:3:25"},"nodeType":"YulFunctionCall","src":"19739:32:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19721:6:25"},"nodeType":"YulFunctionCall","src":"19721:51:25"},"nodeType":"YulExpressionStatement","src":"19721:51:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19792:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"19803:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19788:3:25"},"nodeType":"YulFunctionCall","src":"19788:18:25"},{"name":"value1","nodeType":"YulIdentifier","src":"19808:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19781:6:25"},"nodeType":"YulFunctionCall","src":"19781:34:25"},"nodeType":"YulExpressionStatement","src":"19781:34:25"}]},"name":"abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19637:9:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19648:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19656:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19667:4:25","type":""}],"src":"19547:274:25"},{"body":{"nodeType":"YulBlock","src":"19955:145:25","statements":[{"nodeType":"YulAssignment","src":"19965:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19977:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"19988:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19973:3:25"},"nodeType":"YulFunctionCall","src":"19973:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19965:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20007:9:25"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"20022:6:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20038:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"20043:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"20034:3:25"},"nodeType":"YulFunctionCall","src":"20034:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"20047:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20030:3:25"},"nodeType":"YulFunctionCall","src":"20030:19:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"20018:3:25"},"nodeType":"YulFunctionCall","src":"20018:32:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20000:6:25"},"nodeType":"YulFunctionCall","src":"20000:51:25"},"nodeType":"YulExpressionStatement","src":"20000:51:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20071:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"20082:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20067:3:25"},"nodeType":"YulFunctionCall","src":"20067:18:25"},{"name":"value1","nodeType":"YulIdentifier","src":"20087:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20060:6:25"},"nodeType":"YulFunctionCall","src":"20060:34:25"},"nodeType":"YulExpressionStatement","src":"20060:34:25"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19916:9:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19927:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19935:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19946:4:25","type":""}],"src":"19826:274:25"},{"body":{"nodeType":"YulBlock","src":"20137:95:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20154:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20161:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"20166:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"20157:3:25"},"nodeType":"YulFunctionCall","src":"20157:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20147:6:25"},"nodeType":"YulFunctionCall","src":"20147:31:25"},"nodeType":"YulExpressionStatement","src":"20147:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20194:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"20197:4:25","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20187:6:25"},"nodeType":"YulFunctionCall","src":"20187:15:25"},"nodeType":"YulExpressionStatement","src":"20187:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20218:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20221:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20211:6:25"},"nodeType":"YulFunctionCall","src":"20211:15:25"},"nodeType":"YulExpressionStatement","src":"20211:15:25"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"20105:127:25"}]},"contents":"{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_available_length_string(src, length, end) -> array\n    {\n        let _1 := 0xffffffffffffffff\n        if gt(length, _1) { panic_error_0x41() }\n        let _2 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(length, 31), _2), 63), _2))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        array := memPtr\n        mstore(memPtr, length)\n        if gt(add(src, length), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), src, length)\n        mstore(add(add(memPtr, length), 0x20), 0)\n    }\n    function abi_decode_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        array := abi_decode_available_length_string(add(offset, 0x20), calldataload(offset), end)\n    }\n    function abi_decode_tuple_t_addresst_string_memory_ptrt_string_memory_ptrt_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value1 := abi_decode_string(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 64))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value2 := abi_decode_string(add(headStart, offset_1), dataEnd)\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_uint256_t_bool_t_uint256__to_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_uint256_t_bool_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 192)\n        let tail_1 := abi_encode_string(value0, add(headStart, 192))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_string(value1, tail_1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), iszero(iszero(value4)))\n        mstore(add(headStart, 160), value5)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bytes32t_addresst_address(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := abi_decode_address(add(headStart, 64))\n    }\n    function abi_decode_array_bytes32_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_array$_t_address_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_string_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(0, 0) }\n        value1 := add(_2, 32)\n        value2 := length\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function abi_encode_tuple_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool__to_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 224)\n        mstore(headStart, iszero(iszero(value0)))\n        mstore(add(headStart, 32), iszero(iszero(value1)))\n        mstore(add(headStart, 64), iszero(iszero(value2)))\n        mstore(add(headStart, 96), iszero(iszero(value3)))\n        mstore(add(headStart, 128), iszero(iszero(value4)))\n        mstore(add(headStart, 160), iszero(iszero(value5)))\n        mstore(add(headStart, 192), iszero(iszero(value6)))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        value3 := abi_decode_available_length_string(add(_1, 32), calldataload(_1), dataEnd)\n    }\n    function abi_encode_tuple_t_struct$_Certification_$5302_memory_ptr__to_t_struct$_Certification_$5302_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let memberValue0 := mload(value0)\n        mstore(add(headStart, 32), 0xc0)\n        let tail_1 := abi_encode_string(memberValue0, add(headStart, 224))\n        let memberValue0_1 := mload(add(value0, 32))\n        mstore(add(headStart, 64), add(sub(tail_1, headStart), not(31)))\n        let tail_2 := abi_encode_string(memberValue0_1, tail_1)\n        mstore(add(headStart, 96), mload(add(value0, 64)))\n        mstore(add(headStart, 128), mload(add(value0, 96)))\n        mstore(add(headStart, 160), iszero(iszero(mload(add(value0, 128)))))\n        mstore(add(headStart, 0xc0), mload(add(value0, 160)))\n        tail := tail_2\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_uint256__to_t_string_memory_ptr_t_string_memory_ptr_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 96)\n        let tail_1 := abi_encode_string(value0, add(headStart, 96))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_string(value1, tail_1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_packed_t_array$_t_address_$dyn_calldata_ptr__to_t_array$_t_address_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let pos_1 := pos\n        pos_1 := pos\n        let srcPtr := value0\n        let i := 0\n        for { } lt(i, value1) { i := add(i, 1) }\n        {\n            mstore(pos_1, and(abi_decode_address(srcPtr), sub(shl(160, 1), 1)))\n            let _1 := 0x20\n            pos_1 := add(pos_1, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos_1\n    }\n    function abi_encode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr__to_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), value1)\n        if gt(value1, sub(shl(251, 1), 1)) { revert(0, 0) }\n        let length := shl(5, value1)\n        calldatacopy(add(headStart, 64), value0, length)\n        tail := add(add(headStart, length), 64)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function copy_byte_array_to_storage_from_t_string_calldata_ptr_to_t_string_storage(slot, src, len)\n    {\n        if gt(len, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), len)\n        let srcOffset := 0\n        switch gt(len, 31)\n        case 1 {\n            let loopEnd := and(len, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := srcOffset\n            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n            {\n                sstore(dstPtr, calldataload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 0x20)\n            }\n            if lt(loopEnd, len)\n            {\n                sstore(dstPtr, and(calldataload(add(src, srcOffset)), not(shr(and(shl(3, len), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, len), 1))\n        }\n        default {\n            let value := 0\n            if len\n            {\n                value := calldataload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, len))\n        }\n    }\n    function abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), value1)\n        calldatacopy(add(headStart, 64), value0, value1)\n        mstore(add(add(headStart, value1), 64), 0)\n        tail := add(add(headStart, and(add(value1, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_3054708b0a11b38511bc7d353b1f656d5fdd977e39d245846af7029381d44603__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"Certificates are non-transferabl\")\n        mstore(add(headStart, 96), \"e\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n}","id":25,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106103af5760003560e01c80637780e9c1116101f4578063abaa536f1161011a578063c87b56dd116100ad578063e55b4f931161007c578063e55b4f93146108ab578063e985e9c5146108be578063f53f5e1e146108d1578063fc810286146108e457600080fd5b8063c87b56dd14610850578063c88cc6ac14610863578063d547741f14610883578063e3a3c5221461089657600080fd5b8063b88d4fde116100e9578063b88d4fde14610810578063b8ad415e14610823578063bd7ca7ba1461082a578063c395fcb31461083d57600080fd5b8063abaa536f14610776578063b0614db314610789578063b5617ef7146107dd578063b83cc3b3146107fd57600080fd5b806390f201be11610192578063a217fddf11610161578063a217fddf14610735578063a22cb4651461073d578063a5ce413a14610750578063aa52617c1461076357600080fd5b806390f201be146106f457806391d148541461070757806395d89b411461071a578063a1f341631461072257600080fd5b80637e5effa4116101ce5780637e5effa414610692578063808b0557146106a55780638850845f146106b857806389a912e0146106cb57600080fd5b80637780e9c114610657578063784fee0e1461066a5780637bff09751461067f57600080fd5b80633ca7c02a116102d95780635cb87d261161027757806368dd17a51161024657806368dd17a51461060557806369d0b5171461061a5780636e1d616e1461062f57806370a082311461064457600080fd5b80635cb87d26146105b957806360376528146105cc57806361462f0e146105df5780636352211e146105f257600080fd5b806342966c68116102b357806342966c681461056d578063456f19fc1461058057806352f84b721461059357806357c03371146105a657600080fd5b80633ca7c02a146105325780633e2515181461054757806342842e0e1461055a57600080fd5b8063236e092911610351578063261191b711610320578063261191b7146104e6578063261e85cd146104f95780632f2ff15d1461050c57806336568abe1461051f57600080fd5b8063236e09291461046a57806323b872dd1461048f578063248a9ca3146104a257806325d5e87e146104d357600080fd5b8063081812fc1161038d578063081812fc14610406578063095ea7b3146104315780630bcce45b146104445780631e223b2a1461045757600080fd5b806301ffc9a7146103b45780630443cd2a146103dc57806306fdde03146103f1575b600080fd5b6103c76103c2366004612990565b6108f7565b60405190151581526020015b60405180910390f35b6103ef6103ea3660046129c9565b610908565b005b6103f961098a565b6040516103d39190612a34565b610419610414366004612a47565b610a1c565b6040516001600160a01b0390911681526020016103d3565b6103ef61043f366004612a60565b610a45565b6103ef610452366004612b36565b610a54565b6103ef6104653660046129c9565b610c20565b61047d6104783660046129c9565b610ca2565b6040516103d396959493929190612bb2565b6103ef61049d366004612bfd565b610ded565b6104c56104b0366004612a47565b60009081526020819052604090206001015490565b6040519081526020016103d3565b6103ef6104e13660046129c9565b610e7d565b6103ef6104f43660046129c9565b610eff565b6103c76105073660046129c9565b610f81565b6103ef61051a366004612c39565b610fb8565b6103ef61052d366004612c39565b610fdd565b6104c560008051602061334d83398151915281565b6103ef6105553660046129c9565b611015565b6103ef610568366004612bfd565b611097565b6103ef61057b366004612a47565b6110b2565b6103ef61058e3660046129c9565b6110be565b6103c76105a13660046129c9565b611140565b6103ef6105b43660046129c9565b61115a565b6103ef6105c7366004612c65565b6111dc565b6103ef6105da3660046129c9565b61126f565b6103ef6105ed366004612ced565b6112f1565b610419610600366004612a47565b611404565b6104c560008051602061330d83398151915281565b6104c560008051602061336d83398151915281565b6104c56000805160206133ad83398151915281565b6104c56106523660046129c9565b61140f565b6103ef610665366004612a47565b611457565b6104c560008051602061338d83398151915281565b6103c761068d3660046129c9565b611544565b6103ef6106a03660046129c9565b61155e565b6103ef6106b33660046129c9565b6115e0565b6103c76106c63660046129c9565b6116bf565b6104196106d9366004612a47565b6000908152600a60205260409020546001600160a01b031690565b6103ef610702366004612d59565b6116d9565b6103c7610715366004612c39565b6117ff565b6103f9611828565b6103c76107303660046129c9565b611837565b6104c5600081565b6103ef61074b366004612ddc565b611851565b6103c761075e366004612a47565b61185c565b6103ef6107713660046129c9565b61187d565b6103c76107843660046129c9565b6118ff565b61079c6107973660046129c9565b611919565b60408051971515885295151560208801529315159486019490945290151560608501521515608084015290151560a0830152151560c082015260e0016103d3565b6104c56107eb3660046129c9565b60016020526000908152604090205481565b6103ef61080b3660046129c9565b6119d2565b6103ef61081e366004612e18565b611ada565b60186104c5565b6103ef6108383660046129c9565b611af1565b6103c761084b3660046129c9565b611b3c565b6103f961085e366004612a47565b611b48565b6108766108713660046129c9565b611b53565b6040516103d39190612e94565b6103ef610891366004612c39565b611d08565b6104c56000805160206133cd83398151915281565b6103ef6108b93660046129c9565b611d2d565b6103c76108cc366004612f04565b611daf565b6103c76108df3660046129c9565b611ddd565b6103ef6108f23660046129c9565b611df7565b600061090282611e79565b92915050565b806001600160a01b0381166109305760405163e6c4247b60e01b815260040160405180910390fd5b600061093b81611e9e565b61095360008051602061334d83398151915284611d08565b6040516001600160a01b0384169060008051602061334d833981519152906000805160206133ed83398151915290600090a3505050565b60606002805461099990612f2e565b80601f01602080910402602001604051908101604052809291908181526020018280546109c590612f2e565b8015610a125780601f106109e757610100808354040283529160200191610a12565b820191906000526020600020905b8154815290600101906020018083116109f557829003601f168201915b5050505050905090565b6000610a2782611ea8565b506000828152600660205260409020546001600160a01b0316610902565b610a50828233611ee1565b5050565b836001600160a01b038116610a7c5760405163e6c4247b60e01b815260040160405180910390fd5b60008051602061336d833981519152610a9481611e9e565b6001600160a01b03861660009081526009602052604090206004015460ff1615610ad1576040516369136c8160e01b815260040160405180910390fd5b600b805460009182610ae283612f7e565b919050559050610af28782611eee565b610afc8186611f08565b6040518060c001604052808781526020018681526020014281526020018542610b259190612f97565b8152600160208083019190915260409182018490526001600160a01b038a16600090815260099091522081518190610b5d9082612ff8565b5060208201516001820190610b729082612ff8565b50604082810151600283015560608301516003830155608083015160048301805460ff191691151591909117905560a0909201516005909101556000828152600a6020522080546001600160a01b0319166001600160a01b0389169081179091557f56a1f3fa57a4cc6a9be7aaa185ba31c140ea18678a1b45900756c2e5e1ba8dd28787610c008842612f97565b604051610c0f939291906130b8565b60405180910390a250505050505050565b806001600160a01b038116610c485760405163e6c4247b60e01b815260040160405180910390fd5b6000610c5381611e9e565b610c6b60008051602061330d83398151915284610fb8565b6040516001600160a01b0384169060008051602061330d8339815191529060008051602061332d83398151915290600090a3505050565b600960205260009081526040902080548190610cbd90612f2e565b80601f0160208091040260200160405190810160405280929190818152602001828054610ce990612f2e565b8015610d365780601f10610d0b57610100808354040283529160200191610d36565b820191906000526020600020905b815481529060010190602001808311610d1957829003601f168201915b505050505090806001018054610d4b90612f2e565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7790612f2e565b8015610dc45780601f10610d9957610100808354040283529160200191610dc4565b820191906000526020600020905b815481529060010190602001808311610da757829003601f168201915b5050506002840154600385015460048601546005909601549495919490935060ff909116915086565b6001600160a01b038216610e1c57604051633250574960e11b8152600060048201526024015b60405180910390fd5b6000610e29838333611f58565b9050836001600160a01b0316816001600160a01b031614610e77576040516364283d7b60e01b81526001600160a01b0380861660048301526024820184905282166044820152606401610e13565b50505050565b610e8681611ddd565b8015610ea957506001600160a01b03811660009081526001602052604090205442115b15610efc57610ec660008051602061334d83398151915282611fdd565b506040516001600160a01b038216907fa6f32bcbc7de829d50e1c9cbc1c5b4dafb4c7a0b8329757aee62a9b394d71c3b90600090a25b50565b806001600160a01b038116610f275760405163e6c4247b60e01b815260040160405180910390fd5b6000610f3281611e9e565b610f4a60008051602061338d83398151915284611d08565b6040516001600160a01b0384169060008051602061338d833981519152906000805160206133ed83398151915290600090a3505050565b6001600160a01b0381166000908152600960205260408120600481015460ff168015610fb1575080600301544211155b9392505050565b600082815260208190526040902060010154610fd381611e9e565b610e778383612050565b6001600160a01b03811633146110065760405163334bd91960e11b815260040160405180910390fd5b6110108282611fdd565b505050565b806001600160a01b03811661103d5760405163e6c4247b60e01b815260040160405180910390fd5b600061104881611e9e565b6110606000805160206133ad83398151915284611d08565b6040516001600160a01b038416906000805160206133ad833981519152906000805160206133ed83398151915290600090a3505050565b61101083838360405180602001604052806000815250611ada565b610a5060008233611f58565b806001600160a01b0381166110e65760405163e6c4247b60e01b815260040160405180910390fd5b60006110f181611e9e565b6111096000805160206133cd83398151915284610fb8565b6040516001600160a01b038416906000805160206133cd8339815191529060008051602061332d83398151915290600090a3505050565b600061090260008051602061338d833981519152836117ff565b806001600160a01b0381166111825760405163e6c4247b60e01b815260040160405180910390fd5b600061118d81611e9e565b6111a560008051602061334d83398151915284610fb8565b6040516001600160a01b0384169060008051602061334d8339815191529060008051602061332d83398151915290600090a3505050565b60006111e781611e9e565b6111f184846117ff565b61120e576040516366783c9d60e11b815260040160405180910390fd5b6112188484611fdd565b506112238483612050565b50604080516001600160a01b0380861682528416602082015285917f274dd4127a55dcb6f6c12ed38fec5007d965d2afffa8b0bc75c3dc8f3f6b2224910160405180910390a250505050565b806001600160a01b0381166112975760405163e6c4247b60e01b815260040160405180910390fd5b60006112a281611e9e565b6112ba60008051602061336d83398151915284610fb8565b6040516001600160a01b0384169060008051602061336d8339815191529060008051602061332d83398151915290600090a3505050565b60006112fc81611e9e565b831580611307575081155b1561132557604051637d6eaf9360e01b815260040160405180910390fd5b838214611345576040516390a2f79360e01b815260040160405180910390fd5b60005b848110156113ab57611398868683818110611365576113656130ee565b9050602002013585858481811061137e5761137e6130ee565b905060200201602081019061139391906129c9565b612050565b50806113a381612f7e565b915050611348565b5082826040516113bc929190613104565b60405180910390207ff4d52c90739c68c4e82d39cfbeee6b6613784bf9b28d2cdb3a02203799cf060686866040516113f5929190613144565b60405180910390a25050505050565b600061090282611ea8565b60006001600160a01b03821661143b576040516322718ad960e21b815260006004820152602401610e13565b506001600160a01b031660009081526005602052604090205490565b61146033611ddd565b1561147e5760405163510a583360e01b815260040160405180910390fd5b801561149d57604051630729422160e41b815260040160405180910390fd5b60188111156114bf57604051630729422160e41b815260040160405180910390fd5b60006114cd82610e1061317d565b90506114e760008051602061334d83398151915233612050565b506114f28142612f97565b33600081815260016020526040908190209290925590517fc526cdae63c288ea4504281fe29b0ae3352c8a9ccae61eba8c21cd25a949e0f1906115389085815260200190565b60405180910390a25050565b600061090260008051602061336d833981519152836117ff565b806001600160a01b0381166115865760405163e6c4247b60e01b815260040160405180910390fd5b600061159181611e9e565b6115a960008051602061330d83398151915284611d08565b6040516001600160a01b0384169060008051602061330d833981519152906000805160206133ed83398151915290600090a3505050565b6001600160a01b0381166000908152600960205260409020600481015460ff1661161d576040516308a2227760e11b815260040160405180910390fd5b8060030154421015611642576040516360ad99d960e11b815260040160405180910390fd5b60058101541561167b5761165981600501546110b2565b60058101546000908152600a6020526040902080546001600160a01b03191690555b60048101805460ff191690556040516001600160a01b038316907fddbc5d6ff23c8e382806a60af54f0614adddcbcb9b76b279a95a318414d7635b90600090a25050565b60006109026000805160206133cd833981519152836117ff565b826001600160a01b0381166117015760405163e6c4247b60e01b815260040160405180910390fd5b60008051602061336d83398151915261171981611e9e565b6001600160a01b0385166000908152600960205260409020600481015460ff16611756576040516308a2227760e11b815260040160405180910390fd5b6005810154156117a4576117a4816005015486868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611f0892505050565b600181016117b3858783613194565b50856001600160a01b03167f4a9038a38263b38736ddc315c982f0f7ba9999b67c66a31efc9e1efb3677f4c286866040516117ef929190613254565b60405180910390a2505050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60606003805461099990612f2e565b600061090260008051602061330d833981519152836117ff565b610a503383836120da565b6000818152600a60205260408120546001600160a01b0316610fb181610f81565b806001600160a01b0381166118a55760405163e6c4247b60e01b815260040160405180910390fd5b60006118b081611e9e565b6118c860008051602061338d83398151915284610fb8565b6040516001600160a01b0384169060008051602061338d8339815191529060008051602061332d83398151915290600090a3505050565b60006109026000805160206133ad833981519152836117ff565b600080808080808061192b81896117ff565b61194360008051602061336d8339815191528a6117ff565b61195b6000805160206133cd8339815191528b6117ff565b6119736000805160206133ad8339815191528c6117ff565b61198b60008051602061330d8339815191528d6117ff565b6119a360008051602061338d8339815191528e6117ff565b6119bb60008051602061334d8339815191528f6117ff565b959e949d50929b5090995097509550909350915050565b806001600160a01b0381166119fa5760405163e6c4247b60e01b815260040160405180910390fd5b60008051602061336d833981519152611a1281611e9e565b6000611a1d81611e9e565b6001600160a01b0384166000908152600960205260409020600481015460ff16611a5a576040516308a2227760e11b815260040160405180910390fd5b600581015415611a9357611a7181600501546110b2565b60058101546000908152600a6020526040902080546001600160a01b03191690555b60048101805460ff191690556040516001600160a01b038616907fddbc5d6ff23c8e382806a60af54f0614adddcbcb9b76b279a95a318414d7635b90600090a25050505050565b611ae5848484610ded565b610e7784848484612179565b806001600160a01b038116611b195760405163e6c4247b60e01b815260040160405180910390fd5b6000611b2481611e9e565b6110106000805160206133cd83398151915284611d08565b600061090281836117ff565b6060610902826122a2565b611b8e6040518060c0016040528060608152602001606081526020016000815260200160008152602001600015158152602001600081525090565b6001600160a01b03821660009081526009602052604090819020815160c08101909252805482908290611bc090612f2e565b80601f0160208091040260200160405190810160405280929190818152602001828054611bec90612f2e565b8015611c395780601f10611c0e57610100808354040283529160200191611c39565b820191906000526020600020905b815481529060010190602001808311611c1c57829003601f168201915b50505050508152602001600182018054611c5290612f2e565b80601f0160208091040260200160405190810160405280929190818152602001828054611c7e90612f2e565b8015611ccb5780601f10611ca057610100808354040283529160200191611ccb565b820191906000526020600020905b815481529060010190602001808311611cae57829003601f168201915b50505091835250506002820154602082015260038201546040820152600482015460ff161515606082015260059091015460809091015292915050565b600082815260208190526040902060010154611d2381611e9e565b610e778383611fdd565b806001600160a01b038116611d555760405163e6c4247b60e01b815260040160405180910390fd5b6000611d6081611e9e565b611d786000805160206133ad83398151915284610fb8565b6040516001600160a01b038416906000805160206133ad8339815191529060008051602061332d83398151915290600090a3505050565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b600061090260008051602061334d833981519152836117ff565b806001600160a01b038116611e1f5760405163e6c4247b60e01b815260040160405180910390fd5b6000611e2a81611e9e565b611e4260008051602061336d83398151915284611d08565b6040516001600160a01b0384169060008051602061336d833981519152906000805160206133ed83398151915290600090a3505050565b60006001600160e01b03198216632483248360e11b14806109025750610902826123ab565b610efc81336123eb565b6000818152600460205260408120546001600160a01b03168061090257604051637e27328960e01b815260048101849052602401610e13565b6110108383836001612424565b610a5082826040518060200160405280600081525061252a565b6000828152600860205260409020611f208282612ff8565b506040518281527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce79060200160405180910390a15050565b60006001600160a01b03821615611fca576001600160a01b03841615611fca5760405162461bcd60e51b815260206004820152602160248201527f43657274696669636174657320617265206e6f6e2d7472616e7366657261626c6044820152606560f81b6064820152608401610e13565b611fd5848484612541565b949350505050565b6000611fe983836117ff565b15612048576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610902565b506000610902565b600061205c83836117ff565b612048576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556120923390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610902565b6001600160a01b03821661210c57604051630b61174360e31b81526001600160a01b0383166004820152602401610e13565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b15610e7757604051630a85bd0160e11b81526001600160a01b0384169063150b7a02906121bb903390889087908790600401613283565b6020604051808303816000875af19250505080156121f6575060408051601f3d908101601f191682019092526121f3918101906132c0565b60015b61225f573d808015612224576040519150601f19603f3d011682016040523d82523d6000602084013e612229565b606091505b50805160000361225757604051633250574960e11b81526001600160a01b0385166004820152602401610e13565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b1461229b57604051633250574960e11b81526001600160a01b0385166004820152602401610e13565b5050505050565b60606122ad82611ea8565b50600082815260086020526040812080546122c790612f2e565b80601f01602080910402602001604051908101604052809291908181526020018280546122f390612f2e565b80156123405780601f1061231557610100808354040283529160200191612340565b820191906000526020600020905b81548152906001019060200180831161232357829003601f168201915b50505050509050600061235e60408051602081019091526000815290565b90508051600003612370575092915050565b8151156123a257808260405160200161238a9291906132dd565b60405160208183030381529060405292505050919050565b611fd58461263a565b60006001600160e01b031982166380ac58cd60e01b14806123dc57506001600160e01b03198216635b5e139f60e01b145b806109025750610902826126ae565b6123f582826117ff565b610a505760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610e13565b808061243857506001600160a01b03821615155b156124fa57600061244884611ea8565b90506001600160a01b038316158015906124745750826001600160a01b0316816001600160a01b031614155b801561248757506124858184611daf565b155b156124b05760405163a9fbf51f60e01b81526001600160a01b0384166004820152602401610e13565b81156124f85783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260066020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b61253483836126e3565b6110106000848484612179565b6000828152600460205260408120546001600160a01b039081169083161561256e5761256e818486612748565b6001600160a01b038116156125ac5761258b600085600080612424565b6001600160a01b038116600090815260056020526040902080546000190190555b6001600160a01b038516156125db576001600160a01b0385166000908152600560205260409020805460010190555b60008481526004602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b606061264582611ea8565b50600061265d60408051602081019091526000815290565b9050600081511161267d5760405180602001604052806000815250610fb1565b80612687846127ac565b6040516020016126989291906132dd565b6040516020818303038152906040529392505050565b60006001600160e01b03198216637965db0b60e01b148061090257506301ffc9a760e01b6001600160e01b0319831614610902565b6001600160a01b03821661270d57604051633250574960e11b815260006004820152602401610e13565b600061271b83836000611f58565b90506001600160a01b03811615611010576040516339e3563760e11b815260006004820152602401610e13565b61275383838361283f565b611010576001600160a01b03831661278157604051637e27328960e01b815260048101829052602401610e13565b60405163177e802f60e01b81526001600160a01b038316600482015260248101829052604401610e13565b606060006127b9836128a2565b600101905060008167ffffffffffffffff8111156127d9576127d9612a8a565b6040519080825280601f01601f191660200182016040528015612803576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461280d57509392505050565b60006001600160a01b03831615801590611fd55750826001600160a01b0316846001600160a01b0316148061287957506128798484611daf565b80611fd55750506000908152600660205260409020546001600160a01b03908116911614919050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106128e15772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061290d576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061292b57662386f26fc10000830492506010015b6305f5e1008310612943576305f5e100830492506008015b612710831061295757612710830492506004015b60648310612969576064830492506002015b600a83106109025760010192915050565b6001600160e01b031981168114610efc57600080fd5b6000602082840312156129a257600080fd5b8135610fb18161297a565b80356001600160a01b03811681146129c457600080fd5b919050565b6000602082840312156129db57600080fd5b610fb1826129ad565b60005b838110156129ff5781810151838201526020016129e7565b50506000910152565b60008151808452612a208160208601602086016129e4565b601f01601f19169290920160200192915050565b602081526000610fb16020830184612a08565b600060208284031215612a5957600080fd5b5035919050565b60008060408385031215612a7357600080fd5b612a7c836129ad565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115612abb57612abb612a8a565b604051601f8501601f19908116603f01168101908282118183101715612ae357612ae3612a8a565b81604052809350858152868686011115612afc57600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112612b2757600080fd5b610fb183833560208501612aa0565b60008060008060808587031215612b4c57600080fd5b612b55856129ad565b9350602085013567ffffffffffffffff80821115612b7257600080fd5b612b7e88838901612b16565b94506040870135915080821115612b9457600080fd5b50612ba187828801612b16565b949793965093946060013593505050565b60c081526000612bc560c0830189612a08565b8281036020840152612bd78189612a08565b604084019790975250506060810193909352901515608083015260a09091015292915050565b600080600060608486031215612c1257600080fd5b612c1b846129ad565b9250612c29602085016129ad565b9150604084013590509250925092565b60008060408385031215612c4c57600080fd5b82359150612c5c602084016129ad565b90509250929050565b600080600060608486031215612c7a57600080fd5b83359250612c8a602085016129ad565b9150612c98604085016129ad565b90509250925092565b60008083601f840112612cb357600080fd5b50813567ffffffffffffffff811115612ccb57600080fd5b6020830191508360208260051b8501011115612ce657600080fd5b9250929050565b60008060008060408587031215612d0357600080fd5b843567ffffffffffffffff80821115612d1b57600080fd5b612d2788838901612ca1565b90965094506020870135915080821115612d4057600080fd5b50612d4d87828801612ca1565b95989497509550505050565b600080600060408486031215612d6e57600080fd5b612d77846129ad565b9250602084013567ffffffffffffffff80821115612d9457600080fd5b818601915086601f830112612da857600080fd5b813581811115612db757600080fd5b876020828501011115612dc957600080fd5b6020830194508093505050509250925092565b60008060408385031215612def57600080fd5b612df8836129ad565b915060208301358015158114612e0d57600080fd5b809150509250929050565b60008060008060808587031215612e2e57600080fd5b612e37856129ad565b9350612e45602086016129ad565b925060408501359150606085013567ffffffffffffffff811115612e6857600080fd5b8501601f81018713612e7957600080fd5b612e8887823560208401612aa0565b91505092959194509250565b602081526000825160c06020840152612eb060e0840182612a08565b90506020840151601f19848303016040850152612ecd8282612a08565b91505060408401516060840152606084015160808401526080840151151560a084015260a084015160c08401528091505092915050565b60008060408385031215612f1757600080fd5b612f20836129ad565b9150612c5c602084016129ad565b600181811c90821680612f4257607f821691505b602082108103612f6257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600060018201612f9057612f90612f68565b5060010190565b8082018082111561090257610902612f68565b601f82111561101057600081815260208120601f850160051c81016020861015612fd15750805b601f850160051c820191505b81811015612ff057828155600101612fdd565b505050505050565b815167ffffffffffffffff81111561301257613012612a8a565b613026816130208454612f2e565b84612faa565b602080601f83116001811461305b57600084156130435750858301515b600019600386901b1c1916600185901b178555612ff0565b600085815260208120601f198616915b8281101561308a5788860151825594840194600190910190840161306b565b50858210156130a85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6060815260006130cb6060830186612a08565b82810360208401526130dd8186612a08565b915050826040830152949350505050565b634e487b7160e01b600052603260045260246000fd5b60008184825b85811015613139576001600160a01b03613123836129ad565b168352602092830192919091019060010161310a565b509095945050505050565b6020808252810182905260006001600160fb1b0383111561316457600080fd5b8260051b80856040850137919091016040019392505050565b808202811582820484141761090257610902612f68565b67ffffffffffffffff8311156131ac576131ac612a8a565b6131c0836131ba8354612f2e565b83612faa565b6000601f8411600181146131f457600085156131dc5750838201355b600019600387901b1c1916600186901b17835561229b565b600083815260209020601f19861690835b828110156132255786850135825560209485019460019092019101613205565b50868210156132425760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906132b690830184612a08565b9695505050505050565b6000602082840312156132d257600080fd5b8151610fb18161297a565b600083516132ef8184602088016129e4565b8351908301906133038183602088016129e4565b0194935050505056fe920994fc3bfe282f3f20cdccf1b7c5e46c63d963e822d98efff90abd41c12e212ae6a113c0ed5b78a53413ffbb7679881f11145ccfba4fb92e863dfcd5a1d2f3ee244ef9da0b2f89a74b208ea9fe1a639ebdf634027d9e1f092b58c39954fa37c41a06b26ced3a23b7bf835a0918ade784f4055ded86d18305f528f47a726052aa0ec51d0bf03ce5511c9ffc9de2b423d73d1faacd808abf2ac89ccea8a3ecf259a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f506fa31d7a92d9fa9a8898ac41d86ee9b13863605a361c85ae5d6010d5de4f280155aaafb6329a2098580462df33ec4b7441b19729b9601c5fc17ae1cf99a8a52a26469706673582212207bee0f297e881bceac35b2347794371a3c52e792d1864202b4b3584b52f9d14764736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3AF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7780E9C1 GT PUSH2 0x1F4 JUMPI DUP1 PUSH4 0xABAA536F GT PUSH2 0x11A JUMPI DUP1 PUSH4 0xC87B56DD GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xE55B4F93 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xE55B4F93 EQ PUSH2 0x8AB JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x8BE JUMPI DUP1 PUSH4 0xF53F5E1E EQ PUSH2 0x8D1 JUMPI DUP1 PUSH4 0xFC810286 EQ PUSH2 0x8E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x850 JUMPI DUP1 PUSH4 0xC88CC6AC EQ PUSH2 0x863 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x883 JUMPI DUP1 PUSH4 0xE3A3C522 EQ PUSH2 0x896 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB88D4FDE GT PUSH2 0xE9 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x810 JUMPI DUP1 PUSH4 0xB8AD415E EQ PUSH2 0x823 JUMPI DUP1 PUSH4 0xBD7CA7BA EQ PUSH2 0x82A JUMPI DUP1 PUSH4 0xC395FCB3 EQ PUSH2 0x83D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xABAA536F EQ PUSH2 0x776 JUMPI DUP1 PUSH4 0xB0614DB3 EQ PUSH2 0x789 JUMPI DUP1 PUSH4 0xB5617EF7 EQ PUSH2 0x7DD JUMPI DUP1 PUSH4 0xB83CC3B3 EQ PUSH2 0x7FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x90F201BE GT PUSH2 0x192 JUMPI DUP1 PUSH4 0xA217FDDF GT PUSH2 0x161 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x735 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x73D JUMPI DUP1 PUSH4 0xA5CE413A EQ PUSH2 0x750 JUMPI DUP1 PUSH4 0xAA52617C EQ PUSH2 0x763 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x90F201BE EQ PUSH2 0x6F4 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x707 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x71A JUMPI DUP1 PUSH4 0xA1F34163 EQ PUSH2 0x722 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7E5EFFA4 GT PUSH2 0x1CE JUMPI DUP1 PUSH4 0x7E5EFFA4 EQ PUSH2 0x692 JUMPI DUP1 PUSH4 0x808B0557 EQ PUSH2 0x6A5 JUMPI DUP1 PUSH4 0x8850845F EQ PUSH2 0x6B8 JUMPI DUP1 PUSH4 0x89A912E0 EQ PUSH2 0x6CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7780E9C1 EQ PUSH2 0x657 JUMPI DUP1 PUSH4 0x784FEE0E EQ PUSH2 0x66A JUMPI DUP1 PUSH4 0x7BFF0975 EQ PUSH2 0x67F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3CA7C02A GT PUSH2 0x2D9 JUMPI DUP1 PUSH4 0x5CB87D26 GT PUSH2 0x277 JUMPI DUP1 PUSH4 0x68DD17A5 GT PUSH2 0x246 JUMPI DUP1 PUSH4 0x68DD17A5 EQ PUSH2 0x605 JUMPI DUP1 PUSH4 0x69D0B517 EQ PUSH2 0x61A JUMPI DUP1 PUSH4 0x6E1D616E EQ PUSH2 0x62F JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x644 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5CB87D26 EQ PUSH2 0x5B9 JUMPI DUP1 PUSH4 0x60376528 EQ PUSH2 0x5CC JUMPI DUP1 PUSH4 0x61462F0E EQ PUSH2 0x5DF JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x5F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x42966C68 GT PUSH2 0x2B3 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x56D JUMPI DUP1 PUSH4 0x456F19FC EQ PUSH2 0x580 JUMPI DUP1 PUSH4 0x52F84B72 EQ PUSH2 0x593 JUMPI DUP1 PUSH4 0x57C03371 EQ PUSH2 0x5A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3CA7C02A EQ PUSH2 0x532 JUMPI DUP1 PUSH4 0x3E251518 EQ PUSH2 0x547 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x55A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x236E0929 GT PUSH2 0x351 JUMPI DUP1 PUSH4 0x261191B7 GT PUSH2 0x320 JUMPI DUP1 PUSH4 0x261191B7 EQ PUSH2 0x4E6 JUMPI DUP1 PUSH4 0x261E85CD EQ PUSH2 0x4F9 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x50C JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x51F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x236E0929 EQ PUSH2 0x46A JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x48F JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x4A2 JUMPI DUP1 PUSH4 0x25D5E87E EQ PUSH2 0x4D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x81812FC GT PUSH2 0x38D JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x406 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x431 JUMPI DUP1 PUSH4 0xBCCE45B EQ PUSH2 0x444 JUMPI DUP1 PUSH4 0x1E223B2A EQ PUSH2 0x457 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x3B4 JUMPI DUP1 PUSH4 0x443CD2A EQ PUSH2 0x3DC JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x3F1 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3C7 PUSH2 0x3C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x2990 JUMP JUMPDEST PUSH2 0x8F7 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3EF PUSH2 0x3EA CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x908 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3F9 PUSH2 0x98A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3D3 SWAP2 SWAP1 PUSH2 0x2A34 JUMP JUMPDEST PUSH2 0x419 PUSH2 0x414 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A47 JUMP JUMPDEST PUSH2 0xA1C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3D3 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x43F CALLDATASIZE PUSH1 0x4 PUSH2 0x2A60 JUMP JUMPDEST PUSH2 0xA45 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x452 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B36 JUMP JUMPDEST PUSH2 0xA54 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x465 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0xC20 JUMP JUMPDEST PUSH2 0x47D PUSH2 0x478 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0xCA2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3D3 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2BB2 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x49D CALLDATASIZE PUSH1 0x4 PUSH2 0x2BFD JUMP JUMPDEST PUSH2 0xDED JUMP JUMPDEST PUSH2 0x4C5 PUSH2 0x4B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A47 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3D3 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x4E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0xE7D JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x4F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0xEFF JUMP JUMPDEST PUSH2 0x3C7 PUSH2 0x507 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0xF81 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x51A CALLDATASIZE PUSH1 0x4 PUSH2 0x2C39 JUMP JUMPDEST PUSH2 0xFB8 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x52D CALLDATASIZE PUSH1 0x4 PUSH2 0x2C39 JUMP JUMPDEST PUSH2 0xFDD JUMP JUMPDEST PUSH2 0x4C5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x334D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x555 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x1015 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x568 CALLDATASIZE PUSH1 0x4 PUSH2 0x2BFD JUMP JUMPDEST PUSH2 0x1097 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x57B CALLDATASIZE PUSH1 0x4 PUSH2 0x2A47 JUMP JUMPDEST PUSH2 0x10B2 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x58E CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x10BE JUMP JUMPDEST PUSH2 0x3C7 PUSH2 0x5A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x1140 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x5B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x115A JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x5C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2C65 JUMP JUMPDEST PUSH2 0x11DC JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x5DA CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x126F JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x5ED CALLDATASIZE PUSH1 0x4 PUSH2 0x2CED JUMP JUMPDEST PUSH2 0x12F1 JUMP JUMPDEST PUSH2 0x419 PUSH2 0x600 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A47 JUMP JUMPDEST PUSH2 0x1404 JUMP JUMPDEST PUSH2 0x4C5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x330D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x4C5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x336D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x4C5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33AD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x4C5 PUSH2 0x652 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x140F JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x665 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A47 JUMP JUMPDEST PUSH2 0x1457 JUMP JUMPDEST PUSH2 0x4C5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x338D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x3C7 PUSH2 0x68D CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x1544 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x6A0 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x155E JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x6B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x15E0 JUMP JUMPDEST PUSH2 0x3C7 PUSH2 0x6C6 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x16BF JUMP JUMPDEST PUSH2 0x419 PUSH2 0x6D9 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A47 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x702 CALLDATASIZE PUSH1 0x4 PUSH2 0x2D59 JUMP JUMPDEST PUSH2 0x16D9 JUMP JUMPDEST PUSH2 0x3C7 PUSH2 0x715 CALLDATASIZE PUSH1 0x4 PUSH2 0x2C39 JUMP JUMPDEST PUSH2 0x17FF JUMP JUMPDEST PUSH2 0x3F9 PUSH2 0x1828 JUMP JUMPDEST PUSH2 0x3C7 PUSH2 0x730 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x1837 JUMP JUMPDEST PUSH2 0x4C5 PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x74B CALLDATASIZE PUSH1 0x4 PUSH2 0x2DDC JUMP JUMPDEST PUSH2 0x1851 JUMP JUMPDEST PUSH2 0x3C7 PUSH2 0x75E CALLDATASIZE PUSH1 0x4 PUSH2 0x2A47 JUMP JUMPDEST PUSH2 0x185C JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x771 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x187D JUMP JUMPDEST PUSH2 0x3C7 PUSH2 0x784 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x18FF JUMP JUMPDEST PUSH2 0x79C PUSH2 0x797 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x1919 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP8 ISZERO ISZERO DUP9 MSTORE SWAP6 ISZERO ISZERO PUSH1 0x20 DUP9 ADD MSTORE SWAP4 ISZERO ISZERO SWAP5 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x60 DUP6 ADD MSTORE ISZERO ISZERO PUSH1 0x80 DUP5 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0xA0 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD PUSH2 0x3D3 JUMP JUMPDEST PUSH2 0x4C5 PUSH2 0x7EB CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x80B CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x19D2 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x81E CALLDATASIZE PUSH1 0x4 PUSH2 0x2E18 JUMP JUMPDEST PUSH2 0x1ADA JUMP JUMPDEST PUSH1 0x18 PUSH2 0x4C5 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x838 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x1AF1 JUMP JUMPDEST PUSH2 0x3C7 PUSH2 0x84B CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x1B3C JUMP JUMPDEST PUSH2 0x3F9 PUSH2 0x85E CALLDATASIZE PUSH1 0x4 PUSH2 0x2A47 JUMP JUMPDEST PUSH2 0x1B48 JUMP JUMPDEST PUSH2 0x876 PUSH2 0x871 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x1B53 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3D3 SWAP2 SWAP1 PUSH2 0x2E94 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x891 CALLDATASIZE PUSH1 0x4 PUSH2 0x2C39 JUMP JUMPDEST PUSH2 0x1D08 JUMP JUMPDEST PUSH2 0x4C5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33CD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x8B9 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x1D2D JUMP JUMPDEST PUSH2 0x3C7 PUSH2 0x8CC CALLDATASIZE PUSH1 0x4 PUSH2 0x2F04 JUMP JUMPDEST PUSH2 0x1DAF JUMP JUMPDEST PUSH2 0x3C7 PUSH2 0x8DF CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x1DDD JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x8F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x1DF7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x902 DUP3 PUSH2 0x1E79 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x930 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x93B DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x953 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x334D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x334D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33ED DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x999 SWAP1 PUSH2 0x2F2E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x9C5 SWAP1 PUSH2 0x2F2E JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA12 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x9E7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA12 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x9F5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA27 DUP3 PUSH2 0x1EA8 JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x902 JUMP JUMPDEST PUSH2 0xA50 DUP3 DUP3 CALLER PUSH2 0x1EE1 JUMP JUMPDEST POP POP JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xA7C JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x336D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xA94 DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xAD1 JUMPI PUSH1 0x40 MLOAD PUSH4 0x69136C81 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH1 0x0 SWAP2 DUP3 PUSH2 0xAE2 DUP4 PUSH2 0x2F7E JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE SWAP1 POP PUSH2 0xAF2 DUP8 DUP3 PUSH2 0x1EEE JUMP JUMPDEST PUSH2 0xAFC DUP2 DUP7 PUSH2 0x1F08 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE PUSH1 0x20 ADD DUP6 TIMESTAMP PUSH2 0xB25 SWAP2 SWAP1 PUSH2 0x2F97 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 SWAP1 SWAP2 MSTORE KECCAK256 DUP2 MLOAD DUP2 SWAP1 PUSH2 0xB5D SWAP1 DUP3 PUSH2 0x2FF8 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP3 ADD SWAP1 PUSH2 0xB72 SWAP1 DUP3 PUSH2 0x2FF8 JUMP JUMPDEST POP PUSH1 0x40 DUP3 DUP2 ADD MLOAD PUSH1 0x2 DUP4 ADD SSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x3 DUP4 ADD SSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x4 DUP4 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0xA0 SWAP1 SWAP3 ADD MLOAD PUSH1 0x5 SWAP1 SWAP2 ADD SSTORE PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH32 0x56A1F3FA57A4CC6A9BE7AAA185BA31C140EA18678A1B45900756C2E5E1BA8DD2 DUP8 DUP8 PUSH2 0xC00 DUP9 TIMESTAMP PUSH2 0x2F97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC0F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x30B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xC48 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xC53 DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0xC6B PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x330D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xFB8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x330D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x332D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP2 SWAP1 PUSH2 0xCBD SWAP1 PUSH2 0x2F2E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xCE9 SWAP1 PUSH2 0x2F2E JUMP JUMPDEST DUP1 ISZERO PUSH2 0xD36 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xD0B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xD36 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xD19 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xD4B SWAP1 PUSH2 0x2F2E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xD77 SWAP1 PUSH2 0x2F2E JUMP JUMPDEST DUP1 ISZERO PUSH2 0xDC4 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xD99 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xDC4 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xDA7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP PUSH1 0x2 DUP5 ADD SLOAD PUSH1 0x3 DUP6 ADD SLOAD PUSH1 0x4 DUP7 ADD SLOAD PUSH1 0x5 SWAP1 SWAP7 ADD SLOAD SWAP5 SWAP6 SWAP2 SWAP5 SWAP1 SWAP4 POP PUSH1 0xFF SWAP1 SWAP2 AND SWAP2 POP DUP7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xE1C JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xE29 DUP4 DUP4 CALLER PUSH2 0x1F58 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xE77 JUMPI PUSH1 0x40 MLOAD PUSH4 0x64283D7B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE13 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0xE86 DUP2 PUSH2 0x1DDD JUMP JUMPDEST DUP1 ISZERO PUSH2 0xEA9 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD TIMESTAMP GT JUMPDEST ISZERO PUSH2 0xEFC JUMPI PUSH2 0xEC6 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x334D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH2 0x1FDD JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xA6F32BCBC7DE829D50E1C9CBC1C5B4DAFB4C7A0B8329757AEE62A9B394D71C3B SWAP1 PUSH1 0x0 SWAP1 LOG2 JUMPDEST POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xF27 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xF32 DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0xF4A PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x338D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x338D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33ED DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0xFF AND DUP1 ISZERO PUSH2 0xFB1 JUMPI POP DUP1 PUSH1 0x3 ADD SLOAD TIMESTAMP GT ISZERO JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xFD3 DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0xE77 DUP4 DUP4 PUSH2 0x2050 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x1006 JUMPI PUSH1 0x40 MLOAD PUSH4 0x334BD919 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1010 DUP3 DUP3 PUSH2 0x1FDD JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x103D JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1048 DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x1060 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33AD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33AD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33ED DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1010 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1ADA JUMP JUMPDEST PUSH2 0xA50 PUSH1 0x0 DUP3 CALLER PUSH2 0x1F58 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x10E6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x10F1 DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x1109 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33CD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xFB8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33CD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x332D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x902 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x338D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0x17FF JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1182 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x118D DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x11A5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x334D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xFB8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x334D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x332D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11E7 DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x11F1 DUP5 DUP5 PUSH2 0x17FF JUMP JUMPDEST PUSH2 0x120E JUMPI PUSH1 0x40 MLOAD PUSH4 0x66783C9D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1218 DUP5 DUP5 PUSH2 0x1FDD JUMP JUMPDEST POP PUSH2 0x1223 DUP5 DUP4 PUSH2 0x2050 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP6 SWAP2 PUSH32 0x274DD4127A55DCB6F6C12ED38FEC5007D965D2AFFFA8B0BC75C3DC8F3F6B2224 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1297 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x12A2 DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x12BA PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x336D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xFB8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x336D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x332D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12FC DUP2 PUSH2 0x1E9E JUMP JUMPDEST DUP4 ISZERO DUP1 PUSH2 0x1307 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x1325 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7D6EAF93 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP3 EQ PUSH2 0x1345 JUMPI PUSH1 0x40 MLOAD PUSH4 0x90A2F793 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x13AB JUMPI PUSH2 0x1398 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x1365 JUMPI PUSH2 0x1365 PUSH2 0x30EE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x137E JUMPI PUSH2 0x137E PUSH2 0x30EE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1393 SWAP2 SWAP1 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x2050 JUMP JUMPDEST POP DUP1 PUSH2 0x13A3 DUP2 PUSH2 0x2F7E JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1348 JUMP JUMPDEST POP DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x13BC SWAP3 SWAP2 SWAP1 PUSH2 0x3104 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH32 0xF4D52C90739C68C4E82D39CFBEEE6B6613784BF9B28D2CDB3A02203799CF0606 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x13F5 SWAP3 SWAP2 SWAP1 PUSH2 0x3144 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x902 DUP3 PUSH2 0x1EA8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x143B JUMPI PUSH1 0x40 MLOAD PUSH4 0x22718AD9 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xE13 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1460 CALLER PUSH2 0x1DDD JUMP JUMPDEST ISZERO PUSH2 0x147E JUMPI PUSH1 0x40 MLOAD PUSH4 0x510A5833 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 ISZERO PUSH2 0x149D JUMPI PUSH1 0x40 MLOAD PUSH4 0x7294221 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x18 DUP2 GT ISZERO PUSH2 0x14BF JUMPI PUSH1 0x40 MLOAD PUSH4 0x7294221 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x14CD DUP3 PUSH2 0xE10 PUSH2 0x317D JUMP JUMPDEST SWAP1 POP PUSH2 0x14E7 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x334D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x2050 JUMP JUMPDEST POP PUSH2 0x14F2 DUP2 TIMESTAMP PUSH2 0x2F97 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 MLOAD PUSH32 0xC526CDAE63C288EA4504281FE29B0AE3352C8A9CCAE61EBA8C21CD25A949E0F1 SWAP1 PUSH2 0x1538 SWAP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x902 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x336D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0x17FF JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1586 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1591 DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x15A9 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x330D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x330D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33ED DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0xFF AND PUSH2 0x161D JUMPI PUSH1 0x40 MLOAD PUSH4 0x8A22277 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3 ADD SLOAD TIMESTAMP LT ISZERO PUSH2 0x1642 JUMPI PUSH1 0x40 MLOAD PUSH4 0x60AD99D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 DUP2 ADD SLOAD ISZERO PUSH2 0x167B JUMPI PUSH2 0x1659 DUP2 PUSH1 0x5 ADD SLOAD PUSH2 0x10B2 JUMP JUMPDEST PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMPDEST PUSH1 0x4 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0xDDBC5D6FF23C8E382806A60AF54F0614ADDDCBCB9B76B279A95A318414D7635B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x902 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33CD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0x17FF JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1701 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x336D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x1719 DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0xFF AND PUSH2 0x1756 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8A22277 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 DUP2 ADD SLOAD ISZERO PUSH2 0x17A4 JUMPI PUSH2 0x17A4 DUP2 PUSH1 0x5 ADD SLOAD DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x1F08 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 ADD PUSH2 0x17B3 DUP6 DUP8 DUP4 PUSH2 0x3194 JUMP JUMPDEST POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A9038A38263B38736DDC315C982F0F7BA9999B67C66A31EFC9E1EFB3677F4C2 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x17EF SWAP3 SWAP2 SWAP1 PUSH2 0x3254 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x999 SWAP1 PUSH2 0x2F2E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x902 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x330D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0x17FF JUMP JUMPDEST PUSH2 0xA50 CALLER DUP4 DUP4 PUSH2 0x20DA JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xFB1 DUP2 PUSH2 0xF81 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x18A5 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x18B0 DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x18C8 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x338D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xFB8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x338D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x332D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x902 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33AD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0x17FF JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x192B DUP2 DUP10 PUSH2 0x17FF JUMP JUMPDEST PUSH2 0x1943 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x336D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP11 PUSH2 0x17FF JUMP JUMPDEST PUSH2 0x195B PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33CD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP12 PUSH2 0x17FF JUMP JUMPDEST PUSH2 0x1973 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33AD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP13 PUSH2 0x17FF JUMP JUMPDEST PUSH2 0x198B PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x330D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP14 PUSH2 0x17FF JUMP JUMPDEST PUSH2 0x19A3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x338D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP15 PUSH2 0x17FF JUMP JUMPDEST PUSH2 0x19BB PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x334D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP16 PUSH2 0x17FF JUMP JUMPDEST SWAP6 SWAP15 SWAP5 SWAP14 POP SWAP3 SWAP12 POP SWAP1 SWAP10 POP SWAP8 POP SWAP6 POP SWAP1 SWAP4 POP SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x19FA JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x336D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x1A12 DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A1D DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0xFF AND PUSH2 0x1A5A JUMPI PUSH1 0x40 MLOAD PUSH4 0x8A22277 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 DUP2 ADD SLOAD ISZERO PUSH2 0x1A93 JUMPI PUSH2 0x1A71 DUP2 PUSH1 0x5 ADD SLOAD PUSH2 0x10B2 JUMP JUMPDEST PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMPDEST PUSH1 0x4 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH32 0xDDBC5D6FF23C8E382806A60AF54F0614ADDDCBCB9B76B279A95A318414D7635B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1AE5 DUP5 DUP5 DUP5 PUSH2 0xDED JUMP JUMPDEST PUSH2 0xE77 DUP5 DUP5 DUP5 DUP5 PUSH2 0x2179 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1B19 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1B24 DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x1010 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33CD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x902 DUP2 DUP4 PUSH2 0x17FF JUMP JUMPDEST PUSH1 0x60 PUSH2 0x902 DUP3 PUSH2 0x22A2 JUMP JUMPDEST PUSH2 0x1B8E PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP2 MLOAD PUSH1 0xC0 DUP2 ADD SWAP1 SWAP3 MSTORE DUP1 SLOAD DUP3 SWAP1 DUP3 SWAP1 PUSH2 0x1BC0 SWAP1 PUSH2 0x2F2E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1BEC SWAP1 PUSH2 0x2F2E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1C39 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1C0E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1C39 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1C1C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH2 0x1C52 SWAP1 PUSH2 0x2F2E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1C7E SWAP1 PUSH2 0x2F2E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1CCB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1CA0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1CCB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1CAE JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x5 SWAP1 SWAP2 ADD SLOAD PUSH1 0x80 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x1D23 DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0xE77 DUP4 DUP4 PUSH2 0x1FDD JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1D55 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1D60 DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x1D78 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33AD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xFB8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33AD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x332D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x902 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x334D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0x17FF JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1E1F JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1E2A DUP2 PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x1E42 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x336D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x336D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x33ED DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x24832483 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x902 JUMPI POP PUSH2 0x902 DUP3 PUSH2 0x23AB JUMP JUMPDEST PUSH2 0xEFC DUP2 CALLER PUSH2 0x23EB JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x902 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xE13 JUMP JUMPDEST PUSH2 0x1010 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x2424 JUMP JUMPDEST PUSH2 0xA50 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x252A JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x1F20 DUP3 DUP3 PUSH2 0x2FF8 JUMP JUMPDEST POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH32 0xF8E1A15ABA9398E019F0B49DF1A4FDE98EE17AE345CB5F6B5E2C27F5033E8CE7 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0x1FCA JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x1FCA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43657274696669636174657320617265206E6F6E2D7472616E7366657261626C PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x65 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xE13 JUMP JUMPDEST PUSH2 0x1FD5 DUP5 DUP5 DUP5 PUSH2 0x2541 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FE9 DUP4 DUP4 PUSH2 0x17FF JUMP JUMPDEST ISZERO PUSH2 0x2048 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP7 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x902 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x902 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x205C DUP4 DUP4 PUSH2 0x17FF JUMP JUMPDEST PUSH2 0x2048 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x2092 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x902 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x210C JUMPI PUSH1 0x40 MLOAD PUSH4 0xB611743 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xE13 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO PUSH2 0xE77 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x21BB SWAP1 CALLER SWAP1 DUP9 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x3283 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x21F6 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x21F3 SWAP2 DUP2 ADD SWAP1 PUSH2 0x32C0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x225F JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2224 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2229 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x2257 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xE13 JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ PUSH2 0x229B JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xE13 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x22AD DUP3 PUSH2 0x1EA8 JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0x22C7 SWAP1 PUSH2 0x2F2E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x22F3 SWAP1 PUSH2 0x2F2E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2340 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2315 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2340 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2323 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x235E PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x2370 JUMPI POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x23A2 JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x238A SWAP3 SWAP2 SWAP1 PUSH2 0x32DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1FD5 DUP5 PUSH2 0x263A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x23DC JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x902 JUMPI POP PUSH2 0x902 DUP3 PUSH2 0x26AE JUMP JUMPDEST PUSH2 0x23F5 DUP3 DUP3 PUSH2 0x17FF JUMP JUMPDEST PUSH2 0xA50 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE2517D3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xE13 JUMP JUMPDEST DUP1 DUP1 PUSH2 0x2438 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x24FA JUMPI PUSH1 0x0 PUSH2 0x2448 DUP5 PUSH2 0x1EA8 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x2474 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x2487 JUMPI POP PUSH2 0x2485 DUP2 DUP5 PUSH2 0x1DAF JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x24B0 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA9FBF51F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xE13 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x24F8 JUMPI DUP4 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2534 DUP4 DUP4 PUSH2 0x26E3 JUMP JUMPDEST PUSH2 0x1010 PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x2179 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP4 AND ISZERO PUSH2 0x256E JUMPI PUSH2 0x256E DUP2 DUP5 DUP7 PUSH2 0x2748 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x25AC JUMPI PUSH2 0x258B PUSH1 0x0 DUP6 PUSH1 0x0 DUP1 PUSH2 0x2424 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND ISZERO PUSH2 0x25DB JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP8 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2645 DUP3 PUSH2 0x1EA8 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x265D PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x267D JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xFB1 JUMP JUMPDEST DUP1 PUSH2 0x2687 DUP5 PUSH2 0x27AC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2698 SWAP3 SWAP2 SWAP1 PUSH2 0x32DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x902 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x902 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x270D JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xE13 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x271B DUP4 DUP4 PUSH1 0x0 PUSH2 0x1F58 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x1010 JUMPI PUSH1 0x40 MLOAD PUSH4 0x39E35637 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xE13 JUMP JUMPDEST PUSH2 0x2753 DUP4 DUP4 DUP4 PUSH2 0x283F JUMP JUMPDEST PUSH2 0x1010 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x2781 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xE13 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x177E802F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xE13 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x27B9 DUP4 PUSH2 0x28A2 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x27D9 JUMPI PUSH2 0x27D9 PUSH2 0x2A8A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2803 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x280D JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1FD5 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x2879 JUMPI POP PUSH2 0x2879 DUP5 DUP5 PUSH2 0x1DAF JUMP JUMPDEST DUP1 PUSH2 0x1FD5 JUMPI POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x28E1 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x290D JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x292B JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x2943 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x2957 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x2969 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x902 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xEFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x29A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xFB1 DUP2 PUSH2 0x297A JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x29C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x29DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFB1 DUP3 PUSH2 0x29AD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x29FF JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x29E7 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2A20 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x29E4 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xFB1 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2A08 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2A73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A7C DUP4 PUSH2 0x29AD JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP5 GT ISZERO PUSH2 0x2ABB JUMPI PUSH2 0x2ABB PUSH2 0x2A8A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP6 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x2AE3 JUMPI PUSH2 0x2AE3 PUSH2 0x2A8A JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP1 SWAP4 POP DUP6 DUP2 MSTORE DUP7 DUP7 DUP7 ADD GT ISZERO PUSH2 0x2AFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP8 DUP4 ADD ADD MSTORE POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2B27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFB1 DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH2 0x2AA0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2B4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2B55 DUP6 PUSH2 0x29AD JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2B72 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2B7E DUP9 DUP4 DUP10 ADD PUSH2 0x2B16 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2B94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BA1 DUP8 DUP3 DUP9 ADD PUSH2 0x2B16 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0xC0 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2BC5 PUSH1 0xC0 DUP4 ADD DUP10 PUSH2 0x2A08 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2BD7 DUP2 DUP10 PUSH2 0x2A08 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD SWAP8 SWAP1 SWAP8 MSTORE POP POP PUSH1 0x60 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2C12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C1B DUP5 PUSH2 0x29AD JUMP JUMPDEST SWAP3 POP PUSH2 0x2C29 PUSH1 0x20 DUP6 ADD PUSH2 0x29AD JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2C4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x2C5C PUSH1 0x20 DUP5 ADD PUSH2 0x29AD JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2C7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH2 0x2C8A PUSH1 0x20 DUP6 ADD PUSH2 0x29AD JUMP JUMPDEST SWAP2 POP PUSH2 0x2C98 PUSH1 0x40 DUP6 ADD PUSH2 0x29AD JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2CB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2CCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x2CE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2D03 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2D1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2D27 DUP9 DUP4 DUP10 ADD PUSH2 0x2CA1 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2D40 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D4D DUP8 DUP3 DUP9 ADD PUSH2 0x2CA1 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2D6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2D77 DUP5 PUSH2 0x29AD JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2D94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2DA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x2DB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2DC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2DEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2DF8 DUP4 PUSH2 0x29AD JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2E0D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2E2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2E37 DUP6 PUSH2 0x29AD JUMP JUMPDEST SWAP4 POP PUSH2 0x2E45 PUSH1 0x20 DUP7 ADD PUSH2 0x29AD JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2E68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x2E79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2E88 DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x2AA0 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH1 0xC0 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2EB0 PUSH1 0xE0 DUP5 ADD DUP3 PUSH2 0x2A08 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x1F NOT DUP5 DUP4 SUB ADD PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x2ECD DUP3 DUP3 PUSH2 0x2A08 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x80 DUP5 ADD MLOAD ISZERO ISZERO PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xA0 DUP5 ADD MLOAD PUSH1 0xC0 DUP5 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2F17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2F20 DUP4 PUSH2 0x29AD JUMP JUMPDEST SWAP2 POP PUSH2 0x2C5C PUSH1 0x20 DUP5 ADD PUSH2 0x29AD JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2F42 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2F62 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2F90 JUMPI PUSH2 0x2F90 PUSH2 0x2F68 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x902 JUMPI PUSH2 0x902 PUSH2 0x2F68 JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x1010 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x2FD1 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2FF0 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2FDD JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3012 JUMPI PUSH2 0x3012 PUSH2 0x2A8A JUMP JUMPDEST PUSH2 0x3026 DUP2 PUSH2 0x3020 DUP5 SLOAD PUSH2 0x2F2E JUMP JUMPDEST DUP5 PUSH2 0x2FAA JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x305B JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x3043 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x2FF0 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x308A JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x306B JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x30A8 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH2 0x30CB PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x2A08 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x30DD DUP2 DUP7 PUSH2 0x2A08 JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP3 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x3139 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x3123 DUP4 PUSH2 0x29AD JUMP JUMPDEST AND DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x310A JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFB SHL SUB DUP4 GT ISZERO PUSH2 0x3164 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP6 PUSH1 0x40 DUP6 ADD CALLDATACOPY SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x902 JUMPI PUSH2 0x902 PUSH2 0x2F68 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x31AC JUMPI PUSH2 0x31AC PUSH2 0x2A8A JUMP JUMPDEST PUSH2 0x31C0 DUP4 PUSH2 0x31BA DUP4 SLOAD PUSH2 0x2F2E JUMP JUMPDEST DUP4 PUSH2 0x2FAA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP5 GT PUSH1 0x1 DUP2 EQ PUSH2 0x31F4 JUMPI PUSH1 0x0 DUP6 ISZERO PUSH2 0x31DC JUMPI POP DUP4 DUP3 ADD CALLDATALOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP8 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP7 SWAP1 SHL OR DUP4 SSTORE PUSH2 0x229B JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP1 DUP4 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3225 JUMPI DUP7 DUP6 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x3205 JUMP JUMPDEST POP DUP7 DUP3 LT ISZERO PUSH2 0x3242 JUMPI PUSH1 0x0 NOT PUSH1 0xF8 DUP9 PUSH1 0x3 SHL AND SHR NOT DUP5 DUP8 ADD CALLDATALOAD AND DUP2 SSTORE JUMPDEST POP POP PUSH1 0x1 DUP6 PUSH1 0x1 SHL ADD DUP4 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH1 0x1F NOT AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x32B6 SWAP1 DUP4 ADD DUP5 PUSH2 0x2A08 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x32D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xFB1 DUP2 PUSH2 0x297A JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x32EF DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x29E4 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x3303 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x29E4 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP INVALID SWAP3 MULMOD SWAP5 0xFC EXTCODESIZE INVALID 0x28 0x2F EXTCODEHASH KECCAK256 0xCD 0xCC CALL 0xB7 0xC5 0xE4 PUSH13 0x63D963E822D98EFFF90ABD41C1 0x2E 0x21 0x2A 0xE6 LOG1 SGT 0xC0 0xED JUMPDEST PUSH25 0xA53413FFBB7679881F11145CCFBA4FB92E863DFCD5A1D2F3EE 0x24 0x4E 0xF9 0xDA SIGNEXTEND 0x2F DUP10 0xA7 0x4B KECCAK256 DUP15 0xA9 INVALID BYTE PUSH4 0x9EBDF634 MUL PUSH30 0x9E1F092B58C39954FA37C41A06B26CED3A23B7BF835A0918ADE784F4055D 0xED DUP7 0xD1 DUP4 SDIV CREATE2 0x28 DELEGATECALL PUSH27 0x726052AA0EC51D0BF03CE5511C9FFC9DE2B423D73D1FAACD808ABF 0x2A 0xC8 SWAP13 0xCE 0xA8 LOG3 0xEC CALLCODE MSIZE LOG1 0xC4 DUP15 PC CALLDATACOPY 0xAD PUSH27 0x7F3DCEDCBE129BF3249EC4FBF651FD4F5E2600EAD39FE2F506FA31 0xD7 0xA9 0x2D SWAP16 0xA9 0xA8 DUP10 DUP11 0xC4 SAR DUP7 0xEE SWAP12 SGT DUP7 CALLDATASIZE SDIV LOG3 PUSH2 0xC85A 0xE5 0xD6 ADD 0xD 0x5D 0xE4 CALLCODE DUP1 ISZERO GAS 0xAA 0xFB PUSH4 0x29A20985 DUP1 CHAINID 0x2D RETURN RETURNDATACOPY 0xC4 0xB7 PREVRANDAO SHL NOT PUSH19 0x9B9601C5FC17AE1CF99A8A52A2646970667358 0x22 SLT KECCAK256 PUSH28 0xEE0F297E881BCEAC35B2347794371A3C52E792D1864202B4B3584B52 0xF9 0xD1 SELFBALANCE PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMapi;:::-;;:::i;:::-;;;565:14:25;;558:22;540:41;;528:2;513:18;8472:220:18;;;;;;;;8812:211:20;;;;;;:::i;:::-;;:::i;:::-;;2365:89:6;;;:::i;:::-;;;;;;;:::i;3497:154::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;2066:32:25;;;2048:51;;2036:2;2021:18;3497:154:6;1902:203:25;3323:113:6;;;;;;:::i;:::-;;:::i;2215:1107:18:-;;;;;;:::i;:::-;;:::i;6440:216:20:-;;;;;;:::i;:::-;;:::i;1045:65:18:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;:::i;4143:578:6:-;;;;;;:::i;:::-;;:::i;3810:120:0:-;;;;;;:::i;:::-;3875:7;3901:12;;;;;;;;;;:22;;;;3810:120;;;;5406:25:25;;;5394:2;5379:18;3810:120:0;5260:177:25;2752:252:20;;;;;;:::i;:::-;;:::i;8553:249::-;;;;;;:::i;:::-;;:::i;6200:272:18:-;;;;;;:::i;:::-;;:::i;4226:136:0:-;;;;;;:::i;:::-;;:::i;5328:245::-;;;;;;:::i;:::-;;:::i;913:62:20:-;;-1:-1:-1;;;;;;;;;;;913:62:20;;8114:205;;;;;;:::i;:::-;;:::i;4787:132:6:-;;;;;;:::i;:::-;;:::i;561:314:9:-;;;;;;:::i;:::-;;:::i;6006:214:20:-;;;;;;:::i;:::-;;:::i;10012:145::-;;;;;;:::i;:::-;;:::i;6916:208::-;;;;;;:::i;:::-;;:::i;4150:355::-;;;;;;:::i;:::-;;:::i;5780:216::-;;;;;;:::i;:::-;;:::i;3272:548::-;;;;;;:::i;:::-;;:::i;2185:118:6:-;;;;;;:::i;:::-;;:::i;743:70:20:-;;-1:-1:-1;;;;;;;;;;;743:70:20;;510:74;;-1:-1:-1;;;;;;;;;;;510:74:20;;673:64;;-1:-1:-1;;;;;;;;;;;673:64:20;;1920:208:6;;;;;;:::i;:::-;;:::i;1723:643:20:-;;;;;;:::i;:::-;;:::i;819:88::-;;-1:-1:-1;;;;;;;;;;;819:88:20;;9486:126;;;;;;:::i;:::-;;:::i;8325:222::-;;;;;;:::i;:::-;;:::i;4799:623:18:-;;;;;;:::i;:::-;;:::i;9618:126:20:-;;;;;;:::i;:::-;;:::i;8049:158:18:-;;;;;;:::i;:::-;8143:7;8173:27;;;:18;:27;;;;;;-1:-1:-1;;;;;8173:27:18;;8049:158;7043:613;;;;;;:::i;:::-;;:::i;2854:136:0:-;;;;;;:::i;:::-;;:::i;2518:93:6:-;;;:::i;9878:128:20:-;;;;;;:::i;:::-;;:::i;2187:49:0:-;;2232:4;2187:49;;3718:144:6;;;;;;:::i;:::-;;:::i;6478:186:18:-;;;;;;:::i;:::-;;:::i;6667:243:20:-;;;;;;:::i;:::-;;:::i;9750:122::-;;;;;;:::i;:::-;;:::i;4552:617::-;;;;;;:::i;:::-;;:::i;:::-;;;;8687:14:25;;8680:22;8662:41;;8746:14;;8739:22;8734:2;8719:18;;8712:50;8805:14;;8798:22;8778:18;;;8771:50;;;;8864:14;;8857:22;8852:2;8837:18;;8830:50;8924:14;8917:22;8911:3;8896:19;;8889:51;8984:14;;8977:22;8971:3;8956:19;;8949:51;9044:14;9037:22;9031:3;9016:19;;9009:51;8649:3;8634:19;4552:617:20;8389:677:25;982:51:20;;;;;;:::i;:::-;;;;;;;;;;;;;;3933:613:18;;;;;;:::i;:::-;;:::i;4985:208:6:-;;;;;;:::i;:::-;;:::i;2413:92:20:-;2496:2;2413:92;;7947:161;;;;;;:::i;:::-;;:::i;9355:125::-;;;;;;:::i;:::-;;:::i;8277:189:18:-;;;;;;:::i;:::-;;:::i;7852:191::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;4642:138:0:-;;;;;;:::i;:::-;;:::i;590:77:20:-;;-1:-1:-1;;;;;;;;;;;590:77:20;;6226:208;;;;;;:::i;:::-;;:::i;3928:153:6:-;;;;;;:::i;:::-;;:::i;10167:120:20:-;;;;;;:::i;:::-;;:::i;7721:220::-;;;;;;:::i;:::-;;:::i;8472::18:-;8622:4;8649:36;8673:11;8649:23;:36::i;:::-;8642:43;8472:220;-1:-1:-1;;8472:220:18:o;8812:211:20:-;8881:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;8929:32:20::2;-1:-1:-1::0;;;;;;;;;;;8953:7:20::2;8929:10;:32::i;:::-;8976:40;::::0;-1:-1:-1;;;;;8976:40:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;951:24:20;-1:-1:-1;;;;;;;;;;;8976:40:20;;;::::2;1182:1:::1;8812:211:::0;;:::o;2365:89:6:-;2410:13;2442:5;2435:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2365:89;:::o;3497:154::-;3564:7;3583:22;3597:7;3583:13;:22::i;:::-;-1:-1:-1;6008:7:6;6034:24;;;:15;:24;;;;;;-1:-1:-1;;;;;6034:24:6;3623:21;5938:127;3323:113;3394:35;3403:2;3407:7;735:10:12;3394:8:6;:35::i;:::-;3323:113;;:::o;2215:1107:18:-;2419:17;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;-1:-1:-1;;;;;;;;;;;2464:16:0::1;2475:4;2464:10;:16::i;:::-;-1:-1:-1::0;;;;;2477:33:18;::::2;;::::0;;;:14:::2;:33;::::0;;;;:45:::2;;::::0;::::2;;2473:135;;;2545:52;;-1:-1:-1::0;;;2545:52:18::2;;;;;;;;;;;2473:135;2636:15;:17:::0;;2618:15:::2;::::0;;2636:17:::2;::::0;::::2;:::i;:::-;;;;;2618:35;;2663:37;2673:17;2692:7;2663:9;:37::i;:::-;2710:35;2723:7;2732:12;2710;:35::i;:::-;2792:277;;;;;;;;2840:9;2792:277;;;;2876:12;2792:277;;;;2915:15;2792:277;;;;2974:23;2956:15;:41;;;;:::i;:::-;2792:277:::0;;3024:4:::2;2792:277;::::0;;::::2;::::0;;;;;;;;;;;-1:-1:-1;;;;;2756:33:18;::::2;2792:277:::0;2756:33;;;:14:::2;:33:::0;;;;:313;;:33;;:313:::2;::::0;:33;:313:::2;:::i;:::-;-1:-1:-1::0;2756:313:18::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;;::::2;:::i;:::-;-1:-1:-1::0;2756:313:18::2;::::0;;::::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;;-1:-1:-1;;2756:313:18::2;::::0;::::2;;::::0;;;::::2;::::0;;::::2;::::0;;::::2;::::0;::::2;::::0;;::::2;::::0;-1:-1:-1;3080:27:18;;;:18:::2;:27;::::0;;:47;;-1:-1:-1;;;;;;3080:47:18::2;-1:-1:-1::0;;;;;3080:47:18;::::2;::::0;;::::2;::::0;;;3143:172:::2;3215:9:::0;3238:12;3264:41:::2;3282:23:::0;3264:15:::2;:41;:::i;:::-;3143:172;;;;;;;;:::i;:::-;;;;;;;;2463:859;1182:1:20::1;2215:1107:18::0;;;;;:::o;6440:216:20:-;6508:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;6555:35:20::2;-1:-1:-1::0;;;;;;;;;;;6582:7:20::2;6555:9;:35::i;:::-;6605:44;::::0;-1:-1:-1;;;;;6605:44:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;785:28:20;-1:-1:-1;;;;;;;;;;;6605:44:20;;;::::2;1182:1:::1;6440:216:::0;;:::o;1045:65:18:-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1045:65:18;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1045:65:18;;;;;-1:-1:-1;1045:65:18;:::o;4143:578:6:-;-1:-1:-1;;;;;4237:16:6;;4233:87;;4276:33;;-1:-1:-1;;;4276:33:6;;4306:1;4276:33;;;2048:51:25;2021:18;;4276:33:6;;;;;;;;4233:87;4538:21;4562:34;4570:2;4574:7;735:10:12;4562:7:6;:34::i;:::-;4538:58;;4627:4;-1:-1:-1;;;;;4610:21:6;:13;-1:-1:-1;;;;;4610:21:6;;4606:109;;4654:50;;-1:-1:-1;;;4654:50:6;;-1:-1:-1;;;;;14550:15:25;;;4654:50:6;;;14532:34:25;14582:18;;;14575:34;;;14645:15;;14625:18;;;14618:43;14467:18;;4654:50:6;14292:375:25;4606:109:6;4223:498;4143:578;;;:::o;2752:252:20:-;2816:22;2830:7;2816:13;:22::i;:::-;:69;;;;-1:-1:-1;;;;;;2842:25:20;;;;;;:16;:25;;;;;;2870:15;-1:-1:-1;2816:69:20;2812:186;;;2901:33;-1:-1:-1;;;;;;;;;;;2926:7:20;2901:11;:33::i;:::-;-1:-1:-1;2954:33:20;;-1:-1:-1;;;;;2954:33:20;;;;;;;;2812:186;2752:252;:::o;8553:249::-;8634:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;8682:45:20::2;-1:-1:-1::0;;;;;;;;;;;8719:7:20::2;8682:10;:45::i;:::-;8742:53;::::0;-1:-1:-1;;;;;8742:53:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;870:37:20;-1:-1:-1;;;;;;;;;;;8742:53:20;;;::::2;1182:1:::1;8553:249:::0;;:::o;6200:272:18:-;-1:-1:-1;;;;;6361:33:18;;6302:4;6361:33;;;:14;:33;;;;;6411:16;;;;;;:54;;;;;6450:4;:15;;;6431;:34;;6411:54;6404:61;6200:272;-1:-1:-1;;;6200:272:18:o;4226:136:0:-;3875:7;3901:12;;;;;;;;;;:22;;;2464:16;2475:4;2464:10;:16::i;:::-;4330:25:::1;4341:4;4347:7;4330:10;:25::i;5328:245::-:0;-1:-1:-1;;;;;5421:34:0;;735:10:12;5421:34:0;5417:102;;5478:30;;-1:-1:-1;;;5478:30:0;;;;;;;;;;;5417:102;5529:37;5541:4;5547:18;5529:11;:37::i;:::-;;5328:245;;:::o;8114:205:20:-;8184:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;8227:33:20::2;-1:-1:-1::0;;;;;;;;;;;8252:7:20::2;8227:10;:33::i;:::-;8271:41;::::0;-1:-1:-1;;;;;8271:41:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;712:25:20;-1:-1:-1;;;;;;;;;;;8271:41:20;;;::::2;1182:1:::1;8114:205:::0;;:::o;4787:132:6:-;4873:39;4890:4;4896:2;4900:7;4873:39;;;;;;;;;;;;:16;:39::i;561:314:9:-;826:42;842:1;846:7;735:10:12;4562:7:6;:34::i;6006:214:20:-;6074:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;6121:34:20::2;-1:-1:-1::0;;;;;;;;;;;6147:7:20::2;6121:9;:34::i;:::-;6170:43;::::0;-1:-1:-1;;;;;6170:43:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;631:36:20;-1:-1:-1;;;;;;;;;;;6170:43:20;;;::::2;1182:1:::1;6006:214:::0;;:::o;10012:145::-;10085:4;10108:42;-1:-1:-1;;;;;;;;;;;10142:7:20;10108;:42::i;6916:208::-;6984:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;7031:31:20::2;-1:-1:-1::0;;;;;;;;;;;7054:7:20::2;7031:9;:31::i;:::-;7077:40;::::0;-1:-1:-1;;;;;7077:40:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;951:24:20;-1:-1:-1;;;;;;;;;;;7077:40:20;;;::::2;1182:1:::1;6916:208:::0;;:::o;4150:355::-;2232:4:0;2464:16;2232:4;2464:10;:16::i;:::-;4297:19:20::1;4305:4;4311;4297:7;:19::i;:::-;4292:90;;4339:32;;-1:-1:-1::0;;;4339:32:20::1;;;;;;;;;;;4292:90;4391:23;4403:4;4409;4391:11;:23::i;:::-;;4424:20;4435:4;4441:2;4424:10;:20::i;:::-;-1:-1:-1::0;4460:38:20::1;::::0;;-1:-1:-1;;;;;14902:15:25;;;14884:34;;14954:15;;14949:2;14934:18;;14927:43;4483:4:20;;4460:38:::1;::::0;14819:18:25;4460:38:20::1;;;;;;;4150:355:::0;;;;:::o;5780:216::-;5847:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;5895:34:20::2;-1:-1:-1::0;;;;;;;;;;;5921:7:20::2;5895:9;:34::i;:::-;5945:43;::::0;-1:-1:-1;;;;;5945:43:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;551:33:20;-1:-1:-1;;;;;;;;;;;5945:43:20;;;::::2;1182:1:::1;5780:216:::0;;:::o;3272:548::-;2232:4:0;2464:16;2232:4;2464:10;:16::i;:::-;3425:17:20;;;:41:::1;;-1:-1:-1::0;3446:20:20;;3425:41:::1;3421:105;;;3489:26;;-1:-1:-1::0;;;3489:26:20::1;;;;;;;;;;;3421:105;3539:31:::0;;::::1;3535:104;;3593:35;;-1:-1:-1::0;;;3593:35:20::1;;;;;;;;;;;3535:104;3662:9;3657:101;3677:16:::0;;::::1;3657:101;;;3714:33;3725:5;;3731:1;3725:8;;;;;;;:::i;:::-;;;;;;;3735;;3744:1;3735:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;3714:10;:33::i;:::-;-1:-1:-1::0;3695:3:20;::::1;::::0;::::1;:::i;:::-;;;;3657:101;;;;3804:8;;3773:40;;;;;;;:::i;:::-;;;;;;;;;3797:5;;3773:40;;;;;;;:::i;:::-;;;;;;;;3272:548:::0;;;;;:::o;2185:118:6:-;2248:7;2274:22;2288:7;2274:13;:22::i;1920:208::-;1983:7;-1:-1:-1;;;;;2006:19:6;;2002:87;;2048:30;;-1:-1:-1;;;2048:30:6;;2075:1;2048:30;;;:51:25;2021:18;;2048:30:6;1902:203:25;2002:87:6;-1:-1:-1;;;;;;2105:16:6;;;;;:9;:16;;;;;;;1920:208::o;1723:643:20:-;1805:25;1819:10;1805:13;:25::i;:::-;1801:93;;;1853:30;;-1:-1:-1;;;1853:30:20;;;;;;;;;;;1801:93;1907:19;;1903:88;;1949:31;;-1:-1:-1;;;1949:31:20;;;;;;;;;;;1903:88;2023:2;2005:15;:20;2001:101;;;2059:31;;-1:-1:-1;;;2059:31:20;;;;;;;;;;;2001:101;2111:25;2139;:15;2157:7;2139:25;:::i;:::-;2111:53;;2179:35;-1:-1:-1;;;;;;;;;;;2203:10:20;2179;:35::i;:::-;-1:-1:-1;2255:35:20;2273:17;2255:15;:35;:::i;:::-;2241:10;2224:28;;;;:16;:28;;;;;;;:66;;;;2306:53;;;;;;2343:15;5406:25:25;;5394:2;5379:18;;5260:177;2306:53:20;;;;;;;;1791:575;1723:643;:::o;9486:126::-;9549:4;9573:32;-1:-1:-1;;;;;;;;;;;9597:7:20;9573;:32::i;8325:222::-;8398:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;8445:36:20::2;-1:-1:-1::0;;;;;;;;;;;8473:7:20::2;8445:10;:36::i;:::-;8496:44;::::0;-1:-1:-1;;;;;8496:44:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;785:28:20;-1:-1:-1;;;;;;;;;;;8496:44:20;;;::::2;1182:1:::1;8325:222:::0;;:::o;4799:623:18:-;-1:-1:-1;;;;;4909:33:18;;4870:36;4909:33;;;:14;:33;;;;;4958:16;;;;;;4953:106;;4997:51;;-1:-1:-1;;;4997:51:18;;;;;;;;;;;4953:106;5090:4;:15;;;5072;:33;5068:123;;;5128:52;;-1:-1:-1;;;5128:52:18;;;;;;;;;;;5068:123;5205:12;;;;:17;5201:119;;5238:18;5243:4;:12;;;5238:4;:18::i;:::-;5296:12;;;;5277:32;;;;:18;:32;;;;;5270:39;;-1:-1:-1;;;;;;5270:39:18;;;5201:119;5330:16;;;:24;;-1:-1:-1;;5330:24:18;;;5369:46;;-1:-1:-1;;;;;5369:46:18;;;;;5349:5;;5369:46;4860:562;4799:623;:::o;9618:126:20:-;9682:4;9705:32;-1:-1:-1;;;;;;;;;;;9729:7:20;9705;:32::i;7043:613:18:-;7187:17;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;-1:-1:-1;;;;;;;;;;;2464:16:0::1;2475:4;2464:10;:16::i;:::-;-1:-1:-1::0;;;;;7280:33:18;::::2;7241:36;7280:33:::0;;;:14:::2;:33;::::0;;;;7328:16:::2;::::0;::::2;::::0;::::2;;7323:106;;7367:51;;-1:-1:-1::0;;;7367:51:18::2;;;;;;;;;;;7323:106;7443:12;::::0;::::2;::::0;:17;7439:90:::2;;7476:42;7489:4;:12;;;7503:14;;7476:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;::::0;;;;-1:-1:-1;7476:12:18::2;::::0;-1:-1:-1;;;7476:42:18:i:2;:::-;7539:16;::::0;::::2;:33;7558:14:::0;;7539:16;:33:::2;:::i;:::-;;7615:17;-1:-1:-1::0;;;;;7587:62:18::2;;7634:14;;7587:62;;;;;;;:::i;:::-;;;;;;;;7231:425;1182:1:20::1;7043:613:18::0;;;;:::o;2854:136:0:-;2931:4;2954:12;;;;;;;;;;;-1:-1:-1;;;;;2954:29:0;;;;;;;;;;;;;;;2854:136::o;2518:93:6:-;2565:13;2597:7;2590:14;;;;;:::i;9878:128:20:-;9943:4;9966:33;-1:-1:-1;;;;;;;;;;;9991:7:20;9966;:33::i;3718:144:6:-;3803:52;735:10:12;3836:8:6;3846;3803:18;:52::i;6478:186:18:-;6544:4;6581:27;;;:18;:27;;;;;;-1:-1:-1;;;;;6581:27:18;6625:32;6581:27;6625:20;:32::i;6667:243:20:-;6743:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;6791:44:20::2;-1:-1:-1::0;;;;;;;;;;;6827:7:20::2;6791:9;:44::i;:::-;6850:53;::::0;-1:-1:-1;;;;;6850:53:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;870:37:20;-1:-1:-1;;;;;;;;;;;6850:53:20;;;::::2;1182:1:::1;6667:243:::0;;:::o;9750:122::-;9812:4;9835:30;-1:-1:-1;;;;;;;;;;;9857:7:20;9835;:30::i;4552:617::-;4623:12;;;;;;;4834:36;4623:12;4862:7;4834;:36::i;:::-;4884:32;-1:-1:-1;;;;;;;;;;;4908:7:20;4884;:32::i;:::-;4930;-1:-1:-1;;;;;;;;;;;4954:7:20;4930;:32::i;:::-;4976:30;-1:-1:-1;;;;;;;;;;;4998:7:20;4976;:30::i;:::-;5020:33;-1:-1:-1;;;;;;;;;;;5045:7:20;5020;:33::i;:::-;5067:42;-1:-1:-1;;;;;;;;;;;5101:7:20;5067;:42::i;:::-;5123:29;-1:-1:-1;;;;;;;;;;;5144:7:20;5123;:29::i;:::-;4813:349;;;;-1:-1:-1;4813:349:20;;-1:-1:-1;4813:349:20;;-1:-1:-1;4813:349:20;-1:-1:-1;4813:349:20;-1:-1:-1;4813:349:20;;-1:-1:-1;4552:617:20;-1:-1:-1;;4552:617:20:o;3933:613:18:-;4031:17;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;-1:-1:-1;;;;;;;;;;;2464:16:0::1;2475:4;2464:10;:16::i;:::-;2232:4:::2;2464:16;2232:4:::0;2464:10:::2;:16::i;:::-;-1:-1:-1::0;;;;;4165:33:18;::::3;4126:36;4165:33:::0;;;:14:::3;:33;::::0;;;;4213:16:::3;::::0;::::3;::::0;::::3;;4208:106;;4252:51;;-1:-1:-1::0;;;4252:51:18::3;;;;;;;;;;;4208:106;4328:12;::::0;::::3;::::0;:17;4324:120:::3;;4361:18;4366:4;:12;;;4361:4;:18::i;:::-;4420:12;::::0;::::3;::::0;4401:32:::3;::::0;;;:18:::3;:32;::::0;;;;4394:39;;-1:-1:-1;;;;;;4394:39:18::3;::::0;;4324:120:::3;4454:16;::::0;::::3;:24:::0;;-1:-1:-1;;4454:24:18::3;::::0;;4493:46:::3;::::0;-1:-1:-1;;;;;4493:46:18;::::3;::::0;::::3;::::0;4473:5:::3;::::0;4493:46:::3;4116:430;2490:1:0::2;1182::20::1;3933:613:18::0;;:::o;4985:208:6:-;5098:31;5111:4;5117:2;5121:7;5098:12;:31::i;:::-;5139:47;5162:4;5168:2;5172:7;5181:4;5139:22;:47::i;7947:161:20:-;8019:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;8066:35:20::2;-1:-1:-1::0;;;;;;;;;;;8093:7:20::2;8066:10;:35::i;9355:125::-:0;9414:4;9437:36;9414:4;9465:7;9437;:36::i;8277:189:18:-;8400:13;8436:23;8451:7;8436:14;:23::i;7852:191::-;7950:30;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7950:30:18;-1:-1:-1;;;;;8003:33:18;;;;;;:14;:33;;;;;;;7996:40;;;;;;;;;;;;8003:33;;7996:40;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;7996:40:18;;;-1:-1:-1;;7996:40:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7852:191;-1:-1:-1;;7852:191:18:o;4642:138:0:-;3875:7;3901:12;;;;;;;;;;:22;;;2464:16;2475:4;2464:10;:16::i;:::-;4747:26:::1;4759:4;4765:7;4747:11;:26::i;6226:208:20:-:0;6291:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;6339:32:20::2;-1:-1:-1::0;;;;;;;;;;;6363:7:20::2;6339:9;:32::i;:::-;6386:41;::::0;-1:-1:-1;;;;;6386:41:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;712:25:20;-1:-1:-1;;;;;;;;;;;6386:41:20;;;::::2;1182:1:::1;6226:208:::0;;:::o;3928:153:6:-;-1:-1:-1;;;;;4039:25:6;;;4016:4;4039:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;3928:153::o;10167:120:20:-;10228:4;10251:29;-1:-1:-1;;;;;;;;;;;10272:7:20;10251;:29::i;7721:220::-;7793:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;7841:35:20::2;-1:-1:-1::0;;;;;;;;;;;7868:7:20::2;7841:10;:35::i;:::-;7891:43;::::0;-1:-1:-1;;;;;7891:43:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;551:33:20;-1:-1:-1;;;;;;;;;;;7891:43:20;;;::::2;1182:1:::1;7721:220:::0;;:::o;937:207:10:-;1039:4;-1:-1:-1;;;;;;1062:35:10;;-1:-1:-1;;;1062:35:10;;:75;;;1101:36;1125:11;1101:23;:36::i;3199:103:0:-;3265:30;3276:4;735:10:12;3265::0;:30::i;16138:241:6:-;16201:7;5799:16;;;:7;:16;;;;;;-1:-1:-1;;;;;5799:16:6;;16263:88;;16309:31;;-1:-1:-1;;;16309:31:6;;;;;5406:25:25;;;5379:18;;16309:31:6;5260:177:25;14418:120:6;14498:33;14507:2;14511:7;14520:4;14526;14498:8;:33::i;10633:100::-;10700:26;10710:2;10714:7;10700:26;;;;;;;;;;;;:9;:26::i;1922:167:10:-;2013:19;;;;:10;:19;;;;;:31;2035:9;2013:19;:31;:::i;:::-;-1:-1:-1;2059:23:10;;5406:25:25;;;2059:23:10;;5394:2:25;5379:18;2059:23:10;;;;;;;1922:167;;:::o;5618:386:18:-;5743:7;-1:-1:-1;;;;;5842:18:18;;;5838:111;;-1:-1:-1;;;;;5884:16:18;;;5876:62;;;;-1:-1:-1;;;5876:62:18;;18098:2:25;5876:62:18;;;18080:21:25;18137:2;18117:18;;;18110:30;18176:34;18156:18;;;18149:62;-1:-1:-1;;;18227:18:25;;;18220:31;18268:19;;5876:62:18;17896:397:25;5876:62:18;5965:32;5979:2;5983:7;5992:4;5965:13;:32::i;:::-;5958:39;5618:386;-1:-1:-1;;;;5618:386:18:o;6730:317:0:-;6808:4;6828:22;6836:4;6842:7;6828;:22::i;:::-;6824:217;;;6898:5;6866:12;;;;;;;;;;;-1:-1:-1;;;;;6866:29:0;;;;;;;;;;:37;;-1:-1:-1;;6866:37:0;;;6922:40;735:10:12;;6866:12:0;;6922:40;;6898:5;6922:40;-1:-1:-1;6983:4:0;6976:11;;6824:217;-1:-1:-1;7025:5:0;7018:12;;6179:316;6256:4;6277:22;6285:4;6291:7;6277;:22::i;:::-;6272:217;;6315:6;:12;;;;;;;;;;;-1:-1:-1;;;;;6315:29:0;;;;;;;;;:36;;-1:-1:-1;;6315:36:0;6347:4;6315:36;;;6397:12;735:10:12;;656:96;6397:12:0;-1:-1:-1;;;;;6370:40:0;6388:7;-1:-1:-1;;;;;6370:40:0;6382:4;6370:40;;;;;;;;;;-1:-1:-1;6431:4:0;6424:11;;15591:312:6;-1:-1:-1;;;;;15698:22:6;;15694:91;;15743:31;;-1:-1:-1;;;15743:31:6;;-1:-1:-1;;;;;2066:32:25;;15743:31:6;;;2048:51:25;2021:18;;15743:31:6;1902:203:25;15694:91:6;-1:-1:-1;;;;;15794:25:6;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;15794:46:6;;;;;;;;;;15855:41;;540::25;;;15855::6;;513:18:25;15855:41:6;;;;;;;15591:312;;;:::o;16918:782::-;-1:-1:-1;;;;;17034:14:6;;;:18;17030:664;;17072:71;;-1:-1:-1;;;17072:71:6;;-1:-1:-1;;;;;17072:36:6;;;;;:71;;735:10:12;;17123:4:6;;17129:7;;17138:4;;17072:71;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;17072:71:6;;;;;;;;-1:-1:-1;;17072:71:6;;;;;;;;;;;;:::i;:::-;;;17068:616;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17381:6;:13;17398:1;17381:18;17377:293;;17430:25;;-1:-1:-1;;;17430:25:6;;-1:-1:-1;;;;;2066:32:25;;17430:25:6;;;2048:51:25;2021:18;;17430:25:6;1902:203:25;17377:293:6;17622:6;17616:13;17607:6;17603:2;17599:15;17592:38;17068:616;-1:-1:-1;;;;;;17190:51:6;;-1:-1:-1;;;17190:51:6;17186:130;;17272:25;;-1:-1:-1;;;17272:25:6;;-1:-1:-1;;;;;2066:32:25;;17272:25:6;;;2048:51:25;2021:18;;17272:25:6;1902:203:25;17186:130:6;17144:186;16918:782;;;;:::o;1210:593:10:-;1283:13;1308:22;1322:7;1308:13;:22::i;:::-;-1:-1:-1;1341:23:10;1367:19;;;:10;:19;;;;;1341:45;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1396:18;1417:10;3250:9:6;;;;;;;;;-1:-1:-1;3250:9:6;;;3174:92;1417:10:10;1396:31;;1506:4;1500:18;1522:1;1500:23;1496:70;;-1:-1:-1;1546:9:10;1210:593;-1:-1:-1;;1210:593:10:o;1496:70::-;1665:23;;:27;1661:95;;1729:4;1735:9;1715:30;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1708:37;;;;1210:593;;;:::o;1661:95::-;1773:23;1788:7;1773:14;:23::i;1561:300:6:-;1663:4;-1:-1:-1;;;;;;1698:40:6;;-1:-1:-1;;;1698:40:6;;:104;;-1:-1:-1;;;;;;;1754:48:6;;-1:-1:-1;;;1754:48:6;1698:104;:156;;;;1818:36;1842:11;1818:23;:36::i;3432:197:0:-;3520:22;3528:4;3534:7;3520;:22::i;:::-;3515:108;;3565:47;;-1:-1:-1;;;3565:47:0;;-1:-1:-1;;;;;19739:32:25;;3565:47:0;;;19721:51:25;19788:18;;;19781:34;;;19694:18;;3565:47:0;19547:274:25;14720:662:6;14880:9;:31;;;-1:-1:-1;;;;;;14893:18:6;;;;14880:31;14876:460;;;14927:13;14943:22;14957:7;14943:13;:22::i;:::-;14927:38;-1:-1:-1;;;;;;15093:18:6;;;;;;:35;;;15124:4;-1:-1:-1;;;;;15115:13:6;:5;-1:-1:-1;;;;;15115:13:6;;;15093:35;:69;;;;;15133:29;15150:5;15157:4;15133:16;:29::i;:::-;15132:30;15093:69;15089:142;;;15189:27;;-1:-1:-1;;;15189:27:6;;-1:-1:-1;;;;;2066:32:25;;15189:27:6;;;2048:51:25;2021:18;;15189:27:6;1902:203:25;15089:142:6;15249:9;15245:81;;;15303:7;15299:2;-1:-1:-1;;;;;15283:28:6;15292:5;-1:-1:-1;;;;;15283:28:6;;;;;;;;;;;15245:81;14913:423;14876:460;-1:-1:-1;;15346:24:6;;;;:15;:24;;;;;:29;;-1:-1:-1;;;;;;15346:29:6;-1:-1:-1;;;;;15346:29:6;;;;;;;;;;14720:662::o;10954:182::-;11048:18;11054:2;11058:7;11048:5;:18::i;:::-;11076:53;11107:1;11111:2;11115:7;11124:4;11076:22;:53::i;8838:795::-;8924:7;5799:16;;;:7;:16;;;;;;-1:-1:-1;;;;;5799:16:6;;;;9035:18;;;9031:86;;9069:37;9086:4;9092;9098:7;9069:16;:37::i;:::-;-1:-1:-1;;;;;9161:18:6;;;9157:256;;9277:48;9294:1;9298:7;9315:1;9319:5;9277:8;:48::i;:::-;-1:-1:-1;;;;;9368:15:6;;;;;;:9;:15;;;;;:20;;-1:-1:-1;;9368:20:6;;;9157:256;-1:-1:-1;;;;;9427:16:6;;;9423:107;;-1:-1:-1;;;;;9487:13:6;;;;;;:9;:13;;;;;:18;;9504:1;9487:18;;;9423:107;9540:16;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;9540:21:6;-1:-1:-1;;;;;9540:21:6;;;;;;;;;9577:27;;9540:16;;9577:27;;;;;;;9622:4;8838:795;-1:-1:-1;;;;8838:795:6:o;2677:255::-;2741:13;2766:22;2780:7;2766:13;:22::i;:::-;;2799:21;2823:10;3250:9;;;;;;;;;-1:-1:-1;3250:9:6;;;3174:92;2823:10;2799:34;;2874:1;2856:7;2850:21;:25;:75;;;;;;;;;;;;;;;;;2892:7;2901:18;:7;:16;:18::i;:::-;2878:42;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2843:82;2677:255;-1:-1:-1;;;2677:255:6:o;2565:202:0:-;2650:4;-1:-1:-1;;;;;;2673:47:0;;-1:-1:-1;;;2673:47:0;;:87;;-1:-1:-1;;;;;;;;;;861:40:14;;;2724:36:0;762:146:14;9955:327:6;-1:-1:-1;;;;;10022:16:6;;10018:87;;10061:33;;-1:-1:-1;;;10061:33:6;;10091:1;10061:33;;;2048:51:25;2021:18;;10061:33:6;1902:203:25;10018:87:6;10114:21;10138:32;10146:2;10150:7;10167:1;10138:7;:32::i;:::-;10114:56;-1:-1:-1;;;;;;10184:27:6;;;10180:96;;10234:31;;-1:-1:-1;;;10234:31:6;;10262:1;10234:31;;;2048:51:25;2021:18;;10234:31:6;1902:203:25;7082:368:6;7194:38;7208:5;7215:7;7224;7194:13;:38::i;:::-;7189:255;;-1:-1:-1;;;;;7252:19:6;;7248:186;;7298:31;;-1:-1:-1;;;7298:31:6;;;;;5406:25:25;;;5379:18;;7298:31:6;5260:177:25;7248:186:6;7375:44;;-1:-1:-1;;;7375:44:6;;-1:-1:-1;;;;;19739:32:25;;7375:44:6;;;19721:51:25;19788:18;;;19781:34;;;19694:18;;7375:44:6;19547:274:25;637:698:13;693:13;742:14;759:17;770:5;759:10;:17::i;:::-;779:1;759:21;742:38;;794:20;828:6;817:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;817:18:13;-1:-1:-1;794:41:13;-1:-1:-1;955:28:13;;;971:2;955:28;1010:282;-1:-1:-1;;1041:5:13;-1:-1:-1;;;1175:2:13;1164:14;;1159:32;1041:5;1146:46;1236:2;1227:11;;;-1:-1:-1;1256:21:13;1010:282;1256:21;-1:-1:-1;1312:6:13;637:698;-1:-1:-1;;;637:698:13:o;6376:272:6:-;6479:4;-1:-1:-1;;;;;6514:21:6;;;;;;:127;;;6561:7;-1:-1:-1;;;;;6552:16:6;:5;-1:-1:-1;;;;;6552:16:6;;:52;;;;6572:32;6589:5;6596:7;6572:16;:32::i;:::-;6552:88;;;-1:-1:-1;;6008:7:6;6034:24;;;:15;:24;;;;;;-1:-1:-1;;;;;6034:24:6;;;6608:32;;;;;-1:-1:-1;6376:272:6:o;12214:916:16:-;12267:7;;-1:-1:-1;;;12342:17:16;;12338:103;;-1:-1:-1;;;12379:17:16;;;-1:-1:-1;12424:2:16;12414:12;12338:103;12467:8;12458:5;:17;12454:103;;12504:8;12495:17;;;-1:-1:-1;12540:2:16;12530:12;12454:103;12583:8;12574:5;:17;12570:103;;12620:8;12611:17;;;-1:-1:-1;12656:2:16;12646:12;12570:103;12699:7;12690:5;:16;12686:100;;12735:7;12726:16;;;-1:-1:-1;12770:1:16;12760:11;12686:100;12812:7;12803:5;:16;12799:100;;12848:7;12839:16;;;-1:-1:-1;12883:1:16;12873:11;12799:100;12925:7;12916:5;:16;12912:100;;12961:7;12952:16;;;-1:-1:-1;12996:1:16;12986:11;12912:100;13038:7;13029:5;:16;13025:66;;13075:1;13065:11;13117:6;12214:916;-1:-1:-1;;12214:916:16:o;14:131:25:-;-1:-1:-1;;;;;;88:32:25;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:173::-;660:20;;-1:-1:-1;;;;;709:31:25;;699:42;;689:70;;755:1;752;745:12;689:70;592:173;;;:::o;770:186::-;829:6;882:2;870:9;861:7;857:23;853:32;850:52;;;898:1;895;888:12;850:52;921:29;940:9;921:29;:::i;961:250::-;1046:1;1056:113;1070:6;1067:1;1064:13;1056:113;;;1146:11;;;1140:18;1127:11;;;1120:39;1092:2;1085:10;1056:113;;;-1:-1:-1;;1203:1:25;1185:16;;1178:27;961:250::o;1216:271::-;1258:3;1296:5;1290:12;1323:6;1318:3;1311:19;1339:76;1408:6;1401:4;1396:3;1392:14;1385:4;1378:5;1374:16;1339:76;:::i;:::-;1469:2;1448:15;-1:-1:-1;;1444:29:25;1435:39;;;;1476:4;1431:50;;1216:271;-1:-1:-1;;1216:271:25:o;1492:220::-;1641:2;1630:9;1623:21;1604:4;1661:45;1702:2;1691:9;1687:18;1679:6;1661:45;:::i;1717:180::-;1776:6;1829:2;1817:9;1808:7;1804:23;1800:32;1797:52;;;1845:1;1842;1835:12;1797:52;-1:-1:-1;1868:23:25;;1717:180;-1:-1:-1;1717:180:25:o;2110:254::-;2178:6;2186;2239:2;2227:9;2218:7;2214:23;2210:32;2207:52;;;2255:1;2252;2245:12;2207:52;2278:29;2297:9;2278:29;:::i;:::-;2268:39;2354:2;2339:18;;;;2326:32;;-1:-1:-1;;;2110:254:25:o;2369:127::-;2430:10;2425:3;2421:20;2418:1;2411:31;2461:4;2458:1;2451:15;2485:4;2482:1;2475:15;2501:632;2566:5;2596:18;2637:2;2629:6;2626:14;2623:40;;;2643:18;;:::i;:::-;2718:2;2712:9;2686:2;2772:15;;-1:-1:-1;;2768:24:25;;;2794:2;2764:33;2760:42;2748:55;;;2818:18;;;2838:22;;;2815:46;2812:72;;;2864:18;;:::i;:::-;2904:10;2900:2;2893:22;2933:6;2924:15;;2963:6;2955;2948:22;3003:3;2994:6;2989:3;2985:16;2982:25;2979:45;;;3020:1;3017;3010:12;2979:45;3070:6;3065:3;3058:4;3050:6;3046:17;3033:44;3125:1;3118:4;3109:6;3101;3097:19;3093:30;3086:41;;;;2501:632;;;;;:::o;3138:222::-;3181:5;3234:3;3227:4;3219:6;3215:17;3211:27;3201:55;;3252:1;3249;3242:12;3201:55;3274:80;3350:3;3341:6;3328:20;3321:4;3313:6;3309:17;3274:80;:::i;3365:686::-;3471:6;3479;3487;3495;3548:3;3536:9;3527:7;3523:23;3519:33;3516:53;;;3565:1;3562;3555:12;3516:53;3588:29;3607:9;3588:29;:::i;:::-;3578:39;;3668:2;3657:9;3653:18;3640:32;3691:18;3732:2;3724:6;3721:14;3718:34;;;3748:1;3745;3738:12;3718:34;3771:50;3813:7;3804:6;3793:9;3789:22;3771:50;:::i;:::-;3761:60;;3874:2;3863:9;3859:18;3846:32;3830:48;;3903:2;3893:8;3890:16;3887:36;;;3919:1;3916;3909:12;3887:36;;3942:52;3986:7;3975:8;3964:9;3960:24;3942:52;:::i;:::-;3365:686;;;;-1:-1:-1;3932:62:25;;4041:2;4026:18;4013:32;;-1:-1:-1;;;3365:686:25:o;4056:681::-;4359:3;4348:9;4341:22;4322:4;4386:46;4427:3;4416:9;4412:19;4404:6;4386:46;:::i;:::-;4480:9;4472:6;4468:22;4463:2;4452:9;4448:18;4441:50;4508:33;4534:6;4526;4508:33;:::i;:::-;4572:2;4557:18;;4550:34;;;;-1:-1:-1;;4615:2:25;4600:18;;4593:34;;;;4671:14;;4664:22;4658:3;4643:19;;4636:51;4718:3;4703:19;;;4696:35;4500:41;4056:681;-1:-1:-1;;4056:681:25:o;4742:328::-;4819:6;4827;4835;4888:2;4876:9;4867:7;4863:23;4859:32;4856:52;;;4904:1;4901;4894:12;4856:52;4927:29;4946:9;4927:29;:::i;:::-;4917:39;;4975:38;5009:2;4998:9;4994:18;4975:38;:::i;:::-;4965:48;;5060:2;5049:9;5045:18;5032:32;5022:42;;4742:328;;;;;:::o;5442:254::-;5510:6;5518;5571:2;5559:9;5550:7;5546:23;5542:32;5539:52;;;5587:1;5584;5577:12;5539:52;5623:9;5610:23;5600:33;;5652:38;5686:2;5675:9;5671:18;5652:38;:::i;:::-;5642:48;;5442:254;;;;;:::o;5701:328::-;5778:6;5786;5794;5847:2;5835:9;5826:7;5822:23;5818:32;5815:52;;;5863:1;5860;5853:12;5815:52;5899:9;5886:23;5876:33;;5928:38;5962:2;5951:9;5947:18;5928:38;:::i;:::-;5918:48;;5985:38;6019:2;6008:9;6004:18;5985:38;:::i;:::-;5975:48;;5701:328;;;;;:::o;6034:367::-;6097:8;6107:6;6161:3;6154:4;6146:6;6142:17;6138:27;6128:55;;6179:1;6176;6169:12;6128:55;-1:-1:-1;6202:20:25;;6245:18;6234:30;;6231:50;;;6277:1;6274;6267:12;6231:50;6314:4;6306:6;6302:17;6290:29;;6374:3;6367:4;6357:6;6354:1;6350:14;6342:6;6338:27;6334:38;6331:47;6328:67;;;6391:1;6388;6381:12;6328:67;6034:367;;;;;:::o;6406:773::-;6528:6;6536;6544;6552;6605:2;6593:9;6584:7;6580:23;6576:32;6573:52;;;6621:1;6618;6611:12;6573:52;6661:9;6648:23;6690:18;6731:2;6723:6;6720:14;6717:34;;;6747:1;6744;6737:12;6717:34;6786:70;6848:7;6839:6;6828:9;6824:22;6786:70;:::i;:::-;6875:8;;-1:-1:-1;6760:96:25;-1:-1:-1;6963:2:25;6948:18;;6935:32;;-1:-1:-1;6979:16:25;;;6976:36;;;7008:1;7005;6998:12;6976:36;;7047:72;7111:7;7100:8;7089:9;7085:24;7047:72;:::i;:::-;6406:773;;;;-1:-1:-1;7138:8:25;-1:-1:-1;;;;6406:773:25:o;7366:666::-;7446:6;7454;7462;7515:2;7503:9;7494:7;7490:23;7486:32;7483:52;;;7531:1;7528;7521:12;7483:52;7554:29;7573:9;7554:29;:::i;:::-;7544:39;;7634:2;7623:9;7619:18;7606:32;7657:18;7698:2;7690:6;7687:14;7684:34;;;7714:1;7711;7704:12;7684:34;7752:6;7741:9;7737:22;7727:32;;7797:7;7790:4;7786:2;7782:13;7778:27;7768:55;;7819:1;7816;7809:12;7768:55;7859:2;7846:16;7885:2;7877:6;7874:14;7871:34;;;7901:1;7898;7891:12;7871:34;7946:7;7941:2;7932:6;7928:2;7924:15;7920:24;7917:37;7914:57;;;7967:1;7964;7957:12;7914:57;7998:2;7994;7990:11;7980:21;;8020:6;8010:16;;;;;7366:666;;;;;:::o;8037:347::-;8102:6;8110;8163:2;8151:9;8142:7;8138:23;8134:32;8131:52;;;8179:1;8176;8169:12;8131:52;8202:29;8221:9;8202:29;:::i;:::-;8192:39;;8281:2;8270:9;8266:18;8253:32;8328:5;8321:13;8314:21;8307:5;8304:32;8294:60;;8350:1;8347;8340:12;8294:60;8373:5;8363:15;;;8037:347;;;;;:::o;9071:667::-;9166:6;9174;9182;9190;9243:3;9231:9;9222:7;9218:23;9214:33;9211:53;;;9260:1;9257;9250:12;9211:53;9283:29;9302:9;9283:29;:::i;:::-;9273:39;;9331:38;9365:2;9354:9;9350:18;9331:38;:::i;:::-;9321:48;;9416:2;9405:9;9401:18;9388:32;9378:42;;9471:2;9460:9;9456:18;9443:32;9498:18;9490:6;9487:30;9484:50;;;9530:1;9527;9520:12;9484:50;9553:22;;9606:4;9598:13;;9594:27;-1:-1:-1;9584:55:25;;9635:1;9632;9625:12;9584:55;9658:74;9724:7;9719:2;9706:16;9701:2;9697;9693:11;9658:74;:::i;:::-;9648:84;;;9071:667;;;;;;;:::o;9743:829::-;9934:2;9923:9;9916:21;9897:4;9972:6;9966:13;10015:4;10010:2;9999:9;9995:18;9988:32;10043:52;10090:3;10079:9;10075:19;10061:12;10043:52;:::i;:::-;10029:66;;10144:2;10136:6;10132:15;10126:22;10216:2;10212:7;10200:9;10192:6;10188:22;10184:36;10179:2;10168:9;10164:18;10157:64;10244:41;10278:6;10262:14;10244:41;:::i;:::-;10230:55;;;10339:2;10331:6;10327:15;10321:22;10316:2;10305:9;10301:18;10294:50;10399:2;10391:6;10387:15;10381:22;10375:3;10364:9;10360:19;10353:51;10473:3;10465:6;10461:16;10455:23;10448:31;10441:39;10435:3;10424:9;10420:19;10413:68;10537:3;10529:6;10525:16;10519:23;10512:4;10501:9;10497:20;10490:53;10560:6;10552:14;;;9743:829;;;;:::o;10577:260::-;10645:6;10653;10706:2;10694:9;10685:7;10681:23;10677:32;10674:52;;;10722:1;10719;10712:12;10674:52;10745:29;10764:9;10745:29;:::i;:::-;10735:39;;10793:38;10827:2;10816:9;10812:18;10793:38;:::i;10842:380::-;10921:1;10917:12;;;;10964;;;10985:61;;11039:4;11031:6;11027:17;11017:27;;10985:61;11092:2;11084:6;11081:14;11061:18;11058:38;11055:161;;11138:10;11133:3;11129:20;11126:1;11119:31;11173:4;11170:1;11163:15;11201:4;11198:1;11191:15;11055:161;;10842:380;;;:::o;11227:127::-;11288:10;11283:3;11279:20;11276:1;11269:31;11319:4;11316:1;11309:15;11343:4;11340:1;11333:15;11359:135;11398:3;11419:17;;;11416:43;;11439:18;;:::i;:::-;-1:-1:-1;11486:1:25;11475:13;;11359:135::o;11499:125::-;11564:9;;;11585:10;;;11582:36;;;11598:18;;:::i;11755:545::-;11857:2;11852:3;11849:11;11846:448;;;11893:1;11918:5;11914:2;11907:17;11963:4;11959:2;11949:19;12033:2;12021:10;12017:19;12014:1;12010:27;12004:4;12000:38;12069:4;12057:10;12054:20;12051:47;;;-1:-1:-1;12092:4:25;12051:47;12147:2;12142:3;12138:12;12135:1;12131:20;12125:4;12121:31;12111:41;;12202:82;12220:2;12213:5;12210:13;12202:82;;;12265:17;;;12246:1;12235:13;12202:82;;;12206:3;;;11755:545;;;:::o;12476:1352::-;12602:3;12596:10;12629:18;12621:6;12618:30;12615:56;;;12651:18;;:::i;:::-;12680:97;12770:6;12730:38;12762:4;12756:11;12730:38;:::i;:::-;12724:4;12680:97;:::i;:::-;12832:4;;12896:2;12885:14;;12913:1;12908:663;;;;13615:1;13632:6;13629:89;;;-1:-1:-1;13684:19:25;;;13678:26;13629:89;-1:-1:-1;;12433:1:25;12429:11;;;12425:24;12421:29;12411:40;12457:1;12453:11;;;12408:57;13731:81;;12878:944;;12908:663;11702:1;11695:14;;;11739:4;11726:18;;-1:-1:-1;;12944:20:25;;;13062:236;13076:7;13073:1;13070:14;13062:236;;;13165:19;;;13159:26;13144:42;;13257:27;;;;13225:1;13213:14;;;;13092:19;;13062:236;;;13066:3;13326:6;13317:7;13314:19;13311:201;;;13387:19;;;13381:26;-1:-1:-1;;13470:1:25;13466:14;;;13482:3;13462:24;13458:37;13454:42;13439:58;13424:74;;13311:201;-1:-1:-1;;;;;13558:1:25;13542:14;;;13538:22;13525:36;;-1:-1:-1;12476:1352:25:o;13833:454::-;14058:2;14047:9;14040:21;14021:4;14084:45;14125:2;14114:9;14110:18;14102:6;14084:45;:::i;:::-;14177:9;14169:6;14165:22;14160:2;14149:9;14145:18;14138:50;14205:33;14231:6;14223;14205:33;:::i;:::-;14197:41;;;14274:6;14269:2;14258:9;14254:18;14247:34;13833:454;;;;;;:::o;14981:127::-;15042:10;15037:3;15033:20;15030:1;15023:31;15073:4;15070:1;15063:15;15097:4;15094:1;15087:15;15113:551;15284:3;15315;15362:6;15284:3;15396:241;15410:6;15407:1;15404:13;15396:241;;;-1:-1:-1;;;;;15477:26:25;15496:6;15477:26;:::i;:::-;15473:52;15459:67;;15549:4;15575:14;;;;15612:15;;;;;15432:1;15425:9;15396:241;;;-1:-1:-1;15653:5:25;;15113:551;-1:-1:-1;;;;;15113:551:25:o;15669:443::-;15858:2;15840:21;;;15877:18;;15870:34;;;-1:-1:-1;;;;;;15916:31:25;;15913:51;;;15960:1;15957;15950:12;15913:51;15994:6;15991:1;15987:14;16051:6;16043;16038:2;16027:9;16023:18;16010:48;16079:22;;;;16103:2;16075:31;;15669:443;-1:-1:-1;;;15669:443:25:o;16117:168::-;16190:9;;;16221;;16238:15;;;16232:22;;16218:37;16208:71;;16259:18;;:::i;16290:1206::-;16414:18;16409:3;16406:27;16403:53;;;16436:18;;:::i;:::-;16465:94;16555:3;16515:38;16547:4;16541:11;16515:38;:::i;:::-;16509:4;16465:94;:::i;:::-;16585:1;16610:2;16605:3;16602:11;16627:1;16622:616;;;;17282:1;17299:3;17296:93;;;-1:-1:-1;17355:19:25;;;17342:33;17296:93;-1:-1:-1;;12433:1:25;12429:11;;;12425:24;12421:29;12411:40;12457:1;12453:11;;;12408:57;17402:78;;16595:895;;16622:616;11702:1;11695:14;;;11739:4;11726:18;;-1:-1:-1;;16658:17:25;;;16759:9;16781:229;16795:7;16792:1;16789:14;16781:229;;;16884:19;;;16871:33;16856:49;;16991:4;16976:20;;;;16944:1;16932:14;;;;16811:12;16781:229;;;16785:3;17038;17029:7;17026:16;17023:159;;;17162:1;17158:6;17152:3;17146;17143:1;17139:11;17135:21;17131:34;17127:39;17114:9;17109:3;17105:19;17092:33;17088:79;17080:6;17073:95;17023:159;;;17225:1;17219:3;17216:1;17212:11;17208:19;17202:4;17195:33;16595:895;;16290:1206;;;:::o;17501:390::-;17660:2;17649:9;17642:21;17699:6;17694:2;17683:9;17679:18;17672:34;17756:6;17748;17743:2;17732:9;17728:18;17715:48;17812:1;17783:22;;;17807:2;17779:31;;;17772:42;;;;17875:2;17854:15;;;-1:-1:-1;;17850:29:25;17835:45;17831:54;;17501:390;-1:-1:-1;17501:390:25:o;18298:489::-;-1:-1:-1;;;;;18567:15:25;;;18549:34;;18619:15;;18614:2;18599:18;;18592:43;18666:2;18651:18;;18644:34;;;18714:3;18709:2;18694:18;;18687:31;;;18492:4;;18735:46;;18761:19;;18753:6;18735:46;:::i;:::-;18727:54;18298:489;-1:-1:-1;;;;;;18298:489:25:o;18792:249::-;18861:6;18914:2;18902:9;18893:7;18889:23;18885:32;18882:52;;;18930:1;18927;18920:12;18882:52;18962:9;18956:16;18981:30;19005:5;18981:30;:::i;19046:496::-;19225:3;19263:6;19257:13;19279:66;19338:6;19333:3;19326:4;19318:6;19314:17;19279:66;:::i;:::-;19408:13;;19367:16;;;;19430:70;19408:13;19367:16;19477:4;19465:17;;19430:70;:::i;:::-;19516:20;;19046:496;-1:-1:-1;;;;19046:496:25:o"},"gasEstimates":{"creation":{"codeDepositCost":"2675600","executionCost":"infinite","totalCost":"infinite"},"external":{"AUDITOR_ROLE()":"infinite","CERTIFICATE_FACTORY_ROLE()":"infinite","CERTIFIER_ROLE()":"infinite","DEFAULT_ADMIN_ROLE()":"262","ENTERPRISE_ROLE()":"infinite","INSPECTOR_ROLE()":"infinite","PUBLIC_ROLE()":"infinite","approve(address,uint256)":"31538","balanceOf(address)":"2722","bulkGrantRoles(bytes32[],address[])":"infinite","burn(uint256)":"82487","certifications(address)":"infinite","certifyEnterprise(address,string,string,uint256)":"infinite","checkExpiryRoles(address)":"infinite","claimTemporaryPublicRole(uint256)":"infinite","getActiveRoles(address)":"infinite","getApproved(uint256)":"infinite","getCertification(address)":"infinite","getEnterpriseByTokenId(uint256)":"2611","getMaxPublicRoleDuration()":"281","getRoleAdmin(bytes32)":"2560","grantAuditor(address)":"infinite","grantCertificateFactory(address)":"infinite","grantCertifier(address)":"infinite","grantEnterprise(address)":"infinite","grantInspector(address)":"infinite","grantPublicRole(address)":"infinite","grantRole(bytes32,address)":"infinite","hasAdminRole(address)":"2801","hasAuditorRole(address)":"infinite","hasCertificateFactoryRole(address)":"infinite","hasCertifierRole(address)":"infinite","hasEnterpriseRole(address)":"infinite","hasInspectorRole(address)":"infinite","hasPublicRole(address)":"infinite","hasRole(bytes32,address)":"2741","isApprovedForAll(address,address)":"infinite","isCertificateValid(uint256)":"infinite","isCertificationValid(address)":"infinite","name()":"infinite","ownerOf(uint256)":"infinite","publicRoleExpiry(address)":"2631","renounceRole(bytes32,address)":"29157","revokeAuditorRole(address)":"infinite","revokeCertificateFactoryRole(address)":"infinite","revokeCertification(address)":"infinite","revokeCertifierRole(address)":"infinite","revokeEnterpriseRole(address)":"infinite","revokeIfExpired(address)":"142999","revokeInspectorRole(address)":"infinite","revokePublicRole(address)":"infinite","revokeRole(bytes32,address)":"infinite","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26748","supportsInterface(bytes4)":"infinite","symbol()":"infinite","tokenURI(uint256)":"infinite","transferFrom(address,address,uint256)":"infinite","transferRole(bytes32,address,address)":"infinite","updateCertificationMetadata(address,string)":"infinite"},"internal":{"_update(address,uint256,address)":"infinite"}},"methodIdentifiers":{"AUDITOR_ROLE()":"6e1d616e","CERTIFICATE_FACTORY_ROLE()":"784fee0e","CERTIFIER_ROLE()":"69d0b517","DEFAULT_ADMIN_ROLE()":"a217fddf","ENTERPRISE_ROLE()":"68dd17a5","INSPECTOR_ROLE()":"e3a3c522","PUBLIC_ROLE()":"3ca7c02a","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","bulkGrantRoles(bytes32[],address[])":"61462f0e","burn(uint256)":"42966c68","certifications(address)":"236e0929","certifyEnterprise(address,string,string,uint256)":"0bcce45b","checkExpiryRoles(address)":"25d5e87e","claimTemporaryPublicRole(uint256)":"7780e9c1","getActiveRoles(address)":"b0614db3","getApproved(uint256)":"081812fc","getCertification(address)":"c88cc6ac","getEnterpriseByTokenId(uint256)":"89a912e0","getMaxPublicRoleDuration()":"b8ad415e","getRoleAdmin(bytes32)":"248a9ca3","grantAuditor(address)":"e55b4f93","grantCertificateFactory(address)":"aa52617c","grantCertifier(address)":"60376528","grantEnterprise(address)":"1e223b2a","grantInspector(address)":"456f19fc","grantPublicRole(address)":"57c03371","grantRole(bytes32,address)":"2f2ff15d","hasAdminRole(address)":"c395fcb3","hasAuditorRole(address)":"abaa536f","hasCertificateFactoryRole(address)":"52f84b72","hasCertifierRole(address)":"7bff0975","hasEnterpriseRole(address)":"a1f34163","hasInspectorRole(address)":"8850845f","hasPublicRole(address)":"f53f5e1e","hasRole(bytes32,address)":"91d14854","isApprovedForAll(address,address)":"e985e9c5","isCertificateValid(uint256)":"a5ce413a","isCertificationValid(address)":"261e85cd","name()":"06fdde03","ownerOf(uint256)":"6352211e","publicRoleExpiry(address)":"b5617ef7","renounceRole(bytes32,address)":"36568abe","revokeAuditorRole(address)":"3e251518","revokeCertificateFactoryRole(address)":"261191b7","revokeCertification(address)":"b83cc3b3","revokeCertifierRole(address)":"fc810286","revokeEnterpriseRole(address)":"7e5effa4","revokeIfExpired(address)":"808b0557","revokeInspectorRole(address)":"bd7ca7ba","revokePublicRole(address)":"0443cd2a","revokeRole(bytes32,address)":"d547741f","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd","transferRole(bytes32,address,address)":"5cb87d26","updateCertificationMetadata(address,string)":"90f201be"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuditorOversight__AppealWindowClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuditorOversight__CaseNotPending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuditorOversight__NotAuthorizedEnterpriseOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificateNFT__CertificateDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificateNFT__EnterpriseAlreadyCertified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificationAuthority__CertificationNotExpiredYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificationAuthority__EnterpriseAlreadyCertified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificationAuthority__EnterpriseNotCertifiedYet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnterpriseRegistry__EnterpriseAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnterpriseRegistry__EnterpriseDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnterpriseRegistry__InvalidStart\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__InspectionPeriodExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__InspectorAlreadyAssigned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__InvalidReportIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__NoReportsAssociatedWithEnterprise\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__NotAssignedToEnterprise\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__ReportAlreadyFlagged\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__AlreadyHasRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__EmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedAuditor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedCertificateFactory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedCertifier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedEnterprise\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedInspector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedPublicUser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__RoleDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__UnauthorizedToPerformAction\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"roles\",\"type\":\"bytes32[]\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"BulkRolesGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"industry\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiryDate\",\"type\":\"uint256\"}],\"name\":\"CertificationGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"}],\"name\":\"CertificationRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newMetadataURI\",\"type\":\"string\"}],\"name\":\"CertificationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"PublicRoleExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"PublicRoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RoleTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUDITOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CERTIFICATE_FACTORY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CERTIFIER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENTERPRISE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INSPECTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"roles\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"bulkGrantRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"certifications\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"industry\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"certifiedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isCertified\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_industry\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"validityDurationSeconds\",\"type\":\"uint256\"}],\"name\":\"certifyEnterprise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkExpiryRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"durationInHours\",\"type\":\"uint256\"}],\"name\":\"claimTemporaryPublicRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getActiveRoles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCertifier\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isInspector\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAuditor\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnterprise\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCertificateFactory\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enterpriseAddress\",\"type\":\"address\"}],\"name\":\"getCertification\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"industry\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"certifiedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isCertified\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.Certification\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getEnterpriseByTokenId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxPublicRoleDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantAuditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantCertificateFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantCertifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantEnterprise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantInspector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantPublicRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAdminRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAuditorRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasCertificateFactoryRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasCertifierRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasEnterpriseRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasInspectorRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasPublicRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isCertificateValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enterpriseAddress\",\"type\":\"address\"}],\"name\":\"isCertificationValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"publicRoleExpiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeAuditorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeCertificateFactoryRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enterpriseAddress\",\"type\":\"address\"}],\"name\":\"revokeCertification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeCertifierRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeEnterpriseRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enterpriseAddress\",\"type\":\"address\"}],\"name\":\"revokeIfExpired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeInspectorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokePublicRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enterpriseAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newMetadataURI\",\"type\":\"string\"}],\"name\":\"updateCertificationMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"bulkGrantRoles(bytes32[],address[])\":{\"details\":\"Bulk grant roles to accounts\",\"params\":{\"accounts\":\"The array of accounts to grant roles emits BulkRolesGranted event on successful grant\",\"roles\":\"The array of roles to grant\"}},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"certifyEnterprise(address,string,string,uint256)\":{\"details\":\"This function is used to certify enterprisesOnly the Certifier can certify enterprisesmints and assigns NFT certificate to an enterprisesets token URI to metadata URI of a certificate\",\"params\":{\"_industry\":\"The industry of the enterprise to be certified\",\"_metadataURI\":\"The metadata URI of the certificate (IPFS hash)\",\"enterpriseAddress\":\"The address of the enterprise to be certified\",\"validityDurationSeconds\":\"The validity duration of the certificate in seconds\"}},\"checkExpiryRoles(address)\":{\"details\":\"helper to check expiry of `PUBLIC` role\",\"params\":{\"account\":\"The account to check for role expiry\"}},\"claimTemporaryPublicRole(uint256)\":{\"details\":\"allows users to claim temporary `PUBLIC` role for `durationInHours` hours on their visit to platform\",\"params\":{\"durationInHours\":\"The duration in hours the user will have the `PUBLIC` role\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantCertifier(address)\":{\"details\":\"Functions to grant roles to!\",\"params\":{\"account\":\"The account to grant the role to\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasAdminRole(address)\":{\"details\":\"Functions to check if a certain account has the specified role\",\"params\":{\"account\":\"The account to check \"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeCertification(address)\":{\"details\":\"allows the revocation of certifications from enterprisesOnly the `Certifier` or `Super Admin` can revoke certificationsallows automatic destruction of NFT certificates via oppenzeppelin's`burn` function\",\"params\":{\"enterpriseAddress\":\"The address of the enterprise to be revoked\"}},\"revokeCertifierRole(address)\":{\"details\":\"Functions to revoke roles\",\"params\":{\"account\":\"The account to revoke the role from\"}},\"revokeIfExpired(address)\":{\"details\":\"alloes automatic revokation of NFT certificates after expiry duration callable by anyone as long as expiry date kicks in\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferRole(bytes32,address,address)\":{\"details\":\"Transfers a role from one account to another\",\"params\":{\"from\":\"The account to transfer the role from\",\"role\":\"The role to transfer\",\"to\":\"The account to transfer the role to\"}},\"updateCertificationMetadata(address,string)\":{\"details\":\"updates the metadata URI of the NFT certificateOnly the `Certifier` can update certification metadata URI\",\"params\":{\"enterpriseAddress\":\"The address of the enterprise to be updated\",\"newMetadataURI\":\"The new metadata URI of the certificate\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bulkGrantRoles(bytes32[],address[])\":{\"notice\":\"---------- # Bulk Role Grant(Auto) ------- //\"},\"certifyEnterprise(address,string,string,uint256)\":{\"notice\":\"Emits CertificationGranted event on successful enterprise certification\"},\"checkExpiryRoles(address)\":{\"notice\":\"--------- #  Auto-expiry check (Call periodically) ------- //Emits PublicRoleExpired event on expiry\"},\"claimTemporaryPublicRole(uint256)\":{\"notice\":\"----------- #claim temporary public role -------------- //`durationInHours` must be less than 24 hoursEmits PublicRoleGranted event on successful claim \"},\"grantCertifier(address)\":{\"notice\":\"---------# GRANTING ROLES ---------//Emits RoleGranted event on successful grant\"},\"hasAdminRole(address)\":{\"notice\":\"--------- # CHECKING ROLES --------- //\"},\"revokeCertification(address)\":{\"notice\":\"Emits CertificationRevoked event on successful enterprise revocation\"},\"revokeCertifierRole(address)\":{\"notice\":\"------------- # REVOKING ROLES ------------- //Emits RoleRevoked event on successful revoke\"},\"revokeIfExpired(address)\":{\"notice\":\"Emits CertificationRevoked event on successful enterprise revocation\"},\"transferRole(bytes32,address,address)\":{\"notice\":\"-------- # Safe Role Transfer ------- //Emits RoleTransferred event on successful transfer\"},\"updateCertificationMetadata(address,string)\":{\"notice\":\"Emits CertificationUpdated event on successful metadata update\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/CertificationAuthority.sol\":\"CertificationAuthority\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0xb31b86c03f4677dcffa4655285d62433509513be9bafa0e04984565052d34e44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        _update(address(0), tokenId, _msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xc48434419baa510862ba4b4802bc0500ccddadd02ae2f195548af748c3206b20\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xcc6f49e0c57072d6a18eef0d5fc22a4cc20462c18f0c365d2dd9a2c732fde670\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/core/CertificationAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n\\n/**\\n* @author @0xJonaseb11\\n* @title CertificationAuthority Contract\\n* @dev Acts like a Certificate Authority main house for enterprises\\n* @dev Only the Certifier can certify enterprises\\n* @dev Allows update of NFT certificate's metadata URI\\n* @dev Automatic revocation of certificates after expiry duration\\n*/\\nimport {RolesManager} from \\\"./RolesManager.sol\\\";\\nimport {Events} from \\\"../utils/Events.sol\\\";\\nimport {DataTypes} from \\\"../utils/DataTypes.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract CertificationAuthority is RolesManager, ERC721URIStorage, ERC721Burnable {\\n    using DataTypes for DataTypes.Enterprise;\\n    using DataTypes for DataTypes.Certification;\\n    using DataTypes for DataTypes.InspectionReport;\\n\\n    mapping(address => DataTypes.Certification) public certifications;\\n    mapping(uint256 => address) private _tokenToEnterprise;\\n    uint256 private _tokenIdCounter;\\n\\n    constructor() ERC721(\\\"EnterpriseCertificate\\\", \\\"ECERT\\\") {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(CERTIFIER_ROLE, msg.sender);\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// ENTERPRISE CERTIFICATION ///////////////////\\n    //////////////////////////////////////////////////////////\\n\\n    /**\\n    * @dev This function is used to certify enterprises\\n    * @dev Only the Certifier can certify enterprises\\n    * @dev mints and assigns NFT certificate to an enterprise\\n    * @dev sets token URI to metadata URI of a certificate\\n    * @param enterpriseAddress The address of the enterprise to be certified\\n    * @param _industry The industry of the enterprise to be certified\\n    * @param _metadataURI The metadata URI of the certificate (IPFS hash)\\n    * @param validityDurationSeconds The validity duration of the certificate in seconds\\n    * @notice Emits CertificationGranted event on successful enterprise certification\\n    */\\n\\n    function certifyEnterprise(\\n        address enterpriseAddress,\\n        string memory _industry,\\n        string memory _metadataURI,\\n        uint256 validityDurationSeconds\\n    ) external onlyValidAddress(enterpriseAddress) onlyRole(CERTIFIER_ROLE) {\\n        if (certifications[enterpriseAddress].isCertified) {\\n            revert CertificationAuthority__EnterpriseAlreadyCertified();\\n        }\\n\\n        uint256 tokenId = _tokenIdCounter++;\\n        _safeMint(enterpriseAddress, tokenId);\\n        _setTokenURI(tokenId, _metadataURI);\\n\\n        certifications[enterpriseAddress] = DataTypes.Certification({\\n            industry: _industry,\\n            metadataURI: _metadataURI,\\n            certifiedAt: block.timestamp,\\n            expiryDate: block.timestamp + validityDurationSeconds,\\n            isCertified: true,\\n            tokenId: tokenId\\n        });\\n\\n        _tokenToEnterprise[tokenId] = enterpriseAddress;\\n\\n        emit Events.CertificationGranted(\\n            enterpriseAddress,\\n            _industry,\\n            _metadataURI,\\n            block.timestamp + validityDurationSeconds\\n        );\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// REVOCATION & EXPIRY HANDLING //////////////\\n    //////////////////////////////////////////////////////////\\n    \\n\\n    /**\\n    * @dev allows the revocation of certifications from enterprises\\n    * @dev Only the `Certifier` or `Super Admin` can revoke certifications\\n    * @dev allows automatic destruction of NFT certificates via oppenzeppelin's`burn` function\\n    * @param enterpriseAddress The address of the enterprise to be revoked\\n    * @notice Emits CertificationRevoked event on successful enterprise revocation\\n    */\\n    function revokeCertification(address enterpriseAddress)\\n        external\\n        onlyValidAddress(enterpriseAddress)\\n        onlyRole(CERTIFIER_ROLE) onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\\n        if (!cert.isCertified) {\\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\\n        }\\n\\n        if (cert.tokenId != 0) {\\n            burn(cert.tokenId); \\n            delete _tokenToEnterprise[cert.tokenId];\\n        }\\n\\n        cert.isCertified = false;\\n        emit Events.CertificationRevoked(enterpriseAddress);\\n    }\\n    \\n\\n    /**\\n    * @dev alloes automatic revokation of NFT certificates after expiry duration \\n    * @dev callable by anyone as long as expiry date kicks in\\n    * @notice Emits CertificationRevoked event on successful enterprise revocation\\n    */\\n    function revokeIfExpired(address enterpriseAddress) external {\\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\\n\\n        if (!cert.isCertified) {\\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\\n        }\\n        if (block.timestamp < cert.expiryDate) {\\n            revert CertificationAuthority__CertificationNotExpiredYet();\\n        }\\n\\n        if (cert.tokenId != 0) {\\n            burn(cert.tokenId);\\n            delete _tokenToEnterprise[cert.tokenId];\\n        }\\n\\n        cert.isCertified = false;\\n        emit Events.CertificationRevoked(enterpriseAddress);\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// TRANSFER CONTROL ///////////////////////////\\n    //////////////////////////////////////////////////////////\\n\\n    function _update(\\n        address to,\\n        uint256 tokenId,\\n        address auth\\n    ) internal override(ERC721) returns (address) {\\n        // Block all transfers except minting (to) and burning (address(0))\\n        if (auth != address(0)) {\\n            require(to == address(0), \\\"Certificates are non-transferable\\\");\\n        }\\n        return super._update(to, tokenId, auth);\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// VALIDATION & METADATA //////////////////////\\n    //////////////////////////////////////////////////////////\\n\\n    function isCertificationValid(address enterpriseAddress)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\\n        return cert.isCertified && block.timestamp <= cert.expiryDate;\\n    }\\n\\n    function isCertificateValid(uint256 tokenId) public view returns (bool) {\\n        address enterprise = _tokenToEnterprise[tokenId];\\n        return isCertificationValid(enterprise);\\n    }\\n    \\n    \\n    /**\\n    * @dev updates the metadata URI of the NFT certificate\\n    * @dev Only the `Certifier` can update certification metadata URI\\n    * @param enterpriseAddress The address of the enterprise to be updated\\n    * @param newMetadataURI The new metadata URI of the certificate\\n    * @notice Emits CertificationUpdated event on successful metadata update\\n    */\\n    function updateCertificationMetadata(\\n        address enterpriseAddress,\\n        string calldata newMetadataURI\\n    ) external onlyValidAddress(enterpriseAddress) onlyRole(CERTIFIER_ROLE) {\\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\\n        if (!cert.isCertified) {\\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\\n        }\\n\\n        if (cert.tokenId != 0) {\\n            _setTokenURI(cert.tokenId, newMetadataURI);\\n        }\\n\\n        cert.metadataURI = newMetadataURI;\\n        emit Events.CertificationUpdated(enterpriseAddress, newMetadataURI);\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// GETTERS & OVERRIDES ////////////////////////\\n    //////////////////////////////////////////////////////////\\n\\n    function getCertification(address enterpriseAddress)\\n        public\\n        view\\n        returns (DataTypes.Certification memory)\\n    {\\n        return certifications[enterpriseAddress];\\n    }\\n\\n    function getEnterpriseByTokenId(uint256 tokenId)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return _tokenToEnterprise[tokenId];\\n    }\\n\\n    // ----- Required overrides for multiple inheritance --- //\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override(ERC721, ERC721URIStorage)\\n        returns (string memory)\\n    {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721, ERC721URIStorage, AccessControl)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x164ee8ef3581d2569d9d769b4c38912e3fa51b07b7db5e1a51b4e125ba40b5d6\",\"license\":\"MIT\"},\"contracts/core/RolesManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n\\n/**\\n* @author @0xJonaseb11\\n\\n* @dev manages the roles of the whole ecosystem \\n* @dev Only Super Admin can assign roles\\n* @dev On very high roles, there's DAO voting\\n*/\\n\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { Events } from \\\"../utils/Events.sol\\\";\\nimport { Errors } from \\\"../utils/Errors.sol\\\";\\nimport { DataTypes } from \\\"../utils/DataTypes.sol\\\";\\n\\n\\ncontract RolesManager is AccessControl, Errors {\\n\\n    bytes32 public constant CERTIFIER_ROLE = keccak256(\\\"CERTIFYING_BODY_ROLE\\\");\\n    bytes32 public constant INSPECTOR_ROLE = keccak256(\\\"INSPECTION_MANAGER_ROLE\\\");\\n    bytes32 public constant AUDITOR_ROLE = keccak256(\\\"AUDITOR_ROLE\\\");\\n    bytes32 public constant ENTERPRISE_ROLE = keccak256(\\\"ENTERPRISE_ROLE\\\");\\n    bytes32 public constant CERTIFICATE_FACTORY_ROLE = keccak256(\\\"CERTIFICATE_FACTORY_ROLE\\\");\\n    bytes32 public constant PUBLIC_ROLE = keccak256(\\\"PUBLIC_ROLE\\\");\\n\\n    mapping(address => uint256) public publicRoleExpiry;\\n\\n   // ----- modifiers\\n   modifier onlyValidAddress(address account) {\\n    if (account == address(0)) {\\n        revert InvalidAddress();\\n    }\\n    _;\\n   }\\n\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(CERTIFIER_ROLE,  msg.sender);\\n    }\\n\\n\\n    /** ----------- #claim temporary public role -------------- //\\n    * @dev allows users to claim temporary `PUBLIC` role for `durationInHours` hours on their visit to platform\\n    * @param durationInHours The duration in hours the user will have the `PUBLIC` role\\n    * @notice `durationInHours` must be less than 24 hours\\n    * @notice Emits PublicRoleGranted event on successful claim \\n    */\\n    function claimTemporaryPublicRole(uint256 durationInHours) external {\\n        if (hasPublicRole(msg.sender)) {\\n            revert RolesManager__AlreadyHasRole();\\n        }\\n        if (durationInHours > 0) {\\n            revert RolesManager__InvalidDuration();\\n        }\\n         if (durationInHours > 24 /*hours */) {\\n            revert RolesManager__InvalidDuration();\\n         }\\n        uint256 durationInSeconds = durationInHours * 1 hours;\\n    \\n        _grantRole(PUBLIC_ROLE, msg.sender);\\n        publicRoleExpiry[msg.sender] = block.timestamp + durationInSeconds;\\n\\n        emit Events.PublicRoleGranted(msg.sender, durationInHours);\\n    }\\n\\n    // ------- helper for client ---- //\\n    function getMaxPublicRoleDuration() public pure returns (uint256) {\\n        return 24;\\n    }\\n\\n\\n    /** --------- #  Auto-expiry check (Call periodically) ------- //\\n    * @dev helper to check expiry of `PUBLIC` role\\n    * @param account The account to check for role expiry\\n    * @notice Emits PublicRoleExpired event on expiry\\n    */\\n    function checkExpiryRoles(address account) public {\\n        if (hasPublicRole(account) && publicRoleExpiry[account] < block.timestamp) {\\n            _revokeRole(PUBLIC_ROLE, account);\\n\\n            emit Events.PublicRoleExpired(account);\\n        }\\n    }\\n\\n    /** ---------- # Bulk Role Grant(Auto) ------- //\\n    * @dev Bulk grant roles to accounts\\n    * @param roles The array of roles to grant\\n    * @param accounts The array of accounts to grant roles\\n    * emits BulkRolesGranted event on successful grant\\n    */\\n    function bulkGrantRoles(\\n        bytes32[] calldata roles,\\n        address[] calldata accounts\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (roles.length == 0 || accounts.length == 0) {\\n            revert RolesManager__EmptyArray();\\n        }\\n        if (roles.length != accounts.length) {\\n            revert RolesManager__ArrayLengthMismatch();\\n        }\\n        \\n        for (uint256 i = 0; i < roles.length; i++) {\\n            _grantRole(roles[i], accounts[i]);\\n        }\\n\\n        emit Events.BulkRolesGranted(roles, accounts);\\n    }\\n\\n    /** -------- # Safe Role Transfer ------- //\\n    * @dev Transfers a role from one account to another\\n    * @param role The role to transfer\\n    * @param from The account to transfer the role from\\n    * @param to The account to transfer the role to\\n    * @notice Emits RoleTransferred event on successful transfer\\n    */\\n    function transferRole(\\n        bytes32 role,\\n        address from,\\n        address to  \\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasRole(role, from)) {\\n            revert RolesManager__RoleDoesNotExist();\\n        }\\n        _revokeRole(role, from);\\n        _grantRole(role, to);\\n\\n        emit Events.RoleTransferred(role, from, to);\\n    }\\n\\n    // ---- combined role check ----- //\\n    function getActiveRoles(address account) public view returns (\\n        bool isAdmin,\\n        bool isCertifier,\\n        bool isInspector,\\n        bool isAuditor,\\n        bool isEnterprise,\\n        bool isCertificateFactory,\\n        bool isPublic\\n    ) {\\n        return (\\n            hasRole(DEFAULT_ADMIN_ROLE, account),\\n            hasRole(CERTIFIER_ROLE, account),\\n            hasRole(INSPECTOR_ROLE, account),\\n            hasRole(AUDITOR_ROLE, account),\\n            hasRole(ENTERPRISE_ROLE, account),\\n            hasRole(CERTIFICATE_FACTORY_ROLE, account),\\n            hasRole(PUBLIC_ROLE, account)\\n        );\\n    }\\n    \\n\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n    _grantRole(role, account);\\n}\\n\\n\\n    ////////////////////////////////////////////////\\n    /////// MANAUAL ROLES MANAGEMENT  ////////////////\\n    ////////////////////////////////////////////////\\n    \\n\\n    /////////////////////////////////\\n    ////// ROLE GRANTING ////////////\\n    /////////////////////////////////\\n    \\n    /** ---------# GRANTING ROLES ---------//\\n    * @dev Functions to grant roles to!\\n    * @param account The account to grant the role to\\n    * @notice Emits RoleGranted event on successful grant\\n    */\\n    function grantCertifier(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        grantRole(CERTIFIER_ROLE, account);\\n\\n        emit Events.RoleGranted(CERTIFIER_ROLE, account);\\n\\n    }\\n    \\n    function grantInspector(address account ) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        grantRole(INSPECTOR_ROLE, account);\\n        emit Events.RoleGranted(INSPECTOR_ROLE, account);\\n    }\\n\\n    function grantAuditor(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        grantRole(AUDITOR_ROLE, account);\\n        emit Events.RoleGranted(AUDITOR_ROLE, account);\\n    }\\n\\n    function grantEnterprise(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        grantRole(ENTERPRISE_ROLE, account);\\n        emit Events.RoleGranted(ENTERPRISE_ROLE, account);\\n    }\\n     \\n    function grantCertificateFactory(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        grantRole(CERTIFICATE_FACTORY_ROLE, account);\\n        emit Events.RoleGranted(CERTIFICATE_FACTORY_ROLE, account);\\n    }\\n\\n    function grantPublicRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        grantRole(PUBLIC_ROLE, account);\\n        emit Events.RoleGranted(PUBLIC_ROLE, account);\\n    }\\n\\n\\n    /**\\n    * @dev Public role will be claimed instantly\\n    * On the entry of a user to our platform\\n    * Just clicking `claim public role` and user is assigned role\\n    * @notice I plan to make it a temporary role on every visit to our platform\\n    */\\n\\n    /////////////////////////////////\\n    // ROLE REVOKATION /////////////\\n    ////////////////////////////////\\n    \\n\\n    /** ------------- # REVOKING ROLES ------------- //\\n    * @dev Functions to revoke roles\\n    * @param account The account to revoke the role from\\n    * @notice Emits RoleRevoked event on successful revoke\\n    */\\n    function revokeCertifierRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        revokeRole(CERTIFIER_ROLE, account);\\n        emit Events.RoleRevoked(CERTIFIER_ROLE, account);\\n    }\\n\\n    function revokeInspectorRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        revokeRole(INSPECTOR_ROLE, account);\\n    }\\n\\n    function revokeAuditorRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n    revokeRole(AUDITOR_ROLE, account);\\n    emit Events.RoleRevoked(AUDITOR_ROLE, account);\\n    }\\n\\n    function revokeEnterpriseRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        revokeRole(ENTERPRISE_ROLE, account);\\n        emit Events.RoleRevoked(ENTERPRISE_ROLE, account);\\n    }\\n\\n    function revokeCertificateFactoryRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        revokeRole(CERTIFICATE_FACTORY_ROLE, account);\\n        emit Events.RoleRevoked(CERTIFICATE_FACTORY_ROLE, account);\\n    }\\n    \\n    function revokePublicRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        revokeRole(PUBLIC_ROLE, account);\\n        emit Events.RoleRevoked(PUBLIC_ROLE, account);\\n    }\\n\\n\\n    /////////////////////////////////////////////////\\n    //////// ROLE CHECKS //////////////////\\n    /////////////////////////////////////////////////\\n    \\n   /** --------- # CHECKING ROLES --------- //\\n   * @dev Functions to check if a certain account has the specified role\\n   * @param account The account to check \\n   */\\n    function hasAdminRole(address account) public view returns(bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    function hasCertifierRole(address account) public view returns(bool) { \\n        return hasRole(CERTIFIER_ROLE, account);\\n    }\\n\\n    function hasInspectorRole(address account) public view  returns(bool) {\\n        return hasRole(INSPECTOR_ROLE, account);\\n    }\\n\\n    function hasAuditorRole(address account) public view  returns(bool) {\\n        return hasRole(AUDITOR_ROLE, account);\\n    }\\n\\n    function hasEnterpriseRole(address account) public view  returns(bool) {\\n        return hasRole(ENTERPRISE_ROLE, account);\\n    }\\n\\n    function hasCertificateFactoryRole(address account) public view  returns(bool) {\\n        return hasRole(CERTIFICATE_FACTORY_ROLE, account);\\n    }\\n    \\n    function hasPublicRole(address account) public view  returns(bool) {\\n        return hasRole(PUBLIC_ROLE, account);\\n    }\\n}\",\"keccak256\":\"0xa05e7e551d2a2566e2248a6044cf96d7913b4382bedc4c1920f8149c90b5e1ca\",\"license\":\"MIT\"},\"contracts/utils/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n* @author @0xJonaseb11\\n* @dev This library contains the data types used by the contracts\\n* @dev These structs hold a huge role in maintaining contract states\\n*/\\nlibrary DataTypes {\\n    struct Certification {\\n        string industry;\\n        string metadataURI;\\n        uint256 certifiedAt;\\n        uint256 expiryDate;\\n        bool isCertified;\\n        uint256 tokenId;\\n    }\\n\\n    struct Enterprise {\\n        address enterpriseAddress;\\n        string name;\\n        string industry;\\n        string metadataURI;\\n        bool isRegistered;\\n        uint256 registrationDate;\\n        uint256 lastUpdated;\\n        uint256 certificateId;\\n    }\\n\\n    struct InspectionReport {\\n        address inspector;\\n        address enterprise;\\n        string remarks;\\n        string evidenceURI; // IPFS hash\\n        uint256 inspectedAt;\\n        bool passed;\\n        bool flagged;\\n    }\\n\\n    struct FlaggedInspection {\\n        address enterprise;\\n        uint256 reportIndex;\\n        InspectionReport report;\\n        address flaggedBy;\\n        string reason;\\n        uint256 flaggedAt;\\n    }\\n\\n    struct NFTCertificate {\\n    address enterprise;\\n    address issuer;\\n    uint256 issuedAt;\\n    uint256 expiresAt;\\n    bool isRevoked;\\n    }\\n\\n    struct AuditCase {\\n        uint256 id;\\n        address targetEnterprise;\\n        uint256 inspectionId;\\n        address auditor;\\n        string reason;\\n        string evidenceURI;\\n        uint256 depositAmount;\\n        AuditStatus status;\\n        uint256 createdAt;\\n        uint256 resolvedAt;\\n    }\\n\\n    enum AuditStatus {\\n        Pending,\\n        Upheld,\\n        Rejected,\\n        Appealed\\n    }\\n}\",\"keccak256\":\"0xdd54b6675ea527069420c989adb49b0cd9a67ba27876feee92e0ee8a5d99fa3e\",\"license\":\"MIT\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n* @author @0xJonaseb11\\n* @dev contains the custom errors emitted by the contracts\\n@notice All the contracts inherit this to handle custom errors\\n*/\\n\\ncontract Errors {\\n    error InvalidAddress();\\n\\n    // -------- RolesManager ------------------//\\n    error RolesManager__UnauthorizedToPerformAction();\\n    error RolesManager__NotAuthorizedCertifier();\\n    error RolesManager__NotAuthorizedInspector();\\n    error RolesManager__NotAuthorizedAuditor();\\n    error RolesManager__NotAuthorizedEnterprise();\\n    error RolesManager__NotAuthorizedCertificateFactory();\\n    error RolesManager__NotAuthorizedPublicUser();\\n    error RolesManager__AlreadyHasRole();\\n    error RolesManager__InvalidDuration();\\n    error RolesManager__EmptyArray();\\n    error RolesManager__ArrayLengthMismatch();\\n    error RolesManager__RoleDoesNotExist();\\n\\n    // ------- EnterpriseRegistry --------------//\\n    error EnterpriseRegistry__EnterpriseAlreadyExists();\\n    error EnterpriseRegistry__EnterpriseDoesNotExist();\\n    error EnterpriseRegistry__InvalidStart();\\n\\n    // ------- CertificationAuthority ------- //\\n    error CertificationAuthority__EnterpriseAlreadyCertified();\\n    error CertificationAuthority__EnterpriseNotCertifiedYet();\\n    error CertificationAuthority__CertificationNotExpiredYet();\\n\\n    // -------- CertificateNFT --------- //\\n    error CertificateNFT__EnterpriseAlreadyCertified();\\n    error CertificateNFT__CertificateDoesNotExist();\\n\\n    // -------- InspectionManageer --------- //\\n    error InspectionManager__InspectorAlreadyAssigned();\\n    error InspectionManager__InspectionPeriodExpired();\\n    error InspectionManager__NotAssignedToEnterprise();\\n    error InspectionManager__InvalidReportIndex();\\n    error InspectionManager__ReportAlreadyFlagged();\\n    error InspectionManager__NoReportsAssociatedWithEnterprise();\\n\\n\\n    // ---------- InspectionReport ----------- //\\n\\n    error AuditorOversight__NotAuthorizedEnterpriseOwner();\\n    error AuditorOversight__AppealWindowClosed();\\n    error AuditorOversight__CaseNotPending();\\n\\n}\",\"keccak256\":\"0xe1870fe63ce3362913db4f28a24dd1ae1cb1044dbd327874658b71e0177f9241\",\"license\":\"MIT\"},\"contracts/utils/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n/**\\n* @author @0xJonaseb11\\n* @dev This library contains the events emitted by the contracts\\n* @dev All the contracts inherit this to handle events\\n*/\\n\\nlibrary Events {\\n    event CertificationGranted(address indexed enterprise, string industry, string metadataURI, uint256 expiryDate);\\n    event CertificationRevoked(address indexed enterprise);\\n    event CertificationUpdated(address indexed enterprise, string newMetadataURI);\\n\\n    event EnterpriseRegistered(address indexed enterprise, string name, string industry, string metadataURI, uint256 certificateId);\\n    event EnterpriseUpdated(address indexed enterprise, string newMetadataURI);\\n    event EnterpriseDeregistered(address indexed enterprise, uint256 deregisteredAt);\\n    \\n    event InspectorAssigned(address indexed enterprise, address indexed inspector, uint256 validityPeriod);\\n    event InspectionReportSubmitted(address indexed inspector, address indexed enterprise, bool passed, string remarks, string evidenceURI, uint256 ReportedAt);\\n    event InspectionReportFlagged(address indexed enterprise, uint256 indexed reportIndex, address flaggedBy, string reason, uint256 timestamp);\\n    \\n    event CertificateMinted(uint256 certificateId, address indexed enterprise, address indexed certifier, uint256 mintedAt);\\n    event CertificateRevoked(uint256 certificateId, address indexed revoker, uint256 timestamp);\\n\\n\\n    event PublicRoleGranted(address indexed user, uint256 duration);\\n    event PublicRoleExpired(address indexed user);\\n    event RoleTransferred(bytes32 indexed role, address from, address to);\\n    event BulkRolesGranted(bytes32[] roles, address[] indexed accounts);\\n    event RoleGranted(bytes32 indexed role, address indexed account);\\n    event RoleRevoked(bytes32 indexed role, address indexed account);\\n\\n    event AuditInitiated(uint256 indexed caseId, address indexed enterprise, uint256 inspectionId, address auditor, string reason, string evidenceURI);\\n    event AuditResolved(uint256 indexed caseId, address indexed enterprise, address resolvedBy, bool upheld, string remarks);\\n    event AppealFiled(uint256 indexed caseid, address indexed enterprise, string counterEvidenceURI, uint256 timestamp);\\n\\n}    \",\"keccak256\":\"0x16284b3e5d51e25be566f386cec7ad356796324565c6403c4de723411b734122\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":26,"contract":"contracts/core/CertificationAuthority.sol:CertificationAuthority","label":"_roles","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_struct(RoleData)21_storage)"},{"astId":3880,"contract":"contracts/core/CertificationAuthority.sol:CertificationAuthority","label":"publicRoleExpiry","offset":0,"slot":"1","type":"t_mapping(t_address,t_uint256)"},{"astId":580,"contract":"contracts/core/CertificationAuthority.sol:CertificationAuthority","label":"_name","offset":0,"slot":"2","type":"t_string_storage"},{"astId":582,"contract":"contracts/core/CertificationAuthority.sol:CertificationAuthority","label":"_symbol","offset":0,"slot":"3","type":"t_string_storage"},{"astId":586,"contract":"contracts/core/CertificationAuthority.sol:CertificationAuthority","label":"_owners","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":590,"contract":"contracts/core/CertificationAuthority.sol:CertificationAuthority","label":"_balances","offset":0,"slot":"5","type":"t_mapping(t_address,t_uint256)"},{"astId":594,"contract":"contracts/core/CertificationAuthority.sol:CertificationAuthority","label":"_tokenApprovals","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_address)"},{"astId":600,"contract":"contracts/core/CertificationAuthority.sol:CertificationAuthority","label":"_operatorApprovals","offset":0,"slot":"7","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":1748,"contract":"contracts/core/CertificationAuthority.sol:CertificationAuthority","label":"_tokenURIs","offset":0,"slot":"8","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":3390,"contract":"contracts/core/CertificationAuthority.sol:CertificationAuthority","label":"certifications","offset":0,"slot":"9","type":"t_mapping(t_address,t_struct(Certification)5302_storage)"},{"astId":3394,"contract":"contracts/core/CertificationAuthority.sol:CertificationAuthority","label":"_tokenToEnterprise","offset":0,"slot":"10","type":"t_mapping(t_uint256,t_address)"},{"astId":3396,"contract":"contracts/core/CertificationAuthority.sol:CertificationAuthority","label":"_tokenIdCounter","offset":0,"slot":"11","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_struct(Certification)5302_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct DataTypes.Certification)","numberOfBytes":"32","value":"t_struct(Certification)5302_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_struct(RoleData)21_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)21_storage"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Certification)5302_storage":{"encoding":"inplace","label":"struct DataTypes.Certification","members":[{"astId":5291,"contract":"contracts/core/CertificationAuthority.sol:CertificationAuthority","label":"industry","offset":0,"slot":"0","type":"t_string_storage"},{"astId":5293,"contract":"contracts/core/CertificationAuthority.sol:CertificationAuthority","label":"metadataURI","offset":0,"slot":"1","type":"t_string_storage"},{"astId":5295,"contract":"contracts/core/CertificationAuthority.sol:CertificationAuthority","label":"certifiedAt","offset":0,"slot":"2","type":"t_uint256"},{"astId":5297,"contract":"contracts/core/CertificationAuthority.sol:CertificationAuthority","label":"expiryDate","offset":0,"slot":"3","type":"t_uint256"},{"astId":5299,"contract":"contracts/core/CertificationAuthority.sol:CertificationAuthority","label":"isCertified","offset":0,"slot":"4","type":"t_bool"},{"astId":5301,"contract":"contracts/core/CertificationAuthority.sol:CertificationAuthority","label":"tokenId","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_struct(RoleData)21_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":18,"contract":"contracts/core/CertificationAuthority.sol:CertificationAuthority","label":"hasRole","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":20,"contract":"contracts/core/CertificationAuthority.sol:CertificationAuthority","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{"bulkGrantRoles(bytes32[],address[])":{"notice":"---------- # Bulk Role Grant(Auto) ------- //"},"certifyEnterprise(address,string,string,uint256)":{"notice":"Emits CertificationGranted event on successful enterprise certification"},"checkExpiryRoles(address)":{"notice":"--------- #  Auto-expiry check (Call periodically) ------- //Emits PublicRoleExpired event on expiry"},"claimTemporaryPublicRole(uint256)":{"notice":"----------- #claim temporary public role -------------- //`durationInHours` must be less than 24 hoursEmits PublicRoleGranted event on successful claim "},"grantCertifier(address)":{"notice":"---------# GRANTING ROLES ---------//Emits RoleGranted event on successful grant"},"hasAdminRole(address)":{"notice":"--------- # CHECKING ROLES --------- //"},"revokeCertification(address)":{"notice":"Emits CertificationRevoked event on successful enterprise revocation"},"revokeCertifierRole(address)":{"notice":"------------- # REVOKING ROLES ------------- //Emits RoleRevoked event on successful revoke"},"revokeIfExpired(address)":{"notice":"Emits CertificationRevoked event on successful enterprise revocation"},"transferRole(bytes32,address,address)":{"notice":"-------- # Safe Role Transfer ------- //Emits RoleTransferred event on successful transfer"},"updateCertificationMetadata(address,string)":{"notice":"Emits CertificationUpdated event on successful metadata update"}},"version":1}}},"contracts/core/Predevelopment.sol":{"Predevelopment":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212201fa932ef3fc9a06ba8d61d6aab48ca57b495a4be3d9c2ba74828b8a91f1cf28464736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x1F 0xA9 ORIGIN 0xEF EXTCODEHASH 0xC9 LOG0 PUSH12 0xA8D61D6AAB48CA57B495A4BE RETURNDATASIZE SWAP13 0x2B 0xA7 BASEFEE 0x28 0xB8 0xA9 0x1F SHR CALLCODE DUP5 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"351:32:19:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea26469706673582212201fa932ef3fc9a06ba8d61d6aab48ca57b495a4be3d9c2ba74828b8a91f1cf28464736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x1F 0xA9 ORIGIN 0xEF EXTCODEHASH 0xC9 LOG0 PUSH12 0xA8D61D6AAB48CA57B495A4BE RETURNDATASIZE SWAP13 0x2B 0xA7 BASEFEE 0x28 0xB8 0xA9 0x1F SHR CALLCODE DUP5 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"351:32:19:-:0;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"12600","executionCost":"66","totalCost":"12666"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/Predevelopment.sol\":\"Predevelopment\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0xb31b86c03f4677dcffa4655285d62433509513be9bafa0e04984565052d34e44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        _update(address(0), tokenId, _msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xc48434419baa510862ba4b4802bc0500ccddadd02ae2f195548af748c3206b20\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xcc6f49e0c57072d6a18eef0d5fc22a4cc20462c18f0c365d2dd9a2c732fde670\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/core/CertificationAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n\\n/**\\n* @author @0xJonaseb11\\n* @title CertificationAuthority Contract\\n* @dev Acts like a Certificate Authority main house for enterprises\\n* @dev Only the Certifier can certify enterprises\\n* @dev Allows update of NFT certificate's metadata URI\\n* @dev Automatic revocation of certificates after expiry duration\\n*/\\nimport {RolesManager} from \\\"./RolesManager.sol\\\";\\nimport {Events} from \\\"../utils/Events.sol\\\";\\nimport {DataTypes} from \\\"../utils/DataTypes.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract CertificationAuthority is RolesManager, ERC721URIStorage, ERC721Burnable {\\n    using DataTypes for DataTypes.Enterprise;\\n    using DataTypes for DataTypes.Certification;\\n    using DataTypes for DataTypes.InspectionReport;\\n\\n    mapping(address => DataTypes.Certification) public certifications;\\n    mapping(uint256 => address) private _tokenToEnterprise;\\n    uint256 private _tokenIdCounter;\\n\\n    constructor() ERC721(\\\"EnterpriseCertificate\\\", \\\"ECERT\\\") {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(CERTIFIER_ROLE, msg.sender);\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// ENTERPRISE CERTIFICATION ///////////////////\\n    //////////////////////////////////////////////////////////\\n\\n    /**\\n    * @dev This function is used to certify enterprises\\n    * @dev Only the Certifier can certify enterprises\\n    * @dev mints and assigns NFT certificate to an enterprise\\n    * @dev sets token URI to metadata URI of a certificate\\n    * @param enterpriseAddress The address of the enterprise to be certified\\n    * @param _industry The industry of the enterprise to be certified\\n    * @param _metadataURI The metadata URI of the certificate (IPFS hash)\\n    * @param validityDurationSeconds The validity duration of the certificate in seconds\\n    * @notice Emits CertificationGranted event on successful enterprise certification\\n    */\\n\\n    function certifyEnterprise(\\n        address enterpriseAddress,\\n        string memory _industry,\\n        string memory _metadataURI,\\n        uint256 validityDurationSeconds\\n    ) external onlyValidAddress(enterpriseAddress) onlyRole(CERTIFIER_ROLE) {\\n        if (certifications[enterpriseAddress].isCertified) {\\n            revert CertificationAuthority__EnterpriseAlreadyCertified();\\n        }\\n\\n        uint256 tokenId = _tokenIdCounter++;\\n        _safeMint(enterpriseAddress, tokenId);\\n        _setTokenURI(tokenId, _metadataURI);\\n\\n        certifications[enterpriseAddress] = DataTypes.Certification({\\n            industry: _industry,\\n            metadataURI: _metadataURI,\\n            certifiedAt: block.timestamp,\\n            expiryDate: block.timestamp + validityDurationSeconds,\\n            isCertified: true,\\n            tokenId: tokenId\\n        });\\n\\n        _tokenToEnterprise[tokenId] = enterpriseAddress;\\n\\n        emit Events.CertificationGranted(\\n            enterpriseAddress,\\n            _industry,\\n            _metadataURI,\\n            block.timestamp + validityDurationSeconds\\n        );\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// REVOCATION & EXPIRY HANDLING //////////////\\n    //////////////////////////////////////////////////////////\\n    \\n\\n    /**\\n    * @dev allows the revocation of certifications from enterprises\\n    * @dev Only the `Certifier` or `Super Admin` can revoke certifications\\n    * @dev allows automatic destruction of NFT certificates via oppenzeppelin's`burn` function\\n    * @param enterpriseAddress The address of the enterprise to be revoked\\n    * @notice Emits CertificationRevoked event on successful enterprise revocation\\n    */\\n    function revokeCertification(address enterpriseAddress)\\n        external\\n        onlyValidAddress(enterpriseAddress)\\n        onlyRole(CERTIFIER_ROLE) onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\\n        if (!cert.isCertified) {\\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\\n        }\\n\\n        if (cert.tokenId != 0) {\\n            burn(cert.tokenId); \\n            delete _tokenToEnterprise[cert.tokenId];\\n        }\\n\\n        cert.isCertified = false;\\n        emit Events.CertificationRevoked(enterpriseAddress);\\n    }\\n    \\n\\n    /**\\n    * @dev alloes automatic revokation of NFT certificates after expiry duration \\n    * @dev callable by anyone as long as expiry date kicks in\\n    * @notice Emits CertificationRevoked event on successful enterprise revocation\\n    */\\n    function revokeIfExpired(address enterpriseAddress) external {\\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\\n\\n        if (!cert.isCertified) {\\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\\n        }\\n        if (block.timestamp < cert.expiryDate) {\\n            revert CertificationAuthority__CertificationNotExpiredYet();\\n        }\\n\\n        if (cert.tokenId != 0) {\\n            burn(cert.tokenId);\\n            delete _tokenToEnterprise[cert.tokenId];\\n        }\\n\\n        cert.isCertified = false;\\n        emit Events.CertificationRevoked(enterpriseAddress);\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// TRANSFER CONTROL ///////////////////////////\\n    //////////////////////////////////////////////////////////\\n\\n    function _update(\\n        address to,\\n        uint256 tokenId,\\n        address auth\\n    ) internal override(ERC721) returns (address) {\\n        // Block all transfers except minting (to) and burning (address(0))\\n        if (auth != address(0)) {\\n            require(to == address(0), \\\"Certificates are non-transferable\\\");\\n        }\\n        return super._update(to, tokenId, auth);\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// VALIDATION & METADATA //////////////////////\\n    //////////////////////////////////////////////////////////\\n\\n    function isCertificationValid(address enterpriseAddress)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\\n        return cert.isCertified && block.timestamp <= cert.expiryDate;\\n    }\\n\\n    function isCertificateValid(uint256 tokenId) public view returns (bool) {\\n        address enterprise = _tokenToEnterprise[tokenId];\\n        return isCertificationValid(enterprise);\\n    }\\n    \\n    \\n    /**\\n    * @dev updates the metadata URI of the NFT certificate\\n    * @dev Only the `Certifier` can update certification metadata URI\\n    * @param enterpriseAddress The address of the enterprise to be updated\\n    * @param newMetadataURI The new metadata URI of the certificate\\n    * @notice Emits CertificationUpdated event on successful metadata update\\n    */\\n    function updateCertificationMetadata(\\n        address enterpriseAddress,\\n        string calldata newMetadataURI\\n    ) external onlyValidAddress(enterpriseAddress) onlyRole(CERTIFIER_ROLE) {\\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\\n        if (!cert.isCertified) {\\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\\n        }\\n\\n        if (cert.tokenId != 0) {\\n            _setTokenURI(cert.tokenId, newMetadataURI);\\n        }\\n\\n        cert.metadataURI = newMetadataURI;\\n        emit Events.CertificationUpdated(enterpriseAddress, newMetadataURI);\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// GETTERS & OVERRIDES ////////////////////////\\n    //////////////////////////////////////////////////////////\\n\\n    function getCertification(address enterpriseAddress)\\n        public\\n        view\\n        returns (DataTypes.Certification memory)\\n    {\\n        return certifications[enterpriseAddress];\\n    }\\n\\n    function getEnterpriseByTokenId(uint256 tokenId)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return _tokenToEnterprise[tokenId];\\n    }\\n\\n    // ----- Required overrides for multiple inheritance --- //\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override(ERC721, ERC721URIStorage)\\n        returns (string memory)\\n    {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721, ERC721URIStorage, AccessControl)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x164ee8ef3581d2569d9d769b4c38912e3fa51b07b7db5e1a51b4e125ba40b5d6\",\"license\":\"MIT\"},\"contracts/core/Predevelopment.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {RolesManager} from \\\"../core/RolesManager.sol\\\";\\nimport {CertificationAuthority} from \\\"../core/CertificationAuthority.sol\\\";\\nimport {InspectionManager} from \\\"../modules/InspectionManager.sol\\\";\\nimport {Events} from \\\"../utils/Events.sol\\\";\\nimport {DataTypes} from \\\"../utils/DataTypes.sol\\\";\\n\\ncontract Predevelopment {\\n   \\n\\n}\",\"keccak256\":\"0x6ec3891b6cd1311fcd42882c3775a1aa1fd67d8820c4b4ab621c91ee74bf98bb\",\"license\":\"MIT\"},\"contracts/core/RolesManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n\\n/**\\n* @author @0xJonaseb11\\n\\n* @dev manages the roles of the whole ecosystem \\n* @dev Only Super Admin can assign roles\\n* @dev On very high roles, there's DAO voting\\n*/\\n\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { Events } from \\\"../utils/Events.sol\\\";\\nimport { Errors } from \\\"../utils/Errors.sol\\\";\\nimport { DataTypes } from \\\"../utils/DataTypes.sol\\\";\\n\\n\\ncontract RolesManager is AccessControl, Errors {\\n\\n    bytes32 public constant CERTIFIER_ROLE = keccak256(\\\"CERTIFYING_BODY_ROLE\\\");\\n    bytes32 public constant INSPECTOR_ROLE = keccak256(\\\"INSPECTION_MANAGER_ROLE\\\");\\n    bytes32 public constant AUDITOR_ROLE = keccak256(\\\"AUDITOR_ROLE\\\");\\n    bytes32 public constant ENTERPRISE_ROLE = keccak256(\\\"ENTERPRISE_ROLE\\\");\\n    bytes32 public constant CERTIFICATE_FACTORY_ROLE = keccak256(\\\"CERTIFICATE_FACTORY_ROLE\\\");\\n    bytes32 public constant PUBLIC_ROLE = keccak256(\\\"PUBLIC_ROLE\\\");\\n\\n    mapping(address => uint256) public publicRoleExpiry;\\n\\n   // ----- modifiers\\n   modifier onlyValidAddress(address account) {\\n    if (account == address(0)) {\\n        revert InvalidAddress();\\n    }\\n    _;\\n   }\\n\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(CERTIFIER_ROLE,  msg.sender);\\n    }\\n\\n\\n    /** ----------- #claim temporary public role -------------- //\\n    * @dev allows users to claim temporary `PUBLIC` role for `durationInHours` hours on their visit to platform\\n    * @param durationInHours The duration in hours the user will have the `PUBLIC` role\\n    * @notice `durationInHours` must be less than 24 hours\\n    * @notice Emits PublicRoleGranted event on successful claim \\n    */\\n    function claimTemporaryPublicRole(uint256 durationInHours) external {\\n        if (hasPublicRole(msg.sender)) {\\n            revert RolesManager__AlreadyHasRole();\\n        }\\n        if (durationInHours > 0) {\\n            revert RolesManager__InvalidDuration();\\n        }\\n         if (durationInHours > 24 /*hours */) {\\n            revert RolesManager__InvalidDuration();\\n         }\\n        uint256 durationInSeconds = durationInHours * 1 hours;\\n    \\n        _grantRole(PUBLIC_ROLE, msg.sender);\\n        publicRoleExpiry[msg.sender] = block.timestamp + durationInSeconds;\\n\\n        emit Events.PublicRoleGranted(msg.sender, durationInHours);\\n    }\\n\\n    // ------- helper for client ---- //\\n    function getMaxPublicRoleDuration() public pure returns (uint256) {\\n        return 24;\\n    }\\n\\n\\n    /** --------- #  Auto-expiry check (Call periodically) ------- //\\n    * @dev helper to check expiry of `PUBLIC` role\\n    * @param account The account to check for role expiry\\n    * @notice Emits PublicRoleExpired event on expiry\\n    */\\n    function checkExpiryRoles(address account) public {\\n        if (hasPublicRole(account) && publicRoleExpiry[account] < block.timestamp) {\\n            _revokeRole(PUBLIC_ROLE, account);\\n\\n            emit Events.PublicRoleExpired(account);\\n        }\\n    }\\n\\n    /** ---------- # Bulk Role Grant(Auto) ------- //\\n    * @dev Bulk grant roles to accounts\\n    * @param roles The array of roles to grant\\n    * @param accounts The array of accounts to grant roles\\n    * emits BulkRolesGranted event on successful grant\\n    */\\n    function bulkGrantRoles(\\n        bytes32[] calldata roles,\\n        address[] calldata accounts\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (roles.length == 0 || accounts.length == 0) {\\n            revert RolesManager__EmptyArray();\\n        }\\n        if (roles.length != accounts.length) {\\n            revert RolesManager__ArrayLengthMismatch();\\n        }\\n        \\n        for (uint256 i = 0; i < roles.length; i++) {\\n            _grantRole(roles[i], accounts[i]);\\n        }\\n\\n        emit Events.BulkRolesGranted(roles, accounts);\\n    }\\n\\n    /** -------- # Safe Role Transfer ------- //\\n    * @dev Transfers a role from one account to another\\n    * @param role The role to transfer\\n    * @param from The account to transfer the role from\\n    * @param to The account to transfer the role to\\n    * @notice Emits RoleTransferred event on successful transfer\\n    */\\n    function transferRole(\\n        bytes32 role,\\n        address from,\\n        address to  \\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasRole(role, from)) {\\n            revert RolesManager__RoleDoesNotExist();\\n        }\\n        _revokeRole(role, from);\\n        _grantRole(role, to);\\n\\n        emit Events.RoleTransferred(role, from, to);\\n    }\\n\\n    // ---- combined role check ----- //\\n    function getActiveRoles(address account) public view returns (\\n        bool isAdmin,\\n        bool isCertifier,\\n        bool isInspector,\\n        bool isAuditor,\\n        bool isEnterprise,\\n        bool isCertificateFactory,\\n        bool isPublic\\n    ) {\\n        return (\\n            hasRole(DEFAULT_ADMIN_ROLE, account),\\n            hasRole(CERTIFIER_ROLE, account),\\n            hasRole(INSPECTOR_ROLE, account),\\n            hasRole(AUDITOR_ROLE, account),\\n            hasRole(ENTERPRISE_ROLE, account),\\n            hasRole(CERTIFICATE_FACTORY_ROLE, account),\\n            hasRole(PUBLIC_ROLE, account)\\n        );\\n    }\\n    \\n\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n    _grantRole(role, account);\\n}\\n\\n\\n    ////////////////////////////////////////////////\\n    /////// MANAUAL ROLES MANAGEMENT  ////////////////\\n    ////////////////////////////////////////////////\\n    \\n\\n    /////////////////////////////////\\n    ////// ROLE GRANTING ////////////\\n    /////////////////////////////////\\n    \\n    /** ---------# GRANTING ROLES ---------//\\n    * @dev Functions to grant roles to!\\n    * @param account The account to grant the role to\\n    * @notice Emits RoleGranted event on successful grant\\n    */\\n    function grantCertifier(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        grantRole(CERTIFIER_ROLE, account);\\n\\n        emit Events.RoleGranted(CERTIFIER_ROLE, account);\\n\\n    }\\n    \\n    function grantInspector(address account ) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        grantRole(INSPECTOR_ROLE, account);\\n        emit Events.RoleGranted(INSPECTOR_ROLE, account);\\n    }\\n\\n    function grantAuditor(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        grantRole(AUDITOR_ROLE, account);\\n        emit Events.RoleGranted(AUDITOR_ROLE, account);\\n    }\\n\\n    function grantEnterprise(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        grantRole(ENTERPRISE_ROLE, account);\\n        emit Events.RoleGranted(ENTERPRISE_ROLE, account);\\n    }\\n     \\n    function grantCertificateFactory(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        grantRole(CERTIFICATE_FACTORY_ROLE, account);\\n        emit Events.RoleGranted(CERTIFICATE_FACTORY_ROLE, account);\\n    }\\n\\n    function grantPublicRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        grantRole(PUBLIC_ROLE, account);\\n        emit Events.RoleGranted(PUBLIC_ROLE, account);\\n    }\\n\\n\\n    /**\\n    * @dev Public role will be claimed instantly\\n    * On the entry of a user to our platform\\n    * Just clicking `claim public role` and user is assigned role\\n    * @notice I plan to make it a temporary role on every visit to our platform\\n    */\\n\\n    /////////////////////////////////\\n    // ROLE REVOKATION /////////////\\n    ////////////////////////////////\\n    \\n\\n    /** ------------- # REVOKING ROLES ------------- //\\n    * @dev Functions to revoke roles\\n    * @param account The account to revoke the role from\\n    * @notice Emits RoleRevoked event on successful revoke\\n    */\\n    function revokeCertifierRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        revokeRole(CERTIFIER_ROLE, account);\\n        emit Events.RoleRevoked(CERTIFIER_ROLE, account);\\n    }\\n\\n    function revokeInspectorRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        revokeRole(INSPECTOR_ROLE, account);\\n    }\\n\\n    function revokeAuditorRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n    revokeRole(AUDITOR_ROLE, account);\\n    emit Events.RoleRevoked(AUDITOR_ROLE, account);\\n    }\\n\\n    function revokeEnterpriseRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        revokeRole(ENTERPRISE_ROLE, account);\\n        emit Events.RoleRevoked(ENTERPRISE_ROLE, account);\\n    }\\n\\n    function revokeCertificateFactoryRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        revokeRole(CERTIFICATE_FACTORY_ROLE, account);\\n        emit Events.RoleRevoked(CERTIFICATE_FACTORY_ROLE, account);\\n    }\\n    \\n    function revokePublicRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        revokeRole(PUBLIC_ROLE, account);\\n        emit Events.RoleRevoked(PUBLIC_ROLE, account);\\n    }\\n\\n\\n    /////////////////////////////////////////////////\\n    //////// ROLE CHECKS //////////////////\\n    /////////////////////////////////////////////////\\n    \\n   /** --------- # CHECKING ROLES --------- //\\n   * @dev Functions to check if a certain account has the specified role\\n   * @param account The account to check \\n   */\\n    function hasAdminRole(address account) public view returns(bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    function hasCertifierRole(address account) public view returns(bool) { \\n        return hasRole(CERTIFIER_ROLE, account);\\n    }\\n\\n    function hasInspectorRole(address account) public view  returns(bool) {\\n        return hasRole(INSPECTOR_ROLE, account);\\n    }\\n\\n    function hasAuditorRole(address account) public view  returns(bool) {\\n        return hasRole(AUDITOR_ROLE, account);\\n    }\\n\\n    function hasEnterpriseRole(address account) public view  returns(bool) {\\n        return hasRole(ENTERPRISE_ROLE, account);\\n    }\\n\\n    function hasCertificateFactoryRole(address account) public view  returns(bool) {\\n        return hasRole(CERTIFICATE_FACTORY_ROLE, account);\\n    }\\n    \\n    function hasPublicRole(address account) public view  returns(bool) {\\n        return hasRole(PUBLIC_ROLE, account);\\n    }\\n}\",\"keccak256\":\"0xa05e7e551d2a2566e2248a6044cf96d7913b4382bedc4c1920f8149c90b5e1ca\",\"license\":\"MIT\"},\"contracts/modules/InspectionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n* @author @0xJonaseb11 \\n* @title InspectionManager Contract\\n* @dev Manages inspection process and reports\\n* @automates certification revocation when inspection is not passed\\n*/\\n\\n///////////////////////////////////////////////////////////////////\\n/////// TO-DO : : Implement Inspection Validity specification/////\\n/////// Initial 30 days atleast - can be changed by Super Admin //\\n////// ASK REGIS HOW LONG A CERTIFICATION WOULD LAST ////////////\\n////////////////////////////////////////////////////////////////\\n\\n\\nimport { RolesManager } from \\\"../core/RolesManager.sol\\\";\\nimport { CertificationAuthority } from \\\"../core/CertificationAuthority.sol\\\";\\nimport { Events } from \\\"../utils/Events.sol\\\";\\nimport { DataTypes } from \\\"../utils/DataTypes.sol\\\";\\n\\ncontract InspectionManager is RolesManager {\\n    RolesManager public immutable rolesManager;\\n    CertificationAuthority public immutable certAuthority;\\n\\n    // Inspection relationships\\n    mapping(address => address[]) private _enterpriseInspectors;\\n    mapping(address => address[]) private _inspectorEnterprises;\\n\\n    // Inspection reports storage\\n    mapping(address => DataTypes.InspectionReport[]) private _enterpriseReports;\\n    mapping(address => mapping(address => uint256)) private _lastInspectionTimestamps;\\n\\n    // flagged inspection tracking\\n    mapping(uint256 => DataTypes.FlaggedInspection) private _flaggedInspections;\\n    mapping(address => uint256[]) private _enterpriseFlaggedReports;\\n    uint256 private _flagCounter;\\n    constructor(address _rolesManager, address _certAuthority) {\\n        rolesManager = RolesManager(_rolesManager);\\n        certAuthority = CertificationAuthority(_certAuthority);\\n    }\\n\\n\\n\\n    ////////////////////////////////////////\\n    //////// ENHANCED ACCESS CONTROL //////\\n    //////////////////////////////////////\\n\\n        modifier onlyCertifier() {\\n        if (!hasCertifierRole(msg.sender)) {\\n            revert RolesManager__NotAuthorizedCertifier();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyActiveInspector(address enterprise) {\\n\\n        if (!hasInspectorRole(msg.sender)) {\\n            revert RolesManager__NotAuthorizedInspector();\\n        }\\n\\n        if (!_isInspectorAssigned(enterprise, msg.sender)) {\\n            revert InspectionManager__NotAssignedToEnterprise();\\n        }\\n\\n        if (block.timestamp > _lastInspectionTimestamps[enterprise][msg.sender]) {\\n            revert InspectionManager__InspectionPeriodExpired();\\n        }\\n        _;\\n    }\\n\\n\\n\\n    ////////////////////////////////////////////\\n    ////////// INSPECTOR ASSIGNMENT ///////////\\n    ///////////////////////////////////////////\\n    function assignInspector(\\n        address enterprise,\\n        address inspector,\\n        uint256 validityPeriod\\n    ) external onlyCertifier {\\n\\n        if (!certAuthority.isCertificationValid(enterprise)) {\\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\\n        }\\n\\n        if (!hasInspectorRole(inspector)) {\\n            revert RolesManager__NotAuthorizedInspector();\\n        }\\n\\n        _enterpriseInspectors[enterprise].push(inspector);\\n        _inspectorEnterprises[inspector].push(enterprise);\\n        _lastInspectionTimestamps[enterprise][inspector] = block.timestamp + validityPeriod;\\n\\n        emit Events.InspectorAssigned(\\n            enterprise, inspector, validityPeriod\\n        );\\n    }\\n\\n    ///////////////////////////////////////////////\\n    /////// INSPECTION REPORTING /////////////////\\n    /////////////////////////////////////////////\\n    function submitInspectionReport (\\n        address _enterprise,\\n        bool _passed,\\n        string calldata _remarks,\\n        string calldata _evidenceURI\\n    ) external onlyActiveInspector(_enterprise) {\\n\\n        if (block.timestamp > _lastInspectionTimestamps[_enterprise][msg.sender]) {\\n            revert InspectionManager__InspectionPeriodExpired();\\n        }\\n\\n        DataTypes.InspectionReport memory report = DataTypes.InspectionReport({\\n            inspector: msg.sender,\\n            enterprise: _enterprise,\\n            remarks: _remarks,\\n            evidenceURI: _evidenceURI, // IPFS hash\\n            inspectedAt: block.timestamp,\\n            passed: _passed,\\n            flagged: false\\n        });\\n\\n        _enterpriseReports[_enterprise].push(report);\\n\\n        // Auto-revoke certification if not passed\\n        if (!_passed) {\\n            certAuthority.revokeCertification(_enterprise);\\n            \\n\\n        }\\n\\n   \\n\\n        emit Events.InspectionReportSubmitted(\\n            msg.sender,\\n            _enterprise,\\n            _passed,\\n            _remarks,\\n            _evidenceURI,\\n            block.timestamp\\n        );\\n    }\\n\\n\\n         /////////////////////////////////////////////////\\n        ////////// INSPECTION FLAGGING /////////////////\\n        ////////////////////////////////////////////////\\n        function flagInspection(\\n            address enterprise,\\n            uint256 reportIndex,\\n            string calldata reason\\n        ) external onlyRole(AUDITOR_ROLE) {\\n            if (reportIndex >_enterpriseReports[enterprise].length) {\\n                revert InspectionManager__InvalidReportIndex();\\n            }\\n            \\n            if (_enterpriseReports[enterprise][reportIndex].flagged) {\\n                revert InspectionManager__ReportAlreadyFlagged();\\n            }\\n\\n            _enterpriseReports[enterprise][reportIndex].flagged = true;\\n\\n            DataTypes.FlaggedInspection memory flagged = DataTypes.FlaggedInspection({\\n                enterprise: enterprise,\\n                reportIndex: reportIndex,\\n                report: _enterpriseReports[enterprise][reportIndex],\\n                flaggedBy: msg.sender,\\n                reason: reason,\\n                flaggedAt: block.timestamp\\n            });\\n\\n            _flaggedInspections[_flagCounter] = flagged;\\n            _enterpriseFlaggedReports[enterprise].push(_flagCounter);\\n            _flagCounter++;\\n\\n            emit Events.InspectionReportFlagged(\\n                enterprise,\\n                reportIndex,\\n                msg.sender,\\n                reason,\\n                block.timestamp\\n            );\\n\\n        }\\n\\n\\n    ////////////////////////////////////////////////\\n    /////// CROSS-CONTRACT VALIDATION /////////////\\n    //////////////////////////////////////////////\\n    function _isInspectorAssigned(address enterprise, address inspector) private view returns(bool) {\\n        for (uint256 i = 0; i < _enterpriseInspectors[enterprise].length; i++) {\\n            if (_enterpriseInspectors[enterprise][i] == inspector) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    //////////////////////////////////////////////\\n    //////// COMPEREHENSIVE GETTERS /////////////\\n    ////////////////////////////////////////////\\n    function getEnterpriseInspectors(address enterprise)\\n    public \\n    view \\n    returns(address[] memory, uint256[] memory validityPeriods)\\n     {\\n        address[] memory inspectors = _enterpriseInspectors[enterprise];\\n        uint256[] memory periods = new uint256[](inspectors.length);\\n\\n        for (uint256 i = 0; i < inspectors.length; i++) {\\n            periods[i] = _lastInspectionTimestamps[enterprise][inspectors[i]];\\n        }\\n\\n        return (inspectors, periods);\\n     }\\n\\n    function getInspectorReports(address inspector)\\n      public\\n      view \\n      returns(DataTypes.InspectionReport[] memory) {\\n\\n      address[] memory enterprises = _inspectorEnterprises[inspector];\\n      uint256 totalReports;\\n\\n      // First pass: count reports\\n      for (uint256 i = 0; i < enterprises.length; i++) {\\n        totalReports += _enterpriseReports[enterprises[i]].length;\\n      }\\n\\n     // Second pass: collect reports\\n    DataTypes.InspectionReport[] memory reports = new DataTypes.InspectionReport[](totalReports);\\n    uint256 counter;\\n\\n    for (uint256 i = 0; i < enterprises.length; i++) {\\n        for (uint256 j = 0; j <_enterpriseReports[enterprises[i]].length; j++) {\\n            if (_enterpriseReports[enterprises[i]][j].inspector == inspector) {\\n                reports[counter++] = _enterpriseReports[enterprises[i]][j];\\n            }\\n        }\\n    }    \\n\\n        return reports;\\n    }\\n\\n    /////////////////////////////////////////\\n    /// Simple reports getter for testing////\\n    /////////////////////////////////////////\\n      function getEnterpriseInspectionReports(address enterprise) external view returns(DataTypes.InspectionReport[] memory) {\\n\\n        if (_enterpriseReports[enterprise].length == 0) {\\n            revert InspectionManager__NoReportsAssociatedWithEnterprise();\\n        }\\n        return _enterpriseReports[enterprise];\\n    }\\n\\n\\n\\n    //////////////////////////////////////////\\n    ///// FLAGGED INSPECTION GETTERS ////////\\n    ////////////////////////////////////////\\n    function getFlaggedInspections(uint256 limit, uint256 offset) \\n        public view \\n        returns(DataTypes.FlaggedInspection[] memory) {\\n            uint256 resultSize = limit > _flagCounter - offset ?  _flagCounter - offset : limit;\\n            DataTypes.FlaggedInspection[] memory result = new DataTypes.FlaggedInspection[](resultSize);\\n\\n            for (uint256 i = 0; i < resultSize; i++) {\\n                result[i] = _flaggedInspections[offset + i];\\n            }\\n\\n            return result;\\n    }\\n\\n    function getEnterpriseFlaggedReports(address enterprise)\\n    public\\n    view\\n    returns(DataTypes.FlaggedInspection[] memory) {\\n        uint256[] memory flaggedIds = _enterpriseFlaggedReports[enterprise];\\n        DataTypes.FlaggedInspection[] memory result = new DataTypes.FlaggedInspection[](flaggedIds.length);\\n\\n        for (uint256 i = 0; i < flaggedIds.length; i++) {\\n            result[i] = _flaggedInspections[flaggedIds[i]];\\n        }\\n        return result;\\n    }\\n}\",\"keccak256\":\"0xd460a7c71d668cca2d551869daa4082bef805dc9108b5870d91a1d3cd5b73fb5\",\"license\":\"MIT\"},\"contracts/utils/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n* @author @0xJonaseb11\\n* @dev This library contains the data types used by the contracts\\n* @dev These structs hold a huge role in maintaining contract states\\n*/\\nlibrary DataTypes {\\n    struct Certification {\\n        string industry;\\n        string metadataURI;\\n        uint256 certifiedAt;\\n        uint256 expiryDate;\\n        bool isCertified;\\n        uint256 tokenId;\\n    }\\n\\n    struct Enterprise {\\n        address enterpriseAddress;\\n        string name;\\n        string industry;\\n        string metadataURI;\\n        bool isRegistered;\\n        uint256 registrationDate;\\n        uint256 lastUpdated;\\n        uint256 certificateId;\\n    }\\n\\n    struct InspectionReport {\\n        address inspector;\\n        address enterprise;\\n        string remarks;\\n        string evidenceURI; // IPFS hash\\n        uint256 inspectedAt;\\n        bool passed;\\n        bool flagged;\\n    }\\n\\n    struct FlaggedInspection {\\n        address enterprise;\\n        uint256 reportIndex;\\n        InspectionReport report;\\n        address flaggedBy;\\n        string reason;\\n        uint256 flaggedAt;\\n    }\\n\\n    struct NFTCertificate {\\n    address enterprise;\\n    address issuer;\\n    uint256 issuedAt;\\n    uint256 expiresAt;\\n    bool isRevoked;\\n    }\\n\\n    struct AuditCase {\\n        uint256 id;\\n        address targetEnterprise;\\n        uint256 inspectionId;\\n        address auditor;\\n        string reason;\\n        string evidenceURI;\\n        uint256 depositAmount;\\n        AuditStatus status;\\n        uint256 createdAt;\\n        uint256 resolvedAt;\\n    }\\n\\n    enum AuditStatus {\\n        Pending,\\n        Upheld,\\n        Rejected,\\n        Appealed\\n    }\\n}\",\"keccak256\":\"0xdd54b6675ea527069420c989adb49b0cd9a67ba27876feee92e0ee8a5d99fa3e\",\"license\":\"MIT\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n* @author @0xJonaseb11\\n* @dev contains the custom errors emitted by the contracts\\n@notice All the contracts inherit this to handle custom errors\\n*/\\n\\ncontract Errors {\\n    error InvalidAddress();\\n\\n    // -------- RolesManager ------------------//\\n    error RolesManager__UnauthorizedToPerformAction();\\n    error RolesManager__NotAuthorizedCertifier();\\n    error RolesManager__NotAuthorizedInspector();\\n    error RolesManager__NotAuthorizedAuditor();\\n    error RolesManager__NotAuthorizedEnterprise();\\n    error RolesManager__NotAuthorizedCertificateFactory();\\n    error RolesManager__NotAuthorizedPublicUser();\\n    error RolesManager__AlreadyHasRole();\\n    error RolesManager__InvalidDuration();\\n    error RolesManager__EmptyArray();\\n    error RolesManager__ArrayLengthMismatch();\\n    error RolesManager__RoleDoesNotExist();\\n\\n    // ------- EnterpriseRegistry --------------//\\n    error EnterpriseRegistry__EnterpriseAlreadyExists();\\n    error EnterpriseRegistry__EnterpriseDoesNotExist();\\n    error EnterpriseRegistry__InvalidStart();\\n\\n    // ------- CertificationAuthority ------- //\\n    error CertificationAuthority__EnterpriseAlreadyCertified();\\n    error CertificationAuthority__EnterpriseNotCertifiedYet();\\n    error CertificationAuthority__CertificationNotExpiredYet();\\n\\n    // -------- CertificateNFT --------- //\\n    error CertificateNFT__EnterpriseAlreadyCertified();\\n    error CertificateNFT__CertificateDoesNotExist();\\n\\n    // -------- InspectionManageer --------- //\\n    error InspectionManager__InspectorAlreadyAssigned();\\n    error InspectionManager__InspectionPeriodExpired();\\n    error InspectionManager__NotAssignedToEnterprise();\\n    error InspectionManager__InvalidReportIndex();\\n    error InspectionManager__ReportAlreadyFlagged();\\n    error InspectionManager__NoReportsAssociatedWithEnterprise();\\n\\n\\n    // ---------- InspectionReport ----------- //\\n\\n    error AuditorOversight__NotAuthorizedEnterpriseOwner();\\n    error AuditorOversight__AppealWindowClosed();\\n    error AuditorOversight__CaseNotPending();\\n\\n}\",\"keccak256\":\"0xe1870fe63ce3362913db4f28a24dd1ae1cb1044dbd327874658b71e0177f9241\",\"license\":\"MIT\"},\"contracts/utils/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n/**\\n* @author @0xJonaseb11\\n* @dev This library contains the events emitted by the contracts\\n* @dev All the contracts inherit this to handle events\\n*/\\n\\nlibrary Events {\\n    event CertificationGranted(address indexed enterprise, string industry, string metadataURI, uint256 expiryDate);\\n    event CertificationRevoked(address indexed enterprise);\\n    event CertificationUpdated(address indexed enterprise, string newMetadataURI);\\n\\n    event EnterpriseRegistered(address indexed enterprise, string name, string industry, string metadataURI, uint256 certificateId);\\n    event EnterpriseUpdated(address indexed enterprise, string newMetadataURI);\\n    event EnterpriseDeregistered(address indexed enterprise, uint256 deregisteredAt);\\n    \\n    event InspectorAssigned(address indexed enterprise, address indexed inspector, uint256 validityPeriod);\\n    event InspectionReportSubmitted(address indexed inspector, address indexed enterprise, bool passed, string remarks, string evidenceURI, uint256 ReportedAt);\\n    event InspectionReportFlagged(address indexed enterprise, uint256 indexed reportIndex, address flaggedBy, string reason, uint256 timestamp);\\n    \\n    event CertificateMinted(uint256 certificateId, address indexed enterprise, address indexed certifier, uint256 mintedAt);\\n    event CertificateRevoked(uint256 certificateId, address indexed revoker, uint256 timestamp);\\n\\n\\n    event PublicRoleGranted(address indexed user, uint256 duration);\\n    event PublicRoleExpired(address indexed user);\\n    event RoleTransferred(bytes32 indexed role, address from, address to);\\n    event BulkRolesGranted(bytes32[] roles, address[] indexed accounts);\\n    event RoleGranted(bytes32 indexed role, address indexed account);\\n    event RoleRevoked(bytes32 indexed role, address indexed account);\\n\\n    event AuditInitiated(uint256 indexed caseId, address indexed enterprise, uint256 inspectionId, address auditor, string reason, string evidenceURI);\\n    event AuditResolved(uint256 indexed caseId, address indexed enterprise, address resolvedBy, bool upheld, string remarks);\\n    event AppealFiled(uint256 indexed caseid, address indexed enterprise, string counterEvidenceURI, uint256 timestamp);\\n\\n}    \",\"keccak256\":\"0x16284b3e5d51e25be566f386cec7ad356796324565c6403c4de723411b734122\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/core/RolesManager.sol":{"RolesManager":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"inputs":[],"name":"AuditorOversight__AppealWindowClosed","type":"error"},{"inputs":[],"name":"AuditorOversight__CaseNotPending","type":"error"},{"inputs":[],"name":"AuditorOversight__NotAuthorizedEnterpriseOwner","type":"error"},{"inputs":[],"name":"CertificateNFT__CertificateDoesNotExist","type":"error"},{"inputs":[],"name":"CertificateNFT__EnterpriseAlreadyCertified","type":"error"},{"inputs":[],"name":"CertificationAuthority__CertificationNotExpiredYet","type":"error"},{"inputs":[],"name":"CertificationAuthority__EnterpriseAlreadyCertified","type":"error"},{"inputs":[],"name":"CertificationAuthority__EnterpriseNotCertifiedYet","type":"error"},{"inputs":[],"name":"EnterpriseRegistry__EnterpriseAlreadyExists","type":"error"},{"inputs":[],"name":"EnterpriseRegistry__EnterpriseDoesNotExist","type":"error"},{"inputs":[],"name":"EnterpriseRegistry__InvalidStart","type":"error"},{"inputs":[],"name":"InspectionManager__InspectionPeriodExpired","type":"error"},{"inputs":[],"name":"InspectionManager__InspectorAlreadyAssigned","type":"error"},{"inputs":[],"name":"InspectionManager__InvalidReportIndex","type":"error"},{"inputs":[],"name":"InspectionManager__NoReportsAssociatedWithEnterprise","type":"error"},{"inputs":[],"name":"InspectionManager__NotAssignedToEnterprise","type":"error"},{"inputs":[],"name":"InspectionManager__ReportAlreadyFlagged","type":"error"},{"inputs":[],"name":"InvalidAddress","type":"error"},{"inputs":[],"name":"RolesManager__AlreadyHasRole","type":"error"},{"inputs":[],"name":"RolesManager__ArrayLengthMismatch","type":"error"},{"inputs":[],"name":"RolesManager__EmptyArray","type":"error"},{"inputs":[],"name":"RolesManager__InvalidDuration","type":"error"},{"inputs":[],"name":"RolesManager__NotAuthorizedAuditor","type":"error"},{"inputs":[],"name":"RolesManager__NotAuthorizedCertificateFactory","type":"error"},{"inputs":[],"name":"RolesManager__NotAuthorizedCertifier","type":"error"},{"inputs":[],"name":"RolesManager__NotAuthorizedEnterprise","type":"error"},{"inputs":[],"name":"RolesManager__NotAuthorizedInspector","type":"error"},{"inputs":[],"name":"RolesManager__NotAuthorizedPublicUser","type":"error"},{"inputs":[],"name":"RolesManager__RoleDoesNotExist","type":"error"},{"inputs":[],"name":"RolesManager__UnauthorizedToPerformAction","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32[]","name":"roles","type":"bytes32[]"},{"indexed":true,"internalType":"address[]","name":"accounts","type":"address[]"}],"name":"BulkRolesGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"}],"name":"PublicRoleExpired","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"duration","type":"uint256"}],"name":"PublicRoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"address","name":"to","type":"address"}],"name":"RoleTransferred","type":"event"},{"inputs":[],"name":"AUDITOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CERTIFICATE_FACTORY_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CERTIFIER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ENTERPRISE_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"INSPECTOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PUBLIC_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"roles","type":"bytes32[]"},{"internalType":"address[]","name":"accounts","type":"address[]"}],"name":"bulkGrantRoles","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"checkExpiryRoles","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"durationInHours","type":"uint256"}],"name":"claimTemporaryPublicRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"getActiveRoles","outputs":[{"internalType":"bool","name":"isAdmin","type":"bool"},{"internalType":"bool","name":"isCertifier","type":"bool"},{"internalType":"bool","name":"isInspector","type":"bool"},{"internalType":"bool","name":"isAuditor","type":"bool"},{"internalType":"bool","name":"isEnterprise","type":"bool"},{"internalType":"bool","name":"isCertificateFactory","type":"bool"},{"internalType":"bool","name":"isPublic","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMaxPublicRoleDuration","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"grantAuditor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"grantCertificateFactory","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"grantCertifier","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"grantEnterprise","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"grantInspector","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"grantPublicRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"hasAdminRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"hasAuditorRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"hasCertificateFactoryRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"hasCertifierRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"hasEnterpriseRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"hasInspectorRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"hasPublicRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"publicRoleExpiry","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"revokeAuditorRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"revokeCertificateFactoryRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"revokeCertifierRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"revokeEnterpriseRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"revokeInspectorRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"revokePublicRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"}],"name":"transferRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}]},"events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"bulkGrantRoles(bytes32[],address[])":{"details":"Bulk grant roles to accounts","params":{"accounts":"The array of accounts to grant roles emits BulkRolesGranted event on successful grant","roles":"The array of roles to grant"}},"checkExpiryRoles(address)":{"details":"helper to check expiry of `PUBLIC` role","params":{"account":"The account to check for role expiry"}},"claimTemporaryPublicRole(uint256)":{"details":"allows users to claim temporary `PUBLIC` role for `durationInHours` hours on their visit to platform","params":{"durationInHours":"The duration in hours the user will have the `PUBLIC` role"}},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantCertifier(address)":{"details":"Functions to grant roles to!","params":{"account":"The account to grant the role to"}},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasAdminRole(address)":{"details":"Functions to check if a certain account has the specified role","params":{"account":"The account to check "}},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."},"revokeCertifierRole(address)":{"details":"Functions to revoke roles","params":{"account":"The account to revoke the role from"}},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"transferRole(bytes32,address,address)":{"details":"Transfers a role from one account to another","params":{"from":"The account to transfer the role from","role":"The role to transfer","to":"The account to transfer the role to"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_3913":{"entryPoint":null,"id":3913,"parameterSlots":0,"returnSlots":0},"@_grantRole_256":{"entryPoint":90,"id":256,"parameterSlots":2,"returnSlots":1},"@_msgSender_1886":{"entryPoint":null,"id":1886,"parameterSlots":0,"returnSlots":1},"@_setupRole_4185":{"entryPoint":75,"id":4185,"parameterSlots":2,"returnSlots":0},"@hasRole_80":{"entryPoint":null,"id":80,"parameterSlots":2,"returnSlots":1}},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C PUSH1 0x0 CALLER PUSH2 0x4B JUMP JUMPDEST PUSH2 0x46 PUSH32 0xC41A06B26CED3A23B7BF835A0918ADE784F4055DED86D18305F528F47A726052 CALLER PUSH2 0x4B JUMP JUMPDEST PUSH2 0x106 JUMP JUMPDEST PUSH2 0x55 DUP3 DUP3 PUSH2 0x5A JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xFC JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xB4 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x100 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x15E1 DUP1 PUSH3 0x116 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x23D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7780E9C1 GT PUSH2 0x13B JUMPI DUP1 PUSH4 0xB0614DB3 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xD547741F GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x53E JUMPI DUP1 PUSH4 0xE3A3C522 EQ PUSH2 0x551 JUMPI DUP1 PUSH4 0xE55B4F93 EQ PUSH2 0x566 JUMPI DUP1 PUSH4 0xF53F5E1E EQ PUSH2 0x579 JUMPI DUP1 PUSH4 0xFC810286 EQ PUSH2 0x58C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB0614DB3 EQ PUSH2 0x49D JUMPI DUP1 PUSH4 0xB5617EF7 EQ PUSH2 0x4F1 JUMPI DUP1 PUSH4 0xB8AD415E EQ PUSH2 0x511 JUMPI DUP1 PUSH4 0xBD7CA7BA EQ PUSH2 0x518 JUMPI DUP1 PUSH4 0xC395FCB3 EQ PUSH2 0x52B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x91D14854 GT PUSH2 0xFF JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x449 JUMPI DUP1 PUSH4 0xA1F34163 EQ PUSH2 0x45C JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x46F JUMPI DUP1 PUSH4 0xAA52617C EQ PUSH2 0x477 JUMPI DUP1 PUSH4 0xABAA536F EQ PUSH2 0x48A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7780E9C1 EQ PUSH2 0x3E8 JUMPI DUP1 PUSH4 0x784FEE0E EQ PUSH2 0x3FB JUMPI DUP1 PUSH4 0x7BFF0975 EQ PUSH2 0x410 JUMPI DUP1 PUSH4 0x7E5EFFA4 EQ PUSH2 0x423 JUMPI DUP1 PUSH4 0x8850845F EQ PUSH2 0x436 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3E251518 GT PUSH2 0x1C9 JUMPI DUP1 PUSH4 0x60376528 GT PUSH2 0x18D JUMPI DUP1 PUSH4 0x60376528 EQ PUSH2 0x383 JUMPI DUP1 PUSH4 0x61462F0E EQ PUSH2 0x396 JUMPI DUP1 PUSH4 0x68DD17A5 EQ PUSH2 0x3A9 JUMPI DUP1 PUSH4 0x69D0B517 EQ PUSH2 0x3BE JUMPI DUP1 PUSH4 0x6E1D616E EQ PUSH2 0x3D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3E251518 EQ PUSH2 0x324 JUMPI DUP1 PUSH4 0x456F19FC EQ PUSH2 0x337 JUMPI DUP1 PUSH4 0x52F84B72 EQ PUSH2 0x34A JUMPI DUP1 PUSH4 0x57C03371 EQ PUSH2 0x35D JUMPI DUP1 PUSH4 0x5CB87D26 EQ PUSH2 0x370 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x25D5E87E GT PUSH2 0x210 JUMPI DUP1 PUSH4 0x25D5E87E EQ PUSH2 0x2C3 JUMPI DUP1 PUSH4 0x261191B7 EQ PUSH2 0x2D6 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x2FC JUMPI DUP1 PUSH4 0x3CA7C02A EQ PUSH2 0x30F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0x443CD2A EQ PUSH2 0x26A JUMPI DUP1 PUSH4 0x1E223B2A EQ PUSH2 0x27F JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x292 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x255 PUSH2 0x250 CALLDATASIZE PUSH1 0x4 PUSH2 0x1222 JUMP JUMPDEST PUSH2 0x59F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x27D PUSH2 0x278 CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0x5D6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x27D PUSH2 0x28D CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0x658 JUMP JUMPDEST PUSH2 0x2B5 PUSH2 0x2A0 CALLDATASIZE PUSH1 0x4 PUSH2 0x128A JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x261 JUMP JUMPDEST PUSH2 0x27D PUSH2 0x2D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0x6DA JUMP JUMPDEST PUSH2 0x27D PUSH2 0x2E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0x75C JUMP JUMPDEST PUSH2 0x27D PUSH2 0x2F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x12A3 JUMP JUMPDEST PUSH2 0x7DE JUMP JUMPDEST PUSH2 0x27D PUSH2 0x30A CALLDATASIZE PUSH1 0x4 PUSH2 0x12A3 JUMP JUMPDEST PUSH2 0x809 JUMP JUMPDEST PUSH2 0x2B5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14EC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x27D PUSH2 0x332 CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0x841 JUMP JUMPDEST PUSH2 0x27D PUSH2 0x345 CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0x8C3 JUMP JUMPDEST PUSH2 0x255 PUSH2 0x358 CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0x945 JUMP JUMPDEST PUSH2 0x27D PUSH2 0x36B CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0x95F JUMP JUMPDEST PUSH2 0x27D PUSH2 0x37E CALLDATASIZE PUSH1 0x4 PUSH2 0x12CF JUMP JUMPDEST PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0x27D PUSH2 0x391 CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0xA74 JUMP JUMPDEST PUSH2 0x27D PUSH2 0x3A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1357 JUMP JUMPDEST PUSH2 0xAF6 JUMP JUMPDEST PUSH2 0x2B5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14AC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x2B5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x150C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x2B5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x154C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x27D PUSH2 0x3F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x128A JUMP JUMPDEST PUSH2 0xC09 JUMP JUMPDEST PUSH2 0x2B5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x152C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x255 PUSH2 0x41E CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0xCF6 JUMP JUMPDEST PUSH2 0x27D PUSH2 0x431 CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0xD10 JUMP JUMPDEST PUSH2 0x255 PUSH2 0x444 CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0xD92 JUMP JUMPDEST PUSH2 0x255 PUSH2 0x457 CALLDATASIZE PUSH1 0x4 PUSH2 0x12A3 JUMP JUMPDEST PUSH2 0xDA8 JUMP JUMPDEST PUSH2 0x255 PUSH2 0x46A CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0xDD1 JUMP JUMPDEST PUSH2 0x2B5 PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x27D PUSH2 0x485 CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0xDEB JUMP JUMPDEST PUSH2 0x255 PUSH2 0x498 CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0xE6D JUMP JUMPDEST PUSH2 0x4B0 PUSH2 0x4AB CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0xE87 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP8 ISZERO ISZERO DUP9 MSTORE SWAP6 ISZERO ISZERO PUSH1 0x20 DUP9 ADD MSTORE SWAP4 ISZERO ISZERO SWAP5 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x60 DUP6 ADD MSTORE ISZERO ISZERO PUSH1 0x80 DUP5 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0xA0 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD PUSH2 0x261 JUMP JUMPDEST PUSH2 0x2B5 PUSH2 0x4FF CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x18 PUSH2 0x2B5 JUMP JUMPDEST PUSH2 0x27D PUSH2 0x526 CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0xF40 JUMP JUMPDEST PUSH2 0x255 PUSH2 0x539 CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0xF8B JUMP JUMPDEST PUSH2 0x27D PUSH2 0x54C CALLDATASIZE PUSH1 0x4 PUSH2 0x12A3 JUMP JUMPDEST PUSH2 0xF97 JUMP JUMPDEST PUSH2 0x2B5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x156C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x27D PUSH2 0x574 CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0xFBC JUMP JUMPDEST PUSH2 0x255 PUSH2 0x587 CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0x103E JUMP JUMPDEST PUSH2 0x27D PUSH2 0x59A CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0x1058 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x5D0 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x5FE JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x609 DUP2 PUSH2 0x10DA JUMP JUMPDEST PUSH2 0x621 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14EC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xF97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14EC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x158C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x680 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x68B DUP2 PUSH2 0x10DA JUMP JUMPDEST PUSH2 0x6A3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14AC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x7DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14AC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14CC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x6E3 DUP2 PUSH2 0x103E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x706 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD TIMESTAMP GT JUMPDEST ISZERO PUSH2 0x759 JUMPI PUSH2 0x723 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14EC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH2 0x10E4 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xA6F32BCBC7DE829D50E1C9CBC1C5B4DAFB4C7A0B8329757AEE62A9B394D71C3B SWAP1 PUSH1 0x0 SWAP1 LOG2 JUMPDEST POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x784 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x78F DUP2 PUSH2 0x10DA JUMP JUMPDEST PUSH2 0x7A7 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x152C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xF97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x152C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x158C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x7F9 DUP2 PUSH2 0x10DA JUMP JUMPDEST PUSH2 0x803 DUP4 DUP4 PUSH2 0x1157 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x832 JUMPI PUSH1 0x40 MLOAD PUSH4 0x334BD919 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x83C DUP3 DUP3 PUSH2 0x10E4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x869 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x874 DUP2 PUSH2 0x10DA JUMP JUMPDEST PUSH2 0x88C PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x154C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xF97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x154C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x158C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x8EB JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x8F6 DUP2 PUSH2 0x10DA JUMP JUMPDEST PUSH2 0x90E PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x156C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x7DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x156C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14CC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5D0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x152C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0xDA8 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x987 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x992 DUP2 PUSH2 0x10DA JUMP JUMPDEST PUSH2 0x9AA PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14EC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x7DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14EC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14CC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9EC DUP2 PUSH2 0x10DA JUMP JUMPDEST PUSH2 0x9F6 DUP5 DUP5 PUSH2 0xDA8 JUMP JUMPDEST PUSH2 0xA13 JUMPI PUSH1 0x40 MLOAD PUSH4 0x66783C9D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA1D DUP5 DUP5 PUSH2 0x10E4 JUMP JUMPDEST POP PUSH2 0xA28 DUP5 DUP4 PUSH2 0x1157 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP6 SWAP2 PUSH32 0x274DD4127A55DCB6F6C12ED38FEC5007D965D2AFFFA8B0BC75C3DC8F3F6B2224 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xA9C JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xAA7 DUP2 PUSH2 0x10DA JUMP JUMPDEST PUSH2 0xABF PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x150C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x7DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x150C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14CC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB01 DUP2 PUSH2 0x10DA JUMP JUMPDEST DUP4 ISZERO DUP1 PUSH2 0xB0C JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0xB2A JUMPI PUSH1 0x40 MLOAD PUSH4 0x7D6EAF93 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP3 EQ PUSH2 0xB4A JUMPI PUSH1 0x40 MLOAD PUSH4 0x90A2F793 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xBB0 JUMPI PUSH2 0xB9D DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0xB6A JUMPI PUSH2 0xB6A PUSH2 0x13C3 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0xB83 JUMPI PUSH2 0xB83 PUSH2 0x13C3 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xB98 SWAP2 SWAP1 PUSH2 0x126F JUMP JUMPDEST PUSH2 0x1157 JUMP JUMPDEST POP DUP1 PUSH2 0xBA8 DUP2 PUSH2 0x13EF JUMP JUMPDEST SWAP2 POP POP PUSH2 0xB4D JUMP JUMPDEST POP DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0xBC1 SWAP3 SWAP2 SWAP1 PUSH2 0x1408 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH32 0xF4D52C90739C68C4E82D39CFBEEE6B6613784BF9B28D2CDB3A02203799CF0606 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0xBFA SWAP3 SWAP2 SWAP1 PUSH2 0x1448 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xC12 CALLER PUSH2 0x103E JUMP JUMPDEST ISZERO PUSH2 0xC30 JUMPI PUSH1 0x40 MLOAD PUSH4 0x510A5833 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 ISZERO PUSH2 0xC4F JUMPI PUSH1 0x40 MLOAD PUSH4 0x7294221 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x18 DUP2 GT ISZERO PUSH2 0xC71 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7294221 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xC7F DUP3 PUSH2 0xE10 PUSH2 0x1481 JUMP JUMPDEST SWAP1 POP PUSH2 0xC99 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14EC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x1157 JUMP JUMPDEST POP PUSH2 0xCA4 DUP2 TIMESTAMP PUSH2 0x1498 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 MLOAD PUSH32 0xC526CDAE63C288EA4504281FE29B0AE3352C8A9CCAE61EBA8C21CD25A949E0F1 SWAP1 PUSH2 0xCEA SWAP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5D0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x150C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0xDA8 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xD38 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xD43 DUP2 PUSH2 0x10DA JUMP JUMPDEST PUSH2 0xD5B PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14AC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xF97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14AC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x158C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5D0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x156C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5D0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14AC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0xDA8 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xE13 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xE1E DUP2 PUSH2 0x10DA JUMP JUMPDEST PUSH2 0xE36 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x152C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x7DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x152C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14CC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5D0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x154C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0xDA8 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0xE99 DUP2 DUP10 PUSH2 0xDA8 JUMP JUMPDEST PUSH2 0xEB1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x150C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP11 PUSH2 0xDA8 JUMP JUMPDEST PUSH2 0xEC9 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x156C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP12 PUSH2 0xDA8 JUMP JUMPDEST PUSH2 0xEE1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x154C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP13 PUSH2 0xDA8 JUMP JUMPDEST PUSH2 0xEF9 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14AC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP14 PUSH2 0xDA8 JUMP JUMPDEST PUSH2 0xF11 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x152C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP15 PUSH2 0xDA8 JUMP JUMPDEST PUSH2 0xF29 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14EC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP16 PUSH2 0xDA8 JUMP JUMPDEST SWAP6 SWAP15 SWAP5 SWAP14 POP SWAP3 SWAP12 POP SWAP1 SWAP10 POP SWAP8 POP SWAP6 POP SWAP1 SWAP4 POP SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xF68 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xF73 DUP2 PUSH2 0x10DA JUMP JUMPDEST PUSH2 0x83C PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x156C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xF97 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5D0 DUP2 DUP4 PUSH2 0xDA8 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xFB2 DUP2 PUSH2 0x10DA JUMP JUMPDEST PUSH2 0x803 DUP4 DUP4 PUSH2 0x10E4 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xFE4 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xFEF DUP2 PUSH2 0x10DA JUMP JUMPDEST PUSH2 0x1007 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x154C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x7DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x154C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14CC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5D0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14EC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0xDA8 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1080 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x108B DUP2 PUSH2 0x10DA JUMP JUMPDEST PUSH2 0x10A3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x150C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xF97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x150C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x158C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x759 DUP2 CALLER PUSH2 0x11E1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10F0 DUP4 DUP4 PUSH2 0xDA8 JUMP JUMPDEST ISZERO PUSH2 0x114F JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP7 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x5D0 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x5D0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1163 DUP4 DUP4 PUSH2 0xDA8 JUMP JUMPDEST PUSH2 0x114F JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x1199 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x5D0 JUMP JUMPDEST PUSH2 0x11EB DUP3 DUP3 PUSH2 0xDA8 JUMP JUMPDEST PUSH2 0x121E JUMPI PUSH1 0x40 MLOAD PUSH4 0xE2517D3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1234 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x124C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x126A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1281 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x124C DUP3 PUSH2 0x1253 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x129C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x12B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x12C6 PUSH1 0x20 DUP5 ADD PUSH2 0x1253 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x12E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH2 0x12F4 PUSH1 0x20 DUP6 ADD PUSH2 0x1253 JUMP JUMPDEST SWAP2 POP PUSH2 0x1302 PUSH1 0x40 DUP6 ADD PUSH2 0x1253 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x131D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1335 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1350 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x136D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1385 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1391 DUP9 DUP4 DUP10 ADD PUSH2 0x130B JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x13AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13B7 DUP8 DUP3 DUP9 ADD PUSH2 0x130B JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x1401 JUMPI PUSH2 0x1401 PUSH2 0x13D9 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP3 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x143D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1427 DUP4 PUSH2 0x1253 JUMP JUMPDEST AND DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x140E JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFB SHL SUB DUP4 GT ISZERO PUSH2 0x1468 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP6 PUSH1 0x40 DUP6 ADD CALLDATACOPY SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x5D0 JUMPI PUSH2 0x5D0 PUSH2 0x13D9 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x5D0 JUMPI PUSH2 0x5D0 PUSH2 0x13D9 JUMP INVALID SWAP3 MULMOD SWAP5 0xFC EXTCODESIZE INVALID 0x28 0x2F EXTCODEHASH KECCAK256 0xCD 0xCC CALL 0xB7 0xC5 0xE4 PUSH13 0x63D963E822D98EFFF90ABD41C1 0x2E 0x21 0x2A 0xE6 LOG1 SGT 0xC0 0xED JUMPDEST PUSH25 0xA53413FFBB7679881F11145CCFBA4FB92E863DFCD5A1D2F3EE 0x24 0x4E 0xF9 0xDA SIGNEXTEND 0x2F DUP10 0xA7 0x4B KECCAK256 DUP15 0xA9 INVALID BYTE PUSH4 0x9EBDF634 MUL PUSH30 0x9E1F092B58C39954FA37C41A06B26CED3A23B7BF835A0918ADE784F4055D 0xED DUP7 0xD1 DUP4 SDIV CREATE2 0x28 DELEGATECALL PUSH27 0x726052AA0EC51D0BF03CE5511C9FFC9DE2B423D73D1FAACD808ABF 0x2A 0xC8 SWAP13 0xCE 0xA8 LOG3 0xEC CALLCODE MSIZE LOG1 0xC4 DUP15 PC CALLDATACOPY 0xAD PUSH27 0x7F3DCEDCBE129BF3249EC4FBF651FD4F5E2600EAD39FE2F506FA31 0xD7 0xA9 0x2D SWAP16 0xA9 0xA8 DUP10 DUP11 0xC4 SAR DUP7 0xEE SWAP12 SGT DUP7 CALLDATASIZE SDIV LOG3 PUSH2 0xC85A 0xE5 0xD6 ADD 0xD 0x5D 0xE4 CALLCODE DUP1 ISZERO GAS 0xAA 0xFB PUSH4 0x29A20985 DUP1 CHAINID 0x2D RETURN RETURNDATACOPY 0xC4 0xB7 PREVRANDAO SHL NOT PUSH19 0x9B9601C5FC17AE1CF99A8A52A2646970667358 0x22 SLT KECCAK256 0xF6 CODESIZE 0x4E COINBASE LOG3 0xE4 0xB4 RETURNDATACOPY 0xB2 SWAP1 SWAP10 PUSH0 0xE5 0xCB 0xC1 0xBD 0x2A 0xCE 0x27 BALANCE PUSH3 0x2079E4 SELFDESTRUCT 0xC1 REVERT 0xDF PC JUMP 0xCE SWAP14 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"456:9833:20:-:0;;;1196:122;;;;;;;;;-1:-1:-1;1220:42:20;2232:4:0;1251:10:20;1220;:42::i;:::-;1272:39;551:33;1300:10;1272;:39::i;:::-;456:9833;;5180:102;5254:25;5265:4;5271:7;5254:10;:25::i;:::-;;5180:102;;:::o;6179:316:0:-;6256:4;2954:12;;;;;;;;;;;-1:-1:-1;;;;;2954:29:0;;;;;;;;;;;;6272:217;;6315:6;:12;;;;;;;;;;;-1:-1:-1;;;;;6315:29:0;;;;;;;;;:36;;-1:-1:-1;;6315:36:0;6347:4;6315:36;;;6397:12;735:10:12;;656:96;6397:12:0;-1:-1:-1;;;;;6370:40:0;6388:7;-1:-1:-1;;;;;6370:40:0;6382:4;6370:40;;;;;;;;;;-1:-1:-1;6431:4:0;6424:11;;6272:217;-1:-1:-1;6473:5:0;6272:217;6179:316;;;;:::o;456:9833:20:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@AUDITOR_ROLE_3861":{"entryPoint":null,"id":3861,"parameterSlots":0,"returnSlots":0},"@CERTIFICATE_FACTORY_ROLE_3871":{"entryPoint":null,"id":3871,"parameterSlots":0,"returnSlots":0},"@CERTIFIER_ROLE_3851":{"entryPoint":null,"id":3851,"parameterSlots":0,"returnSlots":0},"@DEFAULT_ADMIN_ROLE_29":{"entryPoint":null,"id":29,"parameterSlots":0,"returnSlots":0},"@ENTERPRISE_ROLE_3866":{"entryPoint":null,"id":3866,"parameterSlots":0,"returnSlots":0},"@INSPECTOR_ROLE_3856":{"entryPoint":null,"id":3856,"parameterSlots":0,"returnSlots":0},"@PUBLIC_ROLE_3876":{"entryPoint":null,"id":3876,"parameterSlots":0,"returnSlots":0},"@_checkRole_114":{"entryPoint":4577,"id":114,"parameterSlots":2,"returnSlots":0},"@_checkRole_93":{"entryPoint":4314,"id":93,"parameterSlots":1,"returnSlots":0},"@_grantRole_256":{"entryPoint":4439,"id":256,"parameterSlots":2,"returnSlots":1},"@_msgSender_1886":{"entryPoint":null,"id":1886,"parameterSlots":0,"returnSlots":1},"@_revokeRole_294":{"entryPoint":4324,"id":294,"parameterSlots":2,"returnSlots":1},"@bulkGrantRoles_4080":{"entryPoint":2806,"id":4080,"parameterSlots":4,"returnSlots":0},"@checkExpiryRoles_4013":{"entryPoint":1754,"id":4013,"parameterSlots":1,"returnSlots":0},"@claimTemporaryPublicRole_3975":{"entryPoint":3081,"id":3975,"parameterSlots":1,"returnSlots":0},"@getActiveRoles_4172":{"entryPoint":3719,"id":4172,"parameterSlots":1,"returnSlots":7},"@getMaxPublicRoleDuration_3983":{"entryPoint":null,"id":3983,"parameterSlots":0,"returnSlots":1},"@getRoleAdmin_128":{"entryPoint":null,"id":128,"parameterSlots":1,"returnSlots":1},"@grantAuditor_4258":{"entryPoint":4028,"id":4258,"parameterSlots":1,"returnSlots":0},"@grantCertificateFactory_4306":{"entryPoint":3563,"id":4306,"parameterSlots":1,"returnSlots":0},"@grantCertifier_4210":{"entryPoint":2676,"id":4210,"parameterSlots":1,"returnSlots":0},"@grantEnterprise_4282":{"entryPoint":1624,"id":4282,"parameterSlots":1,"returnSlots":0},"@grantInspector_4234":{"entryPoint":2243,"id":4234,"parameterSlots":1,"returnSlots":0},"@grantPublicRole_4330":{"entryPoint":2399,"id":4330,"parameterSlots":1,"returnSlots":0},"@grantRole_147":{"entryPoint":2014,"id":147,"parameterSlots":2,"returnSlots":0},"@hasAdminRole_4482":{"entryPoint":3979,"id":4482,"parameterSlots":1,"returnSlots":1},"@hasAuditorRole_4521":{"entryPoint":3693,"id":4521,"parameterSlots":1,"returnSlots":1},"@hasCertificateFactoryRole_4547":{"entryPoint":2373,"id":4547,"parameterSlots":1,"returnSlots":1},"@hasCertifierRole_4495":{"entryPoint":3318,"id":4495,"parameterSlots":1,"returnSlots":1},"@hasEnterpriseRole_4534":{"entryPoint":3537,"id":4534,"parameterSlots":1,"returnSlots":1},"@hasInspectorRole_4508":{"entryPoint":3474,"id":4508,"parameterSlots":1,"returnSlots":1},"@hasPublicRole_4560":{"entryPoint":4158,"id":4560,"parameterSlots":1,"returnSlots":1},"@hasRole_80":{"entryPoint":3496,"id":80,"parameterSlots":2,"returnSlots":1},"@publicRoleExpiry_3880":{"entryPoint":null,"id":3880,"parameterSlots":0,"returnSlots":0},"@renounceRole_189":{"entryPoint":2057,"id":189,"parameterSlots":2,"returnSlots":0},"@revokeAuditorRole_4396":{"entryPoint":2113,"id":4396,"parameterSlots":1,"returnSlots":0},"@revokeCertificateFactoryRole_4444":{"entryPoint":1884,"id":4444,"parameterSlots":1,"returnSlots":0},"@revokeCertifierRole_4355":{"entryPoint":4184,"id":4355,"parameterSlots":1,"returnSlots":0},"@revokeEnterpriseRole_4420":{"entryPoint":3344,"id":4420,"parameterSlots":1,"returnSlots":0},"@revokeInspectorRole_4372":{"entryPoint":3904,"id":4372,"parameterSlots":1,"returnSlots":0},"@revokePublicRole_4468":{"entryPoint":1494,"id":4468,"parameterSlots":1,"returnSlots":0},"@revokeRole_166":{"entryPoint":3991,"id":166,"parameterSlots":2,"returnSlots":0},"@supportsInterface_2182":{"entryPoint":null,"id":2182,"parameterSlots":1,"returnSlots":1},"@supportsInterface_62":{"entryPoint":1439,"id":62,"parameterSlots":1,"returnSlots":1},"@transferRole_4122":{"entryPoint":2529,"id":4122,"parameterSlots":3,"returnSlots":0},"abi_decode_address":{"entryPoint":4691,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_bytes32_dyn_calldata":{"entryPoint":4875,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":4719,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_array$_t_address_$dyn_calldata_ptr":{"entryPoint":4951,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes32":{"entryPoint":4746,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":4771,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_addresst_address":{"entryPoint":4815,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes4":{"entryPoint":4642,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_array$_t_address_$dyn_calldata_ptr__to_t_array$_t_address_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":5128,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr__to_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":5192,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool__to_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":5272,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":5249,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":5103,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":5081,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":5059,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:6320:25","statements":[{"nodeType":"YulBlock","src":"6:3:25","statements":[]},{"body":{"nodeType":"YulBlock","src":"83:217:25","statements":[{"body":{"nodeType":"YulBlock","src":"129:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"138:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"141:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"131:6:25"},"nodeType":"YulFunctionCall","src":"131:12:25"},"nodeType":"YulExpressionStatement","src":"131:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"104:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"113:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:25"},"nodeType":"YulFunctionCall","src":"100:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"125:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"96:3:25"},"nodeType":"YulFunctionCall","src":"96:32:25"},"nodeType":"YulIf","src":"93:52:25"},{"nodeType":"YulVariableDeclaration","src":"154:36:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"180:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"167:12:25"},"nodeType":"YulFunctionCall","src":"167:23:25"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"158:5:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"254:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"263:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"266:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"256:6:25"},"nodeType":"YulFunctionCall","src":"256:12:25"},"nodeType":"YulExpressionStatement","src":"256:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"212:5:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"234:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"239:10:25","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"230:3:25"},"nodeType":"YulFunctionCall","src":"230:20:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"219:3:25"},"nodeType":"YulFunctionCall","src":"219:32:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"209:2:25"},"nodeType":"YulFunctionCall","src":"209:43:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"202:6:25"},"nodeType":"YulFunctionCall","src":"202:51:25"},"nodeType":"YulIf","src":"199:71:25"},{"nodeType":"YulAssignment","src":"279:15:25","value":{"name":"value","nodeType":"YulIdentifier","src":"289:5:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"279:6:25"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"60:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"72:6:25","type":""}],"src":"14:286:25"},{"body":{"nodeType":"YulBlock","src":"400:92:25","statements":[{"nodeType":"YulAssignment","src":"410:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"422:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"433:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"418:3:25"},"nodeType":"YulFunctionCall","src":"418:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"410:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"452:9:25"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"477:6:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"470:6:25"},"nodeType":"YulFunctionCall","src":"470:14:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"463:6:25"},"nodeType":"YulFunctionCall","src":"463:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"445:6:25"},"nodeType":"YulFunctionCall","src":"445:41:25"},"nodeType":"YulExpressionStatement","src":"445:41:25"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"369:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"380:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"391:4:25","type":""}],"src":"305:187:25"},{"body":{"nodeType":"YulBlock","src":"546:124:25","statements":[{"nodeType":"YulAssignment","src":"556:29:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"578:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"565:12:25"},"nodeType":"YulFunctionCall","src":"565:20:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"556:5:25"}]},{"body":{"nodeType":"YulBlock","src":"648:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"657:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"660:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"650:6:25"},"nodeType":"YulFunctionCall","src":"650:12:25"},"nodeType":"YulExpressionStatement","src":"650:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"607:5:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"618:5:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"633:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"638:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"629:3:25"},"nodeType":"YulFunctionCall","src":"629:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"642:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"625:3:25"},"nodeType":"YulFunctionCall","src":"625:19:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"614:3:25"},"nodeType":"YulFunctionCall","src":"614:31:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"604:2:25"},"nodeType":"YulFunctionCall","src":"604:42:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"597:6:25"},"nodeType":"YulFunctionCall","src":"597:50:25"},"nodeType":"YulIf","src":"594:70:25"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"525:6:25","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"536:5:25","type":""}],"src":"497:173:25"},{"body":{"nodeType":"YulBlock","src":"745:116:25","statements":[{"body":{"nodeType":"YulBlock","src":"791:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"800:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"803:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"793:6:25"},"nodeType":"YulFunctionCall","src":"793:12:25"},"nodeType":"YulExpressionStatement","src":"793:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"766:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"775:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"762:3:25"},"nodeType":"YulFunctionCall","src":"762:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"787:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"758:3:25"},"nodeType":"YulFunctionCall","src":"758:32:25"},"nodeType":"YulIf","src":"755:52:25"},{"nodeType":"YulAssignment","src":"816:39:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"845:9:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"826:18:25"},"nodeType":"YulFunctionCall","src":"826:29:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"816:6:25"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"711:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"722:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"734:6:25","type":""}],"src":"675:186:25"},{"body":{"nodeType":"YulBlock","src":"936:110:25","statements":[{"body":{"nodeType":"YulBlock","src":"982:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"991:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"994:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"984:6:25"},"nodeType":"YulFunctionCall","src":"984:12:25"},"nodeType":"YulExpressionStatement","src":"984:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"957:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"966:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"953:3:25"},"nodeType":"YulFunctionCall","src":"953:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"978:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"949:3:25"},"nodeType":"YulFunctionCall","src":"949:32:25"},"nodeType":"YulIf","src":"946:52:25"},{"nodeType":"YulAssignment","src":"1007:33:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1030:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1017:12:25"},"nodeType":"YulFunctionCall","src":"1017:23:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1007:6:25"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"902:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"913:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"925:6:25","type":""}],"src":"866:180:25"},{"body":{"nodeType":"YulBlock","src":"1152:76:25","statements":[{"nodeType":"YulAssignment","src":"1162:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1174:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"1185:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1170:3:25"},"nodeType":"YulFunctionCall","src":"1170:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1162:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1204:9:25"},{"name":"value0","nodeType":"YulIdentifier","src":"1215:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1197:6:25"},"nodeType":"YulFunctionCall","src":"1197:25:25"},"nodeType":"YulExpressionStatement","src":"1197:25:25"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1121:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1132:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1143:4:25","type":""}],"src":"1051:177:25"},{"body":{"nodeType":"YulBlock","src":"1320:167:25","statements":[{"body":{"nodeType":"YulBlock","src":"1366:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1375:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1378:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1368:6:25"},"nodeType":"YulFunctionCall","src":"1368:12:25"},"nodeType":"YulExpressionStatement","src":"1368:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1341:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"1350:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1337:3:25"},"nodeType":"YulFunctionCall","src":"1337:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"1362:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1333:3:25"},"nodeType":"YulFunctionCall","src":"1333:32:25"},"nodeType":"YulIf","src":"1330:52:25"},{"nodeType":"YulAssignment","src":"1391:33:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1414:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1401:12:25"},"nodeType":"YulFunctionCall","src":"1401:23:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1391:6:25"}]},{"nodeType":"YulAssignment","src":"1433:48:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1466:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"1477:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1462:3:25"},"nodeType":"YulFunctionCall","src":"1462:18:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1443:18:25"},"nodeType":"YulFunctionCall","src":"1443:38:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1433:6:25"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1278:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1289:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1301:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1309:6:25","type":""}],"src":"1233:254:25"},{"body":{"nodeType":"YulBlock","src":"1596:224:25","statements":[{"body":{"nodeType":"YulBlock","src":"1642:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1651:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1654:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1644:6:25"},"nodeType":"YulFunctionCall","src":"1644:12:25"},"nodeType":"YulExpressionStatement","src":"1644:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1617:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"1626:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1613:3:25"},"nodeType":"YulFunctionCall","src":"1613:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"1638:2:25","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1609:3:25"},"nodeType":"YulFunctionCall","src":"1609:32:25"},"nodeType":"YulIf","src":"1606:52:25"},{"nodeType":"YulAssignment","src":"1667:33:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1690:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1677:12:25"},"nodeType":"YulFunctionCall","src":"1677:23:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1667:6:25"}]},{"nodeType":"YulAssignment","src":"1709:48:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1742:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"1753:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1738:3:25"},"nodeType":"YulFunctionCall","src":"1738:18:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1719:18:25"},"nodeType":"YulFunctionCall","src":"1719:38:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1709:6:25"}]},{"nodeType":"YulAssignment","src":"1766:48:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1799:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"1810:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1795:3:25"},"nodeType":"YulFunctionCall","src":"1795:18:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1776:18:25"},"nodeType":"YulFunctionCall","src":"1776:38:25"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1766:6:25"}]}]},"name":"abi_decode_tuple_t_bytes32t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1546:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1557:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1569:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1577:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1585:6:25","type":""}],"src":"1492:328:25"},{"body":{"nodeType":"YulBlock","src":"1909:283:25","statements":[{"body":{"nodeType":"YulBlock","src":"1958:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1967:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1970:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1960:6:25"},"nodeType":"YulFunctionCall","src":"1960:12:25"},"nodeType":"YulExpressionStatement","src":"1960:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1937:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"1945:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1933:3:25"},"nodeType":"YulFunctionCall","src":"1933:17:25"},{"name":"end","nodeType":"YulIdentifier","src":"1952:3:25"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1929:3:25"},"nodeType":"YulFunctionCall","src":"1929:27:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1922:6:25"},"nodeType":"YulFunctionCall","src":"1922:35:25"},"nodeType":"YulIf","src":"1919:55:25"},{"nodeType":"YulAssignment","src":"1983:30:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2006:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1993:12:25"},"nodeType":"YulFunctionCall","src":"1993:20:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1983:6:25"}]},{"body":{"nodeType":"YulBlock","src":"2056:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2065:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2068:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2058:6:25"},"nodeType":"YulFunctionCall","src":"2058:12:25"},"nodeType":"YulExpressionStatement","src":"2058:12:25"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2028:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"2036:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2025:2:25"},"nodeType":"YulFunctionCall","src":"2025:30:25"},"nodeType":"YulIf","src":"2022:50:25"},{"nodeType":"YulAssignment","src":"2081:29:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2097:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"2105:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2093:3:25"},"nodeType":"YulFunctionCall","src":"2093:17:25"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"2081:8:25"}]},{"body":{"nodeType":"YulBlock","src":"2170:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2179:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2182:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2172:6:25"},"nodeType":"YulFunctionCall","src":"2172:12:25"},"nodeType":"YulExpressionStatement","src":"2172:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2133:6:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2145:1:25","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"2148:6:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2141:3:25"},"nodeType":"YulFunctionCall","src":"2141:14:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2129:3:25"},"nodeType":"YulFunctionCall","src":"2129:27:25"},{"kind":"number","nodeType":"YulLiteral","src":"2158:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2125:3:25"},"nodeType":"YulFunctionCall","src":"2125:38:25"},{"name":"end","nodeType":"YulIdentifier","src":"2165:3:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2122:2:25"},"nodeType":"YulFunctionCall","src":"2122:47:25"},"nodeType":"YulIf","src":"2119:67:25"}]},"name":"abi_decode_array_bytes32_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1872:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"1880:3:25","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"1888:8:25","type":""},{"name":"length","nodeType":"YulTypedName","src":"1898:6:25","type":""}],"src":"1825:367:25"},{"body":{"nodeType":"YulBlock","src":"2354:616:25","statements":[{"body":{"nodeType":"YulBlock","src":"2400:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2409:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2412:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2402:6:25"},"nodeType":"YulFunctionCall","src":"2402:12:25"},"nodeType":"YulExpressionStatement","src":"2402:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2375:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"2384:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2371:3:25"},"nodeType":"YulFunctionCall","src":"2371:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"2396:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2367:3:25"},"nodeType":"YulFunctionCall","src":"2367:32:25"},"nodeType":"YulIf","src":"2364:52:25"},{"nodeType":"YulVariableDeclaration","src":"2425:37:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2452:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2439:12:25"},"nodeType":"YulFunctionCall","src":"2439:23:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2429:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2471:28:25","value":{"kind":"number","nodeType":"YulLiteral","src":"2481:18:25","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2475:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"2526:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2535:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2538:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2528:6:25"},"nodeType":"YulFunctionCall","src":"2528:12:25"},"nodeType":"YulExpressionStatement","src":"2528:12:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2514:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"2522:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2511:2:25"},"nodeType":"YulFunctionCall","src":"2511:14:25"},"nodeType":"YulIf","src":"2508:34:25"},{"nodeType":"YulVariableDeclaration","src":"2551:96:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2619:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"2630:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2615:3:25"},"nodeType":"YulFunctionCall","src":"2615:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2639:7:25"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nodeType":"YulIdentifier","src":"2577:37:25"},"nodeType":"YulFunctionCall","src":"2577:70:25"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"2555:8:25","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"2565:8:25","type":""}]},{"nodeType":"YulAssignment","src":"2656:18:25","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"2666:8:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2656:6:25"}]},{"nodeType":"YulAssignment","src":"2683:18:25","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"2693:8:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2683:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"2710:48:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2743:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"2754:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2739:3:25"},"nodeType":"YulFunctionCall","src":"2739:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2726:12:25"},"nodeType":"YulFunctionCall","src":"2726:32:25"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"2714:8:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"2787:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2796:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2799:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2789:6:25"},"nodeType":"YulFunctionCall","src":"2789:12:25"},"nodeType":"YulExpressionStatement","src":"2789:12:25"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"2773:8:25"},{"name":"_1","nodeType":"YulIdentifier","src":"2783:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2770:2:25"},"nodeType":"YulFunctionCall","src":"2770:16:25"},"nodeType":"YulIf","src":"2767:36:25"},{"nodeType":"YulVariableDeclaration","src":"2812:98:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2880:9:25"},{"name":"offset_1","nodeType":"YulIdentifier","src":"2891:8:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2876:3:25"},"nodeType":"YulFunctionCall","src":"2876:24:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2902:7:25"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nodeType":"YulIdentifier","src":"2838:37:25"},"nodeType":"YulFunctionCall","src":"2838:72:25"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"2816:8:25","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"2826:8:25","type":""}]},{"nodeType":"YulAssignment","src":"2919:18:25","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"2929:8:25"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2919:6:25"}]},{"nodeType":"YulAssignment","src":"2946:18:25","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"2956:8:25"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"2946:6:25"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_array$_t_address_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2296:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2307:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2319:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2327:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2335:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2343:6:25","type":""}],"src":"2197:773:25"},{"body":{"nodeType":"YulBlock","src":"3045:110:25","statements":[{"body":{"nodeType":"YulBlock","src":"3091:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3100:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3103:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3093:6:25"},"nodeType":"YulFunctionCall","src":"3093:12:25"},"nodeType":"YulExpressionStatement","src":"3093:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3066:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"3075:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3062:3:25"},"nodeType":"YulFunctionCall","src":"3062:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"3087:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3058:3:25"},"nodeType":"YulFunctionCall","src":"3058:32:25"},"nodeType":"YulIf","src":"3055:52:25"},{"nodeType":"YulAssignment","src":"3116:33:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3139:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3126:12:25"},"nodeType":"YulFunctionCall","src":"3126:23:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3116:6:25"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3011:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3022:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3034:6:25","type":""}],"src":"2975:180:25"},{"body":{"nodeType":"YulBlock","src":"3387:450:25","statements":[{"nodeType":"YulAssignment","src":"3397:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3409:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"3420:3:25","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3405:3:25"},"nodeType":"YulFunctionCall","src":"3405:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3397:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3440:9:25"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3465:6:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3458:6:25"},"nodeType":"YulFunctionCall","src":"3458:14:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3451:6:25"},"nodeType":"YulFunctionCall","src":"3451:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3433:6:25"},"nodeType":"YulFunctionCall","src":"3433:41:25"},"nodeType":"YulExpressionStatement","src":"3433:41:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3494:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"3505:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3490:3:25"},"nodeType":"YulFunctionCall","src":"3490:18:25"},{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"3524:6:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3517:6:25"},"nodeType":"YulFunctionCall","src":"3517:14:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3510:6:25"},"nodeType":"YulFunctionCall","src":"3510:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3483:6:25"},"nodeType":"YulFunctionCall","src":"3483:50:25"},"nodeType":"YulExpressionStatement","src":"3483:50:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3553:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"3564:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3549:3:25"},"nodeType":"YulFunctionCall","src":"3549:18:25"},{"arguments":[{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"3583:6:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3576:6:25"},"nodeType":"YulFunctionCall","src":"3576:14:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3569:6:25"},"nodeType":"YulFunctionCall","src":"3569:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3542:6:25"},"nodeType":"YulFunctionCall","src":"3542:50:25"},"nodeType":"YulExpressionStatement","src":"3542:50:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3612:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"3623:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3608:3:25"},"nodeType":"YulFunctionCall","src":"3608:18:25"},{"arguments":[{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"3642:6:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3635:6:25"},"nodeType":"YulFunctionCall","src":"3635:14:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3628:6:25"},"nodeType":"YulFunctionCall","src":"3628:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3601:6:25"},"nodeType":"YulFunctionCall","src":"3601:50:25"},"nodeType":"YulExpressionStatement","src":"3601:50:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3671:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"3682:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3667:3:25"},"nodeType":"YulFunctionCall","src":"3667:19:25"},{"arguments":[{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"3702:6:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3695:6:25"},"nodeType":"YulFunctionCall","src":"3695:14:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3688:6:25"},"nodeType":"YulFunctionCall","src":"3688:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3660:6:25"},"nodeType":"YulFunctionCall","src":"3660:51:25"},"nodeType":"YulExpressionStatement","src":"3660:51:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3731:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"3742:3:25","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3727:3:25"},"nodeType":"YulFunctionCall","src":"3727:19:25"},{"arguments":[{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"3762:6:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3755:6:25"},"nodeType":"YulFunctionCall","src":"3755:14:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3748:6:25"},"nodeType":"YulFunctionCall","src":"3748:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3720:6:25"},"nodeType":"YulFunctionCall","src":"3720:51:25"},"nodeType":"YulExpressionStatement","src":"3720:51:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3791:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"3802:3:25","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3787:3:25"},"nodeType":"YulFunctionCall","src":"3787:19:25"},{"arguments":[{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"3822:6:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3815:6:25"},"nodeType":"YulFunctionCall","src":"3815:14:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3808:6:25"},"nodeType":"YulFunctionCall","src":"3808:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3780:6:25"},"nodeType":"YulFunctionCall","src":"3780:51:25"},"nodeType":"YulExpressionStatement","src":"3780:51:25"}]},"name":"abi_encode_tuple_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool__to_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3308:9:25","type":""},{"name":"value6","nodeType":"YulTypedName","src":"3319:6:25","type":""},{"name":"value5","nodeType":"YulTypedName","src":"3327:6:25","type":""},{"name":"value4","nodeType":"YulTypedName","src":"3335:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3343:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3351:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3359:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3367:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3378:4:25","type":""}],"src":"3160:677:25"},{"body":{"nodeType":"YulBlock","src":"3943:76:25","statements":[{"nodeType":"YulAssignment","src":"3953:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3965:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"3976:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3961:3:25"},"nodeType":"YulFunctionCall","src":"3961:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3953:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3995:9:25"},{"name":"value0","nodeType":"YulIdentifier","src":"4006:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3988:6:25"},"nodeType":"YulFunctionCall","src":"3988:25:25"},"nodeType":"YulExpressionStatement","src":"3988:25:25"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3912:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3923:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3934:4:25","type":""}],"src":"3842:177:25"},{"body":{"nodeType":"YulBlock","src":"4153:175:25","statements":[{"nodeType":"YulAssignment","src":"4163:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4175:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"4186:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4171:3:25"},"nodeType":"YulFunctionCall","src":"4171:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4163:4:25"}]},{"nodeType":"YulVariableDeclaration","src":"4198:29:25","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4216:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"4221:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4212:3:25"},"nodeType":"YulFunctionCall","src":"4212:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"4225:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4208:3:25"},"nodeType":"YulFunctionCall","src":"4208:19:25"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4202:2:25","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4243:9:25"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4258:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"4266:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4254:3:25"},"nodeType":"YulFunctionCall","src":"4254:15:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4236:6:25"},"nodeType":"YulFunctionCall","src":"4236:34:25"},"nodeType":"YulExpressionStatement","src":"4236:34:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4290:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"4301:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4286:3:25"},"nodeType":"YulFunctionCall","src":"4286:18:25"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"4310:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"4318:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4306:3:25"},"nodeType":"YulFunctionCall","src":"4306:15:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4279:6:25"},"nodeType":"YulFunctionCall","src":"4279:43:25"},"nodeType":"YulExpressionStatement","src":"4279:43:25"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4114:9:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4125:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4133:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4144:4:25","type":""}],"src":"4024:304:25"},{"body":{"nodeType":"YulBlock","src":"4365:95:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4382:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4389:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"4394:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4385:3:25"},"nodeType":"YulFunctionCall","src":"4385:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4375:6:25"},"nodeType":"YulFunctionCall","src":"4375:31:25"},"nodeType":"YulExpressionStatement","src":"4375:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4422:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4425:4:25","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4415:6:25"},"nodeType":"YulFunctionCall","src":"4415:15:25"},"nodeType":"YulExpressionStatement","src":"4415:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4446:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4449:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4439:6:25"},"nodeType":"YulFunctionCall","src":"4439:15:25"},"nodeType":"YulExpressionStatement","src":"4439:15:25"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"4333:127:25"},{"body":{"nodeType":"YulBlock","src":"4497:95:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4514:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4521:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"4526:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4517:3:25"},"nodeType":"YulFunctionCall","src":"4517:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4507:6:25"},"nodeType":"YulFunctionCall","src":"4507:31:25"},"nodeType":"YulExpressionStatement","src":"4507:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4554:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4557:4:25","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4547:6:25"},"nodeType":"YulFunctionCall","src":"4547:15:25"},"nodeType":"YulExpressionStatement","src":"4547:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4578:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4581:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4571:6:25"},"nodeType":"YulFunctionCall","src":"4571:15:25"},"nodeType":"YulExpressionStatement","src":"4571:15:25"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"4465:127:25"},{"body":{"nodeType":"YulBlock","src":"4644:88:25","statements":[{"body":{"nodeType":"YulBlock","src":"4675:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"4677:16:25"},"nodeType":"YulFunctionCall","src":"4677:18:25"},"nodeType":"YulExpressionStatement","src":"4677:18:25"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4660:5:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4671:1:25","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4667:3:25"},"nodeType":"YulFunctionCall","src":"4667:6:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4657:2:25"},"nodeType":"YulFunctionCall","src":"4657:17:25"},"nodeType":"YulIf","src":"4654:43:25"},{"nodeType":"YulAssignment","src":"4706:20:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4717:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"4724:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4713:3:25"},"nodeType":"YulFunctionCall","src":"4713:13:25"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"4706:3:25"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4626:5:25","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"4636:3:25","type":""}],"src":"4597:135:25"},{"body":{"nodeType":"YulBlock","src":"4916:372:25","statements":[{"nodeType":"YulVariableDeclaration","src":"4926:16:25","value":{"name":"pos","nodeType":"YulIdentifier","src":"4939:3:25"},"variables":[{"name":"pos_1","nodeType":"YulTypedName","src":"4930:5:25","type":""}]},{"nodeType":"YulAssignment","src":"4951:12:25","value":{"name":"pos","nodeType":"YulIdentifier","src":"4960:3:25"},"variableNames":[{"name":"pos_1","nodeType":"YulIdentifier","src":"4951:5:25"}]},{"nodeType":"YulVariableDeclaration","src":"4972:20:25","value":{"name":"value0","nodeType":"YulIdentifier","src":"4986:6:25"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"4976:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5001:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"5010:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"5005:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"5069:192:25","statements":[{"expression":{"arguments":[{"name":"pos_1","nodeType":"YulIdentifier","src":"5090:5:25"},{"arguments":[{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"5120:6:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5101:18:25"},"nodeType":"YulFunctionCall","src":"5101:26:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5137:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"5142:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5133:3:25"},"nodeType":"YulFunctionCall","src":"5133:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"5146:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5129:3:25"},"nodeType":"YulFunctionCall","src":"5129:19:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5097:3:25"},"nodeType":"YulFunctionCall","src":"5097:52:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5083:6:25"},"nodeType":"YulFunctionCall","src":"5083:67:25"},"nodeType":"YulExpressionStatement","src":"5083:67:25"},{"nodeType":"YulVariableDeclaration","src":"5163:14:25","value":{"kind":"number","nodeType":"YulLiteral","src":"5173:4:25","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5167:2:25","type":""}]},{"nodeType":"YulAssignment","src":"5190:23:25","value":{"arguments":[{"name":"pos_1","nodeType":"YulIdentifier","src":"5203:5:25"},{"name":"_1","nodeType":"YulIdentifier","src":"5210:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5199:3:25"},"nodeType":"YulFunctionCall","src":"5199:14:25"},"variableNames":[{"name":"pos_1","nodeType":"YulIdentifier","src":"5190:5:25"}]},{"nodeType":"YulAssignment","src":"5226:25:25","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"5240:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"5248:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5236:3:25"},"nodeType":"YulFunctionCall","src":"5236:15:25"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"5226:6:25"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5031:1:25"},{"name":"value1","nodeType":"YulIdentifier","src":"5034:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5028:2:25"},"nodeType":"YulFunctionCall","src":"5028:13:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5042:18:25","statements":[{"nodeType":"YulAssignment","src":"5044:14:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5053:1:25"},{"kind":"number","nodeType":"YulLiteral","src":"5056:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5049:3:25"},"nodeType":"YulFunctionCall","src":"5049:9:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"5044:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"5024:3:25","statements":[]},"src":"5020:241:25"},{"nodeType":"YulAssignment","src":"5270:12:25","value":{"name":"pos_1","nodeType":"YulIdentifier","src":"5277:5:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5270:3:25"}]}]},"name":"abi_encode_tuple_packed_t_array$_t_address_$dyn_calldata_ptr__to_t_array$_t_address_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"4884:3:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4889:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4897:6:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4908:3:25","type":""}],"src":"4737:551:25"},{"body":{"nodeType":"YulBlock","src":"5454:282:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5471:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"5482:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5464:6:25"},"nodeType":"YulFunctionCall","src":"5464:21:25"},"nodeType":"YulExpressionStatement","src":"5464:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5505:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"5516:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5501:3:25"},"nodeType":"YulFunctionCall","src":"5501:18:25"},{"name":"value1","nodeType":"YulIdentifier","src":"5521:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5494:6:25"},"nodeType":"YulFunctionCall","src":"5494:34:25"},"nodeType":"YulExpressionStatement","src":"5494:34:25"},{"body":{"nodeType":"YulBlock","src":"5572:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5581:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5584:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5574:6:25"},"nodeType":"YulFunctionCall","src":"5574:12:25"},"nodeType":"YulExpressionStatement","src":"5574:12:25"}]},"condition":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5543:6:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5559:3:25","type":"","value":"251"},{"kind":"number","nodeType":"YulLiteral","src":"5564:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5555:3:25"},"nodeType":"YulFunctionCall","src":"5555:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"5568:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5551:3:25"},"nodeType":"YulFunctionCall","src":"5551:19:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5540:2:25"},"nodeType":"YulFunctionCall","src":"5540:31:25"},"nodeType":"YulIf","src":"5537:51:25"},{"nodeType":"YulVariableDeclaration","src":"5597:28:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5615:1:25","type":"","value":"5"},{"name":"value1","nodeType":"YulIdentifier","src":"5618:6:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5611:3:25"},"nodeType":"YulFunctionCall","src":"5611:14:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5601:6:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5651:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"5662:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5647:3:25"},"nodeType":"YulFunctionCall","src":"5647:18:25"},{"name":"value0","nodeType":"YulIdentifier","src":"5667:6:25"},{"name":"length","nodeType":"YulIdentifier","src":"5675:6:25"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"5634:12:25"},"nodeType":"YulFunctionCall","src":"5634:48:25"},"nodeType":"YulExpressionStatement","src":"5634:48:25"},{"nodeType":"YulAssignment","src":"5691:39:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5707:9:25"},{"name":"length","nodeType":"YulIdentifier","src":"5718:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5703:3:25"},"nodeType":"YulFunctionCall","src":"5703:22:25"},{"kind":"number","nodeType":"YulLiteral","src":"5727:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5699:3:25"},"nodeType":"YulFunctionCall","src":"5699:31:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5691:4:25"}]}]},"name":"abi_encode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr__to_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5415:9:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5426:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5434:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5445:4:25","type":""}],"src":"5293:443:25"},{"body":{"nodeType":"YulBlock","src":"5793:116:25","statements":[{"nodeType":"YulAssignment","src":"5803:20:25","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5818:1:25"},{"name":"y","nodeType":"YulIdentifier","src":"5821:1:25"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"5814:3:25"},"nodeType":"YulFunctionCall","src":"5814:9:25"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"5803:7:25"}]},{"body":{"nodeType":"YulBlock","src":"5881:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"5883:16:25"},"nodeType":"YulFunctionCall","src":"5883:18:25"},"nodeType":"YulExpressionStatement","src":"5883:18:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5852:1:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5845:6:25"},"nodeType":"YulFunctionCall","src":"5845:9:25"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"5859:1:25"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"5866:7:25"},{"name":"x","nodeType":"YulIdentifier","src":"5875:1:25"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"5862:3:25"},"nodeType":"YulFunctionCall","src":"5862:15:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5856:2:25"},"nodeType":"YulFunctionCall","src":"5856:22:25"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5842:2:25"},"nodeType":"YulFunctionCall","src":"5842:37:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5835:6:25"},"nodeType":"YulFunctionCall","src":"5835:45:25"},"nodeType":"YulIf","src":"5832:71:25"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"5772:1:25","type":""},{"name":"y","nodeType":"YulTypedName","src":"5775:1:25","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"5781:7:25","type":""}],"src":"5741:168:25"},{"body":{"nodeType":"YulBlock","src":"5962:77:25","statements":[{"nodeType":"YulAssignment","src":"5972:16:25","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5983:1:25"},{"name":"y","nodeType":"YulIdentifier","src":"5986:1:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5979:3:25"},"nodeType":"YulFunctionCall","src":"5979:9:25"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"5972:3:25"}]},{"body":{"nodeType":"YulBlock","src":"6011:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"6013:16:25"},"nodeType":"YulFunctionCall","src":"6013:18:25"},"nodeType":"YulExpressionStatement","src":"6013:18:25"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6003:1:25"},{"name":"sum","nodeType":"YulIdentifier","src":"6006:3:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6000:2:25"},"nodeType":"YulFunctionCall","src":"6000:10:25"},"nodeType":"YulIf","src":"5997:36:25"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"5945:1:25","type":""},{"name":"y","nodeType":"YulTypedName","src":"5948:1:25","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"5954:3:25","type":""}],"src":"5914:125:25"},{"body":{"nodeType":"YulBlock","src":"6173:145:25","statements":[{"nodeType":"YulAssignment","src":"6183:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6195:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"6206:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6191:3:25"},"nodeType":"YulFunctionCall","src":"6191:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6183:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6225:9:25"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6240:6:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6256:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"6261:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6252:3:25"},"nodeType":"YulFunctionCall","src":"6252:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"6265:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6248:3:25"},"nodeType":"YulFunctionCall","src":"6248:19:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6236:3:25"},"nodeType":"YulFunctionCall","src":"6236:32:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6218:6:25"},"nodeType":"YulFunctionCall","src":"6218:51:25"},"nodeType":"YulExpressionStatement","src":"6218:51:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6289:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"6300:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6285:3:25"},"nodeType":"YulFunctionCall","src":"6285:18:25"},{"name":"value1","nodeType":"YulIdentifier","src":"6305:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6278:6:25"},"nodeType":"YulFunctionCall","src":"6278:34:25"},"nodeType":"YulExpressionStatement","src":"6278:34:25"}]},"name":"abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6134:9:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6145:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6153:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6164:4:25","type":""}],"src":"6044:274:25"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bytes32t_addresst_address(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := abi_decode_address(add(headStart, 64))\n    }\n    function abi_decode_array_bytes32_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_array$_t_address_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool__to_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 224)\n        mstore(headStart, iszero(iszero(value0)))\n        mstore(add(headStart, 32), iszero(iszero(value1)))\n        mstore(add(headStart, 64), iszero(iszero(value2)))\n        mstore(add(headStart, 96), iszero(iszero(value3)))\n        mstore(add(headStart, 128), iszero(iszero(value4)))\n        mstore(add(headStart, 160), iszero(iszero(value5)))\n        mstore(add(headStart, 192), iszero(iszero(value6)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_packed_t_array$_t_address_$dyn_calldata_ptr__to_t_array$_t_address_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let pos_1 := pos\n        pos_1 := pos\n        let srcPtr := value0\n        let i := 0\n        for { } lt(i, value1) { i := add(i, 1) }\n        {\n            mstore(pos_1, and(abi_decode_address(srcPtr), sub(shl(160, 1), 1)))\n            let _1 := 0x20\n            pos_1 := add(pos_1, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos_1\n    }\n    function abi_encode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr__to_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), value1)\n        if gt(value1, sub(shl(251, 1), 1)) { revert(0, 0) }\n        let length := shl(5, value1)\n        calldatacopy(add(headStart, 64), value0, length)\n        tail := add(add(headStart, length), 64)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n}","id":25,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x23D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7780E9C1 GT PUSH2 0x13B JUMPI DUP1 PUSH4 0xB0614DB3 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xD547741F GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x53E JUMPI DUP1 PUSH4 0xE3A3C522 EQ PUSH2 0x551 JUMPI DUP1 PUSH4 0xE55B4F93 EQ PUSH2 0x566 JUMPI DUP1 PUSH4 0xF53F5E1E EQ PUSH2 0x579 JUMPI DUP1 PUSH4 0xFC810286 EQ PUSH2 0x58C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB0614DB3 EQ PUSH2 0x49D JUMPI DUP1 PUSH4 0xB5617EF7 EQ PUSH2 0x4F1 JUMPI DUP1 PUSH4 0xB8AD415E EQ PUSH2 0x511 JUMPI DUP1 PUSH4 0xBD7CA7BA EQ PUSH2 0x518 JUMPI DUP1 PUSH4 0xC395FCB3 EQ PUSH2 0x52B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x91D14854 GT PUSH2 0xFF JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x449 JUMPI DUP1 PUSH4 0xA1F34163 EQ PUSH2 0x45C JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x46F JUMPI DUP1 PUSH4 0xAA52617C EQ PUSH2 0x477 JUMPI DUP1 PUSH4 0xABAA536F EQ PUSH2 0x48A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7780E9C1 EQ PUSH2 0x3E8 JUMPI DUP1 PUSH4 0x784FEE0E EQ PUSH2 0x3FB JUMPI DUP1 PUSH4 0x7BFF0975 EQ PUSH2 0x410 JUMPI DUP1 PUSH4 0x7E5EFFA4 EQ PUSH2 0x423 JUMPI DUP1 PUSH4 0x8850845F EQ PUSH2 0x436 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3E251518 GT PUSH2 0x1C9 JUMPI DUP1 PUSH4 0x60376528 GT PUSH2 0x18D JUMPI DUP1 PUSH4 0x60376528 EQ PUSH2 0x383 JUMPI DUP1 PUSH4 0x61462F0E EQ PUSH2 0x396 JUMPI DUP1 PUSH4 0x68DD17A5 EQ PUSH2 0x3A9 JUMPI DUP1 PUSH4 0x69D0B517 EQ PUSH2 0x3BE JUMPI DUP1 PUSH4 0x6E1D616E EQ PUSH2 0x3D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3E251518 EQ PUSH2 0x324 JUMPI DUP1 PUSH4 0x456F19FC EQ PUSH2 0x337 JUMPI DUP1 PUSH4 0x52F84B72 EQ PUSH2 0x34A JUMPI DUP1 PUSH4 0x57C03371 EQ PUSH2 0x35D JUMPI DUP1 PUSH4 0x5CB87D26 EQ PUSH2 0x370 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x25D5E87E GT PUSH2 0x210 JUMPI DUP1 PUSH4 0x25D5E87E EQ PUSH2 0x2C3 JUMPI DUP1 PUSH4 0x261191B7 EQ PUSH2 0x2D6 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x2FC JUMPI DUP1 PUSH4 0x3CA7C02A EQ PUSH2 0x30F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0x443CD2A EQ PUSH2 0x26A JUMPI DUP1 PUSH4 0x1E223B2A EQ PUSH2 0x27F JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x292 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x255 PUSH2 0x250 CALLDATASIZE PUSH1 0x4 PUSH2 0x1222 JUMP JUMPDEST PUSH2 0x59F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x27D PUSH2 0x278 CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0x5D6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x27D PUSH2 0x28D CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0x658 JUMP JUMPDEST PUSH2 0x2B5 PUSH2 0x2A0 CALLDATASIZE PUSH1 0x4 PUSH2 0x128A JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x261 JUMP JUMPDEST PUSH2 0x27D PUSH2 0x2D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0x6DA JUMP JUMPDEST PUSH2 0x27D PUSH2 0x2E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0x75C JUMP JUMPDEST PUSH2 0x27D PUSH2 0x2F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x12A3 JUMP JUMPDEST PUSH2 0x7DE JUMP JUMPDEST PUSH2 0x27D PUSH2 0x30A CALLDATASIZE PUSH1 0x4 PUSH2 0x12A3 JUMP JUMPDEST PUSH2 0x809 JUMP JUMPDEST PUSH2 0x2B5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14EC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x27D PUSH2 0x332 CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0x841 JUMP JUMPDEST PUSH2 0x27D PUSH2 0x345 CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0x8C3 JUMP JUMPDEST PUSH2 0x255 PUSH2 0x358 CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0x945 JUMP JUMPDEST PUSH2 0x27D PUSH2 0x36B CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0x95F JUMP JUMPDEST PUSH2 0x27D PUSH2 0x37E CALLDATASIZE PUSH1 0x4 PUSH2 0x12CF JUMP JUMPDEST PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0x27D PUSH2 0x391 CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0xA74 JUMP JUMPDEST PUSH2 0x27D PUSH2 0x3A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1357 JUMP JUMPDEST PUSH2 0xAF6 JUMP JUMPDEST PUSH2 0x2B5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14AC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x2B5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x150C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x2B5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x154C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x27D PUSH2 0x3F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x128A JUMP JUMPDEST PUSH2 0xC09 JUMP JUMPDEST PUSH2 0x2B5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x152C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x255 PUSH2 0x41E CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0xCF6 JUMP JUMPDEST PUSH2 0x27D PUSH2 0x431 CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0xD10 JUMP JUMPDEST PUSH2 0x255 PUSH2 0x444 CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0xD92 JUMP JUMPDEST PUSH2 0x255 PUSH2 0x457 CALLDATASIZE PUSH1 0x4 PUSH2 0x12A3 JUMP JUMPDEST PUSH2 0xDA8 JUMP JUMPDEST PUSH2 0x255 PUSH2 0x46A CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0xDD1 JUMP JUMPDEST PUSH2 0x2B5 PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x27D PUSH2 0x485 CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0xDEB JUMP JUMPDEST PUSH2 0x255 PUSH2 0x498 CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0xE6D JUMP JUMPDEST PUSH2 0x4B0 PUSH2 0x4AB CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0xE87 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP8 ISZERO ISZERO DUP9 MSTORE SWAP6 ISZERO ISZERO PUSH1 0x20 DUP9 ADD MSTORE SWAP4 ISZERO ISZERO SWAP5 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x60 DUP6 ADD MSTORE ISZERO ISZERO PUSH1 0x80 DUP5 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0xA0 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD PUSH2 0x261 JUMP JUMPDEST PUSH2 0x2B5 PUSH2 0x4FF CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x18 PUSH2 0x2B5 JUMP JUMPDEST PUSH2 0x27D PUSH2 0x526 CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0xF40 JUMP JUMPDEST PUSH2 0x255 PUSH2 0x539 CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0xF8B JUMP JUMPDEST PUSH2 0x27D PUSH2 0x54C CALLDATASIZE PUSH1 0x4 PUSH2 0x12A3 JUMP JUMPDEST PUSH2 0xF97 JUMP JUMPDEST PUSH2 0x2B5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x156C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x27D PUSH2 0x574 CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0xFBC JUMP JUMPDEST PUSH2 0x255 PUSH2 0x587 CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0x103E JUMP JUMPDEST PUSH2 0x27D PUSH2 0x59A CALLDATASIZE PUSH1 0x4 PUSH2 0x126F JUMP JUMPDEST PUSH2 0x1058 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x5D0 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x5FE JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x609 DUP2 PUSH2 0x10DA JUMP JUMPDEST PUSH2 0x621 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14EC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xF97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14EC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x158C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x680 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x68B DUP2 PUSH2 0x10DA JUMP JUMPDEST PUSH2 0x6A3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14AC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x7DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14AC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14CC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x6E3 DUP2 PUSH2 0x103E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x706 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD TIMESTAMP GT JUMPDEST ISZERO PUSH2 0x759 JUMPI PUSH2 0x723 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14EC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH2 0x10E4 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xA6F32BCBC7DE829D50E1C9CBC1C5B4DAFB4C7A0B8329757AEE62A9B394D71C3B SWAP1 PUSH1 0x0 SWAP1 LOG2 JUMPDEST POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x784 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x78F DUP2 PUSH2 0x10DA JUMP JUMPDEST PUSH2 0x7A7 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x152C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xF97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x152C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x158C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x7F9 DUP2 PUSH2 0x10DA JUMP JUMPDEST PUSH2 0x803 DUP4 DUP4 PUSH2 0x1157 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x832 JUMPI PUSH1 0x40 MLOAD PUSH4 0x334BD919 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x83C DUP3 DUP3 PUSH2 0x10E4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x869 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x874 DUP2 PUSH2 0x10DA JUMP JUMPDEST PUSH2 0x88C PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x154C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xF97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x154C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x158C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x8EB JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x8F6 DUP2 PUSH2 0x10DA JUMP JUMPDEST PUSH2 0x90E PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x156C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x7DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x156C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14CC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5D0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x152C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0xDA8 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x987 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x992 DUP2 PUSH2 0x10DA JUMP JUMPDEST PUSH2 0x9AA PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14EC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x7DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14EC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14CC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9EC DUP2 PUSH2 0x10DA JUMP JUMPDEST PUSH2 0x9F6 DUP5 DUP5 PUSH2 0xDA8 JUMP JUMPDEST PUSH2 0xA13 JUMPI PUSH1 0x40 MLOAD PUSH4 0x66783C9D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA1D DUP5 DUP5 PUSH2 0x10E4 JUMP JUMPDEST POP PUSH2 0xA28 DUP5 DUP4 PUSH2 0x1157 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP6 SWAP2 PUSH32 0x274DD4127A55DCB6F6C12ED38FEC5007D965D2AFFFA8B0BC75C3DC8F3F6B2224 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xA9C JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xAA7 DUP2 PUSH2 0x10DA JUMP JUMPDEST PUSH2 0xABF PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x150C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x7DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x150C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14CC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB01 DUP2 PUSH2 0x10DA JUMP JUMPDEST DUP4 ISZERO DUP1 PUSH2 0xB0C JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0xB2A JUMPI PUSH1 0x40 MLOAD PUSH4 0x7D6EAF93 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP3 EQ PUSH2 0xB4A JUMPI PUSH1 0x40 MLOAD PUSH4 0x90A2F793 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xBB0 JUMPI PUSH2 0xB9D DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0xB6A JUMPI PUSH2 0xB6A PUSH2 0x13C3 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0xB83 JUMPI PUSH2 0xB83 PUSH2 0x13C3 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xB98 SWAP2 SWAP1 PUSH2 0x126F JUMP JUMPDEST PUSH2 0x1157 JUMP JUMPDEST POP DUP1 PUSH2 0xBA8 DUP2 PUSH2 0x13EF JUMP JUMPDEST SWAP2 POP POP PUSH2 0xB4D JUMP JUMPDEST POP DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0xBC1 SWAP3 SWAP2 SWAP1 PUSH2 0x1408 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH32 0xF4D52C90739C68C4E82D39CFBEEE6B6613784BF9B28D2CDB3A02203799CF0606 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0xBFA SWAP3 SWAP2 SWAP1 PUSH2 0x1448 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xC12 CALLER PUSH2 0x103E JUMP JUMPDEST ISZERO PUSH2 0xC30 JUMPI PUSH1 0x40 MLOAD PUSH4 0x510A5833 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 ISZERO PUSH2 0xC4F JUMPI PUSH1 0x40 MLOAD PUSH4 0x7294221 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x18 DUP2 GT ISZERO PUSH2 0xC71 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7294221 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xC7F DUP3 PUSH2 0xE10 PUSH2 0x1481 JUMP JUMPDEST SWAP1 POP PUSH2 0xC99 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14EC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x1157 JUMP JUMPDEST POP PUSH2 0xCA4 DUP2 TIMESTAMP PUSH2 0x1498 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 MLOAD PUSH32 0xC526CDAE63C288EA4504281FE29B0AE3352C8A9CCAE61EBA8C21CD25A949E0F1 SWAP1 PUSH2 0xCEA SWAP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5D0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x150C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0xDA8 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xD38 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xD43 DUP2 PUSH2 0x10DA JUMP JUMPDEST PUSH2 0xD5B PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14AC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xF97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14AC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x158C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5D0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x156C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5D0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14AC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0xDA8 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xE13 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xE1E DUP2 PUSH2 0x10DA JUMP JUMPDEST PUSH2 0xE36 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x152C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x7DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x152C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14CC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5D0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x154C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0xDA8 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0xE99 DUP2 DUP10 PUSH2 0xDA8 JUMP JUMPDEST PUSH2 0xEB1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x150C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP11 PUSH2 0xDA8 JUMP JUMPDEST PUSH2 0xEC9 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x156C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP12 PUSH2 0xDA8 JUMP JUMPDEST PUSH2 0xEE1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x154C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP13 PUSH2 0xDA8 JUMP JUMPDEST PUSH2 0xEF9 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14AC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP14 PUSH2 0xDA8 JUMP JUMPDEST PUSH2 0xF11 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x152C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP15 PUSH2 0xDA8 JUMP JUMPDEST PUSH2 0xF29 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14EC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP16 PUSH2 0xDA8 JUMP JUMPDEST SWAP6 SWAP15 SWAP5 SWAP14 POP SWAP3 SWAP12 POP SWAP1 SWAP10 POP SWAP8 POP SWAP6 POP SWAP1 SWAP4 POP SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xF68 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xF73 DUP2 PUSH2 0x10DA JUMP JUMPDEST PUSH2 0x83C PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x156C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xF97 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5D0 DUP2 DUP4 PUSH2 0xDA8 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xFB2 DUP2 PUSH2 0x10DA JUMP JUMPDEST PUSH2 0x803 DUP4 DUP4 PUSH2 0x10E4 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xFE4 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xFEF DUP2 PUSH2 0x10DA JUMP JUMPDEST PUSH2 0x1007 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x154C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x7DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x154C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14CC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5D0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14EC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0xDA8 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1080 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x108B DUP2 PUSH2 0x10DA JUMP JUMPDEST PUSH2 0x10A3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x150C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xF97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x150C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x158C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x759 DUP2 CALLER PUSH2 0x11E1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10F0 DUP4 DUP4 PUSH2 0xDA8 JUMP JUMPDEST ISZERO PUSH2 0x114F JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP7 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x5D0 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x5D0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1163 DUP4 DUP4 PUSH2 0xDA8 JUMP JUMPDEST PUSH2 0x114F JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x1199 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x5D0 JUMP JUMPDEST PUSH2 0x11EB DUP3 DUP3 PUSH2 0xDA8 JUMP JUMPDEST PUSH2 0x121E JUMPI PUSH1 0x40 MLOAD PUSH4 0xE2517D3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1234 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x124C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x126A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1281 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x124C DUP3 PUSH2 0x1253 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x129C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x12B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x12C6 PUSH1 0x20 DUP5 ADD PUSH2 0x1253 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x12E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH2 0x12F4 PUSH1 0x20 DUP6 ADD PUSH2 0x1253 JUMP JUMPDEST SWAP2 POP PUSH2 0x1302 PUSH1 0x40 DUP6 ADD PUSH2 0x1253 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x131D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1335 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1350 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x136D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1385 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1391 DUP9 DUP4 DUP10 ADD PUSH2 0x130B JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x13AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13B7 DUP8 DUP3 DUP9 ADD PUSH2 0x130B JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x1401 JUMPI PUSH2 0x1401 PUSH2 0x13D9 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP3 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x143D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1427 DUP4 PUSH2 0x1253 JUMP JUMPDEST AND DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x140E JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFB SHL SUB DUP4 GT ISZERO PUSH2 0x1468 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP6 PUSH1 0x40 DUP6 ADD CALLDATACOPY SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x5D0 JUMPI PUSH2 0x5D0 PUSH2 0x13D9 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x5D0 JUMPI PUSH2 0x5D0 PUSH2 0x13D9 JUMP INVALID SWAP3 MULMOD SWAP5 0xFC EXTCODESIZE INVALID 0x28 0x2F EXTCODEHASH KECCAK256 0xCD 0xCC CALL 0xB7 0xC5 0xE4 PUSH13 0x63D963E822D98EFFF90ABD41C1 0x2E 0x21 0x2A 0xE6 LOG1 SGT 0xC0 0xED JUMPDEST PUSH25 0xA53413FFBB7679881F11145CCFBA4FB92E863DFCD5A1D2F3EE 0x24 0x4E 0xF9 0xDA SIGNEXTEND 0x2F DUP10 0xA7 0x4B KECCAK256 DUP15 0xA9 INVALID BYTE PUSH4 0x9EBDF634 MUL PUSH30 0x9E1F092B58C39954FA37C41A06B26CED3A23B7BF835A0918ADE784F4055D 0xED DUP7 0xD1 DUP4 SDIV CREATE2 0x28 DELEGATECALL PUSH27 0x726052AA0EC51D0BF03CE5511C9FFC9DE2B423D73D1FAACD808ABF 0x2A 0xC8 SWAP13 0xCE 0xA8 LOG3 0xEC CALLCODE MSIZE LOG1 0xC4 DUP15 PC CALLDATACOPY 0xAD PUSH27 0x7F3DCEDCBE129BF3249EC4FBF651FD4F5E2600EAD39FE2F506FA31 0xD7 0xA9 0x2D SWAP16 0xA9 0xA8 DUP10 DUP11 0xC4 SAR DUP7 0xEE SWAP12 SGT DUP7 CALLDATASIZE SDIV LOG3 PUSH2 0xC85A 0xE5 0xD6 ADD 0xD 0x5D 0xE4 CALLCODE DUP1 ISZERO GAS 0xAA 0xFB PUSH4 0x29A20985 DUP1 CHAINID 0x2D RETURN RETURNDATACOPY 0xC4 0xB7 PREVRANDAO SHL NOT PUSH19 0x9B9601C5FC17AE1CF99A8A52A2646970667358 0x22 SLT KECCAK256 0xF6 CODESIZE 0x4E COINBASE LOG3 0xE4 0xB4 RETURNDATACOPY 0xB2 SWAP1 SWAP10 PUSH0 0xE5 0xCB 0xC1 0xBD 0x2A 0xCE 0x27 BALANCE PUSH3 0x2079E4 SELFDESTRUCT 0xC1 REVERT 0xDF PC JUMP 0xCE SWAP14 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"456:9833:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2565:202:0;;;;;;:::i;:::-;;:::i;:::-;;;470:14:25;;463:22;445:41;;433:2;418:18;2565:202:0;;;;;;;;8812:211:20;;;;;;:::i;:::-;;:::i;:::-;;6440:216;;;;;;:::i;:::-;;:::i;3810:120:0:-;;;;;;:::i;:::-;3875:7;3901:12;;;;;;;;;;:22;;;;3810:120;;;;1197:25:25;;;1185:2;1170:18;3810:120:0;1051:177:25;2752:252:20;;;;;;:::i;:::-;;:::i;8553:249::-;;;;;;:::i;:::-;;:::i;4226:136:0:-;;;;;;:::i;:::-;;:::i;5328:245::-;;;;;;:::i;:::-;;:::i;913:62:20:-;;-1:-1:-1;;;;;;;;;;;913:62:20;;8114:205;;;;;;:::i;:::-;;:::i;6006:214::-;;;;;;:::i;:::-;;:::i;10012:145::-;;;;;;:::i;:::-;;:::i;6916:208::-;;;;;;:::i;:::-;;:::i;4150:355::-;;;;;;:::i;:::-;;:::i;5780:216::-;;;;;;:::i;:::-;;:::i;3272:548::-;;;;;;:::i;:::-;;:::i;743:70::-;;-1:-1:-1;;;;;;;;;;;743:70:20;;510:74;;-1:-1:-1;;;;;;;;;;;510:74:20;;673:64;;-1:-1:-1;;;;;;;;;;;673:64:20;;1723:643;;;;;;:::i;:::-;;:::i;819:88::-;;-1:-1:-1;;;;;;;;;;;819:88:20;;9486:126;;;;;;:::i;:::-;;:::i;8325:222::-;;;;;;:::i;:::-;;:::i;9618:126::-;;;;;;:::i;:::-;;:::i;2854:136:0:-;;;;;;:::i;:::-;;:::i;9878:128:20:-;;;;;;:::i;:::-;;:::i;2187:49:0:-;;2232:4;2187:49;;6667:243:20;;;;;;:::i;:::-;;:::i;9750:122::-;;;;;;:::i;:::-;;:::i;4552:617::-;;;;;;:::i;:::-;;:::i;:::-;;;;3458:14:25;;3451:22;3433:41;;3517:14;;3510:22;3505:2;3490:18;;3483:50;3576:14;;3569:22;3549:18;;;3542:50;;;;3635:14;;3628:22;3623:2;3608:18;;3601:50;3695:14;3688:22;3682:3;3667:19;;3660:51;3755:14;;3748:22;3742:3;3727:19;;3720:51;3815:14;3808:22;3802:3;3787:19;;3780:51;3420:3;3405:19;4552:617:20;3160:677:25;982:51:20;;;;;;:::i;:::-;;;;;;;;;;;;;;2413:92;2496:2;2413:92;;7947:161;;;;;;:::i;:::-;;:::i;9355:125::-;;;;;;:::i;:::-;;:::i;4642:138:0:-;;;;;;:::i;:::-;;:::i;590:77:20:-;;-1:-1:-1;;;;;;;;;;;590:77:20;;6226:208;;;;;;:::i;:::-;;:::i;10167:120::-;;;;;;:::i;:::-;;:::i;7721:220::-;;;;;;:::i;:::-;;:::i;2565:202:0:-;2650:4;-1:-1:-1;;;;;;2673:47:0;;-1:-1:-1;;;2673:47:0;;:87;;-1:-1:-1;;;;;;;;;;861:40:14;;;2724:36:0;2666:94;2565:202;-1:-1:-1;;2565:202:0:o;8812:211:20:-;8881:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;8929:32:20::2;-1:-1:-1::0;;;;;;;;;;;8953:7:20::2;8929:10;:32::i;:::-;8976:40;::::0;-1:-1:-1;;;;;8976:40:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;951:24:20;-1:-1:-1;;;;;;;;;;;8976:40:20;;;::::2;1182:1:::1;8812:211:::0;;:::o;6440:216::-;6508:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;6555:35:20::2;-1:-1:-1::0;;;;;;;;;;;6582:7:20::2;6555:9;:35::i;:::-;6605:44;::::0;-1:-1:-1;;;;;6605:44:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;785:28:20;-1:-1:-1;;;;;;;;;;;6605:44:20;;;::::2;1182:1:::1;6440:216:::0;;:::o;2752:252::-;2816:22;2830:7;2816:13;:22::i;:::-;:69;;;;-1:-1:-1;;;;;;2842:25:20;;;;;;:16;:25;;;;;;2870:15;-1:-1:-1;2816:69:20;2812:186;;;2901:33;-1:-1:-1;;;;;;;;;;;2926:7:20;2901:11;:33::i;:::-;-1:-1:-1;2954:33:20;;-1:-1:-1;;;;;2954:33:20;;;;;;;;2812:186;2752:252;:::o;8553:249::-;8634:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;8682:45:20::2;-1:-1:-1::0;;;;;;;;;;;8719:7:20::2;8682:10;:45::i;:::-;8742:53;::::0;-1:-1:-1;;;;;8742:53:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;870:37:20;-1:-1:-1;;;;;;;;;;;8742:53:20;;;::::2;1182:1:::1;8553:249:::0;;:::o;4226:136:0:-;3875:7;3901:12;;;;;;;;;;:22;;;2464:16;2475:4;2464:10;:16::i;:::-;4330:25:::1;4341:4;4347:7;4330:10;:25::i;:::-;;4226:136:::0;;;:::o;5328:245::-;-1:-1:-1;;;;;5421:34:0;;735:10:12;5421:34:0;5417:102;;5478:30;;-1:-1:-1;;;5478:30:0;;;;;;;;;;;5417:102;5529:37;5541:4;5547:18;5529:11;:37::i;:::-;;5328:245;;:::o;8114:205:20:-;8184:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;8227:33:20::2;-1:-1:-1::0;;;;;;;;;;;8252:7:20::2;8227:10;:33::i;:::-;8271:41;::::0;-1:-1:-1;;;;;8271:41:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;712:25:20;-1:-1:-1;;;;;;;;;;;8271:41:20;;;::::2;1182:1:::1;8114:205:::0;;:::o;6006:214::-;6074:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;6121:34:20::2;-1:-1:-1::0;;;;;;;;;;;6147:7:20::2;6121:9;:34::i;:::-;6170:43;::::0;-1:-1:-1;;;;;6170:43:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;631:36:20;-1:-1:-1;;;;;;;;;;;6170:43:20;;;::::2;1182:1:::1;6006:214:::0;;:::o;10012:145::-;10085:4;10108:42;-1:-1:-1;;;;;;;;;;;10142:7:20;10108;:42::i;6916:208::-;6984:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;7031:31:20::2;-1:-1:-1::0;;;;;;;;;;;7054:7:20::2;7031:9;:31::i;:::-;7077:40;::::0;-1:-1:-1;;;;;7077:40:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;951:24:20;-1:-1:-1;;;;;;;;;;;7077:40:20;;;::::2;1182:1:::1;6916:208:::0;;:::o;4150:355::-;2232:4:0;2464:16;2232:4;2464:10;:16::i;:::-;4297:19:20::1;4305:4;4311;4297:7;:19::i;:::-;4292:90;;4339:32;;-1:-1:-1::0;;;4339:32:20::1;;;;;;;;;;;4292:90;4391:23;4403:4;4409;4391:11;:23::i;:::-;;4424:20;4435:4;4441:2;4424:10;:20::i;:::-;-1:-1:-1::0;4460:38:20::1;::::0;;-1:-1:-1;;;;;4254:15:25;;;4236:34;;4306:15;;4301:2;4286:18;;4279:43;4483:4:20;;4460:38:::1;::::0;4171:18:25;4460:38:20::1;;;;;;;4150:355:::0;;;;:::o;5780:216::-;5847:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;5895:34:20::2;-1:-1:-1::0;;;;;;;;;;;5921:7:20::2;5895:9;:34::i;:::-;5945:43;::::0;-1:-1:-1;;;;;5945:43:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;551:33:20;-1:-1:-1;;;;;;;;;;;5945:43:20;;;::::2;1182:1:::1;5780:216:::0;;:::o;3272:548::-;2232:4:0;2464:16;2232:4;2464:10;:16::i;:::-;3425:17:20;;;:41:::1;;-1:-1:-1::0;3446:20:20;;3425:41:::1;3421:105;;;3489:26;;-1:-1:-1::0;;;3489:26:20::1;;;;;;;;;;;3421:105;3539:31:::0;;::::1;3535:104;;3593:35;;-1:-1:-1::0;;;3593:35:20::1;;;;;;;;;;;3535:104;3662:9;3657:101;3677:16:::0;;::::1;3657:101;;;3714:33;3725:5;;3731:1;3725:8;;;;;;;:::i;:::-;;;;;;;3735;;3744:1;3735:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;3714:10;:33::i;:::-;-1:-1:-1::0;3695:3:20;::::1;::::0;::::1;:::i;:::-;;;;3657:101;;;;3804:8;;3773:40;;;;;;;:::i;:::-;;;;;;;;;3797:5;;3773:40;;;;;;;:::i;:::-;;;;;;;;3272:548:::0;;;;;:::o;1723:643::-;1805:25;1819:10;1805:13;:25::i;:::-;1801:93;;;1853:30;;-1:-1:-1;;;1853:30:20;;;;;;;;;;;1801:93;1907:19;;1903:88;;1949:31;;-1:-1:-1;;;1949:31:20;;;;;;;;;;;1903:88;2023:2;2005:15;:20;2001:101;;;2059:31;;-1:-1:-1;;;2059:31:20;;;;;;;;;;;2001:101;2111:25;2139;:15;2157:7;2139:25;:::i;:::-;2111:53;;2179:35;-1:-1:-1;;;;;;;;;;;2203:10:20;2179;:35::i;:::-;-1:-1:-1;2255:35:20;2273:17;2255:15;:35;:::i;:::-;2241:10;2224:28;;;;:16;:28;;;;;;;:66;;;;2306:53;;;;;;2343:15;1197:25:25;;1185:2;1170:18;;1051:177;2306:53:20;;;;;;;;1791:575;1723:643;:::o;9486:126::-;9549:4;9573:32;-1:-1:-1;;;;;;;;;;;9597:7:20;9573;:32::i;8325:222::-;8398:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;8445:36:20::2;-1:-1:-1::0;;;;;;;;;;;8473:7:20::2;8445:10;:36::i;:::-;8496:44;::::0;-1:-1:-1;;;;;8496:44:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;785:28:20;-1:-1:-1;;;;;;;;;;;8496:44:20;;;::::2;1182:1:::1;8325:222:::0;;:::o;9618:126::-;9682:4;9705:32;-1:-1:-1;;;;;;;;;;;9729:7:20;2854:136:0;2931:4;2954:12;;;;;;;;;;;-1:-1:-1;;;;;2954:29:0;;;;;;;;;;;;;;;2854:136::o;9878:128:20:-;9943:4;9966:33;-1:-1:-1;;;;;;;;;;;9991:7:20;9966;:33::i;6667:243::-;6743:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;6791:44:20::2;-1:-1:-1::0;;;;;;;;;;;6827:7:20::2;6791:9;:44::i;:::-;6850:53;::::0;-1:-1:-1;;;;;6850:53:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;870:37:20;-1:-1:-1;;;;;;;;;;;6850:53:20;;;::::2;1182:1:::1;6667:243:::0;;:::o;9750:122::-;9812:4;9835:30;-1:-1:-1;;;;;;;;;;;9857:7:20;9835;:30::i;4552:617::-;4623:12;;;;;;;4834:36;4623:12;4862:7;4834;:36::i;:::-;4884:32;-1:-1:-1;;;;;;;;;;;4908:7:20;4884;:32::i;:::-;4930;-1:-1:-1;;;;;;;;;;;4954:7:20;4930;:32::i;:::-;4976:30;-1:-1:-1;;;;;;;;;;;4998:7:20;4976;:30::i;:::-;5020:33;-1:-1:-1;;;;;;;;;;;5045:7:20;5020;:33::i;:::-;5067:42;-1:-1:-1;;;;;;;;;;;5101:7:20;5067;:42::i;:::-;5123:29;-1:-1:-1;;;;;;;;;;;5144:7:20;5123;:29::i;:::-;4813:349;;;;-1:-1:-1;4813:349:20;;-1:-1:-1;4813:349:20;;-1:-1:-1;4813:349:20;-1:-1:-1;4813:349:20;-1:-1:-1;4813:349:20;;-1:-1:-1;4552:617:20;-1:-1:-1;;4552:617:20:o;7947:161::-;8019:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;8066:35:20::2;-1:-1:-1::0;;;;;;;;;;;8093:7:20::2;8066:10;:35::i;9355:125::-:0;9414:4;9437:36;9414:4;9465:7;9437;:36::i;4642:138:0:-;3875:7;3901:12;;;;;;;;;;:22;;;2464:16;2475:4;2464:10;:16::i;:::-;4747:26:::1;4759:4;4765:7;4747:11;:26::i;6226:208:20:-:0;6291:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;6339:32:20::2;-1:-1:-1::0;;;;;;;;;;;6363:7:20::2;6339:9;:32::i;:::-;6386:41;::::0;-1:-1:-1;;;;;6386:41:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;712:25:20;-1:-1:-1;;;;;;;;;;;6386:41:20;;;::::2;1182:1:::1;6226:208:::0;;:::o;10167:120::-;10228:4;10251:29;-1:-1:-1;;;;;;;;;;;10272:7:20;10251;:29::i;7721:220::-;7793:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;7841:35:20::2;-1:-1:-1::0;;;;;;;;;;;7868:7:20::2;7841:10;:35::i;:::-;7891:43;::::0;-1:-1:-1;;;;;7891:43:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;551:33:20;-1:-1:-1;;;;;;;;;;;7891:43:20;;;::::2;1182:1:::1;7721:220:::0;;:::o;3199:103:0:-;3265:30;3276:4;735:10:12;3265::0;:30::i;6730:317::-;6808:4;6828:22;6836:4;6842:7;6828;:22::i;:::-;6824:217;;;6898:5;6866:12;;;;;;;;;;;-1:-1:-1;;;;;6866:29:0;;;;;;;;;;:37;;-1:-1:-1;;6866:37:0;;;6922:40;735:10:12;;6866:12:0;;6922:40;;6898:5;6922:40;-1:-1:-1;6983:4:0;6976:11;;6824:217;-1:-1:-1;7025:5:0;7018:12;;6179:316;6256:4;6277:22;6285:4;6291:7;6277;:22::i;:::-;6272:217;;6315:6;:12;;;;;;;;;;;-1:-1:-1;;;;;6315:29:0;;;;;;;;;:36;;-1:-1:-1;;6315:36:0;6347:4;6315:36;;;6397:12;735:10:12;;656:96;6397:12:0;-1:-1:-1;;;;;6370:40:0;6388:7;-1:-1:-1;;;;;6370:40:0;6382:4;6370:40;;;;;;;;;;-1:-1:-1;6431:4:0;6424:11;;3432:197;3520:22;3528:4;3534:7;3520;:22::i;:::-;3515:108;;3565:47;;-1:-1:-1;;;3565:47:0;;-1:-1:-1;;;;;6236:32:25;;3565:47:0;;;6218:51:25;6285:18;;;6278:34;;;6191:18;;3565:47:0;;;;;;;3515:108;3432:197;;:::o;14:286:25:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:25;;209:43;;199:71;;266:1;263;256:12;199:71;289:5;14:286;-1:-1:-1;;;14:286:25:o;497:173::-;565:20;;-1:-1:-1;;;;;614:31:25;;604:42;;594:70;;660:1;657;650:12;594:70;497:173;;;:::o;675:186::-;734:6;787:2;775:9;766:7;762:23;758:32;755:52;;;803:1;800;793:12;755:52;826:29;845:9;826:29;:::i;866:180::-;925:6;978:2;966:9;957:7;953:23;949:32;946:52;;;994:1;991;984:12;946:52;-1:-1:-1;1017:23:25;;866:180;-1:-1:-1;866:180:25:o;1233:254::-;1301:6;1309;1362:2;1350:9;1341:7;1337:23;1333:32;1330:52;;;1378:1;1375;1368:12;1330:52;1414:9;1401:23;1391:33;;1443:38;1477:2;1466:9;1462:18;1443:38;:::i;:::-;1433:48;;1233:254;;;;;:::o;1492:328::-;1569:6;1577;1585;1638:2;1626:9;1617:7;1613:23;1609:32;1606:52;;;1654:1;1651;1644:12;1606:52;1690:9;1677:23;1667:33;;1719:38;1753:2;1742:9;1738:18;1719:38;:::i;:::-;1709:48;;1776:38;1810:2;1799:9;1795:18;1776:38;:::i;:::-;1766:48;;1492:328;;;;;:::o;1825:367::-;1888:8;1898:6;1952:3;1945:4;1937:6;1933:17;1929:27;1919:55;;1970:1;1967;1960:12;1919:55;-1:-1:-1;1993:20:25;;2036:18;2025:30;;2022:50;;;2068:1;2065;2058:12;2022:50;2105:4;2097:6;2093:17;2081:29;;2165:3;2158:4;2148:6;2145:1;2141:14;2133:6;2129:27;2125:38;2122:47;2119:67;;;2182:1;2179;2172:12;2119:67;1825:367;;;;;:::o;2197:773::-;2319:6;2327;2335;2343;2396:2;2384:9;2375:7;2371:23;2367:32;2364:52;;;2412:1;2409;2402:12;2364:52;2452:9;2439:23;2481:18;2522:2;2514:6;2511:14;2508:34;;;2538:1;2535;2528:12;2508:34;2577:70;2639:7;2630:6;2619:9;2615:22;2577:70;:::i;:::-;2666:8;;-1:-1:-1;2551:96:25;-1:-1:-1;2754:2:25;2739:18;;2726:32;;-1:-1:-1;2770:16:25;;;2767:36;;;2799:1;2796;2789:12;2767:36;;2838:72;2902:7;2891:8;2880:9;2876:24;2838:72;:::i;:::-;2197:773;;;;-1:-1:-1;2929:8:25;-1:-1:-1;;;;2197:773:25:o;4333:127::-;4394:10;4389:3;4385:20;4382:1;4375:31;4425:4;4422:1;4415:15;4449:4;4446:1;4439:15;4465:127;4526:10;4521:3;4517:20;4514:1;4507:31;4557:4;4554:1;4547:15;4581:4;4578:1;4571:15;4597:135;4636:3;4657:17;;;4654:43;;4677:18;;:::i;:::-;-1:-1:-1;4724:1:25;4713:13;;4597:135::o;4737:551::-;4908:3;4939;4986:6;4908:3;5020:241;5034:6;5031:1;5028:13;5020:241;;;-1:-1:-1;;;;;5101:26:25;5120:6;5101:26;:::i;:::-;5097:52;5083:67;;5173:4;5199:14;;;;5236:15;;;;;5056:1;5049:9;5020:241;;;-1:-1:-1;5277:5:25;;4737:551;-1:-1:-1;;;;;4737:551:25:o;5293:443::-;5482:2;5464:21;;;5501:18;;5494:34;;;-1:-1:-1;;;;;;5540:31:25;;5537:51;;;5584:1;5581;5574:12;5537:51;5618:6;5615:1;5611:14;5675:6;5667;5662:2;5651:9;5647:18;5634:48;5703:22;;;;5727:2;5699:31;;5293:443;-1:-1:-1;;;5293:443:25:o;5741:168::-;5814:9;;;5845;;5862:15;;;5856:22;;5842:37;5832:71;;5883:18;;:::i;5914:125::-;5979:9;;;6000:10;;;5997:36;;;6013:18;;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"1120200","executionCost":"infinite","totalCost":"infinite"},"external":{"AUDITOR_ROLE()":"infinite","CERTIFICATE_FACTORY_ROLE()":"infinite","CERTIFIER_ROLE()":"infinite","DEFAULT_ADMIN_ROLE()":"284","ENTERPRISE_ROLE()":"infinite","INSPECTOR_ROLE()":"infinite","PUBLIC_ROLE()":"infinite","bulkGrantRoles(bytes32[],address[])":"infinite","checkExpiryRoles(address)":"infinite","claimTemporaryPublicRole(uint256)":"infinite","getActiveRoles(address)":"infinite","getMaxPublicRoleDuration()":"281","getRoleAdmin(bytes32)":"2560","grantAuditor(address)":"infinite","grantCertificateFactory(address)":"infinite","grantCertifier(address)":"infinite","grantEnterprise(address)":"infinite","grantInspector(address)":"infinite","grantPublicRole(address)":"infinite","grantRole(bytes32,address)":"infinite","hasAdminRole(address)":"2801","hasAuditorRole(address)":"infinite","hasCertificateFactoryRole(address)":"infinite","hasCertifierRole(address)":"infinite","hasEnterpriseRole(address)":"infinite","hasInspectorRole(address)":"infinite","hasPublicRole(address)":"infinite","hasRole(bytes32,address)":"2696","publicRoleExpiry(address)":"2586","renounceRole(bytes32,address)":"29135","revokeAuditorRole(address)":"infinite","revokeCertificateFactoryRole(address)":"infinite","revokeCertifierRole(address)":"infinite","revokeEnterpriseRole(address)":"infinite","revokeInspectorRole(address)":"infinite","revokePublicRole(address)":"infinite","revokeRole(bytes32,address)":"infinite","supportsInterface(bytes4)":"473","transferRole(bytes32,address,address)":"infinite"},"internal":{"_setupRole(bytes32,address)":"infinite"}},"methodIdentifiers":{"AUDITOR_ROLE()":"6e1d616e","CERTIFICATE_FACTORY_ROLE()":"784fee0e","CERTIFIER_ROLE()":"69d0b517","DEFAULT_ADMIN_ROLE()":"a217fddf","ENTERPRISE_ROLE()":"68dd17a5","INSPECTOR_ROLE()":"e3a3c522","PUBLIC_ROLE()":"3ca7c02a","bulkGrantRoles(bytes32[],address[])":"61462f0e","checkExpiryRoles(address)":"25d5e87e","claimTemporaryPublicRole(uint256)":"7780e9c1","getActiveRoles(address)":"b0614db3","getMaxPublicRoleDuration()":"b8ad415e","getRoleAdmin(bytes32)":"248a9ca3","grantAuditor(address)":"e55b4f93","grantCertificateFactory(address)":"aa52617c","grantCertifier(address)":"60376528","grantEnterprise(address)":"1e223b2a","grantInspector(address)":"456f19fc","grantPublicRole(address)":"57c03371","grantRole(bytes32,address)":"2f2ff15d","hasAdminRole(address)":"c395fcb3","hasAuditorRole(address)":"abaa536f","hasCertificateFactoryRole(address)":"52f84b72","hasCertifierRole(address)":"7bff0975","hasEnterpriseRole(address)":"a1f34163","hasInspectorRole(address)":"8850845f","hasPublicRole(address)":"f53f5e1e","hasRole(bytes32,address)":"91d14854","publicRoleExpiry(address)":"b5617ef7","renounceRole(bytes32,address)":"36568abe","revokeAuditorRole(address)":"3e251518","revokeCertificateFactoryRole(address)":"261191b7","revokeCertifierRole(address)":"fc810286","revokeEnterpriseRole(address)":"7e5effa4","revokeInspectorRole(address)":"bd7ca7ba","revokePublicRole(address)":"0443cd2a","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7","transferRole(bytes32,address,address)":"5cb87d26"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuditorOversight__AppealWindowClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuditorOversight__CaseNotPending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuditorOversight__NotAuthorizedEnterpriseOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificateNFT__CertificateDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificateNFT__EnterpriseAlreadyCertified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificationAuthority__CertificationNotExpiredYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificationAuthority__EnterpriseAlreadyCertified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificationAuthority__EnterpriseNotCertifiedYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnterpriseRegistry__EnterpriseAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnterpriseRegistry__EnterpriseDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnterpriseRegistry__InvalidStart\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__InspectionPeriodExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__InspectorAlreadyAssigned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__InvalidReportIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__NoReportsAssociatedWithEnterprise\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__NotAssignedToEnterprise\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__ReportAlreadyFlagged\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__AlreadyHasRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__EmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedAuditor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedCertificateFactory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedCertifier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedEnterprise\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedInspector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedPublicUser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__RoleDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__UnauthorizedToPerformAction\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"roles\",\"type\":\"bytes32[]\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"BulkRolesGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"PublicRoleExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"PublicRoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RoleTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUDITOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CERTIFICATE_FACTORY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CERTIFIER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENTERPRISE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INSPECTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"roles\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"bulkGrantRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkExpiryRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"durationInHours\",\"type\":\"uint256\"}],\"name\":\"claimTemporaryPublicRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getActiveRoles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCertifier\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isInspector\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAuditor\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnterprise\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCertificateFactory\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxPublicRoleDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantAuditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantCertificateFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantCertifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantEnterprise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantInspector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantPublicRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAdminRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAuditorRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasCertificateFactoryRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasCertifierRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasEnterpriseRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasInspectorRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasPublicRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"publicRoleExpiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeAuditorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeCertificateFactoryRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeCertifierRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeEnterpriseRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeInspectorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokePublicRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"bulkGrantRoles(bytes32[],address[])\":{\"details\":\"Bulk grant roles to accounts\",\"params\":{\"accounts\":\"The array of accounts to grant roles emits BulkRolesGranted event on successful grant\",\"roles\":\"The array of roles to grant\"}},\"checkExpiryRoles(address)\":{\"details\":\"helper to check expiry of `PUBLIC` role\",\"params\":{\"account\":\"The account to check for role expiry\"}},\"claimTemporaryPublicRole(uint256)\":{\"details\":\"allows users to claim temporary `PUBLIC` role for `durationInHours` hours on their visit to platform\",\"params\":{\"durationInHours\":\"The duration in hours the user will have the `PUBLIC` role\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantCertifier(address)\":{\"details\":\"Functions to grant roles to!\",\"params\":{\"account\":\"The account to grant the role to\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasAdminRole(address)\":{\"details\":\"Functions to check if a certain account has the specified role\",\"params\":{\"account\":\"The account to check \"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeCertifierRole(address)\":{\"details\":\"Functions to revoke roles\",\"params\":{\"account\":\"The account to revoke the role from\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferRole(bytes32,address,address)\":{\"details\":\"Transfers a role from one account to another\",\"params\":{\"from\":\"The account to transfer the role from\",\"role\":\"The role to transfer\",\"to\":\"The account to transfer the role to\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bulkGrantRoles(bytes32[],address[])\":{\"notice\":\"---------- # Bulk Role Grant(Auto) ------- //\"},\"checkExpiryRoles(address)\":{\"notice\":\"--------- #  Auto-expiry check (Call periodically) ------- //Emits PublicRoleExpired event on expiry\"},\"claimTemporaryPublicRole(uint256)\":{\"notice\":\"----------- #claim temporary public role -------------- //`durationInHours` must be less than 24 hoursEmits PublicRoleGranted event on successful claim \"},\"grantCertifier(address)\":{\"notice\":\"---------# GRANTING ROLES ---------//Emits RoleGranted event on successful grant\"},\"hasAdminRole(address)\":{\"notice\":\"--------- # CHECKING ROLES --------- //\"},\"revokeCertifierRole(address)\":{\"notice\":\"------------- # REVOKING ROLES ------------- //Emits RoleRevoked event on successful revoke\"},\"transferRole(bytes32,address,address)\":{\"notice\":\"-------- # Safe Role Transfer ------- //Emits RoleTransferred event on successful transfer\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/RolesManager.sol\":\"RolesManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/core/RolesManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n\\n/**\\n* @author @0xJonaseb11\\n\\n* @dev manages the roles of the whole ecosystem \\n* @dev Only Super Admin can assign roles\\n* @dev On very high roles, there's DAO voting\\n*/\\n\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { Events } from \\\"../utils/Events.sol\\\";\\nimport { Errors } from \\\"../utils/Errors.sol\\\";\\nimport { DataTypes } from \\\"../utils/DataTypes.sol\\\";\\n\\n\\ncontract RolesManager is AccessControl, Errors {\\n\\n    bytes32 public constant CERTIFIER_ROLE = keccak256(\\\"CERTIFYING_BODY_ROLE\\\");\\n    bytes32 public constant INSPECTOR_ROLE = keccak256(\\\"INSPECTION_MANAGER_ROLE\\\");\\n    bytes32 public constant AUDITOR_ROLE = keccak256(\\\"AUDITOR_ROLE\\\");\\n    bytes32 public constant ENTERPRISE_ROLE = keccak256(\\\"ENTERPRISE_ROLE\\\");\\n    bytes32 public constant CERTIFICATE_FACTORY_ROLE = keccak256(\\\"CERTIFICATE_FACTORY_ROLE\\\");\\n    bytes32 public constant PUBLIC_ROLE = keccak256(\\\"PUBLIC_ROLE\\\");\\n\\n    mapping(address => uint256) public publicRoleExpiry;\\n\\n   // ----- modifiers\\n   modifier onlyValidAddress(address account) {\\n    if (account == address(0)) {\\n        revert InvalidAddress();\\n    }\\n    _;\\n   }\\n\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(CERTIFIER_ROLE,  msg.sender);\\n    }\\n\\n\\n    /** ----------- #claim temporary public role -------------- //\\n    * @dev allows users to claim temporary `PUBLIC` role for `durationInHours` hours on their visit to platform\\n    * @param durationInHours The duration in hours the user will have the `PUBLIC` role\\n    * @notice `durationInHours` must be less than 24 hours\\n    * @notice Emits PublicRoleGranted event on successful claim \\n    */\\n    function claimTemporaryPublicRole(uint256 durationInHours) external {\\n        if (hasPublicRole(msg.sender)) {\\n            revert RolesManager__AlreadyHasRole();\\n        }\\n        if (durationInHours > 0) {\\n            revert RolesManager__InvalidDuration();\\n        }\\n         if (durationInHours > 24 /*hours */) {\\n            revert RolesManager__InvalidDuration();\\n         }\\n        uint256 durationInSeconds = durationInHours * 1 hours;\\n    \\n        _grantRole(PUBLIC_ROLE, msg.sender);\\n        publicRoleExpiry[msg.sender] = block.timestamp + durationInSeconds;\\n\\n        emit Events.PublicRoleGranted(msg.sender, durationInHours);\\n    }\\n\\n    // ------- helper for client ---- //\\n    function getMaxPublicRoleDuration() public pure returns (uint256) {\\n        return 24;\\n    }\\n\\n\\n    /** --------- #  Auto-expiry check (Call periodically) ------- //\\n    * @dev helper to check expiry of `PUBLIC` role\\n    * @param account The account to check for role expiry\\n    * @notice Emits PublicRoleExpired event on expiry\\n    */\\n    function checkExpiryRoles(address account) public {\\n        if (hasPublicRole(account) && publicRoleExpiry[account] < block.timestamp) {\\n            _revokeRole(PUBLIC_ROLE, account);\\n\\n            emit Events.PublicRoleExpired(account);\\n        }\\n    }\\n\\n    /** ---------- # Bulk Role Grant(Auto) ------- //\\n    * @dev Bulk grant roles to accounts\\n    * @param roles The array of roles to grant\\n    * @param accounts The array of accounts to grant roles\\n    * emits BulkRolesGranted event on successful grant\\n    */\\n    function bulkGrantRoles(\\n        bytes32[] calldata roles,\\n        address[] calldata accounts\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (roles.length == 0 || accounts.length == 0) {\\n            revert RolesManager__EmptyArray();\\n        }\\n        if (roles.length != accounts.length) {\\n            revert RolesManager__ArrayLengthMismatch();\\n        }\\n        \\n        for (uint256 i = 0; i < roles.length; i++) {\\n            _grantRole(roles[i], accounts[i]);\\n        }\\n\\n        emit Events.BulkRolesGranted(roles, accounts);\\n    }\\n\\n    /** -------- # Safe Role Transfer ------- //\\n    * @dev Transfers a role from one account to another\\n    * @param role The role to transfer\\n    * @param from The account to transfer the role from\\n    * @param to The account to transfer the role to\\n    * @notice Emits RoleTransferred event on successful transfer\\n    */\\n    function transferRole(\\n        bytes32 role,\\n        address from,\\n        address to  \\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasRole(role, from)) {\\n            revert RolesManager__RoleDoesNotExist();\\n        }\\n        _revokeRole(role, from);\\n        _grantRole(role, to);\\n\\n        emit Events.RoleTransferred(role, from, to);\\n    }\\n\\n    // ---- combined role check ----- //\\n    function getActiveRoles(address account) public view returns (\\n        bool isAdmin,\\n        bool isCertifier,\\n        bool isInspector,\\n        bool isAuditor,\\n        bool isEnterprise,\\n        bool isCertificateFactory,\\n        bool isPublic\\n    ) {\\n        return (\\n            hasRole(DEFAULT_ADMIN_ROLE, account),\\n            hasRole(CERTIFIER_ROLE, account),\\n            hasRole(INSPECTOR_ROLE, account),\\n            hasRole(AUDITOR_ROLE, account),\\n            hasRole(ENTERPRISE_ROLE, account),\\n            hasRole(CERTIFICATE_FACTORY_ROLE, account),\\n            hasRole(PUBLIC_ROLE, account)\\n        );\\n    }\\n    \\n\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n    _grantRole(role, account);\\n}\\n\\n\\n    ////////////////////////////////////////////////\\n    /////// MANAUAL ROLES MANAGEMENT  ////////////////\\n    ////////////////////////////////////////////////\\n    \\n\\n    /////////////////////////////////\\n    ////// ROLE GRANTING ////////////\\n    /////////////////////////////////\\n    \\n    /** ---------# GRANTING ROLES ---------//\\n    * @dev Functions to grant roles to!\\n    * @param account The account to grant the role to\\n    * @notice Emits RoleGranted event on successful grant\\n    */\\n    function grantCertifier(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        grantRole(CERTIFIER_ROLE, account);\\n\\n        emit Events.RoleGranted(CERTIFIER_ROLE, account);\\n\\n    }\\n    \\n    function grantInspector(address account ) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        grantRole(INSPECTOR_ROLE, account);\\n        emit Events.RoleGranted(INSPECTOR_ROLE, account);\\n    }\\n\\n    function grantAuditor(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        grantRole(AUDITOR_ROLE, account);\\n        emit Events.RoleGranted(AUDITOR_ROLE, account);\\n    }\\n\\n    function grantEnterprise(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        grantRole(ENTERPRISE_ROLE, account);\\n        emit Events.RoleGranted(ENTERPRISE_ROLE, account);\\n    }\\n     \\n    function grantCertificateFactory(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        grantRole(CERTIFICATE_FACTORY_ROLE, account);\\n        emit Events.RoleGranted(CERTIFICATE_FACTORY_ROLE, account);\\n    }\\n\\n    function grantPublicRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        grantRole(PUBLIC_ROLE, account);\\n        emit Events.RoleGranted(PUBLIC_ROLE, account);\\n    }\\n\\n\\n    /**\\n    * @dev Public role will be claimed instantly\\n    * On the entry of a user to our platform\\n    * Just clicking `claim public role` and user is assigned role\\n    * @notice I plan to make it a temporary role on every visit to our platform\\n    */\\n\\n    /////////////////////////////////\\n    // ROLE REVOKATION /////////////\\n    ////////////////////////////////\\n    \\n\\n    /** ------------- # REVOKING ROLES ------------- //\\n    * @dev Functions to revoke roles\\n    * @param account The account to revoke the role from\\n    * @notice Emits RoleRevoked event on successful revoke\\n    */\\n    function revokeCertifierRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        revokeRole(CERTIFIER_ROLE, account);\\n        emit Events.RoleRevoked(CERTIFIER_ROLE, account);\\n    }\\n\\n    function revokeInspectorRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        revokeRole(INSPECTOR_ROLE, account);\\n    }\\n\\n    function revokeAuditorRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n    revokeRole(AUDITOR_ROLE, account);\\n    emit Events.RoleRevoked(AUDITOR_ROLE, account);\\n    }\\n\\n    function revokeEnterpriseRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        revokeRole(ENTERPRISE_ROLE, account);\\n        emit Events.RoleRevoked(ENTERPRISE_ROLE, account);\\n    }\\n\\n    function revokeCertificateFactoryRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        revokeRole(CERTIFICATE_FACTORY_ROLE, account);\\n        emit Events.RoleRevoked(CERTIFICATE_FACTORY_ROLE, account);\\n    }\\n    \\n    function revokePublicRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        revokeRole(PUBLIC_ROLE, account);\\n        emit Events.RoleRevoked(PUBLIC_ROLE, account);\\n    }\\n\\n\\n    /////////////////////////////////////////////////\\n    //////// ROLE CHECKS //////////////////\\n    /////////////////////////////////////////////////\\n    \\n   /** --------- # CHECKING ROLES --------- //\\n   * @dev Functions to check if a certain account has the specified role\\n   * @param account The account to check \\n   */\\n    function hasAdminRole(address account) public view returns(bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    function hasCertifierRole(address account) public view returns(bool) { \\n        return hasRole(CERTIFIER_ROLE, account);\\n    }\\n\\n    function hasInspectorRole(address account) public view  returns(bool) {\\n        return hasRole(INSPECTOR_ROLE, account);\\n    }\\n\\n    function hasAuditorRole(address account) public view  returns(bool) {\\n        return hasRole(AUDITOR_ROLE, account);\\n    }\\n\\n    function hasEnterpriseRole(address account) public view  returns(bool) {\\n        return hasRole(ENTERPRISE_ROLE, account);\\n    }\\n\\n    function hasCertificateFactoryRole(address account) public view  returns(bool) {\\n        return hasRole(CERTIFICATE_FACTORY_ROLE, account);\\n    }\\n    \\n    function hasPublicRole(address account) public view  returns(bool) {\\n        return hasRole(PUBLIC_ROLE, account);\\n    }\\n}\",\"keccak256\":\"0xa05e7e551d2a2566e2248a6044cf96d7913b4382bedc4c1920f8149c90b5e1ca\",\"license\":\"MIT\"},\"contracts/utils/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n* @author @0xJonaseb11\\n* @dev This library contains the data types used by the contracts\\n* @dev These structs hold a huge role in maintaining contract states\\n*/\\nlibrary DataTypes {\\n    struct Certification {\\n        string industry;\\n        string metadataURI;\\n        uint256 certifiedAt;\\n        uint256 expiryDate;\\n        bool isCertified;\\n        uint256 tokenId;\\n    }\\n\\n    struct Enterprise {\\n        address enterpriseAddress;\\n        string name;\\n        string industry;\\n        string metadataURI;\\n        bool isRegistered;\\n        uint256 registrationDate;\\n        uint256 lastUpdated;\\n        uint256 certificateId;\\n    }\\n\\n    struct InspectionReport {\\n        address inspector;\\n        address enterprise;\\n        string remarks;\\n        string evidenceURI; // IPFS hash\\n        uint256 inspectedAt;\\n        bool passed;\\n        bool flagged;\\n    }\\n\\n    struct FlaggedInspection {\\n        address enterprise;\\n        uint256 reportIndex;\\n        InspectionReport report;\\n        address flaggedBy;\\n        string reason;\\n        uint256 flaggedAt;\\n    }\\n\\n    struct NFTCertificate {\\n    address enterprise;\\n    address issuer;\\n    uint256 issuedAt;\\n    uint256 expiresAt;\\n    bool isRevoked;\\n    }\\n\\n    struct AuditCase {\\n        uint256 id;\\n        address targetEnterprise;\\n        uint256 inspectionId;\\n        address auditor;\\n        string reason;\\n        string evidenceURI;\\n        uint256 depositAmount;\\n        AuditStatus status;\\n        uint256 createdAt;\\n        uint256 resolvedAt;\\n    }\\n\\n    enum AuditStatus {\\n        Pending,\\n        Upheld,\\n        Rejected,\\n        Appealed\\n    }\\n}\",\"keccak256\":\"0xdd54b6675ea527069420c989adb49b0cd9a67ba27876feee92e0ee8a5d99fa3e\",\"license\":\"MIT\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n* @author @0xJonaseb11\\n* @dev contains the custom errors emitted by the contracts\\n@notice All the contracts inherit this to handle custom errors\\n*/\\n\\ncontract Errors {\\n    error InvalidAddress();\\n\\n    // -------- RolesManager ------------------//\\n    error RolesManager__UnauthorizedToPerformAction();\\n    error RolesManager__NotAuthorizedCertifier();\\n    error RolesManager__NotAuthorizedInspector();\\n    error RolesManager__NotAuthorizedAuditor();\\n    error RolesManager__NotAuthorizedEnterprise();\\n    error RolesManager__NotAuthorizedCertificateFactory();\\n    error RolesManager__NotAuthorizedPublicUser();\\n    error RolesManager__AlreadyHasRole();\\n    error RolesManager__InvalidDuration();\\n    error RolesManager__EmptyArray();\\n    error RolesManager__ArrayLengthMismatch();\\n    error RolesManager__RoleDoesNotExist();\\n\\n    // ------- EnterpriseRegistry --------------//\\n    error EnterpriseRegistry__EnterpriseAlreadyExists();\\n    error EnterpriseRegistry__EnterpriseDoesNotExist();\\n    error EnterpriseRegistry__InvalidStart();\\n\\n    // ------- CertificationAuthority ------- //\\n    error CertificationAuthority__EnterpriseAlreadyCertified();\\n    error CertificationAuthority__EnterpriseNotCertifiedYet();\\n    error CertificationAuthority__CertificationNotExpiredYet();\\n\\n    // -------- CertificateNFT --------- //\\n    error CertificateNFT__EnterpriseAlreadyCertified();\\n    error CertificateNFT__CertificateDoesNotExist();\\n\\n    // -------- InspectionManageer --------- //\\n    error InspectionManager__InspectorAlreadyAssigned();\\n    error InspectionManager__InspectionPeriodExpired();\\n    error InspectionManager__NotAssignedToEnterprise();\\n    error InspectionManager__InvalidReportIndex();\\n    error InspectionManager__ReportAlreadyFlagged();\\n    error InspectionManager__NoReportsAssociatedWithEnterprise();\\n\\n\\n    // ---------- InspectionReport ----------- //\\n\\n    error AuditorOversight__NotAuthorizedEnterpriseOwner();\\n    error AuditorOversight__AppealWindowClosed();\\n    error AuditorOversight__CaseNotPending();\\n\\n}\",\"keccak256\":\"0xe1870fe63ce3362913db4f28a24dd1ae1cb1044dbd327874658b71e0177f9241\",\"license\":\"MIT\"},\"contracts/utils/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n/**\\n* @author @0xJonaseb11\\n* @dev This library contains the events emitted by the contracts\\n* @dev All the contracts inherit this to handle events\\n*/\\n\\nlibrary Events {\\n    event CertificationGranted(address indexed enterprise, string industry, string metadataURI, uint256 expiryDate);\\n    event CertificationRevoked(address indexed enterprise);\\n    event CertificationUpdated(address indexed enterprise, string newMetadataURI);\\n\\n    event EnterpriseRegistered(address indexed enterprise, string name, string industry, string metadataURI, uint256 certificateId);\\n    event EnterpriseUpdated(address indexed enterprise, string newMetadataURI);\\n    event EnterpriseDeregistered(address indexed enterprise, uint256 deregisteredAt);\\n    \\n    event InspectorAssigned(address indexed enterprise, address indexed inspector, uint256 validityPeriod);\\n    event InspectionReportSubmitted(address indexed inspector, address indexed enterprise, bool passed, string remarks, string evidenceURI, uint256 ReportedAt);\\n    event InspectionReportFlagged(address indexed enterprise, uint256 indexed reportIndex, address flaggedBy, string reason, uint256 timestamp);\\n    \\n    event CertificateMinted(uint256 certificateId, address indexed enterprise, address indexed certifier, uint256 mintedAt);\\n    event CertificateRevoked(uint256 certificateId, address indexed revoker, uint256 timestamp);\\n\\n\\n    event PublicRoleGranted(address indexed user, uint256 duration);\\n    event PublicRoleExpired(address indexed user);\\n    event RoleTransferred(bytes32 indexed role, address from, address to);\\n    event BulkRolesGranted(bytes32[] roles, address[] indexed accounts);\\n    event RoleGranted(bytes32 indexed role, address indexed account);\\n    event RoleRevoked(bytes32 indexed role, address indexed account);\\n\\n    event AuditInitiated(uint256 indexed caseId, address indexed enterprise, uint256 inspectionId, address auditor, string reason, string evidenceURI);\\n    event AuditResolved(uint256 indexed caseId, address indexed enterprise, address resolvedBy, bool upheld, string remarks);\\n    event AppealFiled(uint256 indexed caseid, address indexed enterprise, string counterEvidenceURI, uint256 timestamp);\\n\\n}    \",\"keccak256\":\"0x16284b3e5d51e25be566f386cec7ad356796324565c6403c4de723411b734122\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":26,"contract":"contracts/core/RolesManager.sol:RolesManager","label":"_roles","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_struct(RoleData)21_storage)"},{"astId":3880,"contract":"contracts/core/RolesManager.sol:RolesManager","label":"publicRoleExpiry","offset":0,"slot":"1","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_struct(RoleData)21_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)21_storage"},"t_struct(RoleData)21_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":18,"contract":"contracts/core/RolesManager.sol:RolesManager","label":"hasRole","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":20,"contract":"contracts/core/RolesManager.sol:RolesManager","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{"bulkGrantRoles(bytes32[],address[])":{"notice":"---------- # Bulk Role Grant(Auto) ------- //"},"checkExpiryRoles(address)":{"notice":"--------- #  Auto-expiry check (Call periodically) ------- //Emits PublicRoleExpired event on expiry"},"claimTemporaryPublicRole(uint256)":{"notice":"----------- #claim temporary public role -------------- //`durationInHours` must be less than 24 hoursEmits PublicRoleGranted event on successful claim "},"grantCertifier(address)":{"notice":"---------# GRANTING ROLES ---------//Emits RoleGranted event on successful grant"},"hasAdminRole(address)":{"notice":"--------- # CHECKING ROLES --------- //"},"revokeCertifierRole(address)":{"notice":"------------- # REVOKING ROLES ------------- //Emits RoleRevoked event on successful revoke"},"transferRole(bytes32,address,address)":{"notice":"-------- # Safe Role Transfer ------- //Emits RoleTransferred event on successful transfer"}},"version":1}}},"contracts/modules/InspectionManager.sol":{"InspectionManager":{"abi":[{"inputs":[{"internalType":"address","name":"_rolesManager","type":"address"},{"internalType":"address","name":"_certAuthority","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"inputs":[],"name":"AuditorOversight__AppealWindowClosed","type":"error"},{"inputs":[],"name":"AuditorOversight__CaseNotPending","type":"error"},{"inputs":[],"name":"AuditorOversight__NotAuthorizedEnterpriseOwner","type":"error"},{"inputs":[],"name":"CertificateNFT__CertificateDoesNotExist","type":"error"},{"inputs":[],"name":"CertificateNFT__EnterpriseAlreadyCertified","type":"error"},{"inputs":[],"name":"CertificationAuthority__CertificationNotExpiredYet","type":"error"},{"inputs":[],"name":"CertificationAuthority__EnterpriseAlreadyCertified","type":"error"},{"inputs":[],"name":"CertificationAuthority__EnterpriseNotCertifiedYet","type":"error"},{"inputs":[],"name":"EnterpriseRegistry__EnterpriseAlreadyExists","type":"error"},{"inputs":[],"name":"EnterpriseRegistry__EnterpriseDoesNotExist","type":"error"},{"inputs":[],"name":"EnterpriseRegistry__InvalidStart","type":"error"},{"inputs":[],"name":"InspectionManager__InspectionPeriodExpired","type":"error"},{"inputs":[],"name":"InspectionManager__InspectorAlreadyAssigned","type":"error"},{"inputs":[],"name":"InspectionManager__InvalidReportIndex","type":"error"},{"inputs":[],"name":"InspectionManager__NoReportsAssociatedWithEnterprise","type":"error"},{"inputs":[],"name":"InspectionManager__NotAssignedToEnterprise","type":"error"},{"inputs":[],"name":"InspectionManager__ReportAlreadyFlagged","type":"error"},{"inputs":[],"name":"InvalidAddress","type":"error"},{"inputs":[],"name":"RolesManager__AlreadyHasRole","type":"error"},{"inputs":[],"name":"RolesManager__ArrayLengthMismatch","type":"error"},{"inputs":[],"name":"RolesManager__EmptyArray","type":"error"},{"inputs":[],"name":"RolesManager__InvalidDuration","type":"error"},{"inputs":[],"name":"RolesManager__NotAuthorizedAuditor","type":"error"},{"inputs":[],"name":"RolesManager__NotAuthorizedCertificateFactory","type":"error"},{"inputs":[],"name":"RolesManager__NotAuthorizedCertifier","type":"error"},{"inputs":[],"name":"RolesManager__NotAuthorizedEnterprise","type":"error"},{"inputs":[],"name":"RolesManager__NotAuthorizedInspector","type":"error"},{"inputs":[],"name":"RolesManager__NotAuthorizedPublicUser","type":"error"},{"inputs":[],"name":"RolesManager__RoleDoesNotExist","type":"error"},{"inputs":[],"name":"RolesManager__UnauthorizedToPerformAction","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32[]","name":"roles","type":"bytes32[]"},{"indexed":true,"internalType":"address[]","name":"accounts","type":"address[]"}],"name":"BulkRolesGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"enterprise","type":"address"},{"indexed":true,"internalType":"uint256","name":"reportIndex","type":"uint256"},{"indexed":false,"internalType":"address","name":"flaggedBy","type":"address"},{"indexed":false,"internalType":"string","name":"reason","type":"string"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"InspectionReportFlagged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"inspector","type":"address"},{"indexed":true,"internalType":"address","name":"enterprise","type":"address"},{"indexed":false,"internalType":"bool","name":"passed","type":"bool"},{"indexed":false,"internalType":"string","name":"remarks","type":"string"},{"indexed":false,"internalType":"string","name":"evidenceURI","type":"string"},{"indexed":false,"internalType":"uint256","name":"ReportedAt","type":"uint256"}],"name":"InspectionReportSubmitted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"enterprise","type":"address"},{"indexed":true,"internalType":"address","name":"inspector","type":"address"},{"indexed":false,"internalType":"uint256","name":"validityPeriod","type":"uint256"}],"name":"InspectorAssigned","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"}],"name":"PublicRoleExpired","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"duration","type":"uint256"}],"name":"PublicRoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"address","name":"to","type":"address"}],"name":"RoleTransferred","type":"event"},{"inputs":[],"name":"AUDITOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CERTIFICATE_FACTORY_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CERTIFIER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ENTERPRISE_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"INSPECTOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PUBLIC_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"enterprise","type":"address"},{"internalType":"address","name":"inspector","type":"address"},{"internalType":"uint256","name":"validityPeriod","type":"uint256"}],"name":"assignInspector","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"roles","type":"bytes32[]"},{"internalType":"address[]","name":"accounts","type":"address[]"}],"name":"bulkGrantRoles","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"certAuthority","outputs":[{"internalType":"contract CertificationAuthority","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"checkExpiryRoles","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"durationInHours","type":"uint256"}],"name":"claimTemporaryPublicRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"enterprise","type":"address"},{"internalType":"uint256","name":"reportIndex","type":"uint256"},{"internalType":"string","name":"reason","type":"string"}],"name":"flagInspection","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"getActiveRoles","outputs":[{"internalType":"bool","name":"isAdmin","type":"bool"},{"internalType":"bool","name":"isCertifier","type":"bool"},{"internalType":"bool","name":"isInspector","type":"bool"},{"internalType":"bool","name":"isAuditor","type":"bool"},{"internalType":"bool","name":"isEnterprise","type":"bool"},{"internalType":"bool","name":"isCertificateFactory","type":"bool"},{"internalType":"bool","name":"isPublic","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"enterprise","type":"address"}],"name":"getEnterpriseFlaggedReports","outputs":[{"components":[{"internalType":"address","name":"enterprise","type":"address"},{"internalType":"uint256","name":"reportIndex","type":"uint256"},{"components":[{"internalType":"address","name":"inspector","type":"address"},{"internalType":"address","name":"enterprise","type":"address"},{"internalType":"string","name":"remarks","type":"string"},{"internalType":"string","name":"evidenceURI","type":"string"},{"internalType":"uint256","name":"inspectedAt","type":"uint256"},{"internalType":"bool","name":"passed","type":"bool"},{"internalType":"bool","name":"flagged","type":"bool"}],"internalType":"struct DataTypes.InspectionReport","name":"report","type":"tuple"},{"internalType":"address","name":"flaggedBy","type":"address"},{"internalType":"string","name":"reason","type":"string"},{"internalType":"uint256","name":"flaggedAt","type":"uint256"}],"internalType":"struct DataTypes.FlaggedInspection[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"enterprise","type":"address"}],"name":"getEnterpriseInspectionReports","outputs":[{"components":[{"internalType":"address","name":"inspector","type":"address"},{"internalType":"address","name":"enterprise","type":"address"},{"internalType":"string","name":"remarks","type":"string"},{"internalType":"string","name":"evidenceURI","type":"string"},{"internalType":"uint256","name":"inspectedAt","type":"uint256"},{"internalType":"bool","name":"passed","type":"bool"},{"internalType":"bool","name":"flagged","type":"bool"}],"internalType":"struct DataTypes.InspectionReport[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"enterprise","type":"address"}],"name":"getEnterpriseInspectors","outputs":[{"internalType":"address[]","name":"","type":"address[]"},{"internalType":"uint256[]","name":"validityPeriods","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"limit","type":"uint256"},{"internalType":"uint256","name":"offset","type":"uint256"}],"name":"getFlaggedInspections","outputs":[{"components":[{"internalType":"address","name":"enterprise","type":"address"},{"internalType":"uint256","name":"reportIndex","type":"uint256"},{"components":[{"internalType":"address","name":"inspector","type":"address"},{"internalType":"address","name":"enterprise","type":"address"},{"internalType":"string","name":"remarks","type":"string"},{"internalType":"string","name":"evidenceURI","type":"string"},{"internalType":"uint256","name":"inspectedAt","type":"uint256"},{"internalType":"bool","name":"passed","type":"bool"},{"internalType":"bool","name":"flagged","type":"bool"}],"internalType":"struct DataTypes.InspectionReport","name":"report","type":"tuple"},{"internalType":"address","name":"flaggedBy","type":"address"},{"internalType":"string","name":"reason","type":"string"},{"internalType":"uint256","name":"flaggedAt","type":"uint256"}],"internalType":"struct DataTypes.FlaggedInspection[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"inspector","type":"address"}],"name":"getInspectorReports","outputs":[{"components":[{"internalType":"address","name":"inspector","type":"address"},{"internalType":"address","name":"enterprise","type":"address"},{"internalType":"string","name":"remarks","type":"string"},{"internalType":"string","name":"evidenceURI","type":"string"},{"internalType":"uint256","name":"inspectedAt","type":"uint256"},{"internalType":"bool","name":"passed","type":"bool"},{"internalType":"bool","name":"flagged","type":"bool"}],"internalType":"struct DataTypes.InspectionReport[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMaxPublicRoleDuration","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"grantAuditor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"grantCertificateFactory","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"grantCertifier","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"grantEnterprise","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"grantInspector","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"grantPublicRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"hasAdminRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"hasAuditorRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"hasCertificateFactoryRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"hasCertifierRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"hasEnterpriseRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"hasInspectorRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"hasPublicRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"publicRoleExpiry","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"revokeAuditorRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"revokeCertificateFactoryRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"revokeCertifierRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"revokeEnterpriseRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"revokeInspectorRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"revokePublicRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rolesManager","outputs":[{"internalType":"contract RolesManager","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_enterprise","type":"address"},{"internalType":"bool","name":"_passed","type":"bool"},{"internalType":"string","name":"_remarks","type":"string"},{"internalType":"string","name":"_evidenceURI","type":"string"}],"name":"submitInspectionReport","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"}],"name":"transferRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}]},"events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"bulkGrantRoles(bytes32[],address[])":{"details":"Bulk grant roles to accounts","params":{"accounts":"The array of accounts to grant roles emits BulkRolesGranted event on successful grant","roles":"The array of roles to grant"}},"checkExpiryRoles(address)":{"details":"helper to check expiry of `PUBLIC` role","params":{"account":"The account to check for role expiry"}},"claimTemporaryPublicRole(uint256)":{"details":"allows users to claim temporary `PUBLIC` role for `durationInHours` hours on their visit to platform","params":{"durationInHours":"The duration in hours the user will have the `PUBLIC` role"}},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantCertifier(address)":{"details":"Functions to grant roles to!","params":{"account":"The account to grant the role to"}},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasAdminRole(address)":{"details":"Functions to check if a certain account has the specified role","params":{"account":"The account to check "}},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."},"revokeCertifierRole(address)":{"details":"Functions to revoke roles","params":{"account":"The account to revoke the role from"}},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"transferRole(bytes32,address,address)":{"details":"Transfers a role from one account to another","params":{"from":"The account to transfer the role from","role":"The role to transfer","to":"The account to transfer the role to"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_3913":{"entryPoint":null,"id":3913,"parameterSlots":0,"returnSlots":0},"@_4633":{"entryPoint":null,"id":4633,"parameterSlots":2,"returnSlots":0},"@_grantRole_256":{"entryPoint":150,"id":256,"parameterSlots":2,"returnSlots":1},"@_msgSender_1886":{"entryPoint":null,"id":1886,"parameterSlots":0,"returnSlots":1},"@_setupRole_4185":{"entryPoint":133,"id":4185,"parameterSlots":2,"returnSlots":0},"@hasRole_80":{"entryPoint":null,"id":80,"parameterSlots":2,"returnSlots":1},"abi_decode_address_fromMemory":{"entryPoint":325,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_addresst_address_fromMemory":{"entryPoint":354,"id":null,"parameterSlots":2,"returnSlots":2}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:491:25","statements":[{"nodeType":"YulBlock","src":"6:3:25","statements":[]},{"body":{"nodeType":"YulBlock","src":"74:117:25","statements":[{"nodeType":"YulAssignment","src":"84:22:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"99:6:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"93:5:25"},"nodeType":"YulFunctionCall","src":"93:13:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"84:5:25"}]},{"body":{"nodeType":"YulBlock","src":"169:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"178:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"181:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"171:6:25"},"nodeType":"YulFunctionCall","src":"171:12:25"},"nodeType":"YulExpressionStatement","src":"171:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"128:5:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"139:5:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"154:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"150:3:25"},"nodeType":"YulFunctionCall","src":"150:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"163:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"146:3:25"},"nodeType":"YulFunctionCall","src":"146:19:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"135:3:25"},"nodeType":"YulFunctionCall","src":"135:31:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"125:2:25"},"nodeType":"YulFunctionCall","src":"125:42:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"118:6:25"},"nodeType":"YulFunctionCall","src":"118:50:25"},"nodeType":"YulIf","src":"115:70:25"}]},"name":"abi_decode_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"53:6:25","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"64:5:25","type":""}],"src":"14:177:25"},{"body":{"nodeType":"YulBlock","src":"294:195:25","statements":[{"body":{"nodeType":"YulBlock","src":"340:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"349:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"352:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"342:6:25"},"nodeType":"YulFunctionCall","src":"342:12:25"},"nodeType":"YulExpressionStatement","src":"342:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"315:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"324:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"311:3:25"},"nodeType":"YulFunctionCall","src":"311:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"336:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"307:3:25"},"nodeType":"YulFunctionCall","src":"307:32:25"},"nodeType":"YulIf","src":"304:52:25"},{"nodeType":"YulAssignment","src":"365:50:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"405:9:25"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"375:29:25"},"nodeType":"YulFunctionCall","src":"375:40:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"365:6:25"}]},{"nodeType":"YulAssignment","src":"424:59:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"468:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"479:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"464:3:25"},"nodeType":"YulFunctionCall","src":"464:18:25"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"434:29:25"},"nodeType":"YulFunctionCall","src":"434:49:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"424:6:25"}]}]},"name":"abi_decode_tuple_t_addresst_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"252:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"263:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"275:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"283:6:25","type":""}],"src":"196:293:25"}]},"contents":"{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := abi_decode_address_fromMemory(add(headStart, 32))\n    }\n}","id":25,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60c06040523480156200001157600080fd5b506040516200391038038062003910833981016040819052620000349162000162565b6200004160003362000085565b6200006d7fc41a06b26ced3a23b7bf835a0918ade784f4055ded86d18305f528f47a7260523362000085565b6001600160a01b039182166080521660a0526200019a565b62000091828262000096565b505050565b6000828152602081815260408083206001600160a01b038516845290915281205460ff166200013b576000838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055620000f23390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016200013f565b5060005b92915050565b80516001600160a01b03811681146200015d57600080fd5b919050565b600080604083850312156200017657600080fd5b620001818362000145565b9150620001916020840162000145565b90509250929050565b60805160a051613742620001ce600039600081816105460152818161229b015261239c015260006105c001526137426000f3fe608060405234801561001057600080fd5b50600436106102bb5760003560e01c8063784fee0e11610182578063b0614db3116100e9578063c395fcb3116100a2578063e3a3c5221161007c578063e3a3c522146106f5578063e55b4f931461070a578063f53f5e1e1461071d578063fc8102861461073057600080fd5b8063c395fcb3146106bc578063cc5ed5ea146106cf578063d547741f146106e257600080fd5b8063b0614db314610608578063b1ba38831461065c578063b1ea540e1461066f578063b5617ef714610682578063b8ad415e146106a2578063bd7ca7ba146106a957600080fd5b80639a98163b1161013b5780639a98163b14610580578063a1f34163146105a0578063a217fddf146105b3578063a3574c5b146105bb578063aa52617c146105e2578063abaa536f146105f557600080fd5b8063784fee0e146104e05780637bff0975146104f55780637e5effa4146105085780638850845f1461051b57806391d148541461052e57806399eb08d61461054157600080fd5b8063456f19fc1161022657806361462f0e116101df57806361462f0e1461046857806368b688c11461047b57806368dd17a51461048e57806369d0b517146104a35780636e1d616e146104b85780637780e9c1146104cd57600080fd5b8063456f19fc146103e95780634e4ddb92146103fc57806352f84b721461041c57806357c033711461042f5780635cb87d2614610442578063603765281461045557600080fd5b8063261191b711610278578063261191b7146103755780632f2ff15d1461038857806336568abe1461039b5780633ca7c02a146103ae5780633e251518146103c35780634308ac98146103d657600080fd5b806301ffc9a7146102c05780630443cd2a146102e857806308d0aef7146102fd5780631e223b2a1461031e578063248a9ca31461033157806325d5e87e14610362575b600080fd5b6102d36102ce366004612d63565b610743565b60405190151581526020015b60405180910390f35b6102fb6102f6366004612db0565b61077a565b005b61031061030b366004612db0565b6107fc565b6040516102df929190612dcb565b6102fb61032c366004612db0565b610958565b61035461033f366004612e4f565b60009081526020819052604090206001015490565b6040519081526020016102df565b6102fb610370366004612db0565b6109da565b6102fb610383366004612db0565b610a5c565b6102fb610396366004612e68565b610ade565b6102fb6103a9366004612e68565b610b09565b61035460008051602061364d83398151915281565b6102fb6103d1366004612db0565b610b41565b6102fb6103e4366004612edd565b610bc3565b6102fb6103f7366004612db0565b6110b3565b61040f61040a366004612f37565b611135565b6040516102df919061301c565b6102d361042a366004612db0565b61147b565b6102fb61043d366004612db0565b611495565b6102fb6104503660046130df565b611517565b6102fb610463366004612db0565b6115aa565b6102fb610476366004613160565b61162c565b61040f610489366004612db0565b61173f565b61035460008051602061360d83398151915281565b61035460008051602061366d83398151915281565b6103546000805160206136ad83398151915281565b6102fb6104db366004612e4f565b611ad0565b61035460008051602061368d83398151915281565b6102d3610503366004612db0565b611bbd565b6102fb610516366004612db0565b611bd7565b6102d3610529366004612db0565b611c59565b6102d361053c366004612e68565b611c6f565b6105687f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102df565b61059361058e366004612db0565b611c98565b6040516102df91906131c0565b6102d36105ae366004612db0565b611eb8565b610354600081565b6105687f000000000000000000000000000000000000000000000000000000000000000081565b6102fb6105f0366004612db0565b611ed2565b6102d3610603366004612db0565b611f54565b61061b610616366004612db0565b611f6e565b60408051971515885295151560208801529315159486019490945290151560608501521515608084015290151560a0830152151560c082015260e0016102df565b6102fb61066a366004613230565b612027565b6102fb61067d3660046132c3565b612357565b610354610690366004612db0565b60016020526000908152604090205481565b6018610354565b6102fb6106b7366004612db0565b612518565b6102d36106ca366004612db0565b612563565b6105936106dd366004612db0565b61256f565b6102fb6106f0366004612e68565b6129af565b6103546000805160206136cd83398151915281565b6102fb610718366004612db0565b6129d4565b6102d361072b366004612db0565b612a56565b6102fb61073e366004612db0565b612a70565b60006001600160e01b03198216637965db0b60e01b148061077457506301ffc9a760e01b6001600160e01b03198316145b92915050565b806001600160a01b0381166107a25760405163e6c4247b60e01b815260040160405180910390fd5b60006107ad81612af2565b6107c560008051602061364d833981519152846129af565b6040516001600160a01b0384169060008051602061364d833981519152906000805160206136ed83398151915290600090a3505050565b6001600160a01b038116600090815260026020908152604080832080548251818502810185019093528083526060948594909392919083018282801561086b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161084d575b505050505090506000815167ffffffffffffffff81111561088e5761088e6132ff565b6040519080825280602002602001820160405280156108b7578160200160208202803683370190505b50905060005b825181101561094d576001600160a01b038616600090815260056020526040812084519091908590849081106108f5576108f5613315565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205482828151811061093057610930613315565b60209081029190910101528061094581613341565b9150506108bd565b509094909350915050565b806001600160a01b0381166109805760405163e6c4247b60e01b815260040160405180910390fd5b600061098b81612af2565b6109a360008051602061360d83398151915284610ade565b6040516001600160a01b0384169060008051602061360d8339815191529060008051602061362d83398151915290600090a3505050565b6109e381612a56565b8015610a0657506001600160a01b03811660009081526001602052604090205442115b15610a5957610a2360008051602061364d83398151915282612afc565b506040516001600160a01b038216907fa6f32bcbc7de829d50e1c9cbc1c5b4dafb4c7a0b8329757aee62a9b394d71c3b90600090a25b50565b806001600160a01b038116610a845760405163e6c4247b60e01b815260040160405180910390fd5b6000610a8f81612af2565b610aa760008051602061368d833981519152846129af565b6040516001600160a01b0384169060008051602061368d833981519152906000805160206136ed83398151915290600090a3505050565b600082815260208190526040902060010154610af981612af2565b610b038383612b6f565b50505050565b6001600160a01b0381163314610b325760405163334bd91960e11b815260040160405180910390fd5b610b3c8282612afc565b505050565b806001600160a01b038116610b695760405163e6c4247b60e01b815260040160405180910390fd5b6000610b7481612af2565b610b8c6000805160206136ad833981519152846129af565b6040516001600160a01b038416906000805160206136ad833981519152906000805160206136ed83398151915290600090a3505050565b6000805160206136ad833981519152610bdb81612af2565b6001600160a01b038516600090815260046020526040902054841115610c14576040516315c25ffd60e01b815260040160405180910390fd5b6001600160a01b0385166000908152600460205260409020805485908110610c3e57610c3e613315565b906000526020600020906006020160050160019054906101000a900460ff1615610c7b5760405163c2d1c49160e01b815260040160405180910390fd5b6001600160a01b038516600090815260046020526040902080546001919086908110610ca957610ca9613315565b906000526020600020906006020160050160016101000a81548160ff02191690831515021790555060006040518060c00160405280876001600160a01b0316815260200186815260200160046000896001600160a01b03166001600160a01b031681526020019081526020016000208781548110610d2957610d29613315565b60009182526020918290206040805160e081018252600690930290910180546001600160a01b0390811684526001820154169383019390935260028301805492939291840191610d789061335a565b80601f0160208091040260200160405190810160405280929190818152602001828054610da49061335a565b8015610df15780601f10610dc657610100808354040283529160200191610df1565b820191906000526020600020905b815481529060010190602001808311610dd457829003601f168201915b50505050508152602001600382018054610e0a9061335a565b80601f0160208091040260200160405190810160405280929190818152602001828054610e369061335a565b8015610e835780601f10610e5857610100808354040283529160200191610e83565b820191906000526020600020905b815481529060010190602001808311610e6657829003601f168201915b5050509183525050600482015460208083019190915260059092015460ff808216151560408085019190915261010090920416151560609092019190915291835233838201528151601f880182900482028101820183528781529290910191908790879081908401838280828437600092018290525093855250504260209384015250600854815260068252604090819020835181546001600160a01b03199081166001600160a01b0392831617835585850151600184015585840151805160028501805484169185169190911781559581015160038501805490931693169290921790559182015193945084939092906004840190610f8390826133e2565b5060608201516003820190610f9890826133e2565b50608082810151600483015560a08301516005909201805460c09094015161ffff1990941692151561ff001916929092176101009315159390930292909217905560608301516008830180546001600160a01b0319166001600160a01b03909216919091179055820151600982019061101190826133e2565b5060a09190910151600a909101556001600160a01b038616600090815260076020908152604082206008805482546001810184559285529284209091019190915580549161105e83613341565b919050555084866001600160a01b03167f7b1f7b3dacb5afdc95a1242e036c2e87a67f32d97cb111111215f3305223b666338787426040516110a394939291906134cb565b60405180910390a3505050505050565b806001600160a01b0381166110db5760405163e6c4247b60e01b815260040160405180910390fd5b60006110e681612af2565b6110fe6000805160206136cd83398151915284610ade565b6040516001600160a01b038416906000805160206136cd8339815191529060008051602061362d83398151915290600090a3505050565b60606000826008546111479190613501565b84116111535783611161565b826008546111619190613501565b905060008167ffffffffffffffff81111561117e5761117e6132ff565b6040519080825280602002602001820160405280156111b757816020015b6111a4612ccd565b81526020019060019003908161119c5790505b50905060005b8281101561147257600660006111d38388613514565b81526020808201929092526040908101600020815160c08101835281546001600160a01b039081168252600183015482860152835160e0810185526002840180548316825260038501549092169581019590955260048301805492959394868101949390840191906112449061335a565b80601f01602080910402602001604051908101604052809291908181526020018280546112709061335a565b80156112bd5780601f10611292576101008083540402835291602001916112bd565b820191906000526020600020905b8154815290600101906020018083116112a057829003601f168201915b505050505081526020016003820180546112d69061335a565b80601f01602080910402602001604051908101604052809291908181526020018280546113029061335a565b801561134f5780601f106113245761010080835404028352916020019161134f565b820191906000526020600020905b81548152906001019060200180831161133257829003601f168201915b5050509183525050600482015460208083019190915260059092015460ff808216151560408085019190915261010090920416151560609092019190915291835260088401546001600160a01b03169083015260098301805492909101916113b69061335a565b80601f01602080910402602001604051908101604052809291908181526020018280546113e29061335a565b801561142f5780601f106114045761010080835404028352916020019161142f565b820191906000526020600020905b81548152906001019060200180831161141257829003601f168201915b50505050508152602001600a8201548152505082828151811061145457611454613315565b6020026020010181905250808061146a90613341565b9150506111bd565b50949350505050565b600061077460008051602061368d83398151915283611c6f565b806001600160a01b0381166114bd5760405163e6c4247b60e01b815260040160405180910390fd5b60006114c881612af2565b6114e060008051602061364d83398151915284610ade565b6040516001600160a01b0384169060008051602061364d8339815191529060008051602061362d83398151915290600090a3505050565b600061152281612af2565b61152c8484611c6f565b611549576040516366783c9d60e11b815260040160405180910390fd5b6115538484612afc565b5061155e8483612b6f565b50604080516001600160a01b0380861682528416602082015285917f274dd4127a55dcb6f6c12ed38fec5007d965d2afffa8b0bc75c3dc8f3f6b2224910160405180910390a250505050565b806001600160a01b0381166115d25760405163e6c4247b60e01b815260040160405180910390fd5b60006115dd81612af2565b6115f560008051602061366d83398151915284610ade565b6040516001600160a01b0384169060008051602061366d8339815191529060008051602061362d83398151915290600090a3505050565b600061163781612af2565b831580611642575081155b1561166057604051637d6eaf9360e01b815260040160405180910390fd5b838214611680576040516390a2f79360e01b815260040160405180910390fd5b60005b848110156116e6576116d38686838181106116a0576116a0613315565b905060200201358585848181106116b9576116b9613315565b90506020020160208101906116ce9190612db0565b612b6f565b50806116de81613341565b915050611683565b5082826040516116f7929190613527565b60405180910390207ff4d52c90739c68c4e82d39cfbeee6b6613784bf9b28d2cdb3a02203799cf0606868660405161173092919061355c565b60405180910390a25050505050565b6001600160a01b038116600090815260076020908152604080832080548251818502810185019093528083526060949383018282801561179e57602002820191906000526020600020905b81548152602001906001019080831161178a575b505050505090506000815167ffffffffffffffff8111156117c1576117c16132ff565b6040519080825280602002602001820160405280156117fa57816020015b6117e7612ccd565b8152602001906001900390816117df5790505b50905060005b8251811015611ac8576006600084838151811061181f5761181f613315565b6020908102919091018101518252818101929092526040908101600020815160c08101835281546001600160a01b039081168252600183015482860152835160e08101855260028401805483168252600385015490921695810195909552600483018054929593948681019493908401919061189a9061335a565b80601f01602080910402602001604051908101604052809291908181526020018280546118c69061335a565b80156119135780601f106118e857610100808354040283529160200191611913565b820191906000526020600020905b8154815290600101906020018083116118f657829003601f168201915b5050505050815260200160038201805461192c9061335a565b80601f01602080910402602001604051908101604052809291908181526020018280546119589061335a565b80156119a55780601f1061197a576101008083540402835291602001916119a5565b820191906000526020600020905b81548152906001019060200180831161198857829003601f168201915b5050509183525050600482015460208083019190915260059092015460ff808216151560408085019190915261010090920416151560609092019190915291835260088401546001600160a01b0316908301526009830180549290910191611a0c9061335a565b80601f0160208091040260200160405190810160405280929190818152602001828054611a389061335a565b8015611a855780601f10611a5a57610100808354040283529160200191611a85565b820191906000526020600020905b815481529060010190602001808311611a6857829003601f168201915b50505050508152602001600a82015481525050828281518110611aaa57611aaa613315565b60200260200101819052508080611ac090613341565b915050611800565b509392505050565b611ad933612a56565b15611af75760405163510a583360e01b815260040160405180910390fd5b8015611b1657604051630729422160e41b815260040160405180910390fd5b6018811115611b3857604051630729422160e41b815260040160405180910390fd5b6000611b4682610e10613595565b9050611b6060008051602061364d83398151915233612b6f565b50611b6b8142613514565b33600081815260016020526040908190209290925590517fc526cdae63c288ea4504281fe29b0ae3352c8a9ccae61eba8c21cd25a949e0f190611bb19085815260200190565b60405180910390a25050565b600061077460008051602061366d83398151915283611c6f565b806001600160a01b038116611bff5760405163e6c4247b60e01b815260040160405180910390fd5b6000611c0a81612af2565b611c2260008051602061360d833981519152846129af565b6040516001600160a01b0384169060008051602061360d833981519152906000805160206136ed83398151915290600090a3505050565b60006107746000805160206136cd833981519152835b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6001600160a01b03811660009081526004602052604081205460609103611cd25760405163fc32598360e01b815260040160405180910390fd5b6001600160a01b038216600090815260046020908152604080832080548251818502810185019093528083529193909284015b82821015611ead5760008481526020908190206040805160e0810182526006860290920180546001600160a01b0390811684526001820154169383019390935260028301805492939291840191611d5b9061335a565b80601f0160208091040260200160405190810160405280929190818152602001828054611d879061335a565b8015611dd45780601f10611da957610100808354040283529160200191611dd4565b820191906000526020600020905b815481529060010190602001808311611db757829003601f168201915b50505050508152602001600382018054611ded9061335a565b80601f0160208091040260200160405190810160405280929190818152602001828054611e199061335a565b8015611e665780601f10611e3b57610100808354040283529160200191611e66565b820191906000526020600020905b815481529060010190602001808311611e4957829003601f168201915b5050509183525050600482015460208083019190915260059092015460ff808216151560408401526101009091041615156060909101529082526001929092019101611d05565b505050509050919050565b600061077460008051602061360d83398151915283611c6f565b806001600160a01b038116611efa5760405163e6c4247b60e01b815260040160405180910390fd5b6000611f0581612af2565b611f1d60008051602061368d83398151915284610ade565b6040516001600160a01b0384169060008051602061368d8339815191529060008051602061362d83398151915290600090a3505050565b60006107746000805160206136ad83398151915283611c6f565b6000808080808080611f808189611c6f565b611f9860008051602061366d8339815191528a611c6f565b611fb06000805160206136cd8339815191528b611c6f565b611fc86000805160206136ad8339815191528c611c6f565b611fe060008051602061360d8339815191528d611c6f565b611ff860008051602061368d8339815191528e611c6f565b61201060008051602061364d8339815191528f611c6f565b959e949d50929b5090995097509550909350915050565b8561203133611c59565b61204e5760405163e9aab75160e01b815260040160405180910390fd5b6120588133612bf9565b61207557604051633dec104f60e01b815260040160405180910390fd5b6001600160a01b03811660009081526005602090815260408083203384529091529020544211156120b9576040516317a7851f60e11b815260040160405180910390fd5b6001600160a01b03871660009081526005602090815260408083203384529091529020544211156120fd576040516317a7851f60e11b815260040160405180910390fd5b60006040518060e00160405280336001600160a01b03168152602001896001600160a01b0316815260200187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f88018190048102820181019092528681529181019190879087908190840183828082843760009201829052509385525050426020808501919091528b151560408086019190915260609094018390526001600160a01b038d811684526004825284842080546001808201835591865294839020875160069096020180546001600160a01b031990811696841696909617815592870151908301805490951691161790925550908201519192508291600282019061222690826133e2565b506060820151600382019061223b90826133e2565b506080820151600482015560a08201516005909101805460c09093015115156101000261ff00199215159290921661ffff1990931692909217179055866122f85760405163b83cc3b360e01b81526001600160a01b0389811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063b83cc3b390602401600060405180830381600087803b1580156122df57600080fd5b505af11580156122f3573d6000803e3d6000fd5b505050505b876001600160a01b0316336001600160a01b03167fd1b5f5f27a6c067d892d5201d9160332ad987f12ed191d83be7d4fb4dc876716898989898942604051612345969594939291906135ac565b60405180910390a35050505050505050565b61236033611bbd565b61237d576040516336fe937160e11b815260040160405180910390fd5b60405163261e85cd60e01b81526001600160a01b0384811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063261e85cd90602401602060405180830381865afa1580156123e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061240791906135ef565b612424576040516308a2227760e11b815260040160405180910390fd5b61242d82611c59565b61244a5760405163e9aab75160e01b815260040160405180910390fd5b6001600160a01b0380841660008181526002602090815260408083208054600181810183559185528385200180549689166001600160a01b0319978816811790915584526003835290832080549182018155835291200180549092161790556124b38142613514565b6001600160a01b038481166000818152600560209081526040808320948816808452948252918290209490945551848152919290917f0eb676771c16d4fb5bc9e83f804be8ad19cd67426581c189e482796624a1ac9f910160405180910390a3505050565b806001600160a01b0381166125405760405163e6c4247b60e01b815260040160405180910390fd5b600061254b81612af2565b610b3c6000805160206136cd833981519152846129af565b60006107748183611c6f565b6001600160a01b03811660009081526003602090815260408083208054825181850281018501909352808352606094938301828280156125d857602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116125ba575b50505050509050600080600090505b8251811015612651576004600084838151811061260657612606613315565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020805490508261263d9190613514565b91508061264981613341565b9150506125e7565b5060008167ffffffffffffffff81111561266d5761266d6132ff565b6040519080825280602002602001820160405280156126a657816020015b612693612d10565b81526020019060019003908161268b5790505b5090506000805b84518110156129a45760005b600460008784815181106126cf576126cf613315565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208054905081101561299157876001600160a01b03166004600088858151811061272257612722613315565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020828154811061275b5761275b613315565b60009182526020909120600690910201546001600160a01b03160361297f576004600087848151811061279057612790613315565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081815481106127c9576127c9613315565b60009182526020918290206040805160e081018252600690930290910180546001600160a01b03908116845260018201541693830193909352600283018054929392918401916128189061335a565b80601f01602080910402602001604051908101604052809291908181526020018280546128449061335a565b80156128915780601f1061286657610100808354040283529160200191612891565b820191906000526020600020905b81548152906001019060200180831161287457829003601f168201915b505050505081526020016003820180546128aa9061335a565b80601f01602080910402602001604051908101604052809291908181526020018280546128d69061335a565b80156129235780601f106128f857610100808354040283529160200191612923565b820191906000526020600020905b81548152906001019060200180831161290657829003601f168201915b50505091835250506004820154602082015260059091015460ff80821615156040840152610100909104161515606090910152848461296181613341565b95508151811061297357612973613315565b60200260200101819052505b8061298981613341565b9150506126b9565b508061299c81613341565b9150506126ad565b509095945050505050565b6000828152602081905260409020600101546129ca81612af2565b610b038383612afc565b806001600160a01b0381166129fc5760405163e6c4247b60e01b815260040160405180910390fd5b6000612a0781612af2565b612a1f6000805160206136ad83398151915284610ade565b6040516001600160a01b038416906000805160206136ad8339815191529060008051602061362d83398151915290600090a3505050565b600061077460008051602061364d83398151915283611c6f565b806001600160a01b038116612a985760405163e6c4247b60e01b815260040160405180910390fd5b6000612aa381612af2565b612abb60008051602061366d833981519152846129af565b6040516001600160a01b0384169060008051602061366d833981519152906000805160206136ed83398151915290600090a3505050565b610a598133612c8c565b6000612b088383611c6f565b15612b67576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610774565b506000610774565b6000612b7b8383611c6f565b612b67576000838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055612bb13390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610774565b6000805b6001600160a01b038416600090815260026020526040902054811015612c82576001600160a01b03848116600090815260026020526040902080549185169183908110612c4c57612c4c613315565b6000918252602090912001546001600160a01b031603612c70576001915050610774565b80612c7a81613341565b915050612bfd565b5060009392505050565b612c968282611c6f565b612cc95760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440160405180910390fd5b5050565b6040805160c08101825260008082526020820152908101612cec612d10565b815260200160006001600160a01b0316815260200160608152602001600081525090565b6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016060815260200160608152602001600081526020016000151581526020016000151581525090565b600060208284031215612d7557600080fd5b81356001600160e01b031981168114612d8d57600080fd5b9392505050565b80356001600160a01b0381168114612dab57600080fd5b919050565b600060208284031215612dc257600080fd5b612d8d82612d94565b604080825283519082018190526000906020906060840190828701845b82811015612e0d5781516001600160a01b031684529284019290840190600101612de8565b5050508381038285015284518082528583019183019060005b81811015612e4257835183529284019291840191600101612e26565b5090979650505050505050565b600060208284031215612e6157600080fd5b5035919050565b60008060408385031215612e7b57600080fd5b82359150612e8b60208401612d94565b90509250929050565b60008083601f840112612ea657600080fd5b50813567ffffffffffffffff811115612ebe57600080fd5b602083019150836020828501011115612ed657600080fd5b9250929050565b60008060008060608587031215612ef357600080fd5b612efc85612d94565b935060208501359250604085013567ffffffffffffffff811115612f1f57600080fd5b612f2b87828801612e94565b95989497509550505050565b60008060408385031215612f4a57600080fd5b50508035926020909101359150565b6000815180845260005b81811015612f7f57602081850181015186830182015201612f63565b506000602082860101526020601f19601f83011685010191505092915050565b600060018060a01b0380835116845280602084015116602085015250604082015160e06040850152612fd460e0850182612f59565b905060608301518482036060860152612fed8282612f59565b9150506080830151608085015260a0830151151560a085015260c0830151151560c08501528091505092915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156130d157888303603f19018552815180516001600160a01b03908116855288820151898601528782015160c0898701819052919061308783880182612f9f565b9250506060818185015116818801525050608080830151868303828801526130af8382612f59565b60a0948501519790940196909652505094870194925090860190600101613043565b509098975050505050505050565b6000806000606084860312156130f457600080fd5b8335925061310460208501612d94565b915061311260408501612d94565b90509250925092565b60008083601f84011261312d57600080fd5b50813567ffffffffffffffff81111561314557600080fd5b6020830191508360208260051b8501011115612ed657600080fd5b6000806000806040858703121561317657600080fd5b843567ffffffffffffffff8082111561318e57600080fd5b61319a8883890161311b565b909650945060208701359150808211156131b357600080fd5b50612f2b8782880161311b565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561321557603f19888603018452613203858351612f9f565b945092850192908501906001016131e7565b5092979650505050505050565b8015158114610a5957600080fd5b6000806000806000806080878903121561324957600080fd5b61325287612d94565b9550602087013561326281613222565b9450604087013567ffffffffffffffff8082111561327f57600080fd5b61328b8a838b01612e94565b909650945060608901359150808211156132a457600080fd5b506132b189828a01612e94565b979a9699509497509295939492505050565b6000806000606084860312156132d857600080fd5b6132e184612d94565b92506132ef60208501612d94565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016133535761335361332b565b5060010190565b600181811c9082168061336e57607f821691505b60208210810361338e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610b3c57600081815260208120601f850160051c810160208610156133bb5750805b601f850160051c820191505b818110156133da578281556001016133c7565b505050505050565b815167ffffffffffffffff8111156133fc576133fc6132ff565b6134108161340a845461335a565b84613394565b602080601f831160018114613445576000841561342d5750858301515b600019600386901b1c1916600185901b1785556133da565b600085815260208120601f198616915b8281101561347457888601518255948401946001909101908401613455565b50858210156134925787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b03851681526060602082018190526000906134f090830185876134a2565b905082604083015295945050505050565b818103818111156107745761077461332b565b808201808211156107745761077461332b565b60008184825b858110156129a4576001600160a01b0361354683612d94565b168352602092830192919091019060010161352d565b6020808252810182905260006001600160fb1b0383111561357c57600080fd5b8260051b80856040850137919091016040019392505050565b80820281158282048414176107745761077461332b565b86151581526080602082015260006135c86080830187896134a2565b82810360408401526135db8186886134a2565b915050826060830152979650505050505050565b60006020828403121561360157600080fd5b8151612d8d8161322256fe920994fc3bfe282f3f20cdccf1b7c5e46c63d963e822d98efff90abd41c12e212ae6a113c0ed5b78a53413ffbb7679881f11145ccfba4fb92e863dfcd5a1d2f3ee244ef9da0b2f89a74b208ea9fe1a639ebdf634027d9e1f092b58c39954fa37c41a06b26ced3a23b7bf835a0918ade784f4055ded86d18305f528f47a726052aa0ec51d0bf03ce5511c9ffc9de2b423d73d1faacd808abf2ac89ccea8a3ecf259a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f506fa31d7a92d9fa9a8898ac41d86ee9b13863605a361c85ae5d6010d5de4f280155aaafb6329a2098580462df33ec4b7441b19729b9601c5fc17ae1cf99a8a52a26469706673582212208972c7be2714e1a898cb647e829081a86faf4a9f1ff40814962004d66a94ecea64736f6c63430008140033","opcodes":"PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x3910 CODESIZE SUB DUP1 PUSH3 0x3910 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x162 JUMP JUMPDEST PUSH3 0x41 PUSH1 0x0 CALLER PUSH3 0x85 JUMP JUMPDEST PUSH3 0x6D PUSH32 0xC41A06B26CED3A23B7BF835A0918ADE784F4055DED86D18305F528F47A726052 CALLER PUSH3 0x85 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x80 MSTORE AND PUSH1 0xA0 MSTORE PUSH3 0x19A JUMP JUMPDEST PUSH3 0x91 DUP3 DUP3 PUSH3 0x96 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH3 0x13B JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH3 0xF2 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH1 0x1 PUSH3 0x13F JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x15D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x176 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x181 DUP4 PUSH3 0x145 JUMP JUMPDEST SWAP2 POP PUSH3 0x191 PUSH1 0x20 DUP5 ADD PUSH3 0x145 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0x3742 PUSH3 0x1CE PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x546 ADD MSTORE DUP2 DUP2 PUSH2 0x229B ADD MSTORE PUSH2 0x239C ADD MSTORE PUSH1 0x0 PUSH2 0x5C0 ADD MSTORE PUSH2 0x3742 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2BB JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x784FEE0E GT PUSH2 0x182 JUMPI DUP1 PUSH4 0xB0614DB3 GT PUSH2 0xE9 JUMPI DUP1 PUSH4 0xC395FCB3 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xE3A3C522 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xE3A3C522 EQ PUSH2 0x6F5 JUMPI DUP1 PUSH4 0xE55B4F93 EQ PUSH2 0x70A JUMPI DUP1 PUSH4 0xF53F5E1E EQ PUSH2 0x71D JUMPI DUP1 PUSH4 0xFC810286 EQ PUSH2 0x730 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC395FCB3 EQ PUSH2 0x6BC JUMPI DUP1 PUSH4 0xCC5ED5EA EQ PUSH2 0x6CF JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x6E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB0614DB3 EQ PUSH2 0x608 JUMPI DUP1 PUSH4 0xB1BA3883 EQ PUSH2 0x65C JUMPI DUP1 PUSH4 0xB1EA540E EQ PUSH2 0x66F JUMPI DUP1 PUSH4 0xB5617EF7 EQ PUSH2 0x682 JUMPI DUP1 PUSH4 0xB8AD415E EQ PUSH2 0x6A2 JUMPI DUP1 PUSH4 0xBD7CA7BA EQ PUSH2 0x6A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9A98163B GT PUSH2 0x13B JUMPI DUP1 PUSH4 0x9A98163B EQ PUSH2 0x580 JUMPI DUP1 PUSH4 0xA1F34163 EQ PUSH2 0x5A0 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x5B3 JUMPI DUP1 PUSH4 0xA3574C5B EQ PUSH2 0x5BB JUMPI DUP1 PUSH4 0xAA52617C EQ PUSH2 0x5E2 JUMPI DUP1 PUSH4 0xABAA536F EQ PUSH2 0x5F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x784FEE0E EQ PUSH2 0x4E0 JUMPI DUP1 PUSH4 0x7BFF0975 EQ PUSH2 0x4F5 JUMPI DUP1 PUSH4 0x7E5EFFA4 EQ PUSH2 0x508 JUMPI DUP1 PUSH4 0x8850845F EQ PUSH2 0x51B JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x52E JUMPI DUP1 PUSH4 0x99EB08D6 EQ PUSH2 0x541 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x456F19FC GT PUSH2 0x226 JUMPI DUP1 PUSH4 0x61462F0E GT PUSH2 0x1DF JUMPI DUP1 PUSH4 0x61462F0E EQ PUSH2 0x468 JUMPI DUP1 PUSH4 0x68B688C1 EQ PUSH2 0x47B JUMPI DUP1 PUSH4 0x68DD17A5 EQ PUSH2 0x48E JUMPI DUP1 PUSH4 0x69D0B517 EQ PUSH2 0x4A3 JUMPI DUP1 PUSH4 0x6E1D616E EQ PUSH2 0x4B8 JUMPI DUP1 PUSH4 0x7780E9C1 EQ PUSH2 0x4CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x456F19FC EQ PUSH2 0x3E9 JUMPI DUP1 PUSH4 0x4E4DDB92 EQ PUSH2 0x3FC JUMPI DUP1 PUSH4 0x52F84B72 EQ PUSH2 0x41C JUMPI DUP1 PUSH4 0x57C03371 EQ PUSH2 0x42F JUMPI DUP1 PUSH4 0x5CB87D26 EQ PUSH2 0x442 JUMPI DUP1 PUSH4 0x60376528 EQ PUSH2 0x455 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x261191B7 GT PUSH2 0x278 JUMPI DUP1 PUSH4 0x261191B7 EQ PUSH2 0x375 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x388 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x39B JUMPI DUP1 PUSH4 0x3CA7C02A EQ PUSH2 0x3AE JUMPI DUP1 PUSH4 0x3E251518 EQ PUSH2 0x3C3 JUMPI DUP1 PUSH4 0x4308AC98 EQ PUSH2 0x3D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x2C0 JUMPI DUP1 PUSH4 0x443CD2A EQ PUSH2 0x2E8 JUMPI DUP1 PUSH4 0x8D0AEF7 EQ PUSH2 0x2FD JUMPI DUP1 PUSH4 0x1E223B2A EQ PUSH2 0x31E JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x331 JUMPI DUP1 PUSH4 0x25D5E87E EQ PUSH2 0x362 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2D3 PUSH2 0x2CE CALLDATASIZE PUSH1 0x4 PUSH2 0x2D63 JUMP JUMPDEST PUSH2 0x743 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2FB PUSH2 0x2F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x77A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x310 PUSH2 0x30B CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x7FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2DF SWAP3 SWAP2 SWAP1 PUSH2 0x2DCB JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x32C CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x958 JUMP JUMPDEST PUSH2 0x354 PUSH2 0x33F CALLDATASIZE PUSH1 0x4 PUSH2 0x2E4F JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2DF JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x370 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x9DA JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x383 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0xA5C JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x396 CALLDATASIZE PUSH1 0x4 PUSH2 0x2E68 JUMP JUMPDEST PUSH2 0xADE JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x3A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x2E68 JUMP JUMPDEST PUSH2 0xB09 JUMP JUMPDEST PUSH2 0x354 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x364D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x3D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0xB41 JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x3E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2EDD JUMP JUMPDEST PUSH2 0xBC3 JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x3F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x10B3 JUMP JUMPDEST PUSH2 0x40F PUSH2 0x40A CALLDATASIZE PUSH1 0x4 PUSH2 0x2F37 JUMP JUMPDEST PUSH2 0x1135 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2DF SWAP2 SWAP1 PUSH2 0x301C JUMP JUMPDEST PUSH2 0x2D3 PUSH2 0x42A CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x147B JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x43D CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x1495 JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x450 CALLDATASIZE PUSH1 0x4 PUSH2 0x30DF JUMP JUMPDEST PUSH2 0x1517 JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x463 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x15AA JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x476 CALLDATASIZE PUSH1 0x4 PUSH2 0x3160 JUMP JUMPDEST PUSH2 0x162C JUMP JUMPDEST PUSH2 0x40F PUSH2 0x489 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x173F JUMP JUMPDEST PUSH2 0x354 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x360D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x354 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x366D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x354 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36AD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x4DB CALLDATASIZE PUSH1 0x4 PUSH2 0x2E4F JUMP JUMPDEST PUSH2 0x1AD0 JUMP JUMPDEST PUSH2 0x354 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x368D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x2D3 PUSH2 0x503 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x1BBD JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x516 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x1BD7 JUMP JUMPDEST PUSH2 0x2D3 PUSH2 0x529 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x1C59 JUMP JUMPDEST PUSH2 0x2D3 PUSH2 0x53C CALLDATASIZE PUSH1 0x4 PUSH2 0x2E68 JUMP JUMPDEST PUSH2 0x1C6F JUMP JUMPDEST PUSH2 0x568 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2DF JUMP JUMPDEST PUSH2 0x593 PUSH2 0x58E CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x1C98 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2DF SWAP2 SWAP1 PUSH2 0x31C0 JUMP JUMPDEST PUSH2 0x2D3 PUSH2 0x5AE CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x1EB8 JUMP JUMPDEST PUSH2 0x354 PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x568 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x5F0 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x1ED2 JUMP JUMPDEST PUSH2 0x2D3 PUSH2 0x603 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x1F54 JUMP JUMPDEST PUSH2 0x61B PUSH2 0x616 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x1F6E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP8 ISZERO ISZERO DUP9 MSTORE SWAP6 ISZERO ISZERO PUSH1 0x20 DUP9 ADD MSTORE SWAP4 ISZERO ISZERO SWAP5 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x60 DUP6 ADD MSTORE ISZERO ISZERO PUSH1 0x80 DUP5 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0xA0 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD PUSH2 0x2DF JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x66A CALLDATASIZE PUSH1 0x4 PUSH2 0x3230 JUMP JUMPDEST PUSH2 0x2027 JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x67D CALLDATASIZE PUSH1 0x4 PUSH2 0x32C3 JUMP JUMPDEST PUSH2 0x2357 JUMP JUMPDEST PUSH2 0x354 PUSH2 0x690 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x18 PUSH2 0x354 JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x6B7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x2518 JUMP JUMPDEST PUSH2 0x2D3 PUSH2 0x6CA CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x2563 JUMP JUMPDEST PUSH2 0x593 PUSH2 0x6DD CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x256F JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x6F0 CALLDATASIZE PUSH1 0x4 PUSH2 0x2E68 JUMP JUMPDEST PUSH2 0x29AF JUMP JUMPDEST PUSH2 0x354 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36CD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x718 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x29D4 JUMP JUMPDEST PUSH2 0x2D3 PUSH2 0x72B CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x2A56 JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x73E CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x2A70 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x774 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x7A2 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x7AD DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH2 0x7C5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x364D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x29AF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x364D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36ED DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE PUSH1 0x60 SWAP5 DUP6 SWAP5 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x86B JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x84D JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x88E JUMPI PUSH2 0x88E PUSH2 0x32FF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x8B7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x94D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP5 MLOAD SWAP1 SWAP2 SWAP1 DUP6 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0x8F5 JUMPI PUSH2 0x8F5 PUSH2 0x3315 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x930 JUMPI PUSH2 0x930 PUSH2 0x3315 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP1 PUSH2 0x945 DUP2 PUSH2 0x3341 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x8BD JUMP JUMPDEST POP SWAP1 SWAP5 SWAP1 SWAP4 POP SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x980 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x98B DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH2 0x9A3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x360D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xADE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x360D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x362D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x9E3 DUP2 PUSH2 0x2A56 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA06 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD TIMESTAMP GT JUMPDEST ISZERO PUSH2 0xA59 JUMPI PUSH2 0xA23 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x364D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH2 0x2AFC JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xA6F32BCBC7DE829D50E1C9CBC1C5B4DAFB4C7A0B8329757AEE62A9B394D71C3B SWAP1 PUSH1 0x0 SWAP1 LOG2 JUMPDEST POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xA84 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xA8F DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH2 0xAA7 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x368D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x29AF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x368D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36ED DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xAF9 DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH2 0xB03 DUP4 DUP4 PUSH2 0x2B6F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0xB32 JUMPI PUSH1 0x40 MLOAD PUSH4 0x334BD919 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB3C DUP3 DUP3 PUSH2 0x2AFC JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xB69 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB74 DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH2 0xB8C PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36AD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x29AF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36AD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36ED DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36AD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xBDB DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP5 GT ISZERO PUSH2 0xC14 JUMPI PUSH1 0x40 MLOAD PUSH4 0x15C25FFD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP6 SWAP1 DUP2 LT PUSH2 0xC3E JUMPI PUSH2 0xC3E PUSH2 0x3315 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x6 MUL ADD PUSH1 0x5 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xC7B JUMPI PUSH1 0x40 MLOAD PUSH4 0xC2D1C491 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP2 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0xCA9 JUMPI PUSH2 0xCA9 PUSH2 0x3315 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x6 MUL ADD PUSH1 0x5 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 PUSH1 0x0 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP8 DUP2 SLOAD DUP2 LT PUSH2 0xD29 JUMPI PUSH2 0xD29 PUSH2 0x3315 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x6 SWAP1 SWAP4 MUL SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP5 MSTORE PUSH1 0x1 DUP3 ADD SLOAD AND SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP4 ADD DUP1 SLOAD SWAP3 SWAP4 SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH2 0xD78 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xDA4 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 ISZERO PUSH2 0xDF1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xDC6 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xDF1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xDD4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0xE0A SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xE36 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 ISZERO PUSH2 0xE83 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xE58 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xE83 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xE66 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x5 SWAP1 SWAP3 ADD SLOAD PUSH1 0xFF DUP1 DUP3 AND ISZERO ISZERO PUSH1 0x40 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x100 SWAP1 SWAP3 DIV AND ISZERO ISZERO PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 DUP4 MSTORE CALLER DUP4 DUP3 ADD MSTORE DUP2 MLOAD PUSH1 0x1F DUP9 ADD DUP3 SWAP1 DIV DUP3 MUL DUP2 ADD DUP3 ADD DUP4 MSTORE DUP8 DUP2 MSTORE SWAP3 SWAP1 SWAP2 ADD SWAP2 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP4 DUP6 MSTORE POP POP TIMESTAMP PUSH1 0x20 SWAP4 DUP5 ADD MSTORE POP PUSH1 0x8 SLOAD DUP2 MSTORE PUSH1 0x6 DUP3 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP4 MLOAD DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR DUP4 SSTORE DUP6 DUP6 ADD MLOAD PUSH1 0x1 DUP5 ADD SSTORE DUP6 DUP5 ADD MLOAD DUP1 MLOAD PUSH1 0x2 DUP6 ADD DUP1 SLOAD DUP5 AND SWAP2 DUP6 AND SWAP2 SWAP1 SWAP2 OR DUP2 SSTORE SWAP6 DUP2 ADD MLOAD PUSH1 0x3 DUP6 ADD DUP1 SLOAD SWAP1 SWAP4 AND SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE SWAP2 DUP3 ADD MLOAD SWAP4 SWAP5 POP DUP5 SWAP4 SWAP1 SWAP3 SWAP1 PUSH1 0x4 DUP5 ADD SWAP1 PUSH2 0xF83 SWAP1 DUP3 PUSH2 0x33E2 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x3 DUP3 ADD SWAP1 PUSH2 0xF98 SWAP1 DUP3 PUSH2 0x33E2 JUMP JUMPDEST POP PUSH1 0x80 DUP3 DUP2 ADD MLOAD PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x5 SWAP1 SWAP3 ADD DUP1 SLOAD PUSH1 0xC0 SWAP1 SWAP5 ADD MLOAD PUSH2 0xFFFF NOT SWAP1 SWAP5 AND SWAP3 ISZERO ISZERO PUSH2 0xFF00 NOT AND SWAP3 SWAP1 SWAP3 OR PUSH2 0x100 SWAP4 ISZERO ISZERO SWAP4 SWAP1 SWAP4 MUL SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x8 DUP4 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP3 ADD MLOAD PUSH1 0x9 DUP3 ADD SWAP1 PUSH2 0x1011 SWAP1 DUP3 PUSH2 0x33E2 JUMP JUMPDEST POP PUSH1 0xA0 SWAP2 SWAP1 SWAP2 ADD MLOAD PUSH1 0xA SWAP1 SWAP2 ADD SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP3 KECCAK256 PUSH1 0x8 DUP1 SLOAD DUP3 SLOAD PUSH1 0x1 DUP2 ADD DUP5 SSTORE SWAP3 DUP6 MSTORE SWAP3 DUP5 KECCAK256 SWAP1 SWAP2 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP1 SLOAD SWAP2 PUSH2 0x105E DUP4 PUSH2 0x3341 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP DUP5 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x7B1F7B3DACB5AFDC95A1242E036C2E87A67F32D97CB111111215F3305223B666 CALLER DUP8 DUP8 TIMESTAMP PUSH1 0x40 MLOAD PUSH2 0x10A3 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x34CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x10DB JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x10E6 DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH2 0x10FE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36CD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xADE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36CD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x362D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 PUSH1 0x8 SLOAD PUSH2 0x1147 SWAP2 SWAP1 PUSH2 0x3501 JUMP JUMPDEST DUP5 GT PUSH2 0x1153 JUMPI DUP4 PUSH2 0x1161 JUMP JUMPDEST DUP3 PUSH1 0x8 SLOAD PUSH2 0x1161 SWAP2 SWAP1 PUSH2 0x3501 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x117E JUMPI PUSH2 0x117E PUSH2 0x32FF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x11B7 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x11A4 PUSH2 0x2CCD JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x119C JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1472 JUMPI PUSH1 0x6 PUSH1 0x0 PUSH2 0x11D3 DUP4 DUP9 PUSH2 0x3514 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 KECCAK256 DUP2 MLOAD PUSH1 0xC0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD DUP3 DUP7 ADD MSTORE DUP4 MLOAD PUSH1 0xE0 DUP2 ADD DUP6 MSTORE PUSH1 0x2 DUP5 ADD DUP1 SLOAD DUP4 AND DUP3 MSTORE PUSH1 0x3 DUP6 ADD SLOAD SWAP1 SWAP3 AND SWAP6 DUP2 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x4 DUP4 ADD DUP1 SLOAD SWAP3 SWAP6 SWAP4 SWAP5 DUP7 DUP2 ADD SWAP5 SWAP4 SWAP1 DUP5 ADD SWAP2 SWAP1 PUSH2 0x1244 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1270 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x12BD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1292 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x12BD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x12A0 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0x12D6 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1302 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x134F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1324 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x134F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1332 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x5 SWAP1 SWAP3 ADD SLOAD PUSH1 0xFF DUP1 DUP3 AND ISZERO ISZERO PUSH1 0x40 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x100 SWAP1 SWAP3 DIV AND ISZERO ISZERO PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 DUP4 MSTORE PUSH1 0x8 DUP5 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP4 ADD MSTORE PUSH1 0x9 DUP4 ADD DUP1 SLOAD SWAP3 SWAP1 SWAP2 ADD SWAP2 PUSH2 0x13B6 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x13E2 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x142F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1404 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x142F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1412 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1454 JUMPI PUSH2 0x1454 PUSH2 0x3315 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0x146A SWAP1 PUSH2 0x3341 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x11BD JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x774 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x368D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0x1C6F JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x14BD JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x14C8 DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH2 0x14E0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x364D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xADE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x364D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x362D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1522 DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH2 0x152C DUP5 DUP5 PUSH2 0x1C6F JUMP JUMPDEST PUSH2 0x1549 JUMPI PUSH1 0x40 MLOAD PUSH4 0x66783C9D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1553 DUP5 DUP5 PUSH2 0x2AFC JUMP JUMPDEST POP PUSH2 0x155E DUP5 DUP4 PUSH2 0x2B6F JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP6 SWAP2 PUSH32 0x274DD4127A55DCB6F6C12ED38FEC5007D965D2AFFFA8B0BC75C3DC8F3F6B2224 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x15D2 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x15DD DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH2 0x15F5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x366D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xADE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x366D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x362D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1637 DUP2 PUSH2 0x2AF2 JUMP JUMPDEST DUP4 ISZERO DUP1 PUSH2 0x1642 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x1660 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7D6EAF93 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP3 EQ PUSH2 0x1680 JUMPI PUSH1 0x40 MLOAD PUSH4 0x90A2F793 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x16E6 JUMPI PUSH2 0x16D3 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x16A0 JUMPI PUSH2 0x16A0 PUSH2 0x3315 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x16B9 JUMPI PUSH2 0x16B9 PUSH2 0x3315 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x16CE SWAP2 SWAP1 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x2B6F JUMP JUMPDEST POP DUP1 PUSH2 0x16DE DUP2 PUSH2 0x3341 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1683 JUMP JUMPDEST POP DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x16F7 SWAP3 SWAP2 SWAP1 PUSH2 0x3527 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH32 0xF4D52C90739C68C4E82D39CFBEEE6B6613784BF9B28D2CDB3A02203799CF0606 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x1730 SWAP3 SWAP2 SWAP1 PUSH2 0x355C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE PUSH1 0x60 SWAP5 SWAP4 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x179E JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x178A JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x17C1 JUMPI PUSH2 0x17C1 PUSH2 0x32FF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x17FA JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x17E7 PUSH2 0x2CCD JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x17DF JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x1AC8 JUMPI PUSH1 0x6 PUSH1 0x0 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x181F JUMPI PUSH2 0x181F PUSH2 0x3315 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 MSTORE DUP2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 KECCAK256 DUP2 MLOAD PUSH1 0xC0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD DUP3 DUP7 ADD MSTORE DUP4 MLOAD PUSH1 0xE0 DUP2 ADD DUP6 MSTORE PUSH1 0x2 DUP5 ADD DUP1 SLOAD DUP4 AND DUP3 MSTORE PUSH1 0x3 DUP6 ADD SLOAD SWAP1 SWAP3 AND SWAP6 DUP2 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x4 DUP4 ADD DUP1 SLOAD SWAP3 SWAP6 SWAP4 SWAP5 DUP7 DUP2 ADD SWAP5 SWAP4 SWAP1 DUP5 ADD SWAP2 SWAP1 PUSH2 0x189A SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x18C6 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1913 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x18E8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1913 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x18F6 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0x192C SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1958 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x19A5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x197A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x19A5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1988 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x5 SWAP1 SWAP3 ADD SLOAD PUSH1 0xFF DUP1 DUP3 AND ISZERO ISZERO PUSH1 0x40 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x100 SWAP1 SWAP3 DIV AND ISZERO ISZERO PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 DUP4 MSTORE PUSH1 0x8 DUP5 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP4 ADD MSTORE PUSH1 0x9 DUP4 ADD DUP1 SLOAD SWAP3 SWAP1 SWAP2 ADD SWAP2 PUSH2 0x1A0C SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1A38 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1A85 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1A5A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1A85 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1A68 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1AAA JUMPI PUSH2 0x1AAA PUSH2 0x3315 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0x1AC0 SWAP1 PUSH2 0x3341 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1800 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1AD9 CALLER PUSH2 0x2A56 JUMP JUMPDEST ISZERO PUSH2 0x1AF7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x510A5833 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 ISZERO PUSH2 0x1B16 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7294221 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x18 DUP2 GT ISZERO PUSH2 0x1B38 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7294221 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1B46 DUP3 PUSH2 0xE10 PUSH2 0x3595 JUMP JUMPDEST SWAP1 POP PUSH2 0x1B60 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x364D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x2B6F JUMP JUMPDEST POP PUSH2 0x1B6B DUP2 TIMESTAMP PUSH2 0x3514 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 MLOAD PUSH32 0xC526CDAE63C288EA4504281FE29B0AE3352C8A9CCAE61EBA8C21CD25A949E0F1 SWAP1 PUSH2 0x1BB1 SWAP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x774 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x366D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0x1C6F JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1BFF JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1C0A DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH2 0x1C22 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x360D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x29AF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x360D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36ED DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x774 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36CD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x60 SWAP2 SUB PUSH2 0x1CD2 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFC325983 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE SWAP2 SWAP4 SWAP1 SWAP3 DUP5 ADD JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x1EAD JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x6 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP5 MSTORE PUSH1 0x1 DUP3 ADD SLOAD AND SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP4 ADD DUP1 SLOAD SWAP3 SWAP4 SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH2 0x1D5B SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1D87 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1DD4 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1DA9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1DD4 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1DB7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0x1DED SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1E19 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1E66 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1E3B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1E66 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1E49 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x5 SWAP1 SWAP3 ADD SLOAD PUSH1 0xFF DUP1 DUP3 AND ISZERO ISZERO PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV AND ISZERO ISZERO PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP1 DUP3 MSTORE PUSH1 0x1 SWAP3 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x1D05 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x774 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x360D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0x1C6F JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1EFA JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1F05 DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH2 0x1F1D PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x368D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xADE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x368D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x362D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x774 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36AD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0x1C6F JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x1F80 DUP2 DUP10 PUSH2 0x1C6F JUMP JUMPDEST PUSH2 0x1F98 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x366D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP11 PUSH2 0x1C6F JUMP JUMPDEST PUSH2 0x1FB0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36CD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP12 PUSH2 0x1C6F JUMP JUMPDEST PUSH2 0x1FC8 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36AD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP13 PUSH2 0x1C6F JUMP JUMPDEST PUSH2 0x1FE0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x360D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP14 PUSH2 0x1C6F JUMP JUMPDEST PUSH2 0x1FF8 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x368D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP15 PUSH2 0x1C6F JUMP JUMPDEST PUSH2 0x2010 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x364D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP16 PUSH2 0x1C6F JUMP JUMPDEST SWAP6 SWAP15 SWAP5 SWAP14 POP SWAP3 SWAP12 POP SWAP1 SWAP10 POP SWAP8 POP SWAP6 POP SWAP1 SWAP4 POP SWAP2 POP POP JUMP JUMPDEST DUP6 PUSH2 0x2031 CALLER PUSH2 0x1C59 JUMP JUMPDEST PUSH2 0x204E JUMPI PUSH1 0x40 MLOAD PUSH4 0xE9AAB751 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2058 DUP2 CALLER PUSH2 0x2BF9 JUMP JUMPDEST PUSH2 0x2075 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3DEC104F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD TIMESTAMP GT ISZERO PUSH2 0x20B9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x17A7851F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD TIMESTAMP GT ISZERO PUSH2 0x20FD JUMPI PUSH1 0x40 MLOAD PUSH4 0x17A7851F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP POP SWAP1 DUP3 MSTORE POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F DUP9 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP7 DUP2 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP4 DUP6 MSTORE POP POP TIMESTAMP PUSH1 0x20 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP12 ISZERO ISZERO PUSH1 0x40 DUP1 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP1 SWAP5 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP2 AND DUP5 MSTORE PUSH1 0x4 DUP3 MSTORE DUP5 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE SWAP2 DUP7 MSTORE SWAP5 DUP4 SWAP1 KECCAK256 DUP8 MLOAD PUSH1 0x6 SWAP1 SWAP7 MUL ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP7 DUP5 AND SWAP7 SWAP1 SWAP7 OR DUP2 SSTORE SWAP3 DUP8 ADD MLOAD SWAP1 DUP4 ADD DUP1 SLOAD SWAP1 SWAP6 AND SWAP2 AND OR SWAP1 SWAP3 SSTORE POP SWAP1 DUP3 ADD MLOAD SWAP2 SWAP3 POP DUP3 SWAP2 PUSH1 0x2 DUP3 ADD SWAP1 PUSH2 0x2226 SWAP1 DUP3 PUSH2 0x33E2 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x3 DUP3 ADD SWAP1 PUSH2 0x223B SWAP1 DUP3 PUSH2 0x33E2 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x4 DUP3 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0x5 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0xC0 SWAP1 SWAP4 ADD MLOAD ISZERO ISZERO PUSH2 0x100 MUL PUSH2 0xFF00 NOT SWAP3 ISZERO ISZERO SWAP3 SWAP1 SWAP3 AND PUSH2 0xFFFF NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR OR SWAP1 SSTORE DUP7 PUSH2 0x22F8 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB83CC3B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0xB83CC3B3 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x22DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x22F3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xD1B5F5F27A6C067D892D5201D9160332AD987F12ED191D83BE7D4FB4DC876716 DUP10 DUP10 DUP10 DUP10 DUP10 TIMESTAMP PUSH1 0x40 MLOAD PUSH2 0x2345 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x35AC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2360 CALLER PUSH2 0x1BBD JUMP JUMPDEST PUSH2 0x237D JUMPI PUSH1 0x40 MLOAD PUSH4 0x36FE9371 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x261E85CD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x261E85CD SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x23E3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2407 SWAP2 SWAP1 PUSH2 0x35EF JUMP JUMPDEST PUSH2 0x2424 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8A22277 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x242D DUP3 PUSH2 0x1C59 JUMP JUMPDEST PUSH2 0x244A JUMPI PUSH1 0x40 MLOAD PUSH4 0xE9AAB751 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP4 SSTORE SWAP2 DUP6 MSTORE DUP4 DUP6 KECCAK256 ADD DUP1 SLOAD SWAP7 DUP10 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP8 DUP9 AND DUP2 OR SWAP1 SWAP2 SSTORE DUP5 MSTORE PUSH1 0x3 DUP4 MSTORE SWAP1 DUP4 KECCAK256 DUP1 SLOAD SWAP2 DUP3 ADD DUP2 SSTORE DUP4 MSTORE SWAP2 KECCAK256 ADD DUP1 SLOAD SWAP1 SWAP3 AND OR SWAP1 SSTORE PUSH2 0x24B3 DUP2 TIMESTAMP PUSH2 0x3514 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP9 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE MLOAD DUP5 DUP2 MSTORE SWAP2 SWAP3 SWAP1 SWAP2 PUSH32 0xEB676771C16D4FB5BC9E83F804BE8AD19CD67426581C189E482796624A1AC9F SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x2540 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x254B DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH2 0xB3C PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36CD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x29AF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x774 DUP2 DUP4 PUSH2 0x1C6F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE PUSH1 0x60 SWAP5 SWAP4 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x25D8 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x25BA JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x2651 JUMPI PUSH1 0x4 PUSH1 0x0 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2606 JUMPI PUSH2 0x2606 PUSH2 0x3315 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 POP DUP3 PUSH2 0x263D SWAP2 SWAP1 PUSH2 0x3514 JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0x2649 DUP2 PUSH2 0x3341 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x25E7 JUMP JUMPDEST POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x266D JUMPI PUSH2 0x266D PUSH2 0x32FF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x26A6 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x2693 PUSH2 0x2D10 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x268B JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x29A4 JUMPI PUSH1 0x0 JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x26CF JUMPI PUSH2 0x26CF PUSH2 0x3315 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 POP DUP2 LT ISZERO PUSH2 0x2991 JUMPI DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x4 PUSH1 0x0 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2722 JUMPI PUSH2 0x2722 PUSH2 0x3315 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x275B JUMPI PUSH2 0x275B PUSH2 0x3315 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x6 SWAP1 SWAP2 MUL ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x297F JUMPI PUSH1 0x4 PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2790 JUMPI PUSH2 0x2790 PUSH2 0x3315 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x27C9 JUMPI PUSH2 0x27C9 PUSH2 0x3315 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x6 SWAP1 SWAP4 MUL SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP5 MSTORE PUSH1 0x1 DUP3 ADD SLOAD AND SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP4 ADD DUP1 SLOAD SWAP3 SWAP4 SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH2 0x2818 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2844 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2891 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2866 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2891 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2874 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0x28AA SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x28D6 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2923 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x28F8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2923 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2906 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x5 SWAP1 SWAP2 ADD SLOAD PUSH1 0xFF DUP1 DUP3 AND ISZERO ISZERO PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV AND ISZERO ISZERO PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE DUP5 DUP5 PUSH2 0x2961 DUP2 PUSH2 0x3341 JUMP JUMPDEST SWAP6 POP DUP2 MLOAD DUP2 LT PUSH2 0x2973 JUMPI PUSH2 0x2973 PUSH2 0x3315 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST DUP1 PUSH2 0x2989 DUP2 PUSH2 0x3341 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x26B9 JUMP JUMPDEST POP DUP1 PUSH2 0x299C DUP2 PUSH2 0x3341 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x26AD JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x29CA DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH2 0xB03 DUP4 DUP4 PUSH2 0x2AFC JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x29FC JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2A07 DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH2 0x2A1F PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36AD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xADE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36AD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x362D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x774 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x364D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0x1C6F JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x2A98 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2AA3 DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH2 0x2ABB PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x366D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x29AF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x366D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36ED DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xA59 DUP2 CALLER PUSH2 0x2C8C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B08 DUP4 DUP4 PUSH2 0x1C6F JUMP JUMPDEST ISZERO PUSH2 0x2B67 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP7 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x774 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x774 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B7B DUP4 DUP4 PUSH2 0x1C6F JUMP JUMPDEST PUSH2 0x2B67 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x2BB1 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x774 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0x2C82 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP2 DUP6 AND SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0x2C4C JUMPI PUSH2 0x2C4C PUSH2 0x3315 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x2C70 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x774 JUMP JUMPDEST DUP1 PUSH2 0x2C7A DUP2 PUSH2 0x3341 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2BFD JUMP JUMPDEST POP PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2C96 DUP3 DUP3 PUSH2 0x1C6F JUMP JUMPDEST PUSH2 0x2CC9 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE2517D3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD PUSH2 0x2CEC PUSH2 0x2D10 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2D75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x2D8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2DAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2DC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2D8D DUP3 PUSH2 0x2D94 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP4 MLOAD SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x20 SWAP1 PUSH1 0x60 DUP5 ADD SWAP1 DUP3 DUP8 ADD DUP5 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2E0D JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2DE8 JUMP JUMPDEST POP POP POP DUP4 DUP2 SUB DUP3 DUP6 ADD MSTORE DUP5 MLOAD DUP1 DUP3 MSTORE DUP6 DUP4 ADD SWAP2 DUP4 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2E42 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2E26 JUMP JUMPDEST POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2E61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2E7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x2E8B PUSH1 0x20 DUP5 ADD PUSH2 0x2D94 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2EA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2EBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2ED6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2EF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2EFC DUP6 PUSH2 0x2D94 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2F1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2F2B DUP8 DUP3 DUP9 ADD PUSH2 0x2E94 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2F4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2F7F JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x2F63 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP4 MLOAD AND DUP5 MSTORE DUP1 PUSH1 0x20 DUP5 ADD MLOAD AND PUSH1 0x20 DUP6 ADD MSTORE POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0xE0 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x2FD4 PUSH1 0xE0 DUP6 ADD DUP3 PUSH2 0x2F59 JUMP JUMPDEST SWAP1 POP PUSH1 0x60 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x60 DUP7 ADD MSTORE PUSH2 0x2FED DUP3 DUP3 PUSH2 0x2F59 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD ISZERO ISZERO PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD ISZERO ISZERO PUSH1 0xC0 DUP6 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 SWAP3 POP DUP3 DUP7 ADD SWAP2 POP DUP3 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD DUP5 DUP9 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x30D1 JUMPI DUP9 DUP4 SUB PUSH1 0x3F NOT ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP6 MSTORE DUP9 DUP3 ADD MLOAD DUP10 DUP7 ADD MSTORE DUP8 DUP3 ADD MLOAD PUSH1 0xC0 DUP10 DUP8 ADD DUP2 SWAP1 MSTORE SWAP2 SWAP1 PUSH2 0x3087 DUP4 DUP9 ADD DUP3 PUSH2 0x2F9F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP2 DUP2 DUP6 ADD MLOAD AND DUP2 DUP9 ADD MSTORE POP POP PUSH1 0x80 DUP1 DUP4 ADD MLOAD DUP7 DUP4 SUB DUP3 DUP9 ADD MSTORE PUSH2 0x30AF DUP4 DUP3 PUSH2 0x2F59 JUMP JUMPDEST PUSH1 0xA0 SWAP5 DUP6 ADD MLOAD SWAP8 SWAP1 SWAP5 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP SWAP5 DUP8 ADD SWAP5 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3043 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x30F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH2 0x3104 PUSH1 0x20 DUP6 ADD PUSH2 0x2D94 JUMP JUMPDEST SWAP2 POP PUSH2 0x3112 PUSH1 0x40 DUP6 ADD PUSH2 0x2D94 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x312D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3145 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x2ED6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3176 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x318E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x319A DUP9 DUP4 DUP10 ADD PUSH2 0x311B JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x31B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F2B DUP8 DUP3 DUP9 ADD PUSH2 0x311B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3215 JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x3203 DUP6 DUP4 MLOAD PUSH2 0x2F9F JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x31E7 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xA59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3249 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3252 DUP8 PUSH2 0x2D94 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x3262 DUP2 PUSH2 0x3222 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x327F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x328B DUP11 DUP4 DUP12 ADD PUSH2 0x2E94 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x32A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x32B1 DUP10 DUP3 DUP11 ADD PUSH2 0x2E94 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x32D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x32E1 DUP5 PUSH2 0x2D94 JUMP JUMPDEST SWAP3 POP PUSH2 0x32EF PUSH1 0x20 DUP6 ADD PUSH2 0x2D94 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x3353 JUMPI PUSH2 0x3353 PUSH2 0x332B JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x336E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x338E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0xB3C JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x33BB JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x33DA JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x33C7 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x33FC JUMPI PUSH2 0x33FC PUSH2 0x32FF JUMP JUMPDEST PUSH2 0x3410 DUP2 PUSH2 0x340A DUP5 SLOAD PUSH2 0x335A JUMP JUMPDEST DUP5 PUSH2 0x3394 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x3445 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x342D JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x33DA JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3474 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x3455 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x3492 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 DUP3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x34F0 SWAP1 DUP4 ADD DUP6 DUP8 PUSH2 0x34A2 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x774 JUMPI PUSH2 0x774 PUSH2 0x332B JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x774 JUMPI PUSH2 0x774 PUSH2 0x332B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP3 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x29A4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x3546 DUP4 PUSH2 0x2D94 JUMP JUMPDEST AND DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x352D JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFB SHL SUB DUP4 GT ISZERO PUSH2 0x357C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP6 PUSH1 0x40 DUP6 ADD CALLDATACOPY SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x774 JUMPI PUSH2 0x774 PUSH2 0x332B JUMP JUMPDEST DUP7 ISZERO ISZERO DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x35C8 PUSH1 0x80 DUP4 ADD DUP8 DUP10 PUSH2 0x34A2 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x35DB DUP2 DUP7 DUP9 PUSH2 0x34A2 JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3601 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2D8D DUP2 PUSH2 0x3222 JUMP INVALID SWAP3 MULMOD SWAP5 0xFC EXTCODESIZE INVALID 0x28 0x2F EXTCODEHASH KECCAK256 0xCD 0xCC CALL 0xB7 0xC5 0xE4 PUSH13 0x63D963E822D98EFFF90ABD41C1 0x2E 0x21 0x2A 0xE6 LOG1 SGT 0xC0 0xED JUMPDEST PUSH25 0xA53413FFBB7679881F11145CCFBA4FB92E863DFCD5A1D2F3EE 0x24 0x4E 0xF9 0xDA SIGNEXTEND 0x2F DUP10 0xA7 0x4B KECCAK256 DUP15 0xA9 INVALID BYTE PUSH4 0x9EBDF634 MUL PUSH30 0x9E1F092B58C39954FA37C41A06B26CED3A23B7BF835A0918ADE784F4055D 0xED DUP7 0xD1 DUP4 SDIV CREATE2 0x28 DELEGATECALL PUSH27 0x726052AA0EC51D0BF03CE5511C9FFC9DE2B423D73D1FAACD808ABF 0x2A 0xC8 SWAP13 0xCE 0xA8 LOG3 0xEC CALLCODE MSIZE LOG1 0xC4 DUP15 PC CALLDATACOPY 0xAD PUSH27 0x7F3DCEDCBE129BF3249EC4FBF651FD4F5E2600EAD39FE2F506FA31 0xD7 0xA9 0x2D SWAP16 0xA9 0xA8 DUP10 DUP11 0xC4 SAR DUP7 0xEE SWAP12 SGT DUP7 CALLDATASIZE SDIV LOG3 PUSH2 0xC85A 0xE5 0xD6 ADD 0xD 0x5D 0xE4 CALLCODE DUP1 ISZERO GAS 0xAA 0xFB PUSH4 0x29A20985 DUP1 CHAINID 0x2D RETURN RETURNDATACOPY 0xC4 0xB7 PREVRANDAO SHL NOT PUSH19 0x9B9601C5FC17AE1CF99A8A52A2646970667358 0x22 SLT KECCAK256 DUP10 PUSH19 0xC7BE2714E1A898CB647E829081A86FAF4A9F1F DELEGATECALL ADDMOD EQ SWAP7 KECCAK256 DIV 0xD6 PUSH11 0x94ECEA64736F6C63430008 EQ STOP CALLER ","sourceMap":"808:9000:21:-:0;;;1550:182;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1220:42:20;2232:4:0;1251:10:20;1220;:42::i;:::-;1272:39;551:33;1300:10;1272;:39::i;:::-;-1:-1:-1;;;;;1619:42:21;;;;;1671:54;;;808:9000;;5180:102:20;5254:25;5265:4;5271:7;5254:10;:25::i;:::-;;5180:102;;:::o;6179:316:0:-;6256:4;2954:12;;;;;;;;;;;-1:-1:-1;;;;;2954:29:0;;;;;;;;;;;;6272:217;;6315:6;:12;;;;;;;;;;;-1:-1:-1;;;;;6315:29:0;;;;;;;;;:36;;-1:-1:-1;;6315:36:0;6347:4;6315:36;;;6397:12;735:10:12;;656:96;6397:12:0;-1:-1:-1;;;;;6370:40:0;6388:7;-1:-1:-1;;;;;6370:40:0;6382:4;6370:40;;;;;;;;;;-1:-1:-1;6431:4:0;6424:11;;6272:217;-1:-1:-1;6473:5:0;6272:217;6179:316;;;;:::o;14:177:25:-;93:13;;-1:-1:-1;;;;;135:31:25;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:293::-;275:6;283;336:2;324:9;315:7;311:23;307:32;304:52;;;352:1;349;342:12;304:52;375:40;405:9;375:40;:::i;:::-;365:50;;434:49;479:2;468:9;464:18;434:49;:::i;:::-;424:59;;196:293;;;;;:::o;:::-;808:9000:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@AUDITOR_ROLE_3861":{"entryPoint":null,"id":3861,"parameterSlots":0,"returnSlots":0},"@CERTIFICATE_FACTORY_ROLE_3871":{"entryPoint":null,"id":3871,"parameterSlots":0,"returnSlots":0},"@CERTIFIER_ROLE_3851":{"entryPoint":null,"id":3851,"parameterSlots":0,"returnSlots":0},"@DEFAULT_ADMIN_ROLE_29":{"entryPoint":null,"id":29,"parameterSlots":0,"returnSlots":0},"@ENTERPRISE_ROLE_3866":{"entryPoint":null,"id":3866,"parameterSlots":0,"returnSlots":0},"@INSPECTOR_ROLE_3856":{"entryPoint":null,"id":3856,"parameterSlots":0,"returnSlots":0},"@PUBLIC_ROLE_3876":{"entryPoint":null,"id":3876,"parameterSlots":0,"returnSlots":0},"@_checkRole_114":{"entryPoint":11404,"id":114,"parameterSlots":2,"returnSlots":0},"@_checkRole_93":{"entryPoint":10994,"id":93,"parameterSlots":1,"returnSlots":0},"@_grantRole_256":{"entryPoint":11119,"id":256,"parameterSlots":2,"returnSlots":1},"@_isInspectorAssigned_4960":{"entryPoint":11257,"id":4960,"parameterSlots":2,"returnSlots":1},"@_msgSender_1886":{"entryPoint":null,"id":1886,"parameterSlots":0,"returnSlots":1},"@_revokeRole_294":{"entryPoint":11004,"id":294,"parameterSlots":2,"returnSlots":1},"@assignInspector_4752":{"entryPoint":9047,"id":4752,"parameterSlots":3,"returnSlots":0},"@bulkGrantRoles_4080":{"entryPoint":5676,"id":4080,"parameterSlots":4,"returnSlots":0},"@certAuthority_4579":{"entryPoint":null,"id":4579,"parameterSlots":0,"returnSlots":0},"@checkExpiryRoles_4013":{"entryPoint":2522,"id":4013,"parameterSlots":1,"returnSlots":0},"@claimTemporaryPublicRole_3975":{"entryPoint":6864,"id":3975,"parameterSlots":1,"returnSlots":0},"@flagInspection_4922":{"entryPoint":3011,"id":4922,"parameterSlots":4,"returnSlots":0},"@getActiveRoles_4172":{"entryPoint":8046,"id":4172,"parameterSlots":1,"returnSlots":7},"@getEnterpriseFlaggedReports_5285":{"entryPoint":5951,"id":5285,"parameterSlots":1,"returnSlots":1},"@getEnterpriseInspectionReports_5165":{"entryPoint":7320,"id":5165,"parameterSlots":1,"returnSlots":1},"@getEnterpriseInspectors_5022":{"entryPoint":2044,"id":5022,"parameterSlots":1,"returnSlots":2},"@getFlaggedInspections_5227":{"entryPoint":4405,"id":5227,"parameterSlots":2,"returnSlots":1},"@getInspectorReports_5139":{"entryPoint":9583,"id":5139,"parameterSlots":1,"returnSlots":1},"@getMaxPublicRoleDuration_3983":{"entryPoint":null,"id":3983,"parameterSlots":0,"returnSlots":1},"@getRoleAdmin_128":{"entryPoint":null,"id":128,"parameterSlots":1,"returnSlots":1},"@grantAuditor_4258":{"entryPoint":10708,"id":4258,"parameterSlots":1,"returnSlots":0},"@grantCertificateFactory_4306":{"entryPoint":7890,"id":4306,"parameterSlots":1,"returnSlots":0},"@grantCertifier_4210":{"entryPoint":5546,"id":4210,"parameterSlots":1,"returnSlots":0},"@grantEnterprise_4282":{"entryPoint":2392,"id":4282,"parameterSlots":1,"returnSlots":0},"@grantInspector_4234":{"entryPoint":4275,"id":4234,"parameterSlots":1,"returnSlots":0},"@grantPublicRole_4330":{"entryPoint":5269,"id":4330,"parameterSlots":1,"returnSlots":0},"@grantRole_147":{"entryPoint":2782,"id":147,"parameterSlots":2,"returnSlots":0},"@hasAdminRole_4482":{"entryPoint":9571,"id":4482,"parameterSlots":1,"returnSlots":1},"@hasAuditorRole_4521":{"entryPoint":8020,"id":4521,"parameterSlots":1,"returnSlots":1},"@hasCertificateFactoryRole_4547":{"entryPoint":5243,"id":4547,"parameterSlots":1,"returnSlots":1},"@hasCertifierRole_4495":{"entryPoint":7101,"id":4495,"parameterSlots":1,"returnSlots":1},"@hasEnterpriseRole_4534":{"entryPoint":7864,"id":4534,"parameterSlots":1,"returnSlots":1},"@hasInspectorRole_4508":{"entryPoint":7257,"id":4508,"parameterSlots":1,"returnSlots":1},"@hasPublicRole_4560":{"entryPoint":10838,"id":4560,"parameterSlots":1,"returnSlots":1},"@hasRole_80":{"entryPoint":7279,"id":80,"parameterSlots":2,"returnSlots":1},"@publicRoleExpiry_3880":{"entryPoint":null,"id":3880,"parameterSlots":0,"returnSlots":0},"@renounceRole_189":{"entryPoint":2825,"id":189,"parameterSlots":2,"returnSlots":0},"@revokeAuditorRole_4396":{"entryPoint":2881,"id":4396,"parameterSlots":1,"returnSlots":0},"@revokeCertificateFactoryRole_4444":{"entryPoint":2652,"id":4444,"parameterSlots":1,"returnSlots":0},"@revokeCertifierRole_4355":{"entryPoint":10864,"id":4355,"parameterSlots":1,"returnSlots":0},"@revokeEnterpriseRole_4420":{"entryPoint":7127,"id":4420,"parameterSlots":1,"returnSlots":0},"@revokeInspectorRole_4372":{"entryPoint":9496,"id":4372,"parameterSlots":1,"returnSlots":0},"@revokePublicRole_4468":{"entryPoint":1914,"id":4468,"parameterSlots":1,"returnSlots":0},"@revokeRole_166":{"entryPoint":10671,"id":166,"parameterSlots":2,"returnSlots":0},"@rolesManager_4576":{"entryPoint":null,"id":4576,"parameterSlots":0,"returnSlots":0},"@submitInspectionReport_4829":{"entryPoint":8231,"id":4829,"parameterSlots":6,"returnSlots":0},"@supportsInterface_2182":{"entryPoint":null,"id":2182,"parameterSlots":1,"returnSlots":1},"@supportsInterface_62":{"entryPoint":1859,"id":62,"parameterSlots":1,"returnSlots":1},"@transferRole_4122":{"entryPoint":5399,"id":4122,"parameterSlots":3,"returnSlots":0},"abi_decode_address":{"entryPoint":11668,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_bytes32_dyn_calldata":{"entryPoint":12571,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_string_calldata":{"entryPoint":11924,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":11696,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":12995,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_boolt_string_calldata_ptrt_string_calldata_ptr":{"entryPoint":12848,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_addresst_uint256t_string_calldata_ptr":{"entryPoint":11997,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_array$_t_address_$dyn_calldata_ptr":{"entryPoint":12640,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":13807,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":11855,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":11880,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_addresst_address":{"entryPoint":12511,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes4":{"entryPoint":11619,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":12087,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_string":{"entryPoint":12121,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string_calldata":{"entryPoint":13474,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_struct_InspectionReport":{"entryPoint":12191,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_array$_t_address_$dyn_calldata_ptr__to_t_array$_t_address_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":13607,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_string_calldata_ptr_t_uint256__to_t_address_t_string_memory_ptr_t_uint256__fromStack_reversed":{"entryPoint":13515,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":11723,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr__to_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":13660,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_struct$_FlaggedInspection_$5348_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_FlaggedInspection_$5348_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":12316,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_struct$_InspectionReport_$5334_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_InspectionReport_$5334_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":12736,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool__to_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_bool_t_string_calldata_ptr_t_string_calldata_ptr_t_uint256__to_t_bool_t_string_memory_ptr_t_string_memory_ptr_t_uint256__fromStack_reversed":{"entryPoint":13740,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_CertificationAuthority_$3819__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_RolesManager_$4561__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":13588,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":13717,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":13569,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":13204,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":13282,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":13146,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":13121,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":13099,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":13077,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":13055,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_bool":{"entryPoint":12834,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:18805:25","statements":[{"nodeType":"YulBlock","src":"6:3:25","statements":[]},{"body":{"nodeType":"YulBlock","src":"83:217:25","statements":[{"body":{"nodeType":"YulBlock","src":"129:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"138:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"141:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"131:6:25"},"nodeType":"YulFunctionCall","src":"131:12:25"},"nodeType":"YulExpressionStatement","src":"131:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"104:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"113:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:25"},"nodeType":"YulFunctionCall","src":"100:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"125:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"96:3:25"},"nodeType":"YulFunctionCall","src":"96:32:25"},"nodeType":"YulIf","src":"93:52:25"},{"nodeType":"YulVariableDeclaration","src":"154:36:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"180:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"167:12:25"},"nodeType":"YulFunctionCall","src":"167:23:25"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"158:5:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"254:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"263:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"266:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"256:6:25"},"nodeType":"YulFunctionCall","src":"256:12:25"},"nodeType":"YulExpressionStatement","src":"256:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"212:5:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"234:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"239:10:25","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"230:3:25"},"nodeType":"YulFunctionCall","src":"230:20:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"219:3:25"},"nodeType":"YulFunctionCall","src":"219:32:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"209:2:25"},"nodeType":"YulFunctionCall","src":"209:43:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"202:6:25"},"nodeType":"YulFunctionCall","src":"202:51:25"},"nodeType":"YulIf","src":"199:71:25"},{"nodeType":"YulAssignment","src":"279:15:25","value":{"name":"value","nodeType":"YulIdentifier","src":"289:5:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"279:6:25"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"60:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"72:6:25","type":""}],"src":"14:286:25"},{"body":{"nodeType":"YulBlock","src":"400:92:25","statements":[{"nodeType":"YulAssignment","src":"410:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"422:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"433:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"418:3:25"},"nodeType":"YulFunctionCall","src":"418:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"410:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"452:9:25"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"477:6:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"470:6:25"},"nodeType":"YulFunctionCall","src":"470:14:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"463:6:25"},"nodeType":"YulFunctionCall","src":"463:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"445:6:25"},"nodeType":"YulFunctionCall","src":"445:41:25"},"nodeType":"YulExpressionStatement","src":"445:41:25"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"369:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"380:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"391:4:25","type":""}],"src":"305:187:25"},{"body":{"nodeType":"YulBlock","src":"546:124:25","statements":[{"nodeType":"YulAssignment","src":"556:29:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"578:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"565:12:25"},"nodeType":"YulFunctionCall","src":"565:20:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"556:5:25"}]},{"body":{"nodeType":"YulBlock","src":"648:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"657:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"660:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"650:6:25"},"nodeType":"YulFunctionCall","src":"650:12:25"},"nodeType":"YulExpressionStatement","src":"650:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"607:5:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"618:5:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"633:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"638:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"629:3:25"},"nodeType":"YulFunctionCall","src":"629:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"642:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"625:3:25"},"nodeType":"YulFunctionCall","src":"625:19:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"614:3:25"},"nodeType":"YulFunctionCall","src":"614:31:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"604:2:25"},"nodeType":"YulFunctionCall","src":"604:42:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"597:6:25"},"nodeType":"YulFunctionCall","src":"597:50:25"},"nodeType":"YulIf","src":"594:70:25"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"525:6:25","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"536:5:25","type":""}],"src":"497:173:25"},{"body":{"nodeType":"YulBlock","src":"745:116:25","statements":[{"body":{"nodeType":"YulBlock","src":"791:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"800:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"803:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"793:6:25"},"nodeType":"YulFunctionCall","src":"793:12:25"},"nodeType":"YulExpressionStatement","src":"793:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"766:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"775:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"762:3:25"},"nodeType":"YulFunctionCall","src":"762:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"787:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"758:3:25"},"nodeType":"YulFunctionCall","src":"758:32:25"},"nodeType":"YulIf","src":"755:52:25"},{"nodeType":"YulAssignment","src":"816:39:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"845:9:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"826:18:25"},"nodeType":"YulFunctionCall","src":"826:29:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"816:6:25"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"711:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"722:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"734:6:25","type":""}],"src":"675:186:25"},{"body":{"nodeType":"YulBlock","src":"1095:949:25","statements":[{"nodeType":"YulVariableDeclaration","src":"1105:32:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1123:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"1134:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1119:3:25"},"nodeType":"YulFunctionCall","src":"1119:18:25"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"1109:6:25","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1153:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"1164:2:25","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1146:6:25"},"nodeType":"YulFunctionCall","src":"1146:21:25"},"nodeType":"YulExpressionStatement","src":"1146:21:25"},{"nodeType":"YulVariableDeclaration","src":"1176:17:25","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"1187:6:25"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"1180:3:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1202:27:25","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1222:6:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1216:5:25"},"nodeType":"YulFunctionCall","src":"1216:13:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1206:6:25","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"1245:6:25"},{"name":"length","nodeType":"YulIdentifier","src":"1253:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1238:6:25"},"nodeType":"YulFunctionCall","src":"1238:22:25"},"nodeType":"YulExpressionStatement","src":"1238:22:25"},{"nodeType":"YulAssignment","src":"1269:25:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1280:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"1291:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1276:3:25"},"nodeType":"YulFunctionCall","src":"1276:18:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"1269:3:25"}]},{"nodeType":"YulVariableDeclaration","src":"1303:14:25","value":{"kind":"number","nodeType":"YulLiteral","src":"1313:4:25","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1307:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1326:29:25","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1344:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"1352:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1340:3:25"},"nodeType":"YulFunctionCall","src":"1340:15:25"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"1330:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1364:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"1373:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1368:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"1432:146:25","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1453:3:25"},{"arguments":[{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"1468:6:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1462:5:25"},"nodeType":"YulFunctionCall","src":"1462:13:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1485:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1490:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1481:3:25"},"nodeType":"YulFunctionCall","src":"1481:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"1494:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1477:3:25"},"nodeType":"YulFunctionCall","src":"1477:19:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1458:3:25"},"nodeType":"YulFunctionCall","src":"1458:39:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1446:6:25"},"nodeType":"YulFunctionCall","src":"1446:52:25"},"nodeType":"YulExpressionStatement","src":"1446:52:25"},{"nodeType":"YulAssignment","src":"1511:19:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1522:3:25"},{"name":"_1","nodeType":"YulIdentifier","src":"1527:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1518:3:25"},"nodeType":"YulFunctionCall","src":"1518:12:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"1511:3:25"}]},{"nodeType":"YulAssignment","src":"1543:25:25","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"1557:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"1565:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1553:3:25"},"nodeType":"YulFunctionCall","src":"1553:15:25"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"1543:6:25"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1394:1:25"},{"name":"length","nodeType":"YulIdentifier","src":"1397:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1391:2:25"},"nodeType":"YulFunctionCall","src":"1391:13:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1405:18:25","statements":[{"nodeType":"YulAssignment","src":"1407:14:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1416:1:25"},{"kind":"number","nodeType":"YulLiteral","src":"1419:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:25"},"nodeType":"YulFunctionCall","src":"1412:9:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1407:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"1387:3:25","statements":[]},"src":"1383:195:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1598:9:25"},{"name":"_1","nodeType":"YulIdentifier","src":"1609:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1594:3:25"},"nodeType":"YulFunctionCall","src":"1594:18:25"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1618:3:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"1623:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1614:3:25"},"nodeType":"YulFunctionCall","src":"1614:19:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1587:6:25"},"nodeType":"YulFunctionCall","src":"1587:47:25"},"nodeType":"YulExpressionStatement","src":"1587:47:25"},{"nodeType":"YulVariableDeclaration","src":"1643:16:25","value":{"name":"pos","nodeType":"YulIdentifier","src":"1656:3:25"},"variables":[{"name":"pos_1","nodeType":"YulTypedName","src":"1647:5:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1668:29:25","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"1690:6:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1684:5:25"},"nodeType":"YulFunctionCall","src":"1684:13:25"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"1672:8:25","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1713:3:25"},{"name":"length_1","nodeType":"YulIdentifier","src":"1718:8:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1706:6:25"},"nodeType":"YulFunctionCall","src":"1706:21:25"},"nodeType":"YulExpressionStatement","src":"1706:21:25"},{"nodeType":"YulAssignment","src":"1736:21:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1749:3:25"},{"name":"_1","nodeType":"YulIdentifier","src":"1754:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1745:3:25"},"nodeType":"YulFunctionCall","src":"1745:12:25"},"variableNames":[{"name":"pos_1","nodeType":"YulIdentifier","src":"1736:5:25"}]},{"nodeType":"YulVariableDeclaration","src":"1766:31:25","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"1786:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"1794:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1782:3:25"},"nodeType":"YulFunctionCall","src":"1782:15:25"},"variables":[{"name":"srcPtr_1","nodeType":"YulTypedName","src":"1770:8:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1806:12:25","value":{"kind":"number","nodeType":"YulLiteral","src":"1817:1:25","type":"","value":"0"},"variables":[{"name":"i_1","nodeType":"YulTypedName","src":"1810:3:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"1884:132:25","statements":[{"expression":{"arguments":[{"name":"pos_1","nodeType":"YulIdentifier","src":"1905:5:25"},{"arguments":[{"name":"srcPtr_1","nodeType":"YulIdentifier","src":"1918:8:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1912:5:25"},"nodeType":"YulFunctionCall","src":"1912:15:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1898:6:25"},"nodeType":"YulFunctionCall","src":"1898:30:25"},"nodeType":"YulExpressionStatement","src":"1898:30:25"},{"nodeType":"YulAssignment","src":"1941:23:25","value":{"arguments":[{"name":"pos_1","nodeType":"YulIdentifier","src":"1954:5:25"},{"name":"_1","nodeType":"YulIdentifier","src":"1961:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1950:3:25"},"nodeType":"YulFunctionCall","src":"1950:14:25"},"variableNames":[{"name":"pos_1","nodeType":"YulIdentifier","src":"1941:5:25"}]},{"nodeType":"YulAssignment","src":"1977:29:25","value":{"arguments":[{"name":"srcPtr_1","nodeType":"YulIdentifier","src":"1993:8:25"},{"name":"_1","nodeType":"YulIdentifier","src":"2003:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1989:3:25"},"nodeType":"YulFunctionCall","src":"1989:17:25"},"variableNames":[{"name":"srcPtr_1","nodeType":"YulIdentifier","src":"1977:8:25"}]}]},"condition":{"arguments":[{"name":"i_1","nodeType":"YulIdentifier","src":"1838:3:25"},{"name":"length_1","nodeType":"YulIdentifier","src":"1843:8:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1835:2:25"},"nodeType":"YulFunctionCall","src":"1835:17:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1853:22:25","statements":[{"nodeType":"YulAssignment","src":"1855:18:25","value":{"arguments":[{"name":"i_1","nodeType":"YulIdentifier","src":"1866:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"1871:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1862:3:25"},"nodeType":"YulFunctionCall","src":"1862:11:25"},"variableNames":[{"name":"i_1","nodeType":"YulIdentifier","src":"1855:3:25"}]}]},"pre":{"nodeType":"YulBlock","src":"1831:3:25","statements":[]},"src":"1827:189:25"},{"nodeType":"YulAssignment","src":"2025:13:25","value":{"name":"pos_1","nodeType":"YulIdentifier","src":"2033:5:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2025:4:25"}]}]},"name":"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1056:9:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1067:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1075:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1086:4:25","type":""}],"src":"866:1178:25"},{"body":{"nodeType":"YulBlock","src":"2119:110:25","statements":[{"body":{"nodeType":"YulBlock","src":"2165:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2174:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2177:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2167:6:25"},"nodeType":"YulFunctionCall","src":"2167:12:25"},"nodeType":"YulExpressionStatement","src":"2167:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2140:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"2149:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2136:3:25"},"nodeType":"YulFunctionCall","src":"2136:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"2161:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2132:3:25"},"nodeType":"YulFunctionCall","src":"2132:32:25"},"nodeType":"YulIf","src":"2129:52:25"},{"nodeType":"YulAssignment","src":"2190:33:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2213:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2200:12:25"},"nodeType":"YulFunctionCall","src":"2200:23:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2190:6:25"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2085:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2096:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2108:6:25","type":""}],"src":"2049:180:25"},{"body":{"nodeType":"YulBlock","src":"2335:76:25","statements":[{"nodeType":"YulAssignment","src":"2345:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2357:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"2368:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2353:3:25"},"nodeType":"YulFunctionCall","src":"2353:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2345:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2387:9:25"},{"name":"value0","nodeType":"YulIdentifier","src":"2398:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2380:6:25"},"nodeType":"YulFunctionCall","src":"2380:25:25"},"nodeType":"YulExpressionStatement","src":"2380:25:25"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2304:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2315:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2326:4:25","type":""}],"src":"2234:177:25"},{"body":{"nodeType":"YulBlock","src":"2503:167:25","statements":[{"body":{"nodeType":"YulBlock","src":"2549:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2558:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2561:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2551:6:25"},"nodeType":"YulFunctionCall","src":"2551:12:25"},"nodeType":"YulExpressionStatement","src":"2551:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2524:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"2533:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2520:3:25"},"nodeType":"YulFunctionCall","src":"2520:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"2545:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2516:3:25"},"nodeType":"YulFunctionCall","src":"2516:32:25"},"nodeType":"YulIf","src":"2513:52:25"},{"nodeType":"YulAssignment","src":"2574:33:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2597:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2584:12:25"},"nodeType":"YulFunctionCall","src":"2584:23:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2574:6:25"}]},{"nodeType":"YulAssignment","src":"2616:48:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2649:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"2660:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2645:3:25"},"nodeType":"YulFunctionCall","src":"2645:18:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2626:18:25"},"nodeType":"YulFunctionCall","src":"2626:38:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2616:6:25"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2461:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2472:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2484:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2492:6:25","type":""}],"src":"2416:254:25"},{"body":{"nodeType":"YulBlock","src":"2748:275:25","statements":[{"body":{"nodeType":"YulBlock","src":"2797:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2806:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2809:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2799:6:25"},"nodeType":"YulFunctionCall","src":"2799:12:25"},"nodeType":"YulExpressionStatement","src":"2799:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2776:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"2784:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2772:3:25"},"nodeType":"YulFunctionCall","src":"2772:17:25"},{"name":"end","nodeType":"YulIdentifier","src":"2791:3:25"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2768:3:25"},"nodeType":"YulFunctionCall","src":"2768:27:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2761:6:25"},"nodeType":"YulFunctionCall","src":"2761:35:25"},"nodeType":"YulIf","src":"2758:55:25"},{"nodeType":"YulAssignment","src":"2822:30:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2845:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2832:12:25"},"nodeType":"YulFunctionCall","src":"2832:20:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2822:6:25"}]},{"body":{"nodeType":"YulBlock","src":"2895:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2904:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2907:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2897:6:25"},"nodeType":"YulFunctionCall","src":"2897:12:25"},"nodeType":"YulExpressionStatement","src":"2897:12:25"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2867:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"2875:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2864:2:25"},"nodeType":"YulFunctionCall","src":"2864:30:25"},"nodeType":"YulIf","src":"2861:50:25"},{"nodeType":"YulAssignment","src":"2920:29:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2936:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"2944:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2932:3:25"},"nodeType":"YulFunctionCall","src":"2932:17:25"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"2920:8:25"}]},{"body":{"nodeType":"YulBlock","src":"3001:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3010:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3013:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3003:6:25"},"nodeType":"YulFunctionCall","src":"3003:12:25"},"nodeType":"YulExpressionStatement","src":"3003:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2972:6:25"},{"name":"length","nodeType":"YulIdentifier","src":"2980:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2968:3:25"},"nodeType":"YulFunctionCall","src":"2968:19:25"},{"kind":"number","nodeType":"YulLiteral","src":"2989:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2964:3:25"},"nodeType":"YulFunctionCall","src":"2964:30:25"},{"name":"end","nodeType":"YulIdentifier","src":"2996:3:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2961:2:25"},"nodeType":"YulFunctionCall","src":"2961:39:25"},"nodeType":"YulIf","src":"2958:59:25"}]},"name":"abi_decode_string_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2711:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"2719:3:25","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"2727:8:25","type":""},{"name":"length","nodeType":"YulTypedName","src":"2737:6:25","type":""}],"src":"2675:348:25"},{"body":{"nodeType":"YulBlock","src":"3152:429:25","statements":[{"body":{"nodeType":"YulBlock","src":"3198:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3207:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3210:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3200:6:25"},"nodeType":"YulFunctionCall","src":"3200:12:25"},"nodeType":"YulExpressionStatement","src":"3200:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3173:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"3182:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3169:3:25"},"nodeType":"YulFunctionCall","src":"3169:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"3194:2:25","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3165:3:25"},"nodeType":"YulFunctionCall","src":"3165:32:25"},"nodeType":"YulIf","src":"3162:52:25"},{"nodeType":"YulAssignment","src":"3223:39:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3252:9:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3233:18:25"},"nodeType":"YulFunctionCall","src":"3233:29:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3223:6:25"}]},{"nodeType":"YulAssignment","src":"3271:42:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3298:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"3309:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3294:3:25"},"nodeType":"YulFunctionCall","src":"3294:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3281:12:25"},"nodeType":"YulFunctionCall","src":"3281:32:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3271:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"3322:46:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3353:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"3364:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3349:3:25"},"nodeType":"YulFunctionCall","src":"3349:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3336:12:25"},"nodeType":"YulFunctionCall","src":"3336:32:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3326:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"3411:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3420:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3423:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3413:6:25"},"nodeType":"YulFunctionCall","src":"3413:12:25"},"nodeType":"YulExpressionStatement","src":"3413:12:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3383:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"3391:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3380:2:25"},"nodeType":"YulFunctionCall","src":"3380:30:25"},"nodeType":"YulIf","src":"3377:50:25"},{"nodeType":"YulVariableDeclaration","src":"3436:85:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3493:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"3504:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3489:3:25"},"nodeType":"YulFunctionCall","src":"3489:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3513:7:25"}],"functionName":{"name":"abi_decode_string_calldata","nodeType":"YulIdentifier","src":"3462:26:25"},"nodeType":"YulFunctionCall","src":"3462:59:25"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"3440:8:25","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"3450:8:25","type":""}]},{"nodeType":"YulAssignment","src":"3530:18:25","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"3540:8:25"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3530:6:25"}]},{"nodeType":"YulAssignment","src":"3557:18:25","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"3567:8:25"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3557:6:25"}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_string_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3094:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3105:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3117:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3125:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3133:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3141:6:25","type":""}],"src":"3028:553:25"},{"body":{"nodeType":"YulBlock","src":"3673:161:25","statements":[{"body":{"nodeType":"YulBlock","src":"3719:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3728:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3731:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3721:6:25"},"nodeType":"YulFunctionCall","src":"3721:12:25"},"nodeType":"YulExpressionStatement","src":"3721:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3694:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"3703:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3690:3:25"},"nodeType":"YulFunctionCall","src":"3690:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"3715:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3686:3:25"},"nodeType":"YulFunctionCall","src":"3686:32:25"},"nodeType":"YulIf","src":"3683:52:25"},{"nodeType":"YulAssignment","src":"3744:33:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3767:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3754:12:25"},"nodeType":"YulFunctionCall","src":"3754:23:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3744:6:25"}]},{"nodeType":"YulAssignment","src":"3786:42:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3813:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"3824:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3809:3:25"},"nodeType":"YulFunctionCall","src":"3809:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3796:12:25"},"nodeType":"YulFunctionCall","src":"3796:32:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3786:6:25"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3631:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3642:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3654:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3662:6:25","type":""}],"src":"3586:248:25"},{"body":{"nodeType":"YulBlock","src":"3889:373:25","statements":[{"nodeType":"YulVariableDeclaration","src":"3899:26:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3919:5:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3913:5:25"},"nodeType":"YulFunctionCall","src":"3913:12:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3903:6:25","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3941:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"3946:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3934:6:25"},"nodeType":"YulFunctionCall","src":"3934:19:25"},"nodeType":"YulExpressionStatement","src":"3934:19:25"},{"nodeType":"YulVariableDeclaration","src":"3962:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"3971:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3966:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"4033:110:25","statements":[{"nodeType":"YulVariableDeclaration","src":"4047:14:25","value":{"kind":"number","nodeType":"YulLiteral","src":"4057:4:25","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4051:2:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4089:3:25"},{"name":"i","nodeType":"YulIdentifier","src":"4094:1:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4085:3:25"},"nodeType":"YulFunctionCall","src":"4085:11:25"},{"name":"_1","nodeType":"YulIdentifier","src":"4098:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4081:3:25"},"nodeType":"YulFunctionCall","src":"4081:20:25"},{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4117:5:25"},{"name":"i","nodeType":"YulIdentifier","src":"4124:1:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4113:3:25"},"nodeType":"YulFunctionCall","src":"4113:13:25"},{"name":"_1","nodeType":"YulIdentifier","src":"4128:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4109:3:25"},"nodeType":"YulFunctionCall","src":"4109:22:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4103:5:25"},"nodeType":"YulFunctionCall","src":"4103:29:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4074:6:25"},"nodeType":"YulFunctionCall","src":"4074:59:25"},"nodeType":"YulExpressionStatement","src":"4074:59:25"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3992:1:25"},{"name":"length","nodeType":"YulIdentifier","src":"3995:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3989:2:25"},"nodeType":"YulFunctionCall","src":"3989:13:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4003:21:25","statements":[{"nodeType":"YulAssignment","src":"4005:17:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4014:1:25"},{"kind":"number","nodeType":"YulLiteral","src":"4017:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4010:3:25"},"nodeType":"YulFunctionCall","src":"4010:12:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"4005:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"3985:3:25","statements":[]},"src":"3981:162:25"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4167:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"4172:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4163:3:25"},"nodeType":"YulFunctionCall","src":"4163:16:25"},{"kind":"number","nodeType":"YulLiteral","src":"4181:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4159:3:25"},"nodeType":"YulFunctionCall","src":"4159:27:25"},{"kind":"number","nodeType":"YulLiteral","src":"4188:1:25","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4152:6:25"},"nodeType":"YulFunctionCall","src":"4152:38:25"},"nodeType":"YulExpressionStatement","src":"4152:38:25"},{"nodeType":"YulAssignment","src":"4199:57:25","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4214:3:25"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4227:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"4235:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4223:3:25"},"nodeType":"YulFunctionCall","src":"4223:15:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4244:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4240:3:25"},"nodeType":"YulFunctionCall","src":"4240:7:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4219:3:25"},"nodeType":"YulFunctionCall","src":"4219:29:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4210:3:25"},"nodeType":"YulFunctionCall","src":"4210:39:25"},{"kind":"number","nodeType":"YulLiteral","src":"4251:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4206:3:25"},"nodeType":"YulFunctionCall","src":"4206:50:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4199:3:25"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3866:5:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3873:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3881:3:25","type":""}],"src":"3839:423:25"},{"body":{"nodeType":"YulBlock","src":"4334:695:25","statements":[{"nodeType":"YulVariableDeclaration","src":"4344:29:25","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4362:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"4367:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4358:3:25"},"nodeType":"YulFunctionCall","src":"4358:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"4371:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4354:3:25"},"nodeType":"YulFunctionCall","src":"4354:19:25"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4348:2:25","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4389:3:25"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4404:5:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4398:5:25"},"nodeType":"YulFunctionCall","src":"4398:12:25"},{"name":"_1","nodeType":"YulIdentifier","src":"4412:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4394:3:25"},"nodeType":"YulFunctionCall","src":"4394:21:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4382:6:25"},"nodeType":"YulFunctionCall","src":"4382:34:25"},"nodeType":"YulExpressionStatement","src":"4382:34:25"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4436:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"4441:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4432:3:25"},"nodeType":"YulFunctionCall","src":"4432:14:25"},{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4462:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"4469:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4458:3:25"},"nodeType":"YulFunctionCall","src":"4458:16:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4452:5:25"},"nodeType":"YulFunctionCall","src":"4452:23:25"},{"name":"_1","nodeType":"YulIdentifier","src":"4477:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4448:3:25"},"nodeType":"YulFunctionCall","src":"4448:32:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4425:6:25"},"nodeType":"YulFunctionCall","src":"4425:56:25"},"nodeType":"YulExpressionStatement","src":"4425:56:25"},{"nodeType":"YulVariableDeclaration","src":"4490:43:25","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4520:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"4527:4:25","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4516:3:25"},"nodeType":"YulFunctionCall","src":"4516:16:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4510:5:25"},"nodeType":"YulFunctionCall","src":"4510:23:25"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"4494:12:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4553:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"4558:4:25","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4549:3:25"},"nodeType":"YulFunctionCall","src":"4549:14:25"},{"kind":"number","nodeType":"YulLiteral","src":"4565:4:25","type":"","value":"0xe0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4542:6:25"},"nodeType":"YulFunctionCall","src":"4542:28:25"},"nodeType":"YulExpressionStatement","src":"4542:28:25"},{"nodeType":"YulVariableDeclaration","src":"4579:59:25","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"4609:12:25"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4627:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"4632:4:25","type":"","value":"0xe0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4623:3:25"},"nodeType":"YulFunctionCall","src":"4623:14:25"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"4591:17:25"},"nodeType":"YulFunctionCall","src":"4591:47:25"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"4583:4:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4647:45:25","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4679:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"4686:4:25","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4675:3:25"},"nodeType":"YulFunctionCall","src":"4675:16:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4669:5:25"},"nodeType":"YulFunctionCall","src":"4669:23:25"},"variables":[{"name":"memberValue0_1","nodeType":"YulTypedName","src":"4651:14:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4712:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"4717:4:25","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4708:3:25"},"nodeType":"YulFunctionCall","src":"4708:14:25"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"4728:4:25"},{"name":"pos","nodeType":"YulIdentifier","src":"4734:3:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4724:3:25"},"nodeType":"YulFunctionCall","src":"4724:14:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4701:6:25"},"nodeType":"YulFunctionCall","src":"4701:38:25"},"nodeType":"YulExpressionStatement","src":"4701:38:25"},{"nodeType":"YulVariableDeclaration","src":"4748:53:25","value":{"arguments":[{"name":"memberValue0_1","nodeType":"YulIdentifier","src":"4780:14:25"},{"name":"tail","nodeType":"YulIdentifier","src":"4796:4:25"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"4762:17:25"},"nodeType":"YulFunctionCall","src":"4762:39:25"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"4752:6:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4821:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"4826:4:25","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4817:3:25"},"nodeType":"YulFunctionCall","src":"4817:14:25"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4843:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"4850:4:25","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4839:3:25"},"nodeType":"YulFunctionCall","src":"4839:16:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4833:5:25"},"nodeType":"YulFunctionCall","src":"4833:23:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4810:6:25"},"nodeType":"YulFunctionCall","src":"4810:47:25"},"nodeType":"YulExpressionStatement","src":"4810:47:25"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4877:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"4882:4:25","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4873:3:25"},"nodeType":"YulFunctionCall","src":"4873:14:25"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4913:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"4920:4:25","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4909:3:25"},"nodeType":"YulFunctionCall","src":"4909:16:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4903:5:25"},"nodeType":"YulFunctionCall","src":"4903:23:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4896:6:25"},"nodeType":"YulFunctionCall","src":"4896:31:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4889:6:25"},"nodeType":"YulFunctionCall","src":"4889:39:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4866:6:25"},"nodeType":"YulFunctionCall","src":"4866:63:25"},"nodeType":"YulExpressionStatement","src":"4866:63:25"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4949:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"4954:4:25","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4945:3:25"},"nodeType":"YulFunctionCall","src":"4945:14:25"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4985:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"4992:4:25","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4981:3:25"},"nodeType":"YulFunctionCall","src":"4981:16:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4975:5:25"},"nodeType":"YulFunctionCall","src":"4975:23:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4968:6:25"},"nodeType":"YulFunctionCall","src":"4968:31:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4961:6:25"},"nodeType":"YulFunctionCall","src":"4961:39:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4938:6:25"},"nodeType":"YulFunctionCall","src":"4938:63:25"},"nodeType":"YulExpressionStatement","src":"4938:63:25"},{"nodeType":"YulAssignment","src":"5010:13:25","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"5017:6:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5010:3:25"}]}]},"name":"abi_encode_struct_InspectionReport","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4311:5:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4318:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4326:3:25","type":""}],"src":"4267:762:25"},{"body":{"nodeType":"YulBlock","src":"5255:1390:25","statements":[{"nodeType":"YulVariableDeclaration","src":"5265:12:25","value":{"kind":"number","nodeType":"YulLiteral","src":"5275:2:25","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5269:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5286:32:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5304:9:25"},{"name":"_1","nodeType":"YulIdentifier","src":"5315:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5300:3:25"},"nodeType":"YulFunctionCall","src":"5300:18:25"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"5290:6:25","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5334:9:25"},{"name":"_1","nodeType":"YulIdentifier","src":"5345:2:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5327:6:25"},"nodeType":"YulFunctionCall","src":"5327:21:25"},"nodeType":"YulExpressionStatement","src":"5327:21:25"},{"nodeType":"YulVariableDeclaration","src":"5357:17:25","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"5368:6:25"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"5361:3:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5383:27:25","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5403:6:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5397:5:25"},"nodeType":"YulFunctionCall","src":"5397:13:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5387:6:25","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"5426:6:25"},{"name":"length","nodeType":"YulIdentifier","src":"5434:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5419:6:25"},"nodeType":"YulFunctionCall","src":"5419:22:25"},"nodeType":"YulExpressionStatement","src":"5419:22:25"},{"nodeType":"YulVariableDeclaration","src":"5450:12:25","value":{"kind":"number","nodeType":"YulLiteral","src":"5460:2:25","type":"","value":"64"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"5454:2:25","type":""}]},{"nodeType":"YulAssignment","src":"5471:25:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5482:9:25"},{"name":"_2","nodeType":"YulIdentifier","src":"5493:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5478:3:25"},"nodeType":"YulFunctionCall","src":"5478:18:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5471:3:25"}]},{"nodeType":"YulVariableDeclaration","src":"5505:53:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5527:9:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5542:1:25","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"5545:6:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5538:3:25"},"nodeType":"YulFunctionCall","src":"5538:14:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5523:3:25"},"nodeType":"YulFunctionCall","src":"5523:30:25"},{"name":"_2","nodeType":"YulIdentifier","src":"5555:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5519:3:25"},"nodeType":"YulFunctionCall","src":"5519:39:25"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"5509:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5567:29:25","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5585:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"5593:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5581:3:25"},"nodeType":"YulFunctionCall","src":"5581:15:25"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"5571:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5605:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"5614:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"5609:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"5673:943:25","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5694:3:25"},{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"5707:6:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"5715:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5703:3:25"},"nodeType":"YulFunctionCall","src":"5703:22:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5731:2:25","type":"","value":"63"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5727:3:25"},"nodeType":"YulFunctionCall","src":"5727:7:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5699:3:25"},"nodeType":"YulFunctionCall","src":"5699:36:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5687:6:25"},"nodeType":"YulFunctionCall","src":"5687:49:25"},"nodeType":"YulExpressionStatement","src":"5687:49:25"},{"nodeType":"YulVariableDeclaration","src":"5749:23:25","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"5765:6:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5759:5:25"},"nodeType":"YulFunctionCall","src":"5759:13:25"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"5753:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5785:14:25","value":{"kind":"number","nodeType":"YulLiteral","src":"5795:4:25","type":"","value":"0xc0"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"5789:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5812:29:25","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5830:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"5835:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5826:3:25"},"nodeType":"YulFunctionCall","src":"5826:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"5839:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5822:3:25"},"nodeType":"YulFunctionCall","src":"5822:19:25"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"5816:2:25","type":""}]},{"expression":{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"5861:6:25"},{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"5879:2:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5873:5:25"},"nodeType":"YulFunctionCall","src":"5873:9:25"},{"name":"_5","nodeType":"YulIdentifier","src":"5884:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5869:3:25"},"nodeType":"YulFunctionCall","src":"5869:18:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5854:6:25"},"nodeType":"YulFunctionCall","src":"5854:34:25"},"nodeType":"YulExpressionStatement","src":"5854:34:25"},{"expression":{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"5912:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"5920:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5908:3:25"},"nodeType":"YulFunctionCall","src":"5908:15:25"},{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"5935:2:25"},{"name":"_1","nodeType":"YulIdentifier","src":"5939:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5931:3:25"},"nodeType":"YulFunctionCall","src":"5931:11:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5925:5:25"},"nodeType":"YulFunctionCall","src":"5925:18:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5901:6:25"},"nodeType":"YulFunctionCall","src":"5901:43:25"},"nodeType":"YulExpressionStatement","src":"5901:43:25"},{"nodeType":"YulVariableDeclaration","src":"5957:38:25","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"5987:2:25"},{"name":"_2","nodeType":"YulIdentifier","src":"5991:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5983:3:25"},"nodeType":"YulFunctionCall","src":"5983:11:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5977:5:25"},"nodeType":"YulFunctionCall","src":"5977:18:25"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"5961:12:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"6019:6:25"},{"name":"_2","nodeType":"YulIdentifier","src":"6027:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6015:3:25"},"nodeType":"YulFunctionCall","src":"6015:15:25"},{"name":"_4","nodeType":"YulIdentifier","src":"6032:2:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6008:6:25"},"nodeType":"YulFunctionCall","src":"6008:27:25"},"nodeType":"YulExpressionStatement","src":"6008:27:25"},{"nodeType":"YulVariableDeclaration","src":"6048:79:25","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"6097:12:25"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"6115:6:25"},{"name":"_4","nodeType":"YulIdentifier","src":"6123:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6111:3:25"},"nodeType":"YulFunctionCall","src":"6111:15:25"}],"functionName":{"name":"abi_encode_struct_InspectionReport","nodeType":"YulIdentifier","src":"6062:34:25"},"nodeType":"YulFunctionCall","src":"6062:65:25"},"variables":[{"name":"tail_3","nodeType":"YulTypedName","src":"6052:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6140:14:25","value":{"kind":"number","nodeType":"YulLiteral","src":"6150:4:25","type":"","value":"0x60"},"variables":[{"name":"_6","nodeType":"YulTypedName","src":"6144:2:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"6178:6:25"},{"name":"_6","nodeType":"YulIdentifier","src":"6186:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6174:3:25"},"nodeType":"YulFunctionCall","src":"6174:15:25"},{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"6205:2:25"},{"name":"_6","nodeType":"YulIdentifier","src":"6209:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6201:3:25"},"nodeType":"YulFunctionCall","src":"6201:11:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6195:5:25"},"nodeType":"YulFunctionCall","src":"6195:18:25"},{"name":"_5","nodeType":"YulIdentifier","src":"6215:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6191:3:25"},"nodeType":"YulFunctionCall","src":"6191:27:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6167:6:25"},"nodeType":"YulFunctionCall","src":"6167:52:25"},"nodeType":"YulExpressionStatement","src":"6167:52:25"},{"nodeType":"YulVariableDeclaration","src":"6232:14:25","value":{"kind":"number","nodeType":"YulLiteral","src":"6242:4:25","type":"","value":"0x80"},"variables":[{"name":"_7","nodeType":"YulTypedName","src":"6236:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6259:40:25","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"6291:2:25"},{"name":"_7","nodeType":"YulIdentifier","src":"6295:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6287:3:25"},"nodeType":"YulFunctionCall","src":"6287:11:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6281:5:25"},"nodeType":"YulFunctionCall","src":"6281:18:25"},"variables":[{"name":"memberValue0_1","nodeType":"YulTypedName","src":"6263:14:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"6323:6:25"},{"name":"_7","nodeType":"YulIdentifier","src":"6331:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6319:3:25"},"nodeType":"YulFunctionCall","src":"6319:15:25"},{"arguments":[{"name":"tail_3","nodeType":"YulIdentifier","src":"6340:6:25"},{"name":"tail_2","nodeType":"YulIdentifier","src":"6348:6:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6336:3:25"},"nodeType":"YulFunctionCall","src":"6336:19:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6312:6:25"},"nodeType":"YulFunctionCall","src":"6312:44:25"},"nodeType":"YulExpressionStatement","src":"6312:44:25"},{"nodeType":"YulVariableDeclaration","src":"6369:55:25","value":{"arguments":[{"name":"memberValue0_1","nodeType":"YulIdentifier","src":"6401:14:25"},{"name":"tail_3","nodeType":"YulIdentifier","src":"6417:6:25"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"6383:17:25"},"nodeType":"YulFunctionCall","src":"6383:41:25"},"variables":[{"name":"tail_4","nodeType":"YulTypedName","src":"6373:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6437:14:25","value":{"kind":"number","nodeType":"YulLiteral","src":"6447:4:25","type":"","value":"0xa0"},"variables":[{"name":"_8","nodeType":"YulTypedName","src":"6441:2:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"6475:6:25"},{"name":"_8","nodeType":"YulIdentifier","src":"6483:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6471:3:25"},"nodeType":"YulFunctionCall","src":"6471:15:25"},{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"6498:2:25"},{"name":"_8","nodeType":"YulIdentifier","src":"6502:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6494:3:25"},"nodeType":"YulFunctionCall","src":"6494:11:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6488:5:25"},"nodeType":"YulFunctionCall","src":"6488:18:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6464:6:25"},"nodeType":"YulFunctionCall","src":"6464:43:25"},"nodeType":"YulExpressionStatement","src":"6464:43:25"},{"nodeType":"YulAssignment","src":"6520:16:25","value":{"name":"tail_4","nodeType":"YulIdentifier","src":"6530:6:25"},"variableNames":[{"name":"tail_2","nodeType":"YulIdentifier","src":"6520:6:25"}]},{"nodeType":"YulAssignment","src":"6549:25:25","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6563:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"6571:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6559:3:25"},"nodeType":"YulFunctionCall","src":"6559:15:25"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6549:6:25"}]},{"nodeType":"YulAssignment","src":"6587:19:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6598:3:25"},{"name":"_1","nodeType":"YulIdentifier","src":"6603:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6594:3:25"},"nodeType":"YulFunctionCall","src":"6594:12:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6587:3:25"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5635:1:25"},{"name":"length","nodeType":"YulIdentifier","src":"5638:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5632:2:25"},"nodeType":"YulFunctionCall","src":"5632:13:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5646:18:25","statements":[{"nodeType":"YulAssignment","src":"5648:14:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5657:1:25"},{"kind":"number","nodeType":"YulLiteral","src":"5660:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5653:3:25"},"nodeType":"YulFunctionCall","src":"5653:9:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"5648:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"5628:3:25","statements":[]},"src":"5624:992:25"},{"nodeType":"YulAssignment","src":"6625:14:25","value":{"name":"tail_2","nodeType":"YulIdentifier","src":"6633:6:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6625:4:25"}]}]},"name":"abi_encode_tuple_t_array$_t_struct$_FlaggedInspection_$5348_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_FlaggedInspection_$5348_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5224:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5235:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5246:4:25","type":""}],"src":"5034:1611:25"},{"body":{"nodeType":"YulBlock","src":"6754:224:25","statements":[{"body":{"nodeType":"YulBlock","src":"6800:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6809:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6812:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6802:6:25"},"nodeType":"YulFunctionCall","src":"6802:12:25"},"nodeType":"YulExpressionStatement","src":"6802:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6775:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"6784:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6771:3:25"},"nodeType":"YulFunctionCall","src":"6771:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"6796:2:25","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6767:3:25"},"nodeType":"YulFunctionCall","src":"6767:32:25"},"nodeType":"YulIf","src":"6764:52:25"},{"nodeType":"YulAssignment","src":"6825:33:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6848:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6835:12:25"},"nodeType":"YulFunctionCall","src":"6835:23:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6825:6:25"}]},{"nodeType":"YulAssignment","src":"6867:48:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6900:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"6911:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6896:3:25"},"nodeType":"YulFunctionCall","src":"6896:18:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"6877:18:25"},"nodeType":"YulFunctionCall","src":"6877:38:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6867:6:25"}]},{"nodeType":"YulAssignment","src":"6924:48:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6957:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"6968:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6953:3:25"},"nodeType":"YulFunctionCall","src":"6953:18:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"6934:18:25"},"nodeType":"YulFunctionCall","src":"6934:38:25"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"6924:6:25"}]}]},"name":"abi_decode_tuple_t_bytes32t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6704:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6715:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6727:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6735:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6743:6:25","type":""}],"src":"6650:328:25"},{"body":{"nodeType":"YulBlock","src":"7067:283:25","statements":[{"body":{"nodeType":"YulBlock","src":"7116:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7125:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7128:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7118:6:25"},"nodeType":"YulFunctionCall","src":"7118:12:25"},"nodeType":"YulExpressionStatement","src":"7118:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7095:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"7103:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7091:3:25"},"nodeType":"YulFunctionCall","src":"7091:17:25"},{"name":"end","nodeType":"YulIdentifier","src":"7110:3:25"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7087:3:25"},"nodeType":"YulFunctionCall","src":"7087:27:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7080:6:25"},"nodeType":"YulFunctionCall","src":"7080:35:25"},"nodeType":"YulIf","src":"7077:55:25"},{"nodeType":"YulAssignment","src":"7141:30:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7164:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7151:12:25"},"nodeType":"YulFunctionCall","src":"7151:20:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"7141:6:25"}]},{"body":{"nodeType":"YulBlock","src":"7214:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7223:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7226:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7216:6:25"},"nodeType":"YulFunctionCall","src":"7216:12:25"},"nodeType":"YulExpressionStatement","src":"7216:12:25"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7186:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"7194:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7183:2:25"},"nodeType":"YulFunctionCall","src":"7183:30:25"},"nodeType":"YulIf","src":"7180:50:25"},{"nodeType":"YulAssignment","src":"7239:29:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7255:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"7263:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7251:3:25"},"nodeType":"YulFunctionCall","src":"7251:17:25"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"7239:8:25"}]},{"body":{"nodeType":"YulBlock","src":"7328:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7337:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7340:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7330:6:25"},"nodeType":"YulFunctionCall","src":"7330:12:25"},"nodeType":"YulExpressionStatement","src":"7330:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7291:6:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7303:1:25","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"7306:6:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7299:3:25"},"nodeType":"YulFunctionCall","src":"7299:14:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7287:3:25"},"nodeType":"YulFunctionCall","src":"7287:27:25"},{"kind":"number","nodeType":"YulLiteral","src":"7316:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7283:3:25"},"nodeType":"YulFunctionCall","src":"7283:38:25"},{"name":"end","nodeType":"YulIdentifier","src":"7323:3:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7280:2:25"},"nodeType":"YulFunctionCall","src":"7280:47:25"},"nodeType":"YulIf","src":"7277:67:25"}]},"name":"abi_decode_array_bytes32_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"7030:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"7038:3:25","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"7046:8:25","type":""},{"name":"length","nodeType":"YulTypedName","src":"7056:6:25","type":""}],"src":"6983:367:25"},{"body":{"nodeType":"YulBlock","src":"7512:616:25","statements":[{"body":{"nodeType":"YulBlock","src":"7558:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7567:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7570:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7560:6:25"},"nodeType":"YulFunctionCall","src":"7560:12:25"},"nodeType":"YulExpressionStatement","src":"7560:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7533:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"7542:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7529:3:25"},"nodeType":"YulFunctionCall","src":"7529:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"7554:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7525:3:25"},"nodeType":"YulFunctionCall","src":"7525:32:25"},"nodeType":"YulIf","src":"7522:52:25"},{"nodeType":"YulVariableDeclaration","src":"7583:37:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7610:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7597:12:25"},"nodeType":"YulFunctionCall","src":"7597:23:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7587:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7629:28:25","value":{"kind":"number","nodeType":"YulLiteral","src":"7639:18:25","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7633:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"7684:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7693:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7696:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7686:6:25"},"nodeType":"YulFunctionCall","src":"7686:12:25"},"nodeType":"YulExpressionStatement","src":"7686:12:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7672:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"7680:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7669:2:25"},"nodeType":"YulFunctionCall","src":"7669:14:25"},"nodeType":"YulIf","src":"7666:34:25"},{"nodeType":"YulVariableDeclaration","src":"7709:96:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7777:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"7788:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7773:3:25"},"nodeType":"YulFunctionCall","src":"7773:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7797:7:25"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nodeType":"YulIdentifier","src":"7735:37:25"},"nodeType":"YulFunctionCall","src":"7735:70:25"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"7713:8:25","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"7723:8:25","type":""}]},{"nodeType":"YulAssignment","src":"7814:18:25","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"7824:8:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7814:6:25"}]},{"nodeType":"YulAssignment","src":"7841:18:25","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"7851:8:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7841:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"7868:48:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7901:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"7912:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7897:3:25"},"nodeType":"YulFunctionCall","src":"7897:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7884:12:25"},"nodeType":"YulFunctionCall","src":"7884:32:25"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"7872:8:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"7945:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7954:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7957:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7947:6:25"},"nodeType":"YulFunctionCall","src":"7947:12:25"},"nodeType":"YulExpressionStatement","src":"7947:12:25"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"7931:8:25"},{"name":"_1","nodeType":"YulIdentifier","src":"7941:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7928:2:25"},"nodeType":"YulFunctionCall","src":"7928:16:25"},"nodeType":"YulIf","src":"7925:36:25"},{"nodeType":"YulVariableDeclaration","src":"7970:98:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8038:9:25"},{"name":"offset_1","nodeType":"YulIdentifier","src":"8049:8:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8034:3:25"},"nodeType":"YulFunctionCall","src":"8034:24:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8060:7:25"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nodeType":"YulIdentifier","src":"7996:37:25"},"nodeType":"YulFunctionCall","src":"7996:72:25"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"7974:8:25","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"7984:8:25","type":""}]},{"nodeType":"YulAssignment","src":"8077:18:25","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"8087:8:25"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"8077:6:25"}]},{"nodeType":"YulAssignment","src":"8104:18:25","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"8114:8:25"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"8104:6:25"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_array$_t_address_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7454:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7465:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7477:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7485:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7493:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7501:6:25","type":""}],"src":"7355:773:25"},{"body":{"nodeType":"YulBlock","src":"8203:110:25","statements":[{"body":{"nodeType":"YulBlock","src":"8249:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8258:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8261:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8251:6:25"},"nodeType":"YulFunctionCall","src":"8251:12:25"},"nodeType":"YulExpressionStatement","src":"8251:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8224:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"8233:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8220:3:25"},"nodeType":"YulFunctionCall","src":"8220:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"8245:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8216:3:25"},"nodeType":"YulFunctionCall","src":"8216:32:25"},"nodeType":"YulIf","src":"8213:52:25"},{"nodeType":"YulAssignment","src":"8274:33:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8297:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8284:12:25"},"nodeType":"YulFunctionCall","src":"8284:23:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8274:6:25"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8169:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8180:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8192:6:25","type":""}],"src":"8133:180:25"},{"body":{"nodeType":"YulBlock","src":"8450:102:25","statements":[{"nodeType":"YulAssignment","src":"8460:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8472:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8483:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8468:3:25"},"nodeType":"YulFunctionCall","src":"8468:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8460:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8502:9:25"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8517:6:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8533:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"8538:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8529:3:25"},"nodeType":"YulFunctionCall","src":"8529:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"8542:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8525:3:25"},"nodeType":"YulFunctionCall","src":"8525:19:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8513:3:25"},"nodeType":"YulFunctionCall","src":"8513:32:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8495:6:25"},"nodeType":"YulFunctionCall","src":"8495:51:25"},"nodeType":"YulExpressionStatement","src":"8495:51:25"}]},"name":"abi_encode_tuple_t_contract$_CertificationAuthority_$3819__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8419:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8430:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8441:4:25","type":""}],"src":"8318:234:25"},{"body":{"nodeType":"YulBlock","src":"8776:649:25","statements":[{"nodeType":"YulVariableDeclaration","src":"8786:12:25","value":{"kind":"number","nodeType":"YulLiteral","src":"8796:2:25","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"8790:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8807:32:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8825:9:25"},{"name":"_1","nodeType":"YulIdentifier","src":"8836:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8821:3:25"},"nodeType":"YulFunctionCall","src":"8821:18:25"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"8811:6:25","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8855:9:25"},{"name":"_1","nodeType":"YulIdentifier","src":"8866:2:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8848:6:25"},"nodeType":"YulFunctionCall","src":"8848:21:25"},"nodeType":"YulExpressionStatement","src":"8848:21:25"},{"nodeType":"YulVariableDeclaration","src":"8878:17:25","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"8889:6:25"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"8882:3:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8904:27:25","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8924:6:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8918:5:25"},"nodeType":"YulFunctionCall","src":"8918:13:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8908:6:25","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"8947:6:25"},{"name":"length","nodeType":"YulIdentifier","src":"8955:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8940:6:25"},"nodeType":"YulFunctionCall","src":"8940:22:25"},"nodeType":"YulExpressionStatement","src":"8940:22:25"},{"nodeType":"YulAssignment","src":"8971:25:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8982:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8993:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8978:3:25"},"nodeType":"YulFunctionCall","src":"8978:18:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8971:3:25"}]},{"nodeType":"YulVariableDeclaration","src":"9005:53:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9027:9:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9042:1:25","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"9045:6:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9038:3:25"},"nodeType":"YulFunctionCall","src":"9038:14:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9023:3:25"},"nodeType":"YulFunctionCall","src":"9023:30:25"},{"kind":"number","nodeType":"YulLiteral","src":"9055:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9019:3:25"},"nodeType":"YulFunctionCall","src":"9019:39:25"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"9009:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9067:29:25","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9085:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"9093:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9081:3:25"},"nodeType":"YulFunctionCall","src":"9081:15:25"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"9071:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9105:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"9114:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"9109:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"9173:223:25","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9194:3:25"},{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"9207:6:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"9215:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9203:3:25"},"nodeType":"YulFunctionCall","src":"9203:22:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9231:2:25","type":"","value":"63"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"9227:3:25"},"nodeType":"YulFunctionCall","src":"9227:7:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9199:3:25"},"nodeType":"YulFunctionCall","src":"9199:36:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9187:6:25"},"nodeType":"YulFunctionCall","src":"9187:49:25"},"nodeType":"YulExpressionStatement","src":"9187:49:25"},{"nodeType":"YulAssignment","src":"9249:67:25","value":{"arguments":[{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"9300:6:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9294:5:25"},"nodeType":"YulFunctionCall","src":"9294:13:25"},{"name":"tail_2","nodeType":"YulIdentifier","src":"9309:6:25"}],"functionName":{"name":"abi_encode_struct_InspectionReport","nodeType":"YulIdentifier","src":"9259:34:25"},"nodeType":"YulFunctionCall","src":"9259:57:25"},"variableNames":[{"name":"tail_2","nodeType":"YulIdentifier","src":"9249:6:25"}]},{"nodeType":"YulAssignment","src":"9329:25:25","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"9343:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"9351:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9339:3:25"},"nodeType":"YulFunctionCall","src":"9339:15:25"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"9329:6:25"}]},{"nodeType":"YulAssignment","src":"9367:19:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9378:3:25"},{"name":"_1","nodeType":"YulIdentifier","src":"9383:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9374:3:25"},"nodeType":"YulFunctionCall","src":"9374:12:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9367:3:25"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"9135:1:25"},{"name":"length","nodeType":"YulIdentifier","src":"9138:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9132:2:25"},"nodeType":"YulFunctionCall","src":"9132:13:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"9146:18:25","statements":[{"nodeType":"YulAssignment","src":"9148:14:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"9157:1:25"},{"kind":"number","nodeType":"YulLiteral","src":"9160:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9153:3:25"},"nodeType":"YulFunctionCall","src":"9153:9:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"9148:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"9128:3:25","statements":[]},"src":"9124:272:25"},{"nodeType":"YulAssignment","src":"9405:14:25","value":{"name":"tail_2","nodeType":"YulIdentifier","src":"9413:6:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9405:4:25"}]}]},"name":"abi_encode_tuple_t_array$_t_struct$_InspectionReport_$5334_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_InspectionReport_$5334_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8745:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8756:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8767:4:25","type":""}],"src":"8557:868:25"},{"body":{"nodeType":"YulBlock","src":"9552:102:25","statements":[{"nodeType":"YulAssignment","src":"9562:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9574:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9585:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9570:3:25"},"nodeType":"YulFunctionCall","src":"9570:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9562:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9604:9:25"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9619:6:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9635:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"9640:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9631:3:25"},"nodeType":"YulFunctionCall","src":"9631:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"9644:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9627:3:25"},"nodeType":"YulFunctionCall","src":"9627:19:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9615:3:25"},"nodeType":"YulFunctionCall","src":"9615:32:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9597:6:25"},"nodeType":"YulFunctionCall","src":"9597:51:25"},"nodeType":"YulExpressionStatement","src":"9597:51:25"}]},"name":"abi_encode_tuple_t_contract$_RolesManager_$4561__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9521:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9532:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9543:4:25","type":""}],"src":"9430:224:25"},{"body":{"nodeType":"YulBlock","src":"9886:450:25","statements":[{"nodeType":"YulAssignment","src":"9896:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9908:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9919:3:25","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9904:3:25"},"nodeType":"YulFunctionCall","src":"9904:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9896:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9939:9:25"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9964:6:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9957:6:25"},"nodeType":"YulFunctionCall","src":"9957:14:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9950:6:25"},"nodeType":"YulFunctionCall","src":"9950:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9932:6:25"},"nodeType":"YulFunctionCall","src":"9932:41:25"},"nodeType":"YulExpressionStatement","src":"9932:41:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9993:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"10004:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9989:3:25"},"nodeType":"YulFunctionCall","src":"9989:18:25"},{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10023:6:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10016:6:25"},"nodeType":"YulFunctionCall","src":"10016:14:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10009:6:25"},"nodeType":"YulFunctionCall","src":"10009:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9982:6:25"},"nodeType":"YulFunctionCall","src":"9982:50:25"},"nodeType":"YulExpressionStatement","src":"9982:50:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10052:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"10063:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10048:3:25"},"nodeType":"YulFunctionCall","src":"10048:18:25"},{"arguments":[{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"10082:6:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10075:6:25"},"nodeType":"YulFunctionCall","src":"10075:14:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10068:6:25"},"nodeType":"YulFunctionCall","src":"10068:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10041:6:25"},"nodeType":"YulFunctionCall","src":"10041:50:25"},"nodeType":"YulExpressionStatement","src":"10041:50:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10111:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"10122:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10107:3:25"},"nodeType":"YulFunctionCall","src":"10107:18:25"},{"arguments":[{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"10141:6:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10134:6:25"},"nodeType":"YulFunctionCall","src":"10134:14:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10127:6:25"},"nodeType":"YulFunctionCall","src":"10127:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10100:6:25"},"nodeType":"YulFunctionCall","src":"10100:50:25"},"nodeType":"YulExpressionStatement","src":"10100:50:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10170:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"10181:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10166:3:25"},"nodeType":"YulFunctionCall","src":"10166:19:25"},{"arguments":[{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"10201:6:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10194:6:25"},"nodeType":"YulFunctionCall","src":"10194:14:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10187:6:25"},"nodeType":"YulFunctionCall","src":"10187:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10159:6:25"},"nodeType":"YulFunctionCall","src":"10159:51:25"},"nodeType":"YulExpressionStatement","src":"10159:51:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10230:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"10241:3:25","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10226:3:25"},"nodeType":"YulFunctionCall","src":"10226:19:25"},{"arguments":[{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"10261:6:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10254:6:25"},"nodeType":"YulFunctionCall","src":"10254:14:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10247:6:25"},"nodeType":"YulFunctionCall","src":"10247:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10219:6:25"},"nodeType":"YulFunctionCall","src":"10219:51:25"},"nodeType":"YulExpressionStatement","src":"10219:51:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10290:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"10301:3:25","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10286:3:25"},"nodeType":"YulFunctionCall","src":"10286:19:25"},{"arguments":[{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"10321:6:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10314:6:25"},"nodeType":"YulFunctionCall","src":"10314:14:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10307:6:25"},"nodeType":"YulFunctionCall","src":"10307:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10279:6:25"},"nodeType":"YulFunctionCall","src":"10279:51:25"},"nodeType":"YulExpressionStatement","src":"10279:51:25"}]},"name":"abi_encode_tuple_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool__to_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9807:9:25","type":""},{"name":"value6","nodeType":"YulTypedName","src":"9818:6:25","type":""},{"name":"value5","nodeType":"YulTypedName","src":"9826:6:25","type":""},{"name":"value4","nodeType":"YulTypedName","src":"9834:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9842:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9850:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9858:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9866:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9877:4:25","type":""}],"src":"9659:677:25"},{"body":{"nodeType":"YulBlock","src":"10383:76:25","statements":[{"body":{"nodeType":"YulBlock","src":"10437:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10446:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10449:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10439:6:25"},"nodeType":"YulFunctionCall","src":"10439:12:25"},"nodeType":"YulExpressionStatement","src":"10439:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10406:5:25"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10427:5:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10420:6:25"},"nodeType":"YulFunctionCall","src":"10420:13:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10413:6:25"},"nodeType":"YulFunctionCall","src":"10413:21:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10403:2:25"},"nodeType":"YulFunctionCall","src":"10403:32:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10396:6:25"},"nodeType":"YulFunctionCall","src":"10396:40:25"},"nodeType":"YulIf","src":"10393:60:25"}]},"name":"validator_revert_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10372:5:25","type":""}],"src":"10341:118:25"},{"body":{"nodeType":"YulBlock","src":"10622:767:25","statements":[{"body":{"nodeType":"YulBlock","src":"10669:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10678:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10681:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10671:6:25"},"nodeType":"YulFunctionCall","src":"10671:12:25"},"nodeType":"YulExpressionStatement","src":"10671:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10643:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"10652:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10639:3:25"},"nodeType":"YulFunctionCall","src":"10639:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"10664:3:25","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10635:3:25"},"nodeType":"YulFunctionCall","src":"10635:33:25"},"nodeType":"YulIf","src":"10632:53:25"},{"nodeType":"YulAssignment","src":"10694:39:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10723:9:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"10704:18:25"},"nodeType":"YulFunctionCall","src":"10704:29:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10694:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"10742:45:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10772:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"10783:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10768:3:25"},"nodeType":"YulFunctionCall","src":"10768:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10755:12:25"},"nodeType":"YulFunctionCall","src":"10755:32:25"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"10746:5:25","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10818:5:25"}],"functionName":{"name":"validator_revert_bool","nodeType":"YulIdentifier","src":"10796:21:25"},"nodeType":"YulFunctionCall","src":"10796:28:25"},"nodeType":"YulExpressionStatement","src":"10796:28:25"},{"nodeType":"YulAssignment","src":"10833:15:25","value":{"name":"value","nodeType":"YulIdentifier","src":"10843:5:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10833:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"10857:46:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10888:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"10899:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10884:3:25"},"nodeType":"YulFunctionCall","src":"10884:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10871:12:25"},"nodeType":"YulFunctionCall","src":"10871:32:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10861:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10912:28:25","value":{"kind":"number","nodeType":"YulLiteral","src":"10922:18:25","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"10916:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"10967:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10976:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10979:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10969:6:25"},"nodeType":"YulFunctionCall","src":"10969:12:25"},"nodeType":"YulExpressionStatement","src":"10969:12:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10955:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"10963:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10952:2:25"},"nodeType":"YulFunctionCall","src":"10952:14:25"},"nodeType":"YulIf","src":"10949:34:25"},{"nodeType":"YulVariableDeclaration","src":"10992:85:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11049:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"11060:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11045:3:25"},"nodeType":"YulFunctionCall","src":"11045:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11069:7:25"}],"functionName":{"name":"abi_decode_string_calldata","nodeType":"YulIdentifier","src":"11018:26:25"},"nodeType":"YulFunctionCall","src":"11018:59:25"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"10996:8:25","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"11006:8:25","type":""}]},{"nodeType":"YulAssignment","src":"11086:18:25","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"11096:8:25"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"11086:6:25"}]},{"nodeType":"YulAssignment","src":"11113:18:25","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"11123:8:25"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"11113:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"11140:48:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11173:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"11184:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11169:3:25"},"nodeType":"YulFunctionCall","src":"11169:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11156:12:25"},"nodeType":"YulFunctionCall","src":"11156:32:25"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"11144:8:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"11217:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11226:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11229:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11219:6:25"},"nodeType":"YulFunctionCall","src":"11219:12:25"},"nodeType":"YulExpressionStatement","src":"11219:12:25"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"11203:8:25"},{"name":"_1","nodeType":"YulIdentifier","src":"11213:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11200:2:25"},"nodeType":"YulFunctionCall","src":"11200:16:25"},"nodeType":"YulIf","src":"11197:36:25"},{"nodeType":"YulVariableDeclaration","src":"11242:87:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11299:9:25"},{"name":"offset_1","nodeType":"YulIdentifier","src":"11310:8:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11295:3:25"},"nodeType":"YulFunctionCall","src":"11295:24:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11321:7:25"}],"functionName":{"name":"abi_decode_string_calldata","nodeType":"YulIdentifier","src":"11268:26:25"},"nodeType":"YulFunctionCall","src":"11268:61:25"},"variables":[{"name":"value4_1","nodeType":"YulTypedName","src":"11246:8:25","type":""},{"name":"value5_1","nodeType":"YulTypedName","src":"11256:8:25","type":""}]},{"nodeType":"YulAssignment","src":"11338:18:25","value":{"name":"value4_1","nodeType":"YulIdentifier","src":"11348:8:25"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"11338:6:25"}]},{"nodeType":"YulAssignment","src":"11365:18:25","value":{"name":"value5_1","nodeType":"YulIdentifier","src":"11375:8:25"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"11365:6:25"}]}]},"name":"abi_decode_tuple_t_addresst_boolt_string_calldata_ptrt_string_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10548:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10559:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10571:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10579:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"10587:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"10595:6:25","type":""},{"name":"value4","nodeType":"YulTypedName","src":"10603:6:25","type":""},{"name":"value5","nodeType":"YulTypedName","src":"10611:6:25","type":""}],"src":"10464:925:25"},{"body":{"nodeType":"YulBlock","src":"11498:224:25","statements":[{"body":{"nodeType":"YulBlock","src":"11544:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11553:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11556:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11546:6:25"},"nodeType":"YulFunctionCall","src":"11546:12:25"},"nodeType":"YulExpressionStatement","src":"11546:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11519:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"11528:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11515:3:25"},"nodeType":"YulFunctionCall","src":"11515:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"11540:2:25","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11511:3:25"},"nodeType":"YulFunctionCall","src":"11511:32:25"},"nodeType":"YulIf","src":"11508:52:25"},{"nodeType":"YulAssignment","src":"11569:39:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11598:9:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"11579:18:25"},"nodeType":"YulFunctionCall","src":"11579:29:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11569:6:25"}]},{"nodeType":"YulAssignment","src":"11617:48:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11650:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"11661:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11646:3:25"},"nodeType":"YulFunctionCall","src":"11646:18:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"11627:18:25"},"nodeType":"YulFunctionCall","src":"11627:38:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11617:6:25"}]},{"nodeType":"YulAssignment","src":"11674:42:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11701:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"11712:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11697:3:25"},"nodeType":"YulFunctionCall","src":"11697:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11684:12:25"},"nodeType":"YulFunctionCall","src":"11684:32:25"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"11674:6:25"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11448:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11459:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11471:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11479:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11487:6:25","type":""}],"src":"11394:328:25"},{"body":{"nodeType":"YulBlock","src":"11828:76:25","statements":[{"nodeType":"YulAssignment","src":"11838:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11850:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"11861:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11846:3:25"},"nodeType":"YulFunctionCall","src":"11846:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11838:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11880:9:25"},{"name":"value0","nodeType":"YulIdentifier","src":"11891:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11873:6:25"},"nodeType":"YulFunctionCall","src":"11873:25:25"},"nodeType":"YulExpressionStatement","src":"11873:25:25"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11797:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11808:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11819:4:25","type":""}],"src":"11727:177:25"},{"body":{"nodeType":"YulBlock","src":"11941:95:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11958:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11965:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"11970:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11961:3:25"},"nodeType":"YulFunctionCall","src":"11961:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11951:6:25"},"nodeType":"YulFunctionCall","src":"11951:31:25"},"nodeType":"YulExpressionStatement","src":"11951:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11998:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12001:4:25","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11991:6:25"},"nodeType":"YulFunctionCall","src":"11991:15:25"},"nodeType":"YulExpressionStatement","src":"11991:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12022:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12025:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12015:6:25"},"nodeType":"YulFunctionCall","src":"12015:15:25"},"nodeType":"YulExpressionStatement","src":"12015:15:25"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"11909:127:25"},{"body":{"nodeType":"YulBlock","src":"12073:95:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12090:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12097:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"12102:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12093:3:25"},"nodeType":"YulFunctionCall","src":"12093:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12083:6:25"},"nodeType":"YulFunctionCall","src":"12083:31:25"},"nodeType":"YulExpressionStatement","src":"12083:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12130:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12133:4:25","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12123:6:25"},"nodeType":"YulFunctionCall","src":"12123:15:25"},"nodeType":"YulExpressionStatement","src":"12123:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12154:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12157:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12147:6:25"},"nodeType":"YulFunctionCall","src":"12147:15:25"},"nodeType":"YulExpressionStatement","src":"12147:15:25"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"12041:127:25"},{"body":{"nodeType":"YulBlock","src":"12205:95:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12222:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12229:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"12234:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12225:3:25"},"nodeType":"YulFunctionCall","src":"12225:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12215:6:25"},"nodeType":"YulFunctionCall","src":"12215:31:25"},"nodeType":"YulExpressionStatement","src":"12215:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12262:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12265:4:25","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12255:6:25"},"nodeType":"YulFunctionCall","src":"12255:15:25"},"nodeType":"YulExpressionStatement","src":"12255:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12286:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12289:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12279:6:25"},"nodeType":"YulFunctionCall","src":"12279:15:25"},"nodeType":"YulExpressionStatement","src":"12279:15:25"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"12173:127:25"},{"body":{"nodeType":"YulBlock","src":"12352:88:25","statements":[{"body":{"nodeType":"YulBlock","src":"12383:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"12385:16:25"},"nodeType":"YulFunctionCall","src":"12385:18:25"},"nodeType":"YulExpressionStatement","src":"12385:18:25"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12368:5:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12379:1:25","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"12375:3:25"},"nodeType":"YulFunctionCall","src":"12375:6:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"12365:2:25"},"nodeType":"YulFunctionCall","src":"12365:17:25"},"nodeType":"YulIf","src":"12362:43:25"},{"nodeType":"YulAssignment","src":"12414:20:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12425:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"12432:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12421:3:25"},"nodeType":"YulFunctionCall","src":"12421:13:25"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"12414:3:25"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12334:5:25","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"12344:3:25","type":""}],"src":"12305:135:25"},{"body":{"nodeType":"YulBlock","src":"12500:325:25","statements":[{"nodeType":"YulAssignment","src":"12510:22:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12524:1:25","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"12527:4:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"12520:3:25"},"nodeType":"YulFunctionCall","src":"12520:12:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"12510:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"12541:38:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"12571:4:25"},{"kind":"number","nodeType":"YulLiteral","src":"12577:1:25","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12567:3:25"},"nodeType":"YulFunctionCall","src":"12567:12:25"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"12545:18:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"12618:31:25","statements":[{"nodeType":"YulAssignment","src":"12620:27:25","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12634:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"12642:4:25","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12630:3:25"},"nodeType":"YulFunctionCall","src":"12630:17:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"12620:6:25"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"12598:18:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12591:6:25"},"nodeType":"YulFunctionCall","src":"12591:26:25"},"nodeType":"YulIf","src":"12588:61:25"},{"body":{"nodeType":"YulBlock","src":"12708:111:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12729:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12736:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"12741:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12732:3:25"},"nodeType":"YulFunctionCall","src":"12732:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12722:6:25"},"nodeType":"YulFunctionCall","src":"12722:31:25"},"nodeType":"YulExpressionStatement","src":"12722:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12773:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12776:4:25","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12766:6:25"},"nodeType":"YulFunctionCall","src":"12766:15:25"},"nodeType":"YulExpressionStatement","src":"12766:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12801:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12804:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12794:6:25"},"nodeType":"YulFunctionCall","src":"12794:15:25"},"nodeType":"YulExpressionStatement","src":"12794:15:25"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"12664:18:25"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12687:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"12695:2:25","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12684:2:25"},"nodeType":"YulFunctionCall","src":"12684:14:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"12661:2:25"},"nodeType":"YulFunctionCall","src":"12661:38:25"},"nodeType":"YulIf","src":"12658:161:25"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"12480:4:25","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"12489:6:25","type":""}],"src":"12445:380:25"},{"body":{"nodeType":"YulBlock","src":"12886:65:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12903:1:25","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"12906:3:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12896:6:25"},"nodeType":"YulFunctionCall","src":"12896:14:25"},"nodeType":"YulExpressionStatement","src":"12896:14:25"},{"nodeType":"YulAssignment","src":"12919:26:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12937:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12940:4:25","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"12927:9:25"},"nodeType":"YulFunctionCall","src":"12927:18:25"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"12919:4:25"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"12869:3:25","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"12877:4:25","type":""}],"src":"12830:121:25"},{"body":{"nodeType":"YulBlock","src":"13037:464:25","statements":[{"body":{"nodeType":"YulBlock","src":"13070:425:25","statements":[{"nodeType":"YulVariableDeclaration","src":"13084:11:25","value":{"kind":"number","nodeType":"YulLiteral","src":"13094:1:25","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"13088:2:25","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"13115:2:25"},{"name":"array","nodeType":"YulIdentifier","src":"13119:5:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13108:6:25"},"nodeType":"YulFunctionCall","src":"13108:17:25"},"nodeType":"YulExpressionStatement","src":"13108:17:25"},{"nodeType":"YulVariableDeclaration","src":"13138:31:25","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"13160:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"13164:4:25","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"13150:9:25"},"nodeType":"YulFunctionCall","src":"13150:19:25"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"13142:4:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13182:57:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"13205:4:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13215:1:25","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"13222:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"13234:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13218:3:25"},"nodeType":"YulFunctionCall","src":"13218:19:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"13211:3:25"},"nodeType":"YulFunctionCall","src":"13211:27:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13201:3:25"},"nodeType":"YulFunctionCall","src":"13201:38:25"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"13186:11:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"13276:23:25","statements":[{"nodeType":"YulAssignment","src":"13278:19:25","value":{"name":"data","nodeType":"YulIdentifier","src":"13293:4:25"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"13278:11:25"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"13258:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"13270:4:25","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"13255:2:25"},"nodeType":"YulFunctionCall","src":"13255:20:25"},"nodeType":"YulIf","src":"13252:47:25"},{"nodeType":"YulVariableDeclaration","src":"13312:41:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"13326:4:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13336:1:25","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"13343:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"13348:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13339:3:25"},"nodeType":"YulFunctionCall","src":"13339:12:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"13332:3:25"},"nodeType":"YulFunctionCall","src":"13332:20:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13322:3:25"},"nodeType":"YulFunctionCall","src":"13322:31:25"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"13316:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13366:24:25","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"13379:11:25"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"13370:5:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"13464:21:25","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"13473:5:25"},{"name":"_1","nodeType":"YulIdentifier","src":"13480:2:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"13466:6:25"},"nodeType":"YulFunctionCall","src":"13466:17:25"},"nodeType":"YulExpressionStatement","src":"13466:17:25"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"13414:5:25"},{"name":"_2","nodeType":"YulIdentifier","src":"13421:2:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"13411:2:25"},"nodeType":"YulFunctionCall","src":"13411:13:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"13425:26:25","statements":[{"nodeType":"YulAssignment","src":"13427:22:25","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"13440:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"13447:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13436:3:25"},"nodeType":"YulFunctionCall","src":"13436:13:25"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"13427:5:25"}]}]},"pre":{"nodeType":"YulBlock","src":"13407:3:25","statements":[]},"src":"13403:82:25"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"13053:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"13058:2:25","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13050:2:25"},"nodeType":"YulFunctionCall","src":"13050:11:25"},"nodeType":"YulIf","src":"13047:448:25"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"13009:5:25","type":""},{"name":"len","nodeType":"YulTypedName","src":"13016:3:25","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"13021:10:25","type":""}],"src":"12956:545:25"},{"body":{"nodeType":"YulBlock","src":"13591:81:25","statements":[{"nodeType":"YulAssignment","src":"13601:65:25","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"13616:4:25"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13634:1:25","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"13637:3:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13630:3:25"},"nodeType":"YulFunctionCall","src":"13630:11:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13647:1:25","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"13643:3:25"},"nodeType":"YulFunctionCall","src":"13643:6:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"13626:3:25"},"nodeType":"YulFunctionCall","src":"13626:24:25"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"13622:3:25"},"nodeType":"YulFunctionCall","src":"13622:29:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13612:3:25"},"nodeType":"YulFunctionCall","src":"13612:40:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13658:1:25","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"13661:3:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13654:3:25"},"nodeType":"YulFunctionCall","src":"13654:11:25"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"13609:2:25"},"nodeType":"YulFunctionCall","src":"13609:57:25"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"13601:4:25"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"13568:4:25","type":""},{"name":"len","nodeType":"YulTypedName","src":"13574:3:25","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"13582:4:25","type":""}],"src":"13506:166:25"},{"body":{"nodeType":"YulBlock","src":"13773:1256:25","statements":[{"nodeType":"YulVariableDeclaration","src":"13783:24:25","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"13803:3:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13797:5:25"},"nodeType":"YulFunctionCall","src":"13797:10:25"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"13787:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"13850:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"13852:16:25"},"nodeType":"YulFunctionCall","src":"13852:18:25"},"nodeType":"YulExpressionStatement","src":"13852:18:25"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"13822:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"13830:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13819:2:25"},"nodeType":"YulFunctionCall","src":"13819:30:25"},"nodeType":"YulIf","src":"13816:56:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"13925:4:25"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"13963:4:25"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"13957:5:25"},"nodeType":"YulFunctionCall","src":"13957:11:25"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"13931:25:25"},"nodeType":"YulFunctionCall","src":"13931:38:25"},{"name":"newLen","nodeType":"YulIdentifier","src":"13971:6:25"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"13881:43:25"},"nodeType":"YulFunctionCall","src":"13881:97:25"},"nodeType":"YulExpressionStatement","src":"13881:97:25"},{"nodeType":"YulVariableDeclaration","src":"13987:18:25","value":{"kind":"number","nodeType":"YulLiteral","src":"14004:1:25","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"13991:9:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14014:23:25","value":{"kind":"number","nodeType":"YulLiteral","src":"14033:4:25","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"14018:11:25","type":""}]},{"nodeType":"YulAssignment","src":"14046:24:25","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"14059:11:25"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"14046:9:25"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"14116:656:25","statements":[{"nodeType":"YulVariableDeclaration","src":"14130:35:25","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"14149:6:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14161:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"14157:3:25"},"nodeType":"YulFunctionCall","src":"14157:7:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14145:3:25"},"nodeType":"YulFunctionCall","src":"14145:20:25"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"14134:7:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14178:49:25","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"14222:4:25"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"14192:29:25"},"nodeType":"YulFunctionCall","src":"14192:35:25"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"14182:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14240:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"14249:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"14244:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"14327:172:25","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"14352:6:25"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"14370:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"14375:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14366:3:25"},"nodeType":"YulFunctionCall","src":"14366:19:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14360:5:25"},"nodeType":"YulFunctionCall","src":"14360:26:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"14345:6:25"},"nodeType":"YulFunctionCall","src":"14345:42:25"},"nodeType":"YulExpressionStatement","src":"14345:42:25"},{"nodeType":"YulAssignment","src":"14404:24:25","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"14418:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"14426:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14414:3:25"},"nodeType":"YulFunctionCall","src":"14414:14:25"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"14404:6:25"}]},{"nodeType":"YulAssignment","src":"14445:40:25","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"14462:9:25"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"14473:11:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14458:3:25"},"nodeType":"YulFunctionCall","src":"14458:27:25"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"14445:9:25"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"14274:1:25"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"14277:7:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14271:2:25"},"nodeType":"YulFunctionCall","src":"14271:14:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"14286:28:25","statements":[{"nodeType":"YulAssignment","src":"14288:24:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"14297:1:25"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"14300:11:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14293:3:25"},"nodeType":"YulFunctionCall","src":"14293:19:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"14288:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"14267:3:25","statements":[]},"src":"14263:236:25"},{"body":{"nodeType":"YulBlock","src":"14547:166:25","statements":[{"nodeType":"YulVariableDeclaration","src":"14565:43:25","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"14592:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"14597:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14588:3:25"},"nodeType":"YulFunctionCall","src":"14588:19:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14582:5:25"},"nodeType":"YulFunctionCall","src":"14582:26:25"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"14569:9:25","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"14632:6:25"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"14644:9:25"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14671:1:25","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"14674:6:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"14667:3:25"},"nodeType":"YulFunctionCall","src":"14667:14:25"},{"kind":"number","nodeType":"YulLiteral","src":"14683:3:25","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14663:3:25"},"nodeType":"YulFunctionCall","src":"14663:24:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14693:1:25","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"14689:3:25"},"nodeType":"YulFunctionCall","src":"14689:6:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"14659:3:25"},"nodeType":"YulFunctionCall","src":"14659:37:25"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"14655:3:25"},"nodeType":"YulFunctionCall","src":"14655:42:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14640:3:25"},"nodeType":"YulFunctionCall","src":"14640:58:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"14625:6:25"},"nodeType":"YulFunctionCall","src":"14625:74:25"},"nodeType":"YulExpressionStatement","src":"14625:74:25"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"14518:7:25"},{"name":"newLen","nodeType":"YulIdentifier","src":"14527:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14515:2:25"},"nodeType":"YulFunctionCall","src":"14515:19:25"},"nodeType":"YulIf","src":"14512:201:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"14733:4:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14747:1:25","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"14750:6:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"14743:3:25"},"nodeType":"YulFunctionCall","src":"14743:14:25"},{"kind":"number","nodeType":"YulLiteral","src":"14759:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14739:3:25"},"nodeType":"YulFunctionCall","src":"14739:22:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"14726:6:25"},"nodeType":"YulFunctionCall","src":"14726:36:25"},"nodeType":"YulExpressionStatement","src":"14726:36:25"}]},"nodeType":"YulCase","src":"14109:663:25","value":{"kind":"number","nodeType":"YulLiteral","src":"14114:1:25","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"14789:234:25","statements":[{"nodeType":"YulVariableDeclaration","src":"14803:14:25","value":{"kind":"number","nodeType":"YulLiteral","src":"14816:1:25","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"14807:5:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"14852:67:25","statements":[{"nodeType":"YulAssignment","src":"14870:35:25","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"14889:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"14894:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14885:3:25"},"nodeType":"YulFunctionCall","src":"14885:19:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14879:5:25"},"nodeType":"YulFunctionCall","src":"14879:26:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"14870:5:25"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"14833:6:25"},"nodeType":"YulIf","src":"14830:89:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"14939:4:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14998:5:25"},{"name":"newLen","nodeType":"YulIdentifier","src":"15005:6:25"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"14945:52:25"},"nodeType":"YulFunctionCall","src":"14945:67:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"14932:6:25"},"nodeType":"YulFunctionCall","src":"14932:81:25"},"nodeType":"YulExpressionStatement","src":"14932:81:25"}]},"nodeType":"YulCase","src":"14781:242:25","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"14089:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"14097:2:25","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14086:2:25"},"nodeType":"YulFunctionCall","src":"14086:14:25"},"nodeType":"YulSwitch","src":"14079:944:25"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"13758:4:25","type":""},{"name":"src","nodeType":"YulTypedName","src":"13764:3:25","type":""}],"src":"13677:1352:25"},{"body":{"nodeType":"YulBlock","src":"15101:200:25","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15118:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"15123:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15111:6:25"},"nodeType":"YulFunctionCall","src":"15111:19:25"},"nodeType":"YulExpressionStatement","src":"15111:19:25"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15156:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"15161:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15152:3:25"},"nodeType":"YulFunctionCall","src":"15152:14:25"},{"name":"start","nodeType":"YulIdentifier","src":"15168:5:25"},{"name":"length","nodeType":"YulIdentifier","src":"15175:6:25"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"15139:12:25"},"nodeType":"YulFunctionCall","src":"15139:43:25"},"nodeType":"YulExpressionStatement","src":"15139:43:25"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15206:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"15211:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15202:3:25"},"nodeType":"YulFunctionCall","src":"15202:16:25"},{"kind":"number","nodeType":"YulLiteral","src":"15220:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15198:3:25"},"nodeType":"YulFunctionCall","src":"15198:27:25"},{"kind":"number","nodeType":"YulLiteral","src":"15227:1:25","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15191:6:25"},"nodeType":"YulFunctionCall","src":"15191:38:25"},"nodeType":"YulExpressionStatement","src":"15191:38:25"},{"nodeType":"YulAssignment","src":"15238:57:25","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15253:3:25"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"15266:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"15274:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15262:3:25"},"nodeType":"YulFunctionCall","src":"15262:15:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15283:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"15279:3:25"},"nodeType":"YulFunctionCall","src":"15279:7:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15258:3:25"},"nodeType":"YulFunctionCall","src":"15258:29:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15249:3:25"},"nodeType":"YulFunctionCall","src":"15249:39:25"},{"kind":"number","nodeType":"YulLiteral","src":"15290:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15245:3:25"},"nodeType":"YulFunctionCall","src":"15245:50:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15238:3:25"}]}]},"name":"abi_encode_string_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"15070:5:25","type":""},{"name":"length","nodeType":"YulTypedName","src":"15077:6:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"15085:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15093:3:25","type":""}],"src":"15034:267:25"},{"body":{"nodeType":"YulBlock","src":"15493:228:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15510:9:25"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15525:6:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15541:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"15546:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15537:3:25"},"nodeType":"YulFunctionCall","src":"15537:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"15550:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15533:3:25"},"nodeType":"YulFunctionCall","src":"15533:19:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15521:3:25"},"nodeType":"YulFunctionCall","src":"15521:32:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15503:6:25"},"nodeType":"YulFunctionCall","src":"15503:51:25"},"nodeType":"YulExpressionStatement","src":"15503:51:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15574:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15585:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15570:3:25"},"nodeType":"YulFunctionCall","src":"15570:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"15590:2:25","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15563:6:25"},"nodeType":"YulFunctionCall","src":"15563:30:25"},"nodeType":"YulExpressionStatement","src":"15563:30:25"},{"nodeType":"YulAssignment","src":"15602:70:25","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"15637:6:25"},{"name":"value2","nodeType":"YulIdentifier","src":"15645:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15657:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15668:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15653:3:25"},"nodeType":"YulFunctionCall","src":"15653:18:25"}],"functionName":{"name":"abi_encode_string_calldata","nodeType":"YulIdentifier","src":"15610:26:25"},"nodeType":"YulFunctionCall","src":"15610:62:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15602:4:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15692:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15703:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15688:3:25"},"nodeType":"YulFunctionCall","src":"15688:18:25"},{"name":"value3","nodeType":"YulIdentifier","src":"15708:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15681:6:25"},"nodeType":"YulFunctionCall","src":"15681:34:25"},"nodeType":"YulExpressionStatement","src":"15681:34:25"}]},"name":"abi_encode_tuple_t_address_t_string_calldata_ptr_t_uint256__to_t_address_t_string_memory_ptr_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15438:9:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"15449:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"15457:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15465:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15473:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15484:4:25","type":""}],"src":"15306:415:25"},{"body":{"nodeType":"YulBlock","src":"15775:79:25","statements":[{"nodeType":"YulAssignment","src":"15785:17:25","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"15797:1:25"},{"name":"y","nodeType":"YulIdentifier","src":"15800:1:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15793:3:25"},"nodeType":"YulFunctionCall","src":"15793:9:25"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"15785:4:25"}]},{"body":{"nodeType":"YulBlock","src":"15826:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"15828:16:25"},"nodeType":"YulFunctionCall","src":"15828:18:25"},"nodeType":"YulExpressionStatement","src":"15828:18:25"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"15817:4:25"},{"name":"x","nodeType":"YulIdentifier","src":"15823:1:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15814:2:25"},"nodeType":"YulFunctionCall","src":"15814:11:25"},"nodeType":"YulIf","src":"15811:37:25"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"15757:1:25","type":""},{"name":"y","nodeType":"YulTypedName","src":"15760:1:25","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"15766:4:25","type":""}],"src":"15726:128:25"},{"body":{"nodeType":"YulBlock","src":"15907:77:25","statements":[{"nodeType":"YulAssignment","src":"15917:16:25","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"15928:1:25"},{"name":"y","nodeType":"YulIdentifier","src":"15931:1:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15924:3:25"},"nodeType":"YulFunctionCall","src":"15924:9:25"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"15917:3:25"}]},{"body":{"nodeType":"YulBlock","src":"15956:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"15958:16:25"},"nodeType":"YulFunctionCall","src":"15958:18:25"},"nodeType":"YulExpressionStatement","src":"15958:18:25"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"15948:1:25"},{"name":"sum","nodeType":"YulIdentifier","src":"15951:3:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15945:2:25"},"nodeType":"YulFunctionCall","src":"15945:10:25"},"nodeType":"YulIf","src":"15942:36:25"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"15890:1:25","type":""},{"name":"y","nodeType":"YulTypedName","src":"15893:1:25","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"15899:3:25","type":""}],"src":"15859:125:25"},{"body":{"nodeType":"YulBlock","src":"16118:175:25","statements":[{"nodeType":"YulAssignment","src":"16128:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16140:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"16151:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16136:3:25"},"nodeType":"YulFunctionCall","src":"16136:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16128:4:25"}]},{"nodeType":"YulVariableDeclaration","src":"16163:29:25","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16181:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"16186:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16177:3:25"},"nodeType":"YulFunctionCall","src":"16177:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"16190:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16173:3:25"},"nodeType":"YulFunctionCall","src":"16173:19:25"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"16167:2:25","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16208:9:25"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16223:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"16231:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16219:3:25"},"nodeType":"YulFunctionCall","src":"16219:15:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16201:6:25"},"nodeType":"YulFunctionCall","src":"16201:34:25"},"nodeType":"YulExpressionStatement","src":"16201:34:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16255:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"16266:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16251:3:25"},"nodeType":"YulFunctionCall","src":"16251:18:25"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"16275:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"16283:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16271:3:25"},"nodeType":"YulFunctionCall","src":"16271:15:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16244:6:25"},"nodeType":"YulFunctionCall","src":"16244:43:25"},"nodeType":"YulExpressionStatement","src":"16244:43:25"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16079:9:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16090:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16098:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16109:4:25","type":""}],"src":"15989:304:25"},{"body":{"nodeType":"YulBlock","src":"16477:372:25","statements":[{"nodeType":"YulVariableDeclaration","src":"16487:16:25","value":{"name":"pos","nodeType":"YulIdentifier","src":"16500:3:25"},"variables":[{"name":"pos_1","nodeType":"YulTypedName","src":"16491:5:25","type":""}]},{"nodeType":"YulAssignment","src":"16512:12:25","value":{"name":"pos","nodeType":"YulIdentifier","src":"16521:3:25"},"variableNames":[{"name":"pos_1","nodeType":"YulIdentifier","src":"16512:5:25"}]},{"nodeType":"YulVariableDeclaration","src":"16533:20:25","value":{"name":"value0","nodeType":"YulIdentifier","src":"16547:6:25"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"16537:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16562:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"16571:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"16566:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"16630:192:25","statements":[{"expression":{"arguments":[{"name":"pos_1","nodeType":"YulIdentifier","src":"16651:5:25"},{"arguments":[{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"16681:6:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"16662:18:25"},"nodeType":"YulFunctionCall","src":"16662:26:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16698:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"16703:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16694:3:25"},"nodeType":"YulFunctionCall","src":"16694:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"16707:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16690:3:25"},"nodeType":"YulFunctionCall","src":"16690:19:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16658:3:25"},"nodeType":"YulFunctionCall","src":"16658:52:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16644:6:25"},"nodeType":"YulFunctionCall","src":"16644:67:25"},"nodeType":"YulExpressionStatement","src":"16644:67:25"},{"nodeType":"YulVariableDeclaration","src":"16724:14:25","value":{"kind":"number","nodeType":"YulLiteral","src":"16734:4:25","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"16728:2:25","type":""}]},{"nodeType":"YulAssignment","src":"16751:23:25","value":{"arguments":[{"name":"pos_1","nodeType":"YulIdentifier","src":"16764:5:25"},{"name":"_1","nodeType":"YulIdentifier","src":"16771:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16760:3:25"},"nodeType":"YulFunctionCall","src":"16760:14:25"},"variableNames":[{"name":"pos_1","nodeType":"YulIdentifier","src":"16751:5:25"}]},{"nodeType":"YulAssignment","src":"16787:25:25","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"16801:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"16809:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16797:3:25"},"nodeType":"YulFunctionCall","src":"16797:15:25"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"16787:6:25"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"16592:1:25"},{"name":"value1","nodeType":"YulIdentifier","src":"16595:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16589:2:25"},"nodeType":"YulFunctionCall","src":"16589:13:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"16603:18:25","statements":[{"nodeType":"YulAssignment","src":"16605:14:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"16614:1:25"},{"kind":"number","nodeType":"YulLiteral","src":"16617:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16610:3:25"},"nodeType":"YulFunctionCall","src":"16610:9:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"16605:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"16585:3:25","statements":[]},"src":"16581:241:25"},{"nodeType":"YulAssignment","src":"16831:12:25","value":{"name":"pos_1","nodeType":"YulIdentifier","src":"16838:5:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16831:3:25"}]}]},"name":"abi_encode_tuple_packed_t_array$_t_address_$dyn_calldata_ptr__to_t_array$_t_address_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16445:3:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16450:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16458:6:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16469:3:25","type":""}],"src":"16298:551:25"},{"body":{"nodeType":"YulBlock","src":"17015:282:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17032:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"17043:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17025:6:25"},"nodeType":"YulFunctionCall","src":"17025:21:25"},"nodeType":"YulExpressionStatement","src":"17025:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17066:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"17077:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17062:3:25"},"nodeType":"YulFunctionCall","src":"17062:18:25"},{"name":"value1","nodeType":"YulIdentifier","src":"17082:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17055:6:25"},"nodeType":"YulFunctionCall","src":"17055:34:25"},"nodeType":"YulExpressionStatement","src":"17055:34:25"},{"body":{"nodeType":"YulBlock","src":"17133:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17142:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17145:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17135:6:25"},"nodeType":"YulFunctionCall","src":"17135:12:25"},"nodeType":"YulExpressionStatement","src":"17135:12:25"}]},"condition":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17104:6:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17120:3:25","type":"","value":"251"},{"kind":"number","nodeType":"YulLiteral","src":"17125:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"17116:3:25"},"nodeType":"YulFunctionCall","src":"17116:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"17129:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17112:3:25"},"nodeType":"YulFunctionCall","src":"17112:19:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"17101:2:25"},"nodeType":"YulFunctionCall","src":"17101:31:25"},"nodeType":"YulIf","src":"17098:51:25"},{"nodeType":"YulVariableDeclaration","src":"17158:28:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17176:1:25","type":"","value":"5"},{"name":"value1","nodeType":"YulIdentifier","src":"17179:6:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"17172:3:25"},"nodeType":"YulFunctionCall","src":"17172:14:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"17162:6:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17212:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"17223:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17208:3:25"},"nodeType":"YulFunctionCall","src":"17208:18:25"},{"name":"value0","nodeType":"YulIdentifier","src":"17228:6:25"},{"name":"length","nodeType":"YulIdentifier","src":"17236:6:25"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"17195:12:25"},"nodeType":"YulFunctionCall","src":"17195:48:25"},"nodeType":"YulExpressionStatement","src":"17195:48:25"},{"nodeType":"YulAssignment","src":"17252:39:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17268:9:25"},{"name":"length","nodeType":"YulIdentifier","src":"17279:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17264:3:25"},"nodeType":"YulFunctionCall","src":"17264:22:25"},{"kind":"number","nodeType":"YulLiteral","src":"17288:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17260:3:25"},"nodeType":"YulFunctionCall","src":"17260:31:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17252:4:25"}]}]},"name":"abi_encode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr__to_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16976:9:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16987:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16995:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17006:4:25","type":""}],"src":"16854:443:25"},{"body":{"nodeType":"YulBlock","src":"17354:116:25","statements":[{"nodeType":"YulAssignment","src":"17364:20:25","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17379:1:25"},{"name":"y","nodeType":"YulIdentifier","src":"17382:1:25"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"17375:3:25"},"nodeType":"YulFunctionCall","src":"17375:9:25"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"17364:7:25"}]},{"body":{"nodeType":"YulBlock","src":"17442:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"17444:16:25"},"nodeType":"YulFunctionCall","src":"17444:18:25"},"nodeType":"YulExpressionStatement","src":"17444:18:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17413:1:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17406:6:25"},"nodeType":"YulFunctionCall","src":"17406:9:25"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"17420:1:25"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"17427:7:25"},{"name":"x","nodeType":"YulIdentifier","src":"17436:1:25"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"17423:3:25"},"nodeType":"YulFunctionCall","src":"17423:15:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"17417:2:25"},"nodeType":"YulFunctionCall","src":"17417:22:25"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"17403:2:25"},"nodeType":"YulFunctionCall","src":"17403:37:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17396:6:25"},"nodeType":"YulFunctionCall","src":"17396:45:25"},"nodeType":"YulIf","src":"17393:71:25"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"17333:1:25","type":""},{"name":"y","nodeType":"YulTypedName","src":"17336:1:25","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"17342:7:25","type":""}],"src":"17302:168:25"},{"body":{"nodeType":"YulBlock","src":"17576:102:25","statements":[{"nodeType":"YulAssignment","src":"17586:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17598:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"17609:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17594:3:25"},"nodeType":"YulFunctionCall","src":"17594:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17586:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17628:9:25"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17643:6:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17659:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"17664:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"17655:3:25"},"nodeType":"YulFunctionCall","src":"17655:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"17668:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17651:3:25"},"nodeType":"YulFunctionCall","src":"17651:19:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17639:3:25"},"nodeType":"YulFunctionCall","src":"17639:32:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17621:6:25"},"nodeType":"YulFunctionCall","src":"17621:51:25"},"nodeType":"YulExpressionStatement","src":"17621:51:25"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17545:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17556:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17567:4:25","type":""}],"src":"17475:203:25"},{"body":{"nodeType":"YulBlock","src":"17922:352:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17939:9:25"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17964:6:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17957:6:25"},"nodeType":"YulFunctionCall","src":"17957:14:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17950:6:25"},"nodeType":"YulFunctionCall","src":"17950:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17932:6:25"},"nodeType":"YulFunctionCall","src":"17932:41:25"},"nodeType":"YulExpressionStatement","src":"17932:41:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17993:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"18004:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17989:3:25"},"nodeType":"YulFunctionCall","src":"17989:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"18009:3:25","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17982:6:25"},"nodeType":"YulFunctionCall","src":"17982:31:25"},"nodeType":"YulExpressionStatement","src":"17982:31:25"},{"nodeType":"YulVariableDeclaration","src":"18022:77:25","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"18063:6:25"},{"name":"value2","nodeType":"YulIdentifier","src":"18071:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18083:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"18094:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18079:3:25"},"nodeType":"YulFunctionCall","src":"18079:19:25"}],"functionName":{"name":"abi_encode_string_calldata","nodeType":"YulIdentifier","src":"18036:26:25"},"nodeType":"YulFunctionCall","src":"18036:63:25"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"18026:6:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18119:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"18130:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18115:3:25"},"nodeType":"YulFunctionCall","src":"18115:18:25"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"18139:6:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"18147:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18135:3:25"},"nodeType":"YulFunctionCall","src":"18135:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18108:6:25"},"nodeType":"YulFunctionCall","src":"18108:50:25"},"nodeType":"YulExpressionStatement","src":"18108:50:25"},{"nodeType":"YulAssignment","src":"18167:58:25","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"18202:6:25"},{"name":"value4","nodeType":"YulIdentifier","src":"18210:6:25"},{"name":"tail_1","nodeType":"YulIdentifier","src":"18218:6:25"}],"functionName":{"name":"abi_encode_string_calldata","nodeType":"YulIdentifier","src":"18175:26:25"},"nodeType":"YulFunctionCall","src":"18175:50:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18167:4:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18245:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"18256:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18241:3:25"},"nodeType":"YulFunctionCall","src":"18241:18:25"},{"name":"value5","nodeType":"YulIdentifier","src":"18261:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18234:6:25"},"nodeType":"YulFunctionCall","src":"18234:34:25"},"nodeType":"YulExpressionStatement","src":"18234:34:25"}]},"name":"abi_encode_tuple_t_bool_t_string_calldata_ptr_t_string_calldata_ptr_t_uint256__to_t_bool_t_string_memory_ptr_t_string_memory_ptr_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17851:9:25","type":""},{"name":"value5","nodeType":"YulTypedName","src":"17862:6:25","type":""},{"name":"value4","nodeType":"YulTypedName","src":"17870:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"17878:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"17886:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17894:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17902:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17913:4:25","type":""}],"src":"17683:591:25"},{"body":{"nodeType":"YulBlock","src":"18357:167:25","statements":[{"body":{"nodeType":"YulBlock","src":"18403:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18412:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18415:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18405:6:25"},"nodeType":"YulFunctionCall","src":"18405:12:25"},"nodeType":"YulExpressionStatement","src":"18405:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"18378:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"18387:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18374:3:25"},"nodeType":"YulFunctionCall","src":"18374:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"18399:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"18370:3:25"},"nodeType":"YulFunctionCall","src":"18370:32:25"},"nodeType":"YulIf","src":"18367:52:25"},{"nodeType":"YulVariableDeclaration","src":"18428:29:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18447:9:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18441:5:25"},"nodeType":"YulFunctionCall","src":"18441:16:25"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"18432:5:25","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18488:5:25"}],"functionName":{"name":"validator_revert_bool","nodeType":"YulIdentifier","src":"18466:21:25"},"nodeType":"YulFunctionCall","src":"18466:28:25"},"nodeType":"YulExpressionStatement","src":"18466:28:25"},{"nodeType":"YulAssignment","src":"18503:15:25","value":{"name":"value","nodeType":"YulIdentifier","src":"18513:5:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"18503:6:25"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18323:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"18334:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"18346:6:25","type":""}],"src":"18279:245:25"},{"body":{"nodeType":"YulBlock","src":"18658:145:25","statements":[{"nodeType":"YulAssignment","src":"18668:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18680:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"18691:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18676:3:25"},"nodeType":"YulFunctionCall","src":"18676:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18668:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18710:9:25"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18725:6:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18741:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"18746:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"18737:3:25"},"nodeType":"YulFunctionCall","src":"18737:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"18750:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18733:3:25"},"nodeType":"YulFunctionCall","src":"18733:19:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18721:3:25"},"nodeType":"YulFunctionCall","src":"18721:32:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18703:6:25"},"nodeType":"YulFunctionCall","src":"18703:51:25"},"nodeType":"YulExpressionStatement","src":"18703:51:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18774:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"18785:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18770:3:25"},"nodeType":"YulFunctionCall","src":"18770:18:25"},{"name":"value1","nodeType":"YulIdentifier","src":"18790:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18763:6:25"},"nodeType":"YulFunctionCall","src":"18763:34:25"},"nodeType":"YulExpressionStatement","src":"18763:34:25"}]},"name":"abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18619:9:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"18630:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18638:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18649:4:25","type":""}],"src":"18529:274:25"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        let tail_1 := add(headStart, 64)\n        mstore(headStart, 64)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 96)\n        let _1 := 0x20\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), sub(shl(160, 1), 1)))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        mstore(add(headStart, _1), sub(pos, headStart))\n        let pos_1 := pos\n        let length_1 := mload(value1)\n        mstore(pos, length_1)\n        pos_1 := add(pos, _1)\n        let srcPtr_1 := add(value1, _1)\n        let i_1 := 0\n        for { } lt(i_1, length_1) { i_1 := add(i_1, 1) }\n        {\n            mstore(pos_1, mload(srcPtr_1))\n            pos_1 := add(pos_1, _1)\n            srcPtr_1 := add(srcPtr_1, _1)\n        }\n        tail := pos_1\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_string_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256t_string_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_string_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            let _1 := 0x20\n            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n        }\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_struct_InspectionReport(value, pos) -> end\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(pos, and(mload(value), _1))\n        mstore(add(pos, 0x20), and(mload(add(value, 0x20)), _1))\n        let memberValue0 := mload(add(value, 0x40))\n        mstore(add(pos, 0x40), 0xe0)\n        let tail := abi_encode_string(memberValue0, add(pos, 0xe0))\n        let memberValue0_1 := mload(add(value, 0x60))\n        mstore(add(pos, 0x60), sub(tail, pos))\n        let tail_1 := abi_encode_string(memberValue0_1, tail)\n        mstore(add(pos, 0x80), mload(add(value, 0x80)))\n        mstore(add(pos, 0xa0), iszero(iszero(mload(add(value, 0xa0)))))\n        mstore(add(pos, 0xc0), iszero(iszero(mload(add(value, 0xc0)))))\n        end := tail_1\n    }\n    function abi_encode_tuple_t_array$_t_struct$_FlaggedInspection_$5348_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_FlaggedInspection_$5348_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        let _2 := 64\n        pos := add(headStart, _2)\n        let tail_2 := add(add(headStart, shl(5, length)), _2)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_2, headStart), not(63)))\n            let _3 := mload(srcPtr)\n            let _4 := 0xc0\n            let _5 := sub(shl(160, 1), 1)\n            mstore(tail_2, and(mload(_3), _5))\n            mstore(add(tail_2, _1), mload(add(_3, _1)))\n            let memberValue0 := mload(add(_3, _2))\n            mstore(add(tail_2, _2), _4)\n            let tail_3 := abi_encode_struct_InspectionReport(memberValue0, add(tail_2, _4))\n            let _6 := 0x60\n            mstore(add(tail_2, _6), and(mload(add(_3, _6)), _5))\n            let _7 := 0x80\n            let memberValue0_1 := mload(add(_3, _7))\n            mstore(add(tail_2, _7), sub(tail_3, tail_2))\n            let tail_4 := abi_encode_string(memberValue0_1, tail_3)\n            let _8 := 0xa0\n            mstore(add(tail_2, _8), mload(add(_3, _8)))\n            tail_2 := tail_4\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        tail := tail_2\n    }\n    function abi_decode_tuple_t_bytes32t_addresst_address(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := abi_decode_address(add(headStart, 64))\n    }\n    function abi_decode_array_bytes32_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_array$_t_address_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_contract$_CertificationAuthority_$3819__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_array$_t_struct$_InspectionReport_$5334_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_InspectionReport_$5334_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let tail_2 := add(add(headStart, shl(5, length)), 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_2, headStart), not(63)))\n            tail_2 := abi_encode_struct_InspectionReport(mload(srcPtr), tail_2)\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        tail := tail_2\n    }\n    function abi_encode_tuple_t_contract$_RolesManager_$4561__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool__to_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool_t_bool__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 224)\n        mstore(headStart, iszero(iszero(value0)))\n        mstore(add(headStart, 32), iszero(iszero(value1)))\n        mstore(add(headStart, 64), iszero(iszero(value2)))\n        mstore(add(headStart, 96), iszero(iszero(value3)))\n        mstore(add(headStart, 128), iszero(iszero(value4)))\n        mstore(add(headStart, 160), iszero(iszero(value5)))\n        mstore(add(headStart, 192), iszero(iszero(value6)))\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_boolt_string_calldata_ptrt_string_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_bool(value)\n        value1 := value\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_string_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_string_calldata(add(headStart, offset_1), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_string_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        calldatacopy(add(pos, 0x20), start, length)\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_address_t_string_calldata_ptr_t_uint256__to_t_address_t_string_memory_ptr_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), 96)\n        tail := abi_encode_string_calldata(value1, value2, add(headStart, 96))\n        mstore(add(headStart, 64), value3)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_packed_t_array$_t_address_$dyn_calldata_ptr__to_t_array$_t_address_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let pos_1 := pos\n        pos_1 := pos\n        let srcPtr := value0\n        let i := 0\n        for { } lt(i, value1) { i := add(i, 1) }\n        {\n            mstore(pos_1, and(abi_decode_address(srcPtr), sub(shl(160, 1), 1)))\n            let _1 := 0x20\n            pos_1 := add(pos_1, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos_1\n    }\n    function abi_encode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr__to_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), value1)\n        if gt(value1, sub(shl(251, 1), 1)) { revert(0, 0) }\n        let length := shl(5, value1)\n        calldatacopy(add(headStart, 64), value0, length)\n        tail := add(add(headStart, length), 64)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_bool_t_string_calldata_ptr_t_string_calldata_ptr_t_uint256__to_t_bool_t_string_memory_ptr_t_string_memory_ptr_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, iszero(iszero(value0)))\n        mstore(add(headStart, 32), 128)\n        let tail_1 := abi_encode_string_calldata(value1, value2, add(headStart, 128))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        tail := abi_encode_string_calldata(value3, value4, tail_1)\n        mstore(add(headStart, 96), value5)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n}","id":25,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"4576":[{"length":32,"start":1472}],"4579":[{"length":32,"start":1350},{"length":32,"start":8859},{"length":32,"start":9116}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106102bb5760003560e01c8063784fee0e11610182578063b0614db3116100e9578063c395fcb3116100a2578063e3a3c5221161007c578063e3a3c522146106f5578063e55b4f931461070a578063f53f5e1e1461071d578063fc8102861461073057600080fd5b8063c395fcb3146106bc578063cc5ed5ea146106cf578063d547741f146106e257600080fd5b8063b0614db314610608578063b1ba38831461065c578063b1ea540e1461066f578063b5617ef714610682578063b8ad415e146106a2578063bd7ca7ba146106a957600080fd5b80639a98163b1161013b5780639a98163b14610580578063a1f34163146105a0578063a217fddf146105b3578063a3574c5b146105bb578063aa52617c146105e2578063abaa536f146105f557600080fd5b8063784fee0e146104e05780637bff0975146104f55780637e5effa4146105085780638850845f1461051b57806391d148541461052e57806399eb08d61461054157600080fd5b8063456f19fc1161022657806361462f0e116101df57806361462f0e1461046857806368b688c11461047b57806368dd17a51461048e57806369d0b517146104a35780636e1d616e146104b85780637780e9c1146104cd57600080fd5b8063456f19fc146103e95780634e4ddb92146103fc57806352f84b721461041c57806357c033711461042f5780635cb87d2614610442578063603765281461045557600080fd5b8063261191b711610278578063261191b7146103755780632f2ff15d1461038857806336568abe1461039b5780633ca7c02a146103ae5780633e251518146103c35780634308ac98146103d657600080fd5b806301ffc9a7146102c05780630443cd2a146102e857806308d0aef7146102fd5780631e223b2a1461031e578063248a9ca31461033157806325d5e87e14610362575b600080fd5b6102d36102ce366004612d63565b610743565b60405190151581526020015b60405180910390f35b6102fb6102f6366004612db0565b61077a565b005b61031061030b366004612db0565b6107fc565b6040516102df929190612dcb565b6102fb61032c366004612db0565b610958565b61035461033f366004612e4f565b60009081526020819052604090206001015490565b6040519081526020016102df565b6102fb610370366004612db0565b6109da565b6102fb610383366004612db0565b610a5c565b6102fb610396366004612e68565b610ade565b6102fb6103a9366004612e68565b610b09565b61035460008051602061364d83398151915281565b6102fb6103d1366004612db0565b610b41565b6102fb6103e4366004612edd565b610bc3565b6102fb6103f7366004612db0565b6110b3565b61040f61040a366004612f37565b611135565b6040516102df919061301c565b6102d361042a366004612db0565b61147b565b6102fb61043d366004612db0565b611495565b6102fb6104503660046130df565b611517565b6102fb610463366004612db0565b6115aa565b6102fb610476366004613160565b61162c565b61040f610489366004612db0565b61173f565b61035460008051602061360d83398151915281565b61035460008051602061366d83398151915281565b6103546000805160206136ad83398151915281565b6102fb6104db366004612e4f565b611ad0565b61035460008051602061368d83398151915281565b6102d3610503366004612db0565b611bbd565b6102fb610516366004612db0565b611bd7565b6102d3610529366004612db0565b611c59565b6102d361053c366004612e68565b611c6f565b6105687f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102df565b61059361058e366004612db0565b611c98565b6040516102df91906131c0565b6102d36105ae366004612db0565b611eb8565b610354600081565b6105687f000000000000000000000000000000000000000000000000000000000000000081565b6102fb6105f0366004612db0565b611ed2565b6102d3610603366004612db0565b611f54565b61061b610616366004612db0565b611f6e565b60408051971515885295151560208801529315159486019490945290151560608501521515608084015290151560a0830152151560c082015260e0016102df565b6102fb61066a366004613230565b612027565b6102fb61067d3660046132c3565b612357565b610354610690366004612db0565b60016020526000908152604090205481565b6018610354565b6102fb6106b7366004612db0565b612518565b6102d36106ca366004612db0565b612563565b6105936106dd366004612db0565b61256f565b6102fb6106f0366004612e68565b6129af565b6103546000805160206136cd83398151915281565b6102fb610718366004612db0565b6129d4565b6102d361072b366004612db0565b612a56565b6102fb61073e366004612db0565b612a70565b60006001600160e01b03198216637965db0b60e01b148061077457506301ffc9a760e01b6001600160e01b03198316145b92915050565b806001600160a01b0381166107a25760405163e6c4247b60e01b815260040160405180910390fd5b60006107ad81612af2565b6107c560008051602061364d833981519152846129af565b6040516001600160a01b0384169060008051602061364d833981519152906000805160206136ed83398151915290600090a3505050565b6001600160a01b038116600090815260026020908152604080832080548251818502810185019093528083526060948594909392919083018282801561086b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161084d575b505050505090506000815167ffffffffffffffff81111561088e5761088e6132ff565b6040519080825280602002602001820160405280156108b7578160200160208202803683370190505b50905060005b825181101561094d576001600160a01b038616600090815260056020526040812084519091908590849081106108f5576108f5613315565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205482828151811061093057610930613315565b60209081029190910101528061094581613341565b9150506108bd565b509094909350915050565b806001600160a01b0381166109805760405163e6c4247b60e01b815260040160405180910390fd5b600061098b81612af2565b6109a360008051602061360d83398151915284610ade565b6040516001600160a01b0384169060008051602061360d8339815191529060008051602061362d83398151915290600090a3505050565b6109e381612a56565b8015610a0657506001600160a01b03811660009081526001602052604090205442115b15610a5957610a2360008051602061364d83398151915282612afc565b506040516001600160a01b038216907fa6f32bcbc7de829d50e1c9cbc1c5b4dafb4c7a0b8329757aee62a9b394d71c3b90600090a25b50565b806001600160a01b038116610a845760405163e6c4247b60e01b815260040160405180910390fd5b6000610a8f81612af2565b610aa760008051602061368d833981519152846129af565b6040516001600160a01b0384169060008051602061368d833981519152906000805160206136ed83398151915290600090a3505050565b600082815260208190526040902060010154610af981612af2565b610b038383612b6f565b50505050565b6001600160a01b0381163314610b325760405163334bd91960e11b815260040160405180910390fd5b610b3c8282612afc565b505050565b806001600160a01b038116610b695760405163e6c4247b60e01b815260040160405180910390fd5b6000610b7481612af2565b610b8c6000805160206136ad833981519152846129af565b6040516001600160a01b038416906000805160206136ad833981519152906000805160206136ed83398151915290600090a3505050565b6000805160206136ad833981519152610bdb81612af2565b6001600160a01b038516600090815260046020526040902054841115610c14576040516315c25ffd60e01b815260040160405180910390fd5b6001600160a01b0385166000908152600460205260409020805485908110610c3e57610c3e613315565b906000526020600020906006020160050160019054906101000a900460ff1615610c7b5760405163c2d1c49160e01b815260040160405180910390fd5b6001600160a01b038516600090815260046020526040902080546001919086908110610ca957610ca9613315565b906000526020600020906006020160050160016101000a81548160ff02191690831515021790555060006040518060c00160405280876001600160a01b0316815260200186815260200160046000896001600160a01b03166001600160a01b031681526020019081526020016000208781548110610d2957610d29613315565b60009182526020918290206040805160e081018252600690930290910180546001600160a01b0390811684526001820154169383019390935260028301805492939291840191610d789061335a565b80601f0160208091040260200160405190810160405280929190818152602001828054610da49061335a565b8015610df15780601f10610dc657610100808354040283529160200191610df1565b820191906000526020600020905b815481529060010190602001808311610dd457829003601f168201915b50505050508152602001600382018054610e0a9061335a565b80601f0160208091040260200160405190810160405280929190818152602001828054610e369061335a565b8015610e835780601f10610e5857610100808354040283529160200191610e83565b820191906000526020600020905b815481529060010190602001808311610e6657829003601f168201915b5050509183525050600482015460208083019190915260059092015460ff808216151560408085019190915261010090920416151560609092019190915291835233838201528151601f880182900482028101820183528781529290910191908790879081908401838280828437600092018290525093855250504260209384015250600854815260068252604090819020835181546001600160a01b03199081166001600160a01b0392831617835585850151600184015585840151805160028501805484169185169190911781559581015160038501805490931693169290921790559182015193945084939092906004840190610f8390826133e2565b5060608201516003820190610f9890826133e2565b50608082810151600483015560a08301516005909201805460c09094015161ffff1990941692151561ff001916929092176101009315159390930292909217905560608301516008830180546001600160a01b0319166001600160a01b03909216919091179055820151600982019061101190826133e2565b5060a09190910151600a909101556001600160a01b038616600090815260076020908152604082206008805482546001810184559285529284209091019190915580549161105e83613341565b919050555084866001600160a01b03167f7b1f7b3dacb5afdc95a1242e036c2e87a67f32d97cb111111215f3305223b666338787426040516110a394939291906134cb565b60405180910390a3505050505050565b806001600160a01b0381166110db5760405163e6c4247b60e01b815260040160405180910390fd5b60006110e681612af2565b6110fe6000805160206136cd83398151915284610ade565b6040516001600160a01b038416906000805160206136cd8339815191529060008051602061362d83398151915290600090a3505050565b60606000826008546111479190613501565b84116111535783611161565b826008546111619190613501565b905060008167ffffffffffffffff81111561117e5761117e6132ff565b6040519080825280602002602001820160405280156111b757816020015b6111a4612ccd565b81526020019060019003908161119c5790505b50905060005b8281101561147257600660006111d38388613514565b81526020808201929092526040908101600020815160c08101835281546001600160a01b039081168252600183015482860152835160e0810185526002840180548316825260038501549092169581019590955260048301805492959394868101949390840191906112449061335a565b80601f01602080910402602001604051908101604052809291908181526020018280546112709061335a565b80156112bd5780601f10611292576101008083540402835291602001916112bd565b820191906000526020600020905b8154815290600101906020018083116112a057829003601f168201915b505050505081526020016003820180546112d69061335a565b80601f01602080910402602001604051908101604052809291908181526020018280546113029061335a565b801561134f5780601f106113245761010080835404028352916020019161134f565b820191906000526020600020905b81548152906001019060200180831161133257829003601f168201915b5050509183525050600482015460208083019190915260059092015460ff808216151560408085019190915261010090920416151560609092019190915291835260088401546001600160a01b03169083015260098301805492909101916113b69061335a565b80601f01602080910402602001604051908101604052809291908181526020018280546113e29061335a565b801561142f5780601f106114045761010080835404028352916020019161142f565b820191906000526020600020905b81548152906001019060200180831161141257829003601f168201915b50505050508152602001600a8201548152505082828151811061145457611454613315565b6020026020010181905250808061146a90613341565b9150506111bd565b50949350505050565b600061077460008051602061368d83398151915283611c6f565b806001600160a01b0381166114bd5760405163e6c4247b60e01b815260040160405180910390fd5b60006114c881612af2565b6114e060008051602061364d83398151915284610ade565b6040516001600160a01b0384169060008051602061364d8339815191529060008051602061362d83398151915290600090a3505050565b600061152281612af2565b61152c8484611c6f565b611549576040516366783c9d60e11b815260040160405180910390fd5b6115538484612afc565b5061155e8483612b6f565b50604080516001600160a01b0380861682528416602082015285917f274dd4127a55dcb6f6c12ed38fec5007d965d2afffa8b0bc75c3dc8f3f6b2224910160405180910390a250505050565b806001600160a01b0381166115d25760405163e6c4247b60e01b815260040160405180910390fd5b60006115dd81612af2565b6115f560008051602061366d83398151915284610ade565b6040516001600160a01b0384169060008051602061366d8339815191529060008051602061362d83398151915290600090a3505050565b600061163781612af2565b831580611642575081155b1561166057604051637d6eaf9360e01b815260040160405180910390fd5b838214611680576040516390a2f79360e01b815260040160405180910390fd5b60005b848110156116e6576116d38686838181106116a0576116a0613315565b905060200201358585848181106116b9576116b9613315565b90506020020160208101906116ce9190612db0565b612b6f565b50806116de81613341565b915050611683565b5082826040516116f7929190613527565b60405180910390207ff4d52c90739c68c4e82d39cfbeee6b6613784bf9b28d2cdb3a02203799cf0606868660405161173092919061355c565b60405180910390a25050505050565b6001600160a01b038116600090815260076020908152604080832080548251818502810185019093528083526060949383018282801561179e57602002820191906000526020600020905b81548152602001906001019080831161178a575b505050505090506000815167ffffffffffffffff8111156117c1576117c16132ff565b6040519080825280602002602001820160405280156117fa57816020015b6117e7612ccd565b8152602001906001900390816117df5790505b50905060005b8251811015611ac8576006600084838151811061181f5761181f613315565b6020908102919091018101518252818101929092526040908101600020815160c08101835281546001600160a01b039081168252600183015482860152835160e08101855260028401805483168252600385015490921695810195909552600483018054929593948681019493908401919061189a9061335a565b80601f01602080910402602001604051908101604052809291908181526020018280546118c69061335a565b80156119135780601f106118e857610100808354040283529160200191611913565b820191906000526020600020905b8154815290600101906020018083116118f657829003601f168201915b5050505050815260200160038201805461192c9061335a565b80601f01602080910402602001604051908101604052809291908181526020018280546119589061335a565b80156119a55780601f1061197a576101008083540402835291602001916119a5565b820191906000526020600020905b81548152906001019060200180831161198857829003601f168201915b5050509183525050600482015460208083019190915260059092015460ff808216151560408085019190915261010090920416151560609092019190915291835260088401546001600160a01b0316908301526009830180549290910191611a0c9061335a565b80601f0160208091040260200160405190810160405280929190818152602001828054611a389061335a565b8015611a855780601f10611a5a57610100808354040283529160200191611a85565b820191906000526020600020905b815481529060010190602001808311611a6857829003601f168201915b50505050508152602001600a82015481525050828281518110611aaa57611aaa613315565b60200260200101819052508080611ac090613341565b915050611800565b509392505050565b611ad933612a56565b15611af75760405163510a583360e01b815260040160405180910390fd5b8015611b1657604051630729422160e41b815260040160405180910390fd5b6018811115611b3857604051630729422160e41b815260040160405180910390fd5b6000611b4682610e10613595565b9050611b6060008051602061364d83398151915233612b6f565b50611b6b8142613514565b33600081815260016020526040908190209290925590517fc526cdae63c288ea4504281fe29b0ae3352c8a9ccae61eba8c21cd25a949e0f190611bb19085815260200190565b60405180910390a25050565b600061077460008051602061366d83398151915283611c6f565b806001600160a01b038116611bff5760405163e6c4247b60e01b815260040160405180910390fd5b6000611c0a81612af2565b611c2260008051602061360d833981519152846129af565b6040516001600160a01b0384169060008051602061360d833981519152906000805160206136ed83398151915290600090a3505050565b60006107746000805160206136cd833981519152835b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6001600160a01b03811660009081526004602052604081205460609103611cd25760405163fc32598360e01b815260040160405180910390fd5b6001600160a01b038216600090815260046020908152604080832080548251818502810185019093528083529193909284015b82821015611ead5760008481526020908190206040805160e0810182526006860290920180546001600160a01b0390811684526001820154169383019390935260028301805492939291840191611d5b9061335a565b80601f0160208091040260200160405190810160405280929190818152602001828054611d879061335a565b8015611dd45780601f10611da957610100808354040283529160200191611dd4565b820191906000526020600020905b815481529060010190602001808311611db757829003601f168201915b50505050508152602001600382018054611ded9061335a565b80601f0160208091040260200160405190810160405280929190818152602001828054611e199061335a565b8015611e665780601f10611e3b57610100808354040283529160200191611e66565b820191906000526020600020905b815481529060010190602001808311611e4957829003601f168201915b5050509183525050600482015460208083019190915260059092015460ff808216151560408401526101009091041615156060909101529082526001929092019101611d05565b505050509050919050565b600061077460008051602061360d83398151915283611c6f565b806001600160a01b038116611efa5760405163e6c4247b60e01b815260040160405180910390fd5b6000611f0581612af2565b611f1d60008051602061368d83398151915284610ade565b6040516001600160a01b0384169060008051602061368d8339815191529060008051602061362d83398151915290600090a3505050565b60006107746000805160206136ad83398151915283611c6f565b6000808080808080611f808189611c6f565b611f9860008051602061366d8339815191528a611c6f565b611fb06000805160206136cd8339815191528b611c6f565b611fc86000805160206136ad8339815191528c611c6f565b611fe060008051602061360d8339815191528d611c6f565b611ff860008051602061368d8339815191528e611c6f565b61201060008051602061364d8339815191528f611c6f565b959e949d50929b5090995097509550909350915050565b8561203133611c59565b61204e5760405163e9aab75160e01b815260040160405180910390fd5b6120588133612bf9565b61207557604051633dec104f60e01b815260040160405180910390fd5b6001600160a01b03811660009081526005602090815260408083203384529091529020544211156120b9576040516317a7851f60e11b815260040160405180910390fd5b6001600160a01b03871660009081526005602090815260408083203384529091529020544211156120fd576040516317a7851f60e11b815260040160405180910390fd5b60006040518060e00160405280336001600160a01b03168152602001896001600160a01b0316815260200187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f88018190048102820181019092528681529181019190879087908190840183828082843760009201829052509385525050426020808501919091528b151560408086019190915260609094018390526001600160a01b038d811684526004825284842080546001808201835591865294839020875160069096020180546001600160a01b031990811696841696909617815592870151908301805490951691161790925550908201519192508291600282019061222690826133e2565b506060820151600382019061223b90826133e2565b506080820151600482015560a08201516005909101805460c09093015115156101000261ff00199215159290921661ffff1990931692909217179055866122f85760405163b83cc3b360e01b81526001600160a01b0389811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063b83cc3b390602401600060405180830381600087803b1580156122df57600080fd5b505af11580156122f3573d6000803e3d6000fd5b505050505b876001600160a01b0316336001600160a01b03167fd1b5f5f27a6c067d892d5201d9160332ad987f12ed191d83be7d4fb4dc876716898989898942604051612345969594939291906135ac565b60405180910390a35050505050505050565b61236033611bbd565b61237d576040516336fe937160e11b815260040160405180910390fd5b60405163261e85cd60e01b81526001600160a01b0384811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063261e85cd90602401602060405180830381865afa1580156123e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061240791906135ef565b612424576040516308a2227760e11b815260040160405180910390fd5b61242d82611c59565b61244a5760405163e9aab75160e01b815260040160405180910390fd5b6001600160a01b0380841660008181526002602090815260408083208054600181810183559185528385200180549689166001600160a01b0319978816811790915584526003835290832080549182018155835291200180549092161790556124b38142613514565b6001600160a01b038481166000818152600560209081526040808320948816808452948252918290209490945551848152919290917f0eb676771c16d4fb5bc9e83f804be8ad19cd67426581c189e482796624a1ac9f910160405180910390a3505050565b806001600160a01b0381166125405760405163e6c4247b60e01b815260040160405180910390fd5b600061254b81612af2565b610b3c6000805160206136cd833981519152846129af565b60006107748183611c6f565b6001600160a01b03811660009081526003602090815260408083208054825181850281018501909352808352606094938301828280156125d857602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116125ba575b50505050509050600080600090505b8251811015612651576004600084838151811061260657612606613315565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020805490508261263d9190613514565b91508061264981613341565b9150506125e7565b5060008167ffffffffffffffff81111561266d5761266d6132ff565b6040519080825280602002602001820160405280156126a657816020015b612693612d10565b81526020019060019003908161268b5790505b5090506000805b84518110156129a45760005b600460008784815181106126cf576126cf613315565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208054905081101561299157876001600160a01b03166004600088858151811061272257612722613315565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020828154811061275b5761275b613315565b60009182526020909120600690910201546001600160a01b03160361297f576004600087848151811061279057612790613315565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081815481106127c9576127c9613315565b60009182526020918290206040805160e081018252600690930290910180546001600160a01b03908116845260018201541693830193909352600283018054929392918401916128189061335a565b80601f01602080910402602001604051908101604052809291908181526020018280546128449061335a565b80156128915780601f1061286657610100808354040283529160200191612891565b820191906000526020600020905b81548152906001019060200180831161287457829003601f168201915b505050505081526020016003820180546128aa9061335a565b80601f01602080910402602001604051908101604052809291908181526020018280546128d69061335a565b80156129235780601f106128f857610100808354040283529160200191612923565b820191906000526020600020905b81548152906001019060200180831161290657829003601f168201915b50505091835250506004820154602082015260059091015460ff80821615156040840152610100909104161515606090910152848461296181613341565b95508151811061297357612973613315565b60200260200101819052505b8061298981613341565b9150506126b9565b508061299c81613341565b9150506126ad565b509095945050505050565b6000828152602081905260409020600101546129ca81612af2565b610b038383612afc565b806001600160a01b0381166129fc5760405163e6c4247b60e01b815260040160405180910390fd5b6000612a0781612af2565b612a1f6000805160206136ad83398151915284610ade565b6040516001600160a01b038416906000805160206136ad8339815191529060008051602061362d83398151915290600090a3505050565b600061077460008051602061364d83398151915283611c6f565b806001600160a01b038116612a985760405163e6c4247b60e01b815260040160405180910390fd5b6000612aa381612af2565b612abb60008051602061366d833981519152846129af565b6040516001600160a01b0384169060008051602061366d833981519152906000805160206136ed83398151915290600090a3505050565b610a598133612c8c565b6000612b088383611c6f565b15612b67576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610774565b506000610774565b6000612b7b8383611c6f565b612b67576000838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055612bb13390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610774565b6000805b6001600160a01b038416600090815260026020526040902054811015612c82576001600160a01b03848116600090815260026020526040902080549185169183908110612c4c57612c4c613315565b6000918252602090912001546001600160a01b031603612c70576001915050610774565b80612c7a81613341565b915050612bfd565b5060009392505050565b612c968282611c6f565b612cc95760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440160405180910390fd5b5050565b6040805160c08101825260008082526020820152908101612cec612d10565b815260200160006001600160a01b0316815260200160608152602001600081525090565b6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016060815260200160608152602001600081526020016000151581526020016000151581525090565b600060208284031215612d7557600080fd5b81356001600160e01b031981168114612d8d57600080fd5b9392505050565b80356001600160a01b0381168114612dab57600080fd5b919050565b600060208284031215612dc257600080fd5b612d8d82612d94565b604080825283519082018190526000906020906060840190828701845b82811015612e0d5781516001600160a01b031684529284019290840190600101612de8565b5050508381038285015284518082528583019183019060005b81811015612e4257835183529284019291840191600101612e26565b5090979650505050505050565b600060208284031215612e6157600080fd5b5035919050565b60008060408385031215612e7b57600080fd5b82359150612e8b60208401612d94565b90509250929050565b60008083601f840112612ea657600080fd5b50813567ffffffffffffffff811115612ebe57600080fd5b602083019150836020828501011115612ed657600080fd5b9250929050565b60008060008060608587031215612ef357600080fd5b612efc85612d94565b935060208501359250604085013567ffffffffffffffff811115612f1f57600080fd5b612f2b87828801612e94565b95989497509550505050565b60008060408385031215612f4a57600080fd5b50508035926020909101359150565b6000815180845260005b81811015612f7f57602081850181015186830182015201612f63565b506000602082860101526020601f19601f83011685010191505092915050565b600060018060a01b0380835116845280602084015116602085015250604082015160e06040850152612fd460e0850182612f59565b905060608301518482036060860152612fed8282612f59565b9150506080830151608085015260a0830151151560a085015260c0830151151560c08501528091505092915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156130d157888303603f19018552815180516001600160a01b03908116855288820151898601528782015160c0898701819052919061308783880182612f9f565b9250506060818185015116818801525050608080830151868303828801526130af8382612f59565b60a0948501519790940196909652505094870194925090860190600101613043565b509098975050505050505050565b6000806000606084860312156130f457600080fd5b8335925061310460208501612d94565b915061311260408501612d94565b90509250925092565b60008083601f84011261312d57600080fd5b50813567ffffffffffffffff81111561314557600080fd5b6020830191508360208260051b8501011115612ed657600080fd5b6000806000806040858703121561317657600080fd5b843567ffffffffffffffff8082111561318e57600080fd5b61319a8883890161311b565b909650945060208701359150808211156131b357600080fd5b50612f2b8782880161311b565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561321557603f19888603018452613203858351612f9f565b945092850192908501906001016131e7565b5092979650505050505050565b8015158114610a5957600080fd5b6000806000806000806080878903121561324957600080fd5b61325287612d94565b9550602087013561326281613222565b9450604087013567ffffffffffffffff8082111561327f57600080fd5b61328b8a838b01612e94565b909650945060608901359150808211156132a457600080fd5b506132b189828a01612e94565b979a9699509497509295939492505050565b6000806000606084860312156132d857600080fd5b6132e184612d94565b92506132ef60208501612d94565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016133535761335361332b565b5060010190565b600181811c9082168061336e57607f821691505b60208210810361338e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610b3c57600081815260208120601f850160051c810160208610156133bb5750805b601f850160051c820191505b818110156133da578281556001016133c7565b505050505050565b815167ffffffffffffffff8111156133fc576133fc6132ff565b6134108161340a845461335a565b84613394565b602080601f831160018114613445576000841561342d5750858301515b600019600386901b1c1916600185901b1785556133da565b600085815260208120601f198616915b8281101561347457888601518255948401946001909101908401613455565b50858210156134925787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b03851681526060602082018190526000906134f090830185876134a2565b905082604083015295945050505050565b818103818111156107745761077461332b565b808201808211156107745761077461332b565b60008184825b858110156129a4576001600160a01b0361354683612d94565b168352602092830192919091019060010161352d565b6020808252810182905260006001600160fb1b0383111561357c57600080fd5b8260051b80856040850137919091016040019392505050565b80820281158282048414176107745761077461332b565b86151581526080602082015260006135c86080830187896134a2565b82810360408401526135db8186886134a2565b915050826060830152979650505050505050565b60006020828403121561360157600080fd5b8151612d8d8161322256fe920994fc3bfe282f3f20cdccf1b7c5e46c63d963e822d98efff90abd41c12e212ae6a113c0ed5b78a53413ffbb7679881f11145ccfba4fb92e863dfcd5a1d2f3ee244ef9da0b2f89a74b208ea9fe1a639ebdf634027d9e1f092b58c39954fa37c41a06b26ced3a23b7bf835a0918ade784f4055ded86d18305f528f47a726052aa0ec51d0bf03ce5511c9ffc9de2b423d73d1faacd808abf2ac89ccea8a3ecf259a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f506fa31d7a92d9fa9a8898ac41d86ee9b13863605a361c85ae5d6010d5de4f280155aaafb6329a2098580462df33ec4b7441b19729b9601c5fc17ae1cf99a8a52a26469706673582212208972c7be2714e1a898cb647e829081a86faf4a9f1ff40814962004d66a94ecea64736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2BB JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x784FEE0E GT PUSH2 0x182 JUMPI DUP1 PUSH4 0xB0614DB3 GT PUSH2 0xE9 JUMPI DUP1 PUSH4 0xC395FCB3 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xE3A3C522 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xE3A3C522 EQ PUSH2 0x6F5 JUMPI DUP1 PUSH4 0xE55B4F93 EQ PUSH2 0x70A JUMPI DUP1 PUSH4 0xF53F5E1E EQ PUSH2 0x71D JUMPI DUP1 PUSH4 0xFC810286 EQ PUSH2 0x730 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC395FCB3 EQ PUSH2 0x6BC JUMPI DUP1 PUSH4 0xCC5ED5EA EQ PUSH2 0x6CF JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x6E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB0614DB3 EQ PUSH2 0x608 JUMPI DUP1 PUSH4 0xB1BA3883 EQ PUSH2 0x65C JUMPI DUP1 PUSH4 0xB1EA540E EQ PUSH2 0x66F JUMPI DUP1 PUSH4 0xB5617EF7 EQ PUSH2 0x682 JUMPI DUP1 PUSH4 0xB8AD415E EQ PUSH2 0x6A2 JUMPI DUP1 PUSH4 0xBD7CA7BA EQ PUSH2 0x6A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9A98163B GT PUSH2 0x13B JUMPI DUP1 PUSH4 0x9A98163B EQ PUSH2 0x580 JUMPI DUP1 PUSH4 0xA1F34163 EQ PUSH2 0x5A0 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x5B3 JUMPI DUP1 PUSH4 0xA3574C5B EQ PUSH2 0x5BB JUMPI DUP1 PUSH4 0xAA52617C EQ PUSH2 0x5E2 JUMPI DUP1 PUSH4 0xABAA536F EQ PUSH2 0x5F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x784FEE0E EQ PUSH2 0x4E0 JUMPI DUP1 PUSH4 0x7BFF0975 EQ PUSH2 0x4F5 JUMPI DUP1 PUSH4 0x7E5EFFA4 EQ PUSH2 0x508 JUMPI DUP1 PUSH4 0x8850845F EQ PUSH2 0x51B JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x52E JUMPI DUP1 PUSH4 0x99EB08D6 EQ PUSH2 0x541 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x456F19FC GT PUSH2 0x226 JUMPI DUP1 PUSH4 0x61462F0E GT PUSH2 0x1DF JUMPI DUP1 PUSH4 0x61462F0E EQ PUSH2 0x468 JUMPI DUP1 PUSH4 0x68B688C1 EQ PUSH2 0x47B JUMPI DUP1 PUSH4 0x68DD17A5 EQ PUSH2 0x48E JUMPI DUP1 PUSH4 0x69D0B517 EQ PUSH2 0x4A3 JUMPI DUP1 PUSH4 0x6E1D616E EQ PUSH2 0x4B8 JUMPI DUP1 PUSH4 0x7780E9C1 EQ PUSH2 0x4CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x456F19FC EQ PUSH2 0x3E9 JUMPI DUP1 PUSH4 0x4E4DDB92 EQ PUSH2 0x3FC JUMPI DUP1 PUSH4 0x52F84B72 EQ PUSH2 0x41C JUMPI DUP1 PUSH4 0x57C03371 EQ PUSH2 0x42F JUMPI DUP1 PUSH4 0x5CB87D26 EQ PUSH2 0x442 JUMPI DUP1 PUSH4 0x60376528 EQ PUSH2 0x455 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x261191B7 GT PUSH2 0x278 JUMPI DUP1 PUSH4 0x261191B7 EQ PUSH2 0x375 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x388 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x39B JUMPI DUP1 PUSH4 0x3CA7C02A EQ PUSH2 0x3AE JUMPI DUP1 PUSH4 0x3E251518 EQ PUSH2 0x3C3 JUMPI DUP1 PUSH4 0x4308AC98 EQ PUSH2 0x3D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x2C0 JUMPI DUP1 PUSH4 0x443CD2A EQ PUSH2 0x2E8 JUMPI DUP1 PUSH4 0x8D0AEF7 EQ PUSH2 0x2FD JUMPI DUP1 PUSH4 0x1E223B2A EQ PUSH2 0x31E JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x331 JUMPI DUP1 PUSH4 0x25D5E87E EQ PUSH2 0x362 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2D3 PUSH2 0x2CE CALLDATASIZE PUSH1 0x4 PUSH2 0x2D63 JUMP JUMPDEST PUSH2 0x743 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2FB PUSH2 0x2F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x77A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x310 PUSH2 0x30B CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x7FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2DF SWAP3 SWAP2 SWAP1 PUSH2 0x2DCB JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x32C CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x958 JUMP JUMPDEST PUSH2 0x354 PUSH2 0x33F CALLDATASIZE PUSH1 0x4 PUSH2 0x2E4F JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2DF JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x370 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x9DA JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x383 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0xA5C JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x396 CALLDATASIZE PUSH1 0x4 PUSH2 0x2E68 JUMP JUMPDEST PUSH2 0xADE JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x3A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x2E68 JUMP JUMPDEST PUSH2 0xB09 JUMP JUMPDEST PUSH2 0x354 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x364D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x3D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0xB41 JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x3E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2EDD JUMP JUMPDEST PUSH2 0xBC3 JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x3F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x10B3 JUMP JUMPDEST PUSH2 0x40F PUSH2 0x40A CALLDATASIZE PUSH1 0x4 PUSH2 0x2F37 JUMP JUMPDEST PUSH2 0x1135 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2DF SWAP2 SWAP1 PUSH2 0x301C JUMP JUMPDEST PUSH2 0x2D3 PUSH2 0x42A CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x147B JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x43D CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x1495 JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x450 CALLDATASIZE PUSH1 0x4 PUSH2 0x30DF JUMP JUMPDEST PUSH2 0x1517 JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x463 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x15AA JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x476 CALLDATASIZE PUSH1 0x4 PUSH2 0x3160 JUMP JUMPDEST PUSH2 0x162C JUMP JUMPDEST PUSH2 0x40F PUSH2 0x489 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x173F JUMP JUMPDEST PUSH2 0x354 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x360D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x354 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x366D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x354 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36AD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x4DB CALLDATASIZE PUSH1 0x4 PUSH2 0x2E4F JUMP JUMPDEST PUSH2 0x1AD0 JUMP JUMPDEST PUSH2 0x354 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x368D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x2D3 PUSH2 0x503 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x1BBD JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x516 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x1BD7 JUMP JUMPDEST PUSH2 0x2D3 PUSH2 0x529 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x1C59 JUMP JUMPDEST PUSH2 0x2D3 PUSH2 0x53C CALLDATASIZE PUSH1 0x4 PUSH2 0x2E68 JUMP JUMPDEST PUSH2 0x1C6F JUMP JUMPDEST PUSH2 0x568 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2DF JUMP JUMPDEST PUSH2 0x593 PUSH2 0x58E CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x1C98 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2DF SWAP2 SWAP1 PUSH2 0x31C0 JUMP JUMPDEST PUSH2 0x2D3 PUSH2 0x5AE CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x1EB8 JUMP JUMPDEST PUSH2 0x354 PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x568 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x5F0 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x1ED2 JUMP JUMPDEST PUSH2 0x2D3 PUSH2 0x603 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x1F54 JUMP JUMPDEST PUSH2 0x61B PUSH2 0x616 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x1F6E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP8 ISZERO ISZERO DUP9 MSTORE SWAP6 ISZERO ISZERO PUSH1 0x20 DUP9 ADD MSTORE SWAP4 ISZERO ISZERO SWAP5 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x60 DUP6 ADD MSTORE ISZERO ISZERO PUSH1 0x80 DUP5 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0xA0 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD PUSH2 0x2DF JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x66A CALLDATASIZE PUSH1 0x4 PUSH2 0x3230 JUMP JUMPDEST PUSH2 0x2027 JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x67D CALLDATASIZE PUSH1 0x4 PUSH2 0x32C3 JUMP JUMPDEST PUSH2 0x2357 JUMP JUMPDEST PUSH2 0x354 PUSH2 0x690 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x18 PUSH2 0x354 JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x6B7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x2518 JUMP JUMPDEST PUSH2 0x2D3 PUSH2 0x6CA CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x2563 JUMP JUMPDEST PUSH2 0x593 PUSH2 0x6DD CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x256F JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x6F0 CALLDATASIZE PUSH1 0x4 PUSH2 0x2E68 JUMP JUMPDEST PUSH2 0x29AF JUMP JUMPDEST PUSH2 0x354 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36CD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x718 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x29D4 JUMP JUMPDEST PUSH2 0x2D3 PUSH2 0x72B CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x2A56 JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x73E CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x2A70 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x774 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x7A2 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x7AD DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH2 0x7C5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x364D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x29AF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x364D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36ED DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE PUSH1 0x60 SWAP5 DUP6 SWAP5 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x86B JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x84D JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x88E JUMPI PUSH2 0x88E PUSH2 0x32FF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x8B7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x94D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP5 MLOAD SWAP1 SWAP2 SWAP1 DUP6 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0x8F5 JUMPI PUSH2 0x8F5 PUSH2 0x3315 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x930 JUMPI PUSH2 0x930 PUSH2 0x3315 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP1 PUSH2 0x945 DUP2 PUSH2 0x3341 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x8BD JUMP JUMPDEST POP SWAP1 SWAP5 SWAP1 SWAP4 POP SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x980 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x98B DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH2 0x9A3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x360D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xADE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x360D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x362D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x9E3 DUP2 PUSH2 0x2A56 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA06 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD TIMESTAMP GT JUMPDEST ISZERO PUSH2 0xA59 JUMPI PUSH2 0xA23 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x364D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH2 0x2AFC JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xA6F32BCBC7DE829D50E1C9CBC1C5B4DAFB4C7A0B8329757AEE62A9B394D71C3B SWAP1 PUSH1 0x0 SWAP1 LOG2 JUMPDEST POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xA84 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xA8F DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH2 0xAA7 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x368D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x29AF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x368D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36ED DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xAF9 DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH2 0xB03 DUP4 DUP4 PUSH2 0x2B6F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0xB32 JUMPI PUSH1 0x40 MLOAD PUSH4 0x334BD919 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB3C DUP3 DUP3 PUSH2 0x2AFC JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xB69 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB74 DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH2 0xB8C PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36AD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x29AF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36AD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36ED DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36AD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xBDB DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP5 GT ISZERO PUSH2 0xC14 JUMPI PUSH1 0x40 MLOAD PUSH4 0x15C25FFD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP6 SWAP1 DUP2 LT PUSH2 0xC3E JUMPI PUSH2 0xC3E PUSH2 0x3315 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x6 MUL ADD PUSH1 0x5 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xC7B JUMPI PUSH1 0x40 MLOAD PUSH4 0xC2D1C491 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP2 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0xCA9 JUMPI PUSH2 0xCA9 PUSH2 0x3315 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x6 MUL ADD PUSH1 0x5 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 PUSH1 0x0 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP8 DUP2 SLOAD DUP2 LT PUSH2 0xD29 JUMPI PUSH2 0xD29 PUSH2 0x3315 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x6 SWAP1 SWAP4 MUL SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP5 MSTORE PUSH1 0x1 DUP3 ADD SLOAD AND SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP4 ADD DUP1 SLOAD SWAP3 SWAP4 SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH2 0xD78 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xDA4 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 ISZERO PUSH2 0xDF1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xDC6 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xDF1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xDD4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0xE0A SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xE36 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 ISZERO PUSH2 0xE83 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xE58 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xE83 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xE66 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x5 SWAP1 SWAP3 ADD SLOAD PUSH1 0xFF DUP1 DUP3 AND ISZERO ISZERO PUSH1 0x40 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x100 SWAP1 SWAP3 DIV AND ISZERO ISZERO PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 DUP4 MSTORE CALLER DUP4 DUP3 ADD MSTORE DUP2 MLOAD PUSH1 0x1F DUP9 ADD DUP3 SWAP1 DIV DUP3 MUL DUP2 ADD DUP3 ADD DUP4 MSTORE DUP8 DUP2 MSTORE SWAP3 SWAP1 SWAP2 ADD SWAP2 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP4 DUP6 MSTORE POP POP TIMESTAMP PUSH1 0x20 SWAP4 DUP5 ADD MSTORE POP PUSH1 0x8 SLOAD DUP2 MSTORE PUSH1 0x6 DUP3 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP4 MLOAD DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR DUP4 SSTORE DUP6 DUP6 ADD MLOAD PUSH1 0x1 DUP5 ADD SSTORE DUP6 DUP5 ADD MLOAD DUP1 MLOAD PUSH1 0x2 DUP6 ADD DUP1 SLOAD DUP5 AND SWAP2 DUP6 AND SWAP2 SWAP1 SWAP2 OR DUP2 SSTORE SWAP6 DUP2 ADD MLOAD PUSH1 0x3 DUP6 ADD DUP1 SLOAD SWAP1 SWAP4 AND SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE SWAP2 DUP3 ADD MLOAD SWAP4 SWAP5 POP DUP5 SWAP4 SWAP1 SWAP3 SWAP1 PUSH1 0x4 DUP5 ADD SWAP1 PUSH2 0xF83 SWAP1 DUP3 PUSH2 0x33E2 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x3 DUP3 ADD SWAP1 PUSH2 0xF98 SWAP1 DUP3 PUSH2 0x33E2 JUMP JUMPDEST POP PUSH1 0x80 DUP3 DUP2 ADD MLOAD PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x5 SWAP1 SWAP3 ADD DUP1 SLOAD PUSH1 0xC0 SWAP1 SWAP5 ADD MLOAD PUSH2 0xFFFF NOT SWAP1 SWAP5 AND SWAP3 ISZERO ISZERO PUSH2 0xFF00 NOT AND SWAP3 SWAP1 SWAP3 OR PUSH2 0x100 SWAP4 ISZERO ISZERO SWAP4 SWAP1 SWAP4 MUL SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x8 DUP4 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP3 ADD MLOAD PUSH1 0x9 DUP3 ADD SWAP1 PUSH2 0x1011 SWAP1 DUP3 PUSH2 0x33E2 JUMP JUMPDEST POP PUSH1 0xA0 SWAP2 SWAP1 SWAP2 ADD MLOAD PUSH1 0xA SWAP1 SWAP2 ADD SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP3 KECCAK256 PUSH1 0x8 DUP1 SLOAD DUP3 SLOAD PUSH1 0x1 DUP2 ADD DUP5 SSTORE SWAP3 DUP6 MSTORE SWAP3 DUP5 KECCAK256 SWAP1 SWAP2 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP1 SLOAD SWAP2 PUSH2 0x105E DUP4 PUSH2 0x3341 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP DUP5 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x7B1F7B3DACB5AFDC95A1242E036C2E87A67F32D97CB111111215F3305223B666 CALLER DUP8 DUP8 TIMESTAMP PUSH1 0x40 MLOAD PUSH2 0x10A3 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x34CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x10DB JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x10E6 DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH2 0x10FE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36CD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xADE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36CD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x362D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 PUSH1 0x8 SLOAD PUSH2 0x1147 SWAP2 SWAP1 PUSH2 0x3501 JUMP JUMPDEST DUP5 GT PUSH2 0x1153 JUMPI DUP4 PUSH2 0x1161 JUMP JUMPDEST DUP3 PUSH1 0x8 SLOAD PUSH2 0x1161 SWAP2 SWAP1 PUSH2 0x3501 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x117E JUMPI PUSH2 0x117E PUSH2 0x32FF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x11B7 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x11A4 PUSH2 0x2CCD JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x119C JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1472 JUMPI PUSH1 0x6 PUSH1 0x0 PUSH2 0x11D3 DUP4 DUP9 PUSH2 0x3514 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 KECCAK256 DUP2 MLOAD PUSH1 0xC0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD DUP3 DUP7 ADD MSTORE DUP4 MLOAD PUSH1 0xE0 DUP2 ADD DUP6 MSTORE PUSH1 0x2 DUP5 ADD DUP1 SLOAD DUP4 AND DUP3 MSTORE PUSH1 0x3 DUP6 ADD SLOAD SWAP1 SWAP3 AND SWAP6 DUP2 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x4 DUP4 ADD DUP1 SLOAD SWAP3 SWAP6 SWAP4 SWAP5 DUP7 DUP2 ADD SWAP5 SWAP4 SWAP1 DUP5 ADD SWAP2 SWAP1 PUSH2 0x1244 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1270 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x12BD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1292 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x12BD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x12A0 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0x12D6 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1302 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x134F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1324 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x134F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1332 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x5 SWAP1 SWAP3 ADD SLOAD PUSH1 0xFF DUP1 DUP3 AND ISZERO ISZERO PUSH1 0x40 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x100 SWAP1 SWAP3 DIV AND ISZERO ISZERO PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 DUP4 MSTORE PUSH1 0x8 DUP5 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP4 ADD MSTORE PUSH1 0x9 DUP4 ADD DUP1 SLOAD SWAP3 SWAP1 SWAP2 ADD SWAP2 PUSH2 0x13B6 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x13E2 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x142F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1404 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x142F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1412 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1454 JUMPI PUSH2 0x1454 PUSH2 0x3315 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0x146A SWAP1 PUSH2 0x3341 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x11BD JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x774 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x368D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0x1C6F JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x14BD JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x14C8 DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH2 0x14E0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x364D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xADE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x364D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x362D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1522 DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH2 0x152C DUP5 DUP5 PUSH2 0x1C6F JUMP JUMPDEST PUSH2 0x1549 JUMPI PUSH1 0x40 MLOAD PUSH4 0x66783C9D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1553 DUP5 DUP5 PUSH2 0x2AFC JUMP JUMPDEST POP PUSH2 0x155E DUP5 DUP4 PUSH2 0x2B6F JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP6 SWAP2 PUSH32 0x274DD4127A55DCB6F6C12ED38FEC5007D965D2AFFFA8B0BC75C3DC8F3F6B2224 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x15D2 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x15DD DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH2 0x15F5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x366D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xADE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x366D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x362D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1637 DUP2 PUSH2 0x2AF2 JUMP JUMPDEST DUP4 ISZERO DUP1 PUSH2 0x1642 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x1660 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7D6EAF93 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP3 EQ PUSH2 0x1680 JUMPI PUSH1 0x40 MLOAD PUSH4 0x90A2F793 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x16E6 JUMPI PUSH2 0x16D3 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x16A0 JUMPI PUSH2 0x16A0 PUSH2 0x3315 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x16B9 JUMPI PUSH2 0x16B9 PUSH2 0x3315 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x16CE SWAP2 SWAP1 PUSH2 0x2DB0 JUMP JUMPDEST PUSH2 0x2B6F JUMP JUMPDEST POP DUP1 PUSH2 0x16DE DUP2 PUSH2 0x3341 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1683 JUMP JUMPDEST POP DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x16F7 SWAP3 SWAP2 SWAP1 PUSH2 0x3527 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH32 0xF4D52C90739C68C4E82D39CFBEEE6B6613784BF9B28D2CDB3A02203799CF0606 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x1730 SWAP3 SWAP2 SWAP1 PUSH2 0x355C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE PUSH1 0x60 SWAP5 SWAP4 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x179E JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x178A JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x17C1 JUMPI PUSH2 0x17C1 PUSH2 0x32FF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x17FA JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x17E7 PUSH2 0x2CCD JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x17DF JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x1AC8 JUMPI PUSH1 0x6 PUSH1 0x0 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x181F JUMPI PUSH2 0x181F PUSH2 0x3315 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 MSTORE DUP2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 KECCAK256 DUP2 MLOAD PUSH1 0xC0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD DUP3 DUP7 ADD MSTORE DUP4 MLOAD PUSH1 0xE0 DUP2 ADD DUP6 MSTORE PUSH1 0x2 DUP5 ADD DUP1 SLOAD DUP4 AND DUP3 MSTORE PUSH1 0x3 DUP6 ADD SLOAD SWAP1 SWAP3 AND SWAP6 DUP2 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x4 DUP4 ADD DUP1 SLOAD SWAP3 SWAP6 SWAP4 SWAP5 DUP7 DUP2 ADD SWAP5 SWAP4 SWAP1 DUP5 ADD SWAP2 SWAP1 PUSH2 0x189A SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x18C6 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1913 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x18E8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1913 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x18F6 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0x192C SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1958 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x19A5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x197A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x19A5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1988 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x5 SWAP1 SWAP3 ADD SLOAD PUSH1 0xFF DUP1 DUP3 AND ISZERO ISZERO PUSH1 0x40 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x100 SWAP1 SWAP3 DIV AND ISZERO ISZERO PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 DUP4 MSTORE PUSH1 0x8 DUP5 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP4 ADD MSTORE PUSH1 0x9 DUP4 ADD DUP1 SLOAD SWAP3 SWAP1 SWAP2 ADD SWAP2 PUSH2 0x1A0C SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1A38 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1A85 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1A5A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1A85 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1A68 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1AAA JUMPI PUSH2 0x1AAA PUSH2 0x3315 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0x1AC0 SWAP1 PUSH2 0x3341 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1800 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1AD9 CALLER PUSH2 0x2A56 JUMP JUMPDEST ISZERO PUSH2 0x1AF7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x510A5833 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 ISZERO PUSH2 0x1B16 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7294221 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x18 DUP2 GT ISZERO PUSH2 0x1B38 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7294221 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1B46 DUP3 PUSH2 0xE10 PUSH2 0x3595 JUMP JUMPDEST SWAP1 POP PUSH2 0x1B60 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x364D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x2B6F JUMP JUMPDEST POP PUSH2 0x1B6B DUP2 TIMESTAMP PUSH2 0x3514 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 MLOAD PUSH32 0xC526CDAE63C288EA4504281FE29B0AE3352C8A9CCAE61EBA8C21CD25A949E0F1 SWAP1 PUSH2 0x1BB1 SWAP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x774 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x366D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0x1C6F JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1BFF JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1C0A DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH2 0x1C22 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x360D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x29AF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x360D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36ED DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x774 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36CD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x60 SWAP2 SUB PUSH2 0x1CD2 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFC325983 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE SWAP2 SWAP4 SWAP1 SWAP3 DUP5 ADD JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x1EAD JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x6 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP5 MSTORE PUSH1 0x1 DUP3 ADD SLOAD AND SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP4 ADD DUP1 SLOAD SWAP3 SWAP4 SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH2 0x1D5B SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1D87 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1DD4 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1DA9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1DD4 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1DB7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0x1DED SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1E19 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1E66 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1E3B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1E66 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1E49 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x5 SWAP1 SWAP3 ADD SLOAD PUSH1 0xFF DUP1 DUP3 AND ISZERO ISZERO PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV AND ISZERO ISZERO PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP1 DUP3 MSTORE PUSH1 0x1 SWAP3 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x1D05 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x774 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x360D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0x1C6F JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1EFA JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1F05 DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH2 0x1F1D PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x368D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xADE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x368D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x362D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x774 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36AD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0x1C6F JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x1F80 DUP2 DUP10 PUSH2 0x1C6F JUMP JUMPDEST PUSH2 0x1F98 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x366D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP11 PUSH2 0x1C6F JUMP JUMPDEST PUSH2 0x1FB0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36CD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP12 PUSH2 0x1C6F JUMP JUMPDEST PUSH2 0x1FC8 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36AD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP13 PUSH2 0x1C6F JUMP JUMPDEST PUSH2 0x1FE0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x360D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP14 PUSH2 0x1C6F JUMP JUMPDEST PUSH2 0x1FF8 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x368D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP15 PUSH2 0x1C6F JUMP JUMPDEST PUSH2 0x2010 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x364D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP16 PUSH2 0x1C6F JUMP JUMPDEST SWAP6 SWAP15 SWAP5 SWAP14 POP SWAP3 SWAP12 POP SWAP1 SWAP10 POP SWAP8 POP SWAP6 POP SWAP1 SWAP4 POP SWAP2 POP POP JUMP JUMPDEST DUP6 PUSH2 0x2031 CALLER PUSH2 0x1C59 JUMP JUMPDEST PUSH2 0x204E JUMPI PUSH1 0x40 MLOAD PUSH4 0xE9AAB751 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2058 DUP2 CALLER PUSH2 0x2BF9 JUMP JUMPDEST PUSH2 0x2075 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3DEC104F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD TIMESTAMP GT ISZERO PUSH2 0x20B9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x17A7851F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD TIMESTAMP GT ISZERO PUSH2 0x20FD JUMPI PUSH1 0x40 MLOAD PUSH4 0x17A7851F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP POP SWAP1 DUP3 MSTORE POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F DUP9 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP7 DUP2 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP4 DUP6 MSTORE POP POP TIMESTAMP PUSH1 0x20 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP12 ISZERO ISZERO PUSH1 0x40 DUP1 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP1 SWAP5 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP2 AND DUP5 MSTORE PUSH1 0x4 DUP3 MSTORE DUP5 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE SWAP2 DUP7 MSTORE SWAP5 DUP4 SWAP1 KECCAK256 DUP8 MLOAD PUSH1 0x6 SWAP1 SWAP7 MUL ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP7 DUP5 AND SWAP7 SWAP1 SWAP7 OR DUP2 SSTORE SWAP3 DUP8 ADD MLOAD SWAP1 DUP4 ADD DUP1 SLOAD SWAP1 SWAP6 AND SWAP2 AND OR SWAP1 SWAP3 SSTORE POP SWAP1 DUP3 ADD MLOAD SWAP2 SWAP3 POP DUP3 SWAP2 PUSH1 0x2 DUP3 ADD SWAP1 PUSH2 0x2226 SWAP1 DUP3 PUSH2 0x33E2 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x3 DUP3 ADD SWAP1 PUSH2 0x223B SWAP1 DUP3 PUSH2 0x33E2 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x4 DUP3 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0x5 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0xC0 SWAP1 SWAP4 ADD MLOAD ISZERO ISZERO PUSH2 0x100 MUL PUSH2 0xFF00 NOT SWAP3 ISZERO ISZERO SWAP3 SWAP1 SWAP3 AND PUSH2 0xFFFF NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR OR SWAP1 SSTORE DUP7 PUSH2 0x22F8 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB83CC3B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0xB83CC3B3 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x22DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x22F3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xD1B5F5F27A6C067D892D5201D9160332AD987F12ED191D83BE7D4FB4DC876716 DUP10 DUP10 DUP10 DUP10 DUP10 TIMESTAMP PUSH1 0x40 MLOAD PUSH2 0x2345 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x35AC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2360 CALLER PUSH2 0x1BBD JUMP JUMPDEST PUSH2 0x237D JUMPI PUSH1 0x40 MLOAD PUSH4 0x36FE9371 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x261E85CD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x261E85CD SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x23E3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2407 SWAP2 SWAP1 PUSH2 0x35EF JUMP JUMPDEST PUSH2 0x2424 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8A22277 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x242D DUP3 PUSH2 0x1C59 JUMP JUMPDEST PUSH2 0x244A JUMPI PUSH1 0x40 MLOAD PUSH4 0xE9AAB751 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP4 SSTORE SWAP2 DUP6 MSTORE DUP4 DUP6 KECCAK256 ADD DUP1 SLOAD SWAP7 DUP10 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP8 DUP9 AND DUP2 OR SWAP1 SWAP2 SSTORE DUP5 MSTORE PUSH1 0x3 DUP4 MSTORE SWAP1 DUP4 KECCAK256 DUP1 SLOAD SWAP2 DUP3 ADD DUP2 SSTORE DUP4 MSTORE SWAP2 KECCAK256 ADD DUP1 SLOAD SWAP1 SWAP3 AND OR SWAP1 SSTORE PUSH2 0x24B3 DUP2 TIMESTAMP PUSH2 0x3514 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP9 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE MLOAD DUP5 DUP2 MSTORE SWAP2 SWAP3 SWAP1 SWAP2 PUSH32 0xEB676771C16D4FB5BC9E83F804BE8AD19CD67426581C189E482796624A1AC9F SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x2540 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x254B DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH2 0xB3C PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36CD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x29AF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x774 DUP2 DUP4 PUSH2 0x1C6F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE PUSH1 0x60 SWAP5 SWAP4 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x25D8 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x25BA JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x2651 JUMPI PUSH1 0x4 PUSH1 0x0 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2606 JUMPI PUSH2 0x2606 PUSH2 0x3315 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 POP DUP3 PUSH2 0x263D SWAP2 SWAP1 PUSH2 0x3514 JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0x2649 DUP2 PUSH2 0x3341 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x25E7 JUMP JUMPDEST POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x266D JUMPI PUSH2 0x266D PUSH2 0x32FF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x26A6 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x2693 PUSH2 0x2D10 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x268B JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x29A4 JUMPI PUSH1 0x0 JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x26CF JUMPI PUSH2 0x26CF PUSH2 0x3315 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 POP DUP2 LT ISZERO PUSH2 0x2991 JUMPI DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x4 PUSH1 0x0 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2722 JUMPI PUSH2 0x2722 PUSH2 0x3315 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x275B JUMPI PUSH2 0x275B PUSH2 0x3315 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x6 SWAP1 SWAP2 MUL ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x297F JUMPI PUSH1 0x4 PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2790 JUMPI PUSH2 0x2790 PUSH2 0x3315 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x27C9 JUMPI PUSH2 0x27C9 PUSH2 0x3315 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x6 SWAP1 SWAP4 MUL SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP5 MSTORE PUSH1 0x1 DUP3 ADD SLOAD AND SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP4 ADD DUP1 SLOAD SWAP3 SWAP4 SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH2 0x2818 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2844 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2891 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2866 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2891 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2874 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH2 0x28AA SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x28D6 SWAP1 PUSH2 0x335A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2923 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x28F8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2923 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2906 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x5 SWAP1 SWAP2 ADD SLOAD PUSH1 0xFF DUP1 DUP3 AND ISZERO ISZERO PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV AND ISZERO ISZERO PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE DUP5 DUP5 PUSH2 0x2961 DUP2 PUSH2 0x3341 JUMP JUMPDEST SWAP6 POP DUP2 MLOAD DUP2 LT PUSH2 0x2973 JUMPI PUSH2 0x2973 PUSH2 0x3315 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST DUP1 PUSH2 0x2989 DUP2 PUSH2 0x3341 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x26B9 JUMP JUMPDEST POP DUP1 PUSH2 0x299C DUP2 PUSH2 0x3341 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x26AD JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x29CA DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH2 0xB03 DUP4 DUP4 PUSH2 0x2AFC JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x29FC JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2A07 DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH2 0x2A1F PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36AD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0xADE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36AD DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x362D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x774 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x364D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0x1C6F JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x2A98 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2AA3 DUP2 PUSH2 0x2AF2 JUMP JUMPDEST PUSH2 0x2ABB PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x366D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH2 0x29AF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x366D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36ED DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xA59 DUP2 CALLER PUSH2 0x2C8C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B08 DUP4 DUP4 PUSH2 0x1C6F JUMP JUMPDEST ISZERO PUSH2 0x2B67 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP7 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x774 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x774 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B7B DUP4 DUP4 PUSH2 0x1C6F JUMP JUMPDEST PUSH2 0x2B67 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x2BB1 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x774 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0x2C82 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP2 DUP6 AND SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0x2C4C JUMPI PUSH2 0x2C4C PUSH2 0x3315 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x2C70 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x774 JUMP JUMPDEST DUP1 PUSH2 0x2C7A DUP2 PUSH2 0x3341 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2BFD JUMP JUMPDEST POP PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2C96 DUP3 DUP3 PUSH2 0x1C6F JUMP JUMPDEST PUSH2 0x2CC9 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE2517D3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD PUSH2 0x2CEC PUSH2 0x2D10 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2D75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x2D8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2DAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2DC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2D8D DUP3 PUSH2 0x2D94 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP4 MLOAD SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x20 SWAP1 PUSH1 0x60 DUP5 ADD SWAP1 DUP3 DUP8 ADD DUP5 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2E0D JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2DE8 JUMP JUMPDEST POP POP POP DUP4 DUP2 SUB DUP3 DUP6 ADD MSTORE DUP5 MLOAD DUP1 DUP3 MSTORE DUP6 DUP4 ADD SWAP2 DUP4 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2E42 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2E26 JUMP JUMPDEST POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2E61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2E7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x2E8B PUSH1 0x20 DUP5 ADD PUSH2 0x2D94 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2EA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2EBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2ED6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2EF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2EFC DUP6 PUSH2 0x2D94 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2F1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2F2B DUP8 DUP3 DUP9 ADD PUSH2 0x2E94 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2F4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2F7F JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x2F63 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP4 MLOAD AND DUP5 MSTORE DUP1 PUSH1 0x20 DUP5 ADD MLOAD AND PUSH1 0x20 DUP6 ADD MSTORE POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0xE0 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x2FD4 PUSH1 0xE0 DUP6 ADD DUP3 PUSH2 0x2F59 JUMP JUMPDEST SWAP1 POP PUSH1 0x60 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x60 DUP7 ADD MSTORE PUSH2 0x2FED DUP3 DUP3 PUSH2 0x2F59 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD ISZERO ISZERO PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD ISZERO ISZERO PUSH1 0xC0 DUP6 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 SWAP3 POP DUP3 DUP7 ADD SWAP2 POP DUP3 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD DUP5 DUP9 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x30D1 JUMPI DUP9 DUP4 SUB PUSH1 0x3F NOT ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP6 MSTORE DUP9 DUP3 ADD MLOAD DUP10 DUP7 ADD MSTORE DUP8 DUP3 ADD MLOAD PUSH1 0xC0 DUP10 DUP8 ADD DUP2 SWAP1 MSTORE SWAP2 SWAP1 PUSH2 0x3087 DUP4 DUP9 ADD DUP3 PUSH2 0x2F9F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP2 DUP2 DUP6 ADD MLOAD AND DUP2 DUP9 ADD MSTORE POP POP PUSH1 0x80 DUP1 DUP4 ADD MLOAD DUP7 DUP4 SUB DUP3 DUP9 ADD MSTORE PUSH2 0x30AF DUP4 DUP3 PUSH2 0x2F59 JUMP JUMPDEST PUSH1 0xA0 SWAP5 DUP6 ADD MLOAD SWAP8 SWAP1 SWAP5 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP SWAP5 DUP8 ADD SWAP5 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3043 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x30F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH2 0x3104 PUSH1 0x20 DUP6 ADD PUSH2 0x2D94 JUMP JUMPDEST SWAP2 POP PUSH2 0x3112 PUSH1 0x40 DUP6 ADD PUSH2 0x2D94 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x312D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3145 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x2ED6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3176 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x318E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x319A DUP9 DUP4 DUP10 ADD PUSH2 0x311B JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x31B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F2B DUP8 DUP3 DUP9 ADD PUSH2 0x311B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3215 JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x3203 DUP6 DUP4 MLOAD PUSH2 0x2F9F JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x31E7 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xA59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3249 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3252 DUP8 PUSH2 0x2D94 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x3262 DUP2 PUSH2 0x3222 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x327F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x328B DUP11 DUP4 DUP12 ADD PUSH2 0x2E94 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x32A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x32B1 DUP10 DUP3 DUP11 ADD PUSH2 0x2E94 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x32D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x32E1 DUP5 PUSH2 0x2D94 JUMP JUMPDEST SWAP3 POP PUSH2 0x32EF PUSH1 0x20 DUP6 ADD PUSH2 0x2D94 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x3353 JUMPI PUSH2 0x3353 PUSH2 0x332B JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x336E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x338E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0xB3C JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x33BB JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x33DA JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x33C7 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x33FC JUMPI PUSH2 0x33FC PUSH2 0x32FF JUMP JUMPDEST PUSH2 0x3410 DUP2 PUSH2 0x340A DUP5 SLOAD PUSH2 0x335A JUMP JUMPDEST DUP5 PUSH2 0x3394 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x3445 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x342D JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x33DA JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3474 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x3455 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x3492 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 DUP3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x34F0 SWAP1 DUP4 ADD DUP6 DUP8 PUSH2 0x34A2 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x774 JUMPI PUSH2 0x774 PUSH2 0x332B JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x774 JUMPI PUSH2 0x774 PUSH2 0x332B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP3 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x29A4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x3546 DUP4 PUSH2 0x2D94 JUMP JUMPDEST AND DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x352D JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFB SHL SUB DUP4 GT ISZERO PUSH2 0x357C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP6 PUSH1 0x40 DUP6 ADD CALLDATACOPY SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x774 JUMPI PUSH2 0x774 PUSH2 0x332B JUMP JUMPDEST DUP7 ISZERO ISZERO DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x35C8 PUSH1 0x80 DUP4 ADD DUP8 DUP10 PUSH2 0x34A2 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x35DB DUP2 DUP7 DUP9 PUSH2 0x34A2 JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3601 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2D8D DUP2 PUSH2 0x3222 JUMP INVALID SWAP3 MULMOD SWAP5 0xFC EXTCODESIZE INVALID 0x28 0x2F EXTCODEHASH KECCAK256 0xCD 0xCC CALL 0xB7 0xC5 0xE4 PUSH13 0x63D963E822D98EFFF90ABD41C1 0x2E 0x21 0x2A 0xE6 LOG1 SGT 0xC0 0xED JUMPDEST PUSH25 0xA53413FFBB7679881F11145CCFBA4FB92E863DFCD5A1D2F3EE 0x24 0x4E 0xF9 0xDA SIGNEXTEND 0x2F DUP10 0xA7 0x4B KECCAK256 DUP15 0xA9 INVALID BYTE PUSH4 0x9EBDF634 MUL PUSH30 0x9E1F092B58C39954FA37C41A06B26CED3A23B7BF835A0918ADE784F4055D 0xED DUP7 0xD1 DUP4 SDIV CREATE2 0x28 DELEGATECALL PUSH27 0x726052AA0EC51D0BF03CE5511C9FFC9DE2B423D73D1FAACD808ABF 0x2A 0xC8 SWAP13 0xCE 0xA8 LOG3 0xEC CALLCODE MSIZE LOG1 0xC4 DUP15 PC CALLDATACOPY 0xAD PUSH27 0x7F3DCEDCBE129BF3249EC4FBF651FD4F5E2600EAD39FE2F506FA31 0xD7 0xA9 0x2D SWAP16 0xA9 0xA8 DUP10 DUP11 0xC4 SAR DUP7 0xEE SWAP12 SGT DUP7 CALLDATASIZE SDIV LOG3 PUSH2 0xC85A 0xE5 0xD6 ADD 0xD 0x5D 0xE4 CALLCODE DUP1 ISZERO GAS 0xAA 0xFB PUSH4 0x29A20985 DUP1 CHAINID 0x2D RETURN RETURNDATACOPY 0xC4 0xB7 PREVRANDAO SHL NOT PUSH19 0x9B9601C5FC17AE1CF99A8A52A2646970667358 0x22 SLT KECCAK256 DUP10 PUSH19 0xC7BE2714E1A898CB647E829081A86FAF4A9F1F DELEGATECALL ADDMOD EQ SWAP7 KECCAK256 DIV 0xD6 PUSH11 0x94ECEA64736F6C63430008 EQ STOP CALLER ","sourceMap":"808:9000:21:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2565:202:0;;;;;;:::i;:::-;;:::i;:::-;;;470:14:25;;463:22;445:41;;433:2;418:18;2565:202:0;;;;;;;;8812:211:20;;;;;;:::i;:::-;;:::i;:::-;;6819:481:21;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;6440:216:20:-;;;;;;:::i;:::-;;:::i;3810:120:0:-;;;;;;:::i;:::-;3875:7;3901:12;;;;;;;;;;:22;;;;3810:120;;;;2380:25:25;;;2368:2;2353:18;3810:120:0;2234:177:25;2752:252:20;;;;;;:::i;:::-;;:::i;8553:249::-;;;;;;:::i;:::-;;:::i;4226:136:0:-;;;;;;:::i;:::-;;:::i;5328:245::-;;;;;;:::i;:::-;;:::i;913:62:20:-;;-1:-1:-1;;;;;;;;;;;913:62:20;;8114:205;;;;;;:::i;:::-;;:::i;4877:1295:21:-;;;;;;:::i;:::-;;:::i;6006:214:20:-;;;;;;:::i;:::-;;:::i;8823:506:21:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;10012:145:20:-;;;;;;:::i;:::-;;:::i;6916:208::-;;;;;;:::i;:::-;;:::i;4150:355::-;;;;;;:::i;:::-;;:::i;5780:216::-;;;;;;:::i;:::-;;:::i;3272:548::-;;;;;;:::i;:::-;;:::i;9335:471:21:-;;;;;;:::i;:::-;;:::i;743:70:20:-;;-1:-1:-1;;;;;;;;;;;743:70:20;;510:74;;-1:-1:-1;;;;;;;;;;;510:74:20;;673:64;;-1:-1:-1;;;;;;;;;;;673:64:20;;1723:643;;;;;;:::i;:::-;;:::i;819:88::-;;-1:-1:-1;;;;;;;;;;;819:88:20;;9486:126;;;;;;:::i;:::-;;:::i;8325:222::-;;;;;;:::i;:::-;;:::i;9618:126::-;;;;;;:::i;:::-;;:::i;2854:136:0:-;;;;;;:::i;:::-;;:::i;905:53:21:-;;;;;;;;-1:-1:-1;;;;;8513:32:25;;;8495:51;;8483:2;8468:18;905:53:21;8318:234:25;8360:317:21;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;9878:128:20:-;;;;;;:::i;:::-;;:::i;2187:49:0:-;;2232:4;2187:49;;857:42:21;;;;;6667:243:20;;;;;;:::i;:::-;;:::i;9750:122::-;;;;;;:::i;:::-;;:::i;4552:617::-;;;;;;:::i;:::-;;:::i;:::-;;;;9957:14:25;;9950:22;9932:41;;10016:14;;10009:22;10004:2;9989:18;;9982:50;10075:14;;10068:22;10048:18;;;10041:50;;;;10134:14;;10127:22;10122:2;10107:18;;10100:50;10194:14;10187:22;10181:3;10166:19;;10159:51;10254:14;;10247:22;10241:3;10226:19;;10219:51;10314:14;10307:22;10301:3;10286:19;;10279:51;9919:3;9904:19;4552:617:20;9659:677:25;3551:1142:21;;;;;;:::i;:::-;;:::i;2671:721::-;;;;;;:::i;:::-;;:::i;982:51:20:-;;;;;;:::i;:::-;;;;;;;;;;;;;;2413:92;2496:2;2413:92;;7947:161;;;;;;:::i;:::-;;:::i;9355:125::-;;;;;;:::i;:::-;;:::i;7306:908:21:-;;;;;;:::i;:::-;;:::i;4642:138:0:-;;;;;;:::i;:::-;;:::i;590:77:20:-;;-1:-1:-1;;;;;;;;;;;590:77:20;;6226:208;;;;;;:::i;:::-;;:::i;10167:120::-;;;;;;:::i;:::-;;:::i;7721:220::-;;;;;;:::i;:::-;;:::i;2565:202:0:-;2650:4;-1:-1:-1;;;;;;2673:47:0;;-1:-1:-1;;;2673:47:0;;:87;;-1:-1:-1;;;;;;;;;;861:40:14;;;2724:36:0;2666:94;2565:202;-1:-1:-1;;2565:202:0:o;8812:211:20:-;8881:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;8929:32:20::2;-1:-1:-1::0;;;;;;;;;;;8953:7:20::2;8929:10;:32::i;:::-;8976:40;::::0;-1:-1:-1;;;;;8976:40:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;951:24:20;-1:-1:-1;;;;;;;;;;;8976:40:20;;;::::2;1182:1:::1;8812:211:::0;;:::o;6819:481:21:-;-1:-1:-1;;;;;7003:33:21;;6973:27;7003:33;;;:21;:33;;;;;;;;6973:63;;;;;;;;;;;;;;;;;6906:16;;;;6973:27;;:63;7003:33;6973:63;;;7003:33;6973:63;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6973:63:21;;;;;;;;;;;;;;;;;;;;;;;7046:24;7087:10;:17;7073:32;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7073:32:21;;7046:59;;7121:9;7116:138;7140:10;:17;7136:1;:21;7116:138;;;-1:-1:-1;;;;;7191:37:21;;;;;;:25;:37;;;;;7229:13;;7191:37;;;7229:10;;7240:1;;7229:13;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;7191:52:21;-1:-1:-1;;;;;7191:52:21;;;;;;;;;;;;;7178:7;7186:1;7178:10;;;;;;;;:::i;:::-;;;;;;;;;;:65;7159:3;;;;:::i;:::-;;;;7116:138;;;-1:-1:-1;7272:10:21;;7284:7;;-1:-1:-1;6819:481:21;-1:-1:-1;;6819:481:21:o;6440:216:20:-;6508:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;6555:35:20::2;-1:-1:-1::0;;;;;;;;;;;6582:7:20::2;6555:9;:35::i;:::-;6605:44;::::0;-1:-1:-1;;;;;6605:44:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;785:28:20;-1:-1:-1;;;;;;;;;;;6605:44:20;;;::::2;1182:1:::1;6440:216:::0;;:::o;2752:252::-;2816:22;2830:7;2816:13;:22::i;:::-;:69;;;;-1:-1:-1;;;;;;2842:25:20;;;;;;:16;:25;;;;;;2870:15;-1:-1:-1;2816:69:20;2812:186;;;2901:33;-1:-1:-1;;;;;;;;;;;2926:7:20;2901:11;:33::i;:::-;-1:-1:-1;2954:33:20;;-1:-1:-1;;;;;2954:33:20;;;;;;;;2812:186;2752:252;:::o;8553:249::-;8634:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;8682:45:20::2;-1:-1:-1::0;;;;;;;;;;;8719:7:20::2;8682:10;:45::i;:::-;8742:53;::::0;-1:-1:-1;;;;;8742:53:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;870:37:20;-1:-1:-1;;;;;;;;;;;8742:53:20;;;::::2;1182:1:::1;8553:249:::0;;:::o;4226:136:0:-;3875:7;3901:12;;;;;;;;;;:22;;;2464:16;2475:4;2464:10;:16::i;:::-;4330:25:::1;4341:4;4347:7;4330:10;:25::i;:::-;;4226:136:::0;;;:::o;5328:245::-;-1:-1:-1;;;;;5421:34:0;;735:10:12;5421:34:0;5417:102;;5478:30;;-1:-1:-1;;;5478:30:0;;;;;;;;;;;5417:102;5529:37;5541:4;5547:18;5529:11;:37::i;:::-;;5328:245;;:::o;8114:205:20:-;8184:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;8227:33:20::2;-1:-1:-1::0;;;;;;;;;;;8252:7:20::2;8227:10;:33::i;:::-;8271:41;::::0;-1:-1:-1;;;;;8271:41:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;712:25:20;-1:-1:-1;;;;;;;;;;;8271:41:20;;;::::2;1182:1:::1;8114:205:::0;;:::o;4877:1295:21:-;-1:-1:-1;;;;;;;;;;;2464:16:0;2475:4;2464:10;:16::i;:::-;-1:-1:-1;;;;;5075:30:21;::::1;;::::0;;;:18:::1;:30;::::0;;;;:37;5062:50;::::1;5058:135;;;5139:39;;-1:-1:-1::0;;;5139:39:21::1;;;;;;;;;;;5058:135;-1:-1:-1::0;;;;;5223:30:21;::::1;;::::0;;;:18:::1;:30;::::0;;;;:43;;5254:11;;5223:43;::::1;;;;;:::i;:::-;;;;;;;;;;;:51;;;;;;;;;;;;5219:138;;;5301:41;;-1:-1:-1::0;;;5301:41:21::1;;;;;;;;;;;5219:138;-1:-1:-1::0;;;;;5371:30:21;::::1;;::::0;;;:18:::1;:30;::::0;;;;:43;;5425:4:::1;::::0;5371:30;5402:11;;5371:43;::::1;;;;;:::i;:::-;;;;;;;;;;;:51;;;:58;;;;;;;;;;;;;;;;;;5444:42;5489:309;;;;;;;;5547:10;-1:-1:-1::0;;;;;5489:309:21::1;;;;;5588:11;5489:309;;;;5625:18;:30;5644:10;-1:-1:-1::0;;;;;5625:30:21::1;-1:-1:-1::0;;;;;5625:30:21::1;;;;;;;;;;;;5656:11;5625:43;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;;5489:309:::1;::::0;;::::1;::::0;::::1;::::0;;5625:43:::1;::::0;;::::1;::::0;;::::1;5489:309:::0;;-1:-1:-1;;;;;5489:309:21;;::::1;::::0;;;;::::1;::::0;::::1;::::0;;::::1;::::0;;;;::::1;::::0;::::1;::::0;;;;5625:43;5489:309;;;;::::1;::::0;::::1;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;;;5489:309:21;;;-1:-1:-1;;5489:309:21::1;::::0;::::1;::::0;::::1;::::0;;::::1;::::0;;;;::::1;::::0;;::::1;::::0;::::1;::::0;;::::1;;;::::0;;;;;;;;::::1;::::0;;::::1;;;;::::0;;;;;;;;;;;5697:10:::1;5489:309:::0;;::::1;::::0;;;::::1;::::0;::::1;::::0;;::::1;::::0;::::1;::::0;;;;;;;;;;;;;;;5733:6;;;;;;5489:309;::::1;5733:6:::0;;;;5489:309;::::1;;::::0;::::1;::::0;;;-1:-1:-1;5489:309:21;;;-1:-1:-1;;5768:15:21::1;5489:309;::::0;;::::1;::::0;-1:-1:-1;5833:12:21::1;::::0;5813:33;;:19:::1;:33:::0;;;;;;;:43;;;;-1:-1:-1;;;;;;5813:43:21;;::::1;-1:-1:-1::0;;;;;5813:43:21;;::::1;;::::0;;;;::::1;::::0;-1:-1:-1;5813:43:21;::::1;::::0;;;::::1;::::0;;;::::1;::::0;::::1;::::0;;;::::1;::::0;;::::1;::::0;;;::::1;::::0;;;;::::1;::::0;;;;;;;;::::1;::::0;::::1;::::0;;;::::1;::::0;;;;::::1;::::0;;;-1:-1:-1;5813:43:21;;:33;;:43;;;;;::::1;::::0;;::::1;:::i;:::-;-1:-1:-1::0;5813:43:21::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;;::::1;:::i;:::-;-1:-1:-1::0;5813:43:21::1;::::0;;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;;::::1;::::0;;::::1;::::0;;::::1;::::0;-1:-1:-1;;5813:43:21;;;;::::1;;-1:-1:-1::0;;5813:43:21;;;;;::::1;::::0;::::1;;::::0;;;::::1;::::0;;;::::1;::::0;;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;;-1:-1:-1;;;;;;5813:43:21::1;-1:-1:-1::0;;;;;5813:43:21;;::::1;::::0;;;::::1;::::0;;;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;;::::1;:::i;:::-;-1:-1:-1::0;5813:43:21::1;::::0;;;::::1;::::0;::::1;::::0;;::::1;::::0;-1:-1:-1;;;;;5870:37:21;::::1;;::::0;;;:25:::1;:37;::::0;;;;;;5913:12:::1;::::0;;5870:56;;::::1;::::0;::::1;::::0;;;;;;;;;;::::1;::::0;;;;5940:14;;;::::1;::::0;::::1;:::i;:::-;;;;;;6050:11;6022:10;-1:-1:-1::0;;;;;5974:186:21::1;;6079:10;6107:6;;6131:15;5974:186;;;;;;;;;:::i;:::-;;;;;;;;5044:1128;4877:1295:::0;;;;;:::o;6006:214:20:-;6074:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;6121:34:20::2;-1:-1:-1::0;;;;;;;;;;;6147:7:20::2;6121:9;:34::i;:::-;6170:43;::::0;-1:-1:-1;;;;;6170:43:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;631:36:20;-1:-1:-1;;;;;;;;;;;6170:43:20;;;::::2;1182:1:::1;6006:214:::0;;:::o;8823:506:21:-;8923:36;8975:18;9019:6;9004:12;;:21;;;;:::i;:::-;8996:5;:29;:62;;9053:5;8996:62;;;9044:6;9029:12;;:21;;;;:::i;:::-;8975:83;;9072:43;9152:10;9118:45;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;9072:91;;9183:9;9178:117;9202:10;9198:1;:14;9178:117;;;9249:19;:31;9269:10;9278:1;9269:6;:10;:::i;:::-;9249:31;;;;;;;;;;;;;;-1:-1:-1;9249:31:21;9237:43;;;;;;;;;-1:-1:-1;;;;;9237:43:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9249:31;;9237:43;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;9237:43:21;;;-1:-1:-1;;9237:43:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;9237:43:21;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:6;9244:1;9237:9;;;;;;;;:::i;:::-;;;;;;:43;;;;9214:3;;;;;:::i;:::-;;;;9178:117;;;-1:-1:-1;9316:6:21;8823:506;-1:-1:-1;;;;8823:506:21:o;10012:145:20:-;10085:4;10108:42;-1:-1:-1;;;;;;;;;;;10142:7:20;10108;:42::i;6916:208::-;6984:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;7031:31:20::2;-1:-1:-1::0;;;;;;;;;;;7054:7:20::2;7031:9;:31::i;:::-;7077:40;::::0;-1:-1:-1;;;;;7077:40:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;951:24:20;-1:-1:-1;;;;;;;;;;;7077:40:20;;;::::2;1182:1:::1;6916:208:::0;;:::o;4150:355::-;2232:4:0;2464:16;2232:4;2464:10;:16::i;:::-;4297:19:20::1;4305:4;4311;4297:7;:19::i;:::-;4292:90;;4339:32;;-1:-1:-1::0;;;4339:32:20::1;;;;;;;;;;;4292:90;4391:23;4403:4;4409;4391:11;:23::i;:::-;;4424:20;4435:4;4441:2;4424:10;:20::i;:::-;-1:-1:-1::0;4460:38:20::1;::::0;;-1:-1:-1;;;;;16219:15:25;;;16201:34;;16271:15;;16266:2;16251:18;;16244:43;4483:4:20;;4460:38:::1;::::0;16136:18:25;4460:38:20::1;;;;;;;4150:355:::0;;;;:::o;5780:216::-;5847:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;5895:34:20::2;-1:-1:-1::0;;;;;;;;;;;5921:7:20::2;5895:9;:34::i;:::-;5945:43;::::0;-1:-1:-1;;;;;5945:43:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;551:33:20;-1:-1:-1;;;;;;;;;;;5945:43:20;;;::::2;1182:1:::1;5780:216:::0;;:::o;3272:548::-;2232:4:0;2464:16;2232:4;2464:10;:16::i;:::-;3425:17:20;;;:41:::1;;-1:-1:-1::0;3446:20:20;;3425:41:::1;3421:105;;;3489:26;;-1:-1:-1::0;;;3489:26:20::1;;;;;;;;;;;3421:105;3539:31:::0;;::::1;3535:104;;3593:35;;-1:-1:-1::0;;;3593:35:20::1;;;;;;;;;;;3535:104;3662:9;3657:101;3677:16:::0;;::::1;3657:101;;;3714:33;3725:5;;3731:1;3725:8;;;;;;;:::i;:::-;;;;;;;3735;;3744:1;3735:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;3714:10;:33::i;:::-;-1:-1:-1::0;3695:3:20;::::1;::::0;::::1;:::i;:::-;;;;3657:101;;;;3804:8;;3773:40;;;;;;;:::i;:::-;;;;;;;;;3797:5;;3773:40;;;;;;;:::i;:::-;;;;;;;;3272:548:::0;;;;;:::o;9335:471:21:-;-1:-1:-1;;;;;9502:37:21;;9472:27;9502:37;;;:25;:37;;;;;;;;9472:67;;;;;;;;;;;;;;;;;9424:36;;9472:27;:67;;9502:37;9472:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9549:43;9629:10;:17;9595:52;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;9549:98;;9663:9;9658:119;9682:10;:17;9678:1;:21;9658:119;;;9732:19;:34;9752:10;9763:1;9752:13;;;;;;;;:::i;:::-;;;;;;;;;;;;9732:34;;;;;;;;;;;;;-1:-1:-1;9732:34:21;9720:46;;;;;;;;;-1:-1:-1;;;;;9720:46:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9732:34;;9720:46;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;9720:46:21;;;-1:-1:-1;;9720:46:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;9720:46:21;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:6;9727:1;9720:9;;;;;;;;:::i;:::-;;;;;;:46;;;;9701:3;;;;;:::i;:::-;;;;9658:119;;;-1:-1:-1;9793:6:21;9335:471;-1:-1:-1;;;9335:471:21:o;1723:643:20:-;1805:25;1819:10;1805:13;:25::i;:::-;1801:93;;;1853:30;;-1:-1:-1;;;1853:30:20;;;;;;;;;;;1801:93;1907:19;;1903:88;;1949:31;;-1:-1:-1;;;1949:31:20;;;;;;;;;;;1903:88;2023:2;2005:15;:20;2001:101;;;2059:31;;-1:-1:-1;;;2059:31:20;;;;;;;;;;;2001:101;2111:25;2139;:15;2157:7;2139:25;:::i;:::-;2111:53;;2179:35;-1:-1:-1;;;;;;;;;;;2203:10:20;2179;:35::i;:::-;-1:-1:-1;2255:35:20;2273:17;2255:15;:35;:::i;:::-;2241:10;2224:28;;;;:16;:28;;;;;;;:66;;;;2306:53;;;;;;2343:15;2380:25:25;;2368:2;2353:18;;2234:177;2306:53:20;;;;;;;;1791:575;1723:643;:::o;9486:126::-;9549:4;9573:32;-1:-1:-1;;;;;;;;;;;9597:7:20;9573;:32::i;8325:222::-;8398:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;8445:36:20::2;-1:-1:-1::0;;;;;;;;;;;8473:7:20::2;8445:10;:36::i;:::-;8496:44;::::0;-1:-1:-1;;;;;8496:44:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;785:28:20;-1:-1:-1;;;;;;;;;;;8496:44:20;;;::::2;1182:1:::1;8325:222:::0;;:::o;9618:126::-;9682:4;9705:32;-1:-1:-1;;;;;;;;;;;9729:7:20;2854:136:0;2931:4;2954:12;;;;;;;;;;;-1:-1:-1;;;;;2954:29:0;;;;;;;;;;;;;;;2854:136::o;8360:317:21:-;-1:-1:-1;;;;;8494:30:21;;;;;;:18;:30;;;;;:37;8442:35;;8494:42;8490:134;;8559:54;;-1:-1:-1;;;8559:54:21;;;;;;;;;;;8490:134;-1:-1:-1;;;;;8640:30:21;;;;;;:18;:30;;;;;;;;8633:37;;;;;;;;;;;;;;;;;;;8640:30;;8633:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8633:37:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;8633:37:21;;;-1:-1:-1;;8633:37:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8360:317;;;:::o;9878:128:20:-;9943:4;9966:33;-1:-1:-1;;;;;;;;;;;9991:7:20;9966;:33::i;6667:243::-;6743:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;6791:44:20::2;-1:-1:-1::0;;;;;;;;;;;6827:7:20::2;6791:9;:44::i;:::-;6850:53;::::0;-1:-1:-1;;;;;6850:53:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;870:37:20;-1:-1:-1;;;;;;;;;;;6850:53:20;;;::::2;1182:1:::1;6667:243:::0;;:::o;9750:122::-;9812:4;9835:30;-1:-1:-1;;;;;;;;;;;9857:7:20;9835;:30::i;4552:617::-;4623:12;;;;;;;4834:36;4623:12;4862:7;4834;:36::i;:::-;4884:32;-1:-1:-1;;;;;;;;;;;4908:7:20;4884;:32::i;:::-;4930;-1:-1:-1;;;;;;;;;;;4954:7:20;4930;:32::i;:::-;4976:30;-1:-1:-1;;;;;;;;;;;4998:7:20;4976;:30::i;:::-;5020:33;-1:-1:-1;;;;;;;;;;;5045:7:20;5020;:33::i;:::-;5067:42;-1:-1:-1;;;;;;;;;;;5101:7:20;5067;:42::i;:::-;5123:29;-1:-1:-1;;;;;;;;;;;5144:7:20;5123;:29::i;:::-;4813:349;;;;-1:-1:-1;4813:349:20;;-1:-1:-1;4813:349:20;;-1:-1:-1;4813:349:20;-1:-1:-1;4813:349:20;-1:-1:-1;4813:349:20;;-1:-1:-1;4552:617:20;-1:-1:-1;;4552:617:20:o;3551:1142:21:-;3742:11;2105:28;2122:10;2105:16;:28::i;:::-;2100:105;;2156:38;;-1:-1:-1;;;2156:38:21;;;;;;;;;;;2100:105;2220:44;2241:10;2253;2220:20;:44::i;:::-;2215:127;;2287:44;;-1:-1:-1;;;2287:44:21;;;;;;;;;;;2215:127;-1:-1:-1;;;;;2374:37:21;;;;;;:25;:37;;;;;;;;2412:10;2374:49;;;;;;;;2356:15;:67;2352:149;;;2446:44;;-1:-1:-1;;;2446:44:21;;;;;;;;;;;2352:149;-1:-1:-1;;;;;3788:38:21;::::1;;::::0;;;:25:::1;:38;::::0;;;;;;;3827:10:::1;3788:50:::0;;;;;;;;3770:15:::1;:68;3766:150;;;3861:44;;-1:-1:-1::0;;;3861:44:21::1;;;;;;;;;;;3766:150;3926:40;3969:292;;;;;;;;4021:10;-1:-1:-1::0;;;;;3969:292:21::1;;;;;4057:11;-1:-1:-1::0;;;;;3969:292:21::1;;;;;4091:8;;3969:292;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;::::0;;;;-1:-1:-1;;;3969:292:21;;;-1:-1:-1;3969:292:21::1;::::0;;::::1;;::::0;::::1;::::0;;::::1;::::0;::::1;::::0;;;;;;;;;;;;::::1;::::0;;4126:12;;;;;;3969:292;::::1;4126:12:::0;;;;3969:292;::::1;;::::0;::::1;::::0;;;-1:-1:-1;3969:292:21;;;-1:-1:-1;;4178:15:21::1;3969:292;::::0;;::::1;::::0;;;;;::::1;;::::0;;;;;;;;;;;;;;;-1:-1:-1;;;;;4272:31:21;;::::1;::::0;;:18:::1;:31:::0;;;;;:44;;3969:292;4272:44;;::::1;::::0;;;;;;;;;;;::::1;::::0;;::::1;;::::0;;-1:-1:-1;;;;;;4272:44:21;;::::1;::::0;;::::1;::::0;;;::::1;::::0;;;;::::1;::::0;;;::::1;::::0;;;;::::1;::::0;::::1;;::::0;;;-1:-1:-1;4272:44:21;;::::1;::::0;;;-1:-1:-1;4272:44:21;;::::1;::::0;::::1;::::0;::::1;::::0;;::::1;:::i;:::-;-1:-1:-1::0;4272:44:21::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;;::::1;:::i;:::-;-1:-1:-1::0;4272:44:21::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;;::::1;::::0;;::::1;::::0;;::::1;::::0;::::1;;;;-1:-1:-1::0;;4272:44:21;::::1;;::::0;;;;-1:-1:-1;;4272:44:21;;;;;;;::::1;::::0;;4383:7;4378:99:::1;;4406:46;::::0;-1:-1:-1;;;4406:46:21;;-1:-1:-1;;;;;8513:32:25;;;4406:46:21::1;::::0;::::1;8495:51:25::0;4406:13:21::1;:33;::::0;::::1;::::0;8468:18:25;;4406:46:21::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;4378:99;4567:11;-1:-1:-1::0;;;;;4497:189:21::1;4543:10;-1:-1:-1::0;;;;;4497:189:21::1;;4592:7;4613:8;;4635:12;;4661:15;4497:189;;;;;;;;;;;:::i;:::-;;;;;;;;3755:938;3551:1142:::0;;;;;;;:::o;2671:721::-;1917:28;1934:10;1917:16;:28::i;:::-;1912:105;;1968:38;;-1:-1:-1;;;1968:38:21;;;;;;;;;;;1912:105;2828:46:::1;::::0;-1:-1:-1;;;2828:46:21;;-1:-1:-1;;;;;8513:32:25;;;2828:46:21::1;::::0;::::1;8495:51:25::0;2828:13:21::1;:34;::::0;::::1;::::0;8468:18:25;;2828:46:21::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2823:136;;2897:51;;-1:-1:-1::0;;;2897:51:21::1;;;;;;;;;;;2823:136;2974:27;2991:9;2974:16;:27::i;:::-;2969:104;;3024:38;;-1:-1:-1::0;;;3024:38:21::1;;;;;;;;;;;2969:104;-1:-1:-1::0;;;;;3083:33:21;;::::1;;::::0;;;:21:::1;:33;::::0;;;;;;;:49;;::::1;::::0;;::::1;::::0;;;;;;;;::::1;::::0;;;;::::1;-1:-1:-1::0;;;;;;3083:49:21;;::::1;::::0;::::1;::::0;;;3142:32;;:21:::1;:32:::0;;;;;:49;;;;::::1;::::0;;;;;;::::1;::::0;;;;::::1;;::::0;;3252:32:::1;3270:14:::0;3252:15:::1;:32;:::i;:::-;-1:-1:-1::0;;;;;3201:37:21;;::::1;;::::0;;;:25:::1;:37;::::0;;;;;;;:48;;::::1;::::0;;;;;;;;;;:83;;;;3300:85;2380:25:25;;;3201:48:21;;:37;;3300:85:::1;::::0;2353:18:25;3300:85:21::1;;;;;;;2671:721:::0;;;:::o;7947:161:20:-;8019:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;8066:35:20::2;-1:-1:-1::0;;;;;;;;;;;8093:7:20::2;8066:10;:35::i;9355:125::-:0;9414:4;9437:36;9414:4;9465:7;9437;:36::i;7306:908:21:-;-1:-1:-1;;;;;7470:32:21;;7439:28;7470:32;;;:21;:32;;;;;;;;7439:63;;;;;;;;;;;;;;;;;7393:35;;7439:28;:63;;7470:32;7439:63;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7439:63:21;;;;;;;;;;;;;;;;;;;;;;;7510:20;7579:9;7591:1;7579:13;;7574:125;7598:11;:18;7594:1;:22;7574:125;;;7649:18;:34;7668:11;7680:1;7668:14;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;7649:34:21;-1:-1:-1;;;;;7649:34:21;;;;;;;;;;;;:41;;;;7633:57;;;;;:::i;:::-;;-1:-1:-1;7618:3:21;;;;:::i;:::-;;;;7574:125;;;;7742:43;7821:12;7788:46;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;7742:92:21;-1:-1:-1;7840:15:21;;7862:317;7886:11;:18;7882:1;:22;7862:317;;;7926:9;7921:252;7944:18;:34;7963:11;7975:1;7963:14;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;7944:34:21;-1:-1:-1;;;;;7944:34:21;;;;;;;;;;;;:41;;;;7941:1;:44;7921:252;;;8061:9;-1:-1:-1;;;;;8010:60:21;:18;:34;8029:11;8041:1;8029:14;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;8010:34:21;-1:-1:-1;;;;;8010:34:21;;;;;;;;;;;;8045:1;8010:37;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:47;-1:-1:-1;;;;;8010:47:21;:60;8006:157;;8111:18;:34;8130:11;8142:1;8130:14;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;8111:34:21;-1:-1:-1;;;;;8111:34:21;;;;;;;;;;;;8146:1;8111:37;;;;;;;;:::i;:::-;;;;;;;;;;8090:58;;;;;;;;8111:37;;;;;;;8090:58;;-1:-1:-1;;;;;8090:58:21;;;;;;;;;;;;;;;;;;;;;;;;8111:37;8090:58;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;8090:58:21;;;-1:-1:-1;;8090:58:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:7;8098:9;;;;:::i;:::-;;;8090:18;;;;;;;;:::i;:::-;;;;;;:58;;;;8006:157;7987:3;;;;:::i;:::-;;;;7921:252;;;-1:-1:-1;7906:3:21;;;;:::i;:::-;;;;7862:317;;;-1:-1:-1;8200:7:21;;7306:908;-1:-1:-1;;;;;7306:908:21:o;4642:138:0:-;3875:7;3901:12;;;;;;;;;;:22;;;2464:16;2475:4;2464:10;:16::i;:::-;4747:26:::1;4759:4;4765:7;4747:11;:26::i;6226:208:20:-:0;6291:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;6339:32:20::2;-1:-1:-1::0;;;;;;;;;;;6363:7:20::2;6339:9;:32::i;:::-;6386:41;::::0;-1:-1:-1;;;;;6386:41:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;712:25:20;-1:-1:-1;;;;;;;;;;;6386:41:20;;;::::2;1182:1:::1;6226:208:::0;;:::o;10167:120::-;10228:4;10251:29;-1:-1:-1;;;;;;;;;;;10272:7:20;10251;:29::i;7721:220::-;7793:7;-1:-1:-1;;;;;1114:21:20;;1110:67;;1154:16;;-1:-1:-1;;;1154:16:20;;;;;;;;;;;1110:67;2232:4:0::1;2464:16;2232:4:::0;2464:10:::1;:16::i;:::-;7841:35:20::2;-1:-1:-1::0;;;;;;;;;;;7868:7:20::2;7841:10;:35::i;:::-;7891:43;::::0;-1:-1:-1;;;;;7891:43:20;::::2;::::0;-1:-1:-1;;;;;;;;;;;551:33:20;-1:-1:-1;;;;;;;;;;;7891:43:20;;;::::2;1182:1:::1;7721:220:::0;;:::o;3199:103:0:-;3265:30;3276:4;735:10:12;3265::0;:30::i;6730:317::-;6808:4;6828:22;6836:4;6842:7;6828;:22::i;:::-;6824:217;;;6898:5;6866:12;;;;;;;;;;;-1:-1:-1;;;;;6866:29:0;;;;;;;;;;:37;;-1:-1:-1;;6866:37:0;;;6922:40;735:10:12;;6866:12:0;;6922:40;;6898:5;6922:40;-1:-1:-1;6983:4:0;6976:11;;6824:217;-1:-1:-1;7025:5:0;7018:12;;6179:316;6256:4;6277:22;6285:4;6291:7;6277;:22::i;:::-;6272:217;;6315:6;:12;;;;;;;;;;;-1:-1:-1;;;;;6315:29:0;;;;;;;;;:36;;-1:-1:-1;;6315:36:0;6347:4;6315:36;;;6397:12;735:10:12;;656:96;6397:12:0;-1:-1:-1;;;;;6370:40:0;6388:7;-1:-1:-1;;;;;6370:40:0;6382:4;6370:40;;;;;;;;;;-1:-1:-1;6431:4:0;6424:11;;6335:328:21;6425:4;;6441:194;-1:-1:-1;;;;;6465:33:21;;;;;;:21;:33;;;;;:40;6461:44;;6441:194;;;-1:-1:-1;;;;;6530:33:21;;;;;;;:21;:33;;;;;:36;;:49;;;;6564:1;;6530:36;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;6530:36:21;:49;6526:99;;6606:4;6599:11;;;;;6526:99;6507:3;;;;:::i;:::-;;;;6441:194;;;-1:-1:-1;6651:5:21;;6335:328;-1:-1:-1;;;6335:328:21:o;3432:197:0:-;3520:22;3528:4;3534:7;3520;:22::i;:::-;3515:108;;3565:47;;-1:-1:-1;;;3565:47:0;;-1:-1:-1;;;;;18721:32:25;;3565:47:0;;;18703:51:25;18770:18;;;18763:34;;;18676:18;;3565:47:0;;;;;;;3515:108;3432:197;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:286:25:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:25;;209:43;;199:71;;266:1;263;256:12;199:71;289:5;14:286;-1:-1:-1;;;14:286:25:o;497:173::-;565:20;;-1:-1:-1;;;;;614:31:25;;604:42;;594:70;;660:1;657;650:12;594:70;497:173;;;:::o;675:186::-;734:6;787:2;775:9;766:7;762:23;758:32;755:52;;;803:1;800;793:12;755:52;826:29;845:9;826:29;:::i;866:1178::-;1134:2;1146:21;;;1216:13;;1119:18;;;1238:22;;;1086:4;;1313;;1291:2;1276:18;;;1340:15;;;1086:4;1383:195;1397:6;1394:1;1391:13;1383:195;;;1462:13;;-1:-1:-1;;;;;1458:39:25;1446:52;;1518:12;;;;1553:15;;;;1494:1;1412:9;1383:195;;;-1:-1:-1;;;1614:19:25;;;1594:18;;;1587:47;1684:13;;1706:21;;;1782:15;;;;1745:12;;;1817:1;1827:189;1843:8;1838:3;1835:17;1827:189;;;1912:15;;1898:30;;1989:17;;;;1950:14;;;;1871:1;1862:11;1827:189;;;-1:-1:-1;2033:5:25;;866:1178;-1:-1:-1;;;;;;;866:1178:25:o;2049:180::-;2108:6;2161:2;2149:9;2140:7;2136:23;2132:32;2129:52;;;2177:1;2174;2167:12;2129:52;-1:-1:-1;2200:23:25;;2049:180;-1:-1:-1;2049:180:25:o;2416:254::-;2484:6;2492;2545:2;2533:9;2524:7;2520:23;2516:32;2513:52;;;2561:1;2558;2551:12;2513:52;2597:9;2584:23;2574:33;;2626:38;2660:2;2649:9;2645:18;2626:38;:::i;:::-;2616:48;;2416:254;;;;;:::o;2675:348::-;2727:8;2737:6;2791:3;2784:4;2776:6;2772:17;2768:27;2758:55;;2809:1;2806;2799:12;2758:55;-1:-1:-1;2832:20:25;;2875:18;2864:30;;2861:50;;;2907:1;2904;2897:12;2861:50;2944:4;2936:6;2932:17;2920:29;;2996:3;2989:4;2980:6;2972;2968:19;2964:30;2961:39;2958:59;;;3013:1;3010;3003:12;2958:59;2675:348;;;;;:::o;3028:553::-;3117:6;3125;3133;3141;3194:2;3182:9;3173:7;3169:23;3165:32;3162:52;;;3210:1;3207;3200:12;3162:52;3233:29;3252:9;3233:29;:::i;:::-;3223:39;;3309:2;3298:9;3294:18;3281:32;3271:42;;3364:2;3353:9;3349:18;3336:32;3391:18;3383:6;3380:30;3377:50;;;3423:1;3420;3413:12;3377:50;3462:59;3513:7;3504:6;3493:9;3489:22;3462:59;:::i;:::-;3028:553;;;;-1:-1:-1;3540:8:25;-1:-1:-1;;;;3028:553:25:o;3586:248::-;3654:6;3662;3715:2;3703:9;3694:7;3690:23;3686:32;3683:52;;;3731:1;3728;3721:12;3683:52;-1:-1:-1;;3754:23:25;;;3824:2;3809:18;;;3796:32;;-1:-1:-1;3586:248:25:o;3839:423::-;3881:3;3919:5;3913:12;3946:6;3941:3;3934:19;3971:1;3981:162;3995:6;3992:1;3989:13;3981:162;;;4057:4;4113:13;;;4109:22;;4103:29;4085:11;;;4081:20;;4074:59;4010:12;3981:162;;;3985:3;4188:1;4181:4;4172:6;4167:3;4163:16;4159:27;4152:38;4251:4;4244:2;4240:7;4235:2;4227:6;4223:15;4219:29;4214:3;4210:39;4206:50;4199:57;;;3839:423;;;;:::o;4267:762::-;4326:3;4371:1;4367;4362:3;4358:11;4354:19;4412:2;4404:5;4398:12;4394:21;4389:3;4382:34;4477:2;4469:4;4462:5;4458:16;4452:23;4448:32;4441:4;4436:3;4432:14;4425:56;;4527:4;4520:5;4516:16;4510:23;4565:4;4558;4553:3;4549:14;4542:28;4591:47;4632:4;4627:3;4623:14;4609:12;4591:47;:::i;:::-;4579:59;;4686:4;4679:5;4675:16;4669:23;4734:3;4728:4;4724:14;4717:4;4712:3;4708:14;4701:38;4762:39;4796:4;4780:14;4762:39;:::i;:::-;4748:53;;;4850:4;4843:5;4839:16;4833:23;4826:4;4821:3;4817:14;4810:47;4920:4;4913:5;4909:16;4903:23;4896:31;4889:39;4882:4;4877:3;4873:14;4866:63;4992:4;4985:5;4981:16;4975:23;4968:31;4961:39;4954:4;4949:3;4945:14;4938:63;5017:6;5010:13;;;4267:762;;;;:::o;5034:1611::-;5246:4;5275:2;5315;5304:9;5300:18;5345:2;5334:9;5327:21;5368:6;5403;5397:13;5434:6;5426;5419:22;5460:2;5450:12;;5493:2;5482:9;5478:18;5471:25;;5555:2;5545:6;5542:1;5538:14;5527:9;5523:30;5519:39;5593:2;5585:6;5581:15;5614:1;5624:992;5638:6;5635:1;5632:13;5624:992;;;5703:22;;;-1:-1:-1;;5699:36:25;5687:49;;5759:13;;5873:9;;-1:-1:-1;;;;;5869:18:25;;;5854:34;;5931:11;;;5925:18;5908:15;;;5901:43;5983:11;;;5977:18;5795:4;6015:15;;;6008:27;;;5795:4;5822:19;6062:65;6111:15;;;5977:18;6062:65;:::i;:::-;6048:79;;;6150:4;6215:2;6209;6205;6201:11;6195:18;6191:27;6186:2;6178:6;6174:15;6167:52;;;6242:4;6295:2;6291;6287:11;6281:18;6348:6;6340;6336:19;6331:2;6323:6;6319:15;6312:44;6383:41;6417:6;6401:14;6383:41;:::i;:::-;6447:4;6494:11;;;6488:18;6471:15;;;;6464:43;;;;-1:-1:-1;;6594:12:25;;;;6369:55;-1:-1:-1;6559:15:25;;;;5660:1;5653:9;5624:992;;;-1:-1:-1;6633:6:25;;5034:1611;-1:-1:-1;;;;;;;;5034:1611:25:o;6650:328::-;6727:6;6735;6743;6796:2;6784:9;6775:7;6771:23;6767:32;6764:52;;;6812:1;6809;6802:12;6764:52;6848:9;6835:23;6825:33;;6877:38;6911:2;6900:9;6896:18;6877:38;:::i;:::-;6867:48;;6934:38;6968:2;6957:9;6953:18;6934:38;:::i;:::-;6924:48;;6650:328;;;;;:::o;6983:367::-;7046:8;7056:6;7110:3;7103:4;7095:6;7091:17;7087:27;7077:55;;7128:1;7125;7118:12;7077:55;-1:-1:-1;7151:20:25;;7194:18;7183:30;;7180:50;;;7226:1;7223;7216:12;7180:50;7263:4;7255:6;7251:17;7239:29;;7323:3;7316:4;7306:6;7303:1;7299:14;7291:6;7287:27;7283:38;7280:47;7277:67;;;7340:1;7337;7330:12;7355:773;7477:6;7485;7493;7501;7554:2;7542:9;7533:7;7529:23;7525:32;7522:52;;;7570:1;7567;7560:12;7522:52;7610:9;7597:23;7639:18;7680:2;7672:6;7669:14;7666:34;;;7696:1;7693;7686:12;7666:34;7735:70;7797:7;7788:6;7777:9;7773:22;7735:70;:::i;:::-;7824:8;;-1:-1:-1;7709:96:25;-1:-1:-1;7912:2:25;7897:18;;7884:32;;-1:-1:-1;7928:16:25;;;7925:36;;;7957:1;7954;7947:12;7925:36;;7996:72;8060:7;8049:8;8038:9;8034:24;7996:72;:::i;8557:868::-;8767:4;8796:2;8836;8825:9;8821:18;8866:2;8855:9;8848:21;8889:6;8924;8918:13;8955:6;8947;8940:22;8993:2;8982:9;8978:18;8971:25;;9055:2;9045:6;9042:1;9038:14;9027:9;9023:30;9019:39;9005:53;;9093:2;9085:6;9081:15;9114:1;9124:272;9138:6;9135:1;9132:13;9124:272;;;9231:2;9227:7;9215:9;9207:6;9203:22;9199:36;9194:3;9187:49;9259:57;9309:6;9300;9294:13;9259:57;:::i;:::-;9249:67;-1:-1:-1;9374:12:25;;;;9339:15;;;;9160:1;9153:9;9124:272;;;-1:-1:-1;9413:6:25;;8557:868;-1:-1:-1;;;;;;;8557:868:25:o;10341:118::-;10427:5;10420:13;10413:21;10406:5;10403:32;10393:60;;10449:1;10446;10439:12;10464:925;10571:6;10579;10587;10595;10603;10611;10664:3;10652:9;10643:7;10639:23;10635:33;10632:53;;;10681:1;10678;10671:12;10632:53;10704:29;10723:9;10704:29;:::i;:::-;10694:39;;10783:2;10772:9;10768:18;10755:32;10796:28;10818:5;10796:28;:::i;:::-;10843:5;-1:-1:-1;10899:2:25;10884:18;;10871:32;10922:18;10952:14;;;10949:34;;;10979:1;10976;10969:12;10949:34;11018:59;11069:7;11060:6;11049:9;11045:22;11018:59;:::i;:::-;11096:8;;-1:-1:-1;10992:85:25;-1:-1:-1;11184:2:25;11169:18;;11156:32;;-1:-1:-1;11200:16:25;;;11197:36;;;11229:1;11226;11219:12;11197:36;;11268:61;11321:7;11310:8;11299:9;11295:24;11268:61;:::i;:::-;10464:925;;;;-1:-1:-1;10464:925:25;;-1:-1:-1;10464:925:25;;11348:8;;10464:925;-1:-1:-1;;;10464:925:25:o;11394:328::-;11471:6;11479;11487;11540:2;11528:9;11519:7;11515:23;11511:32;11508:52;;;11556:1;11553;11546:12;11508:52;11579:29;11598:9;11579:29;:::i;:::-;11569:39;;11627:38;11661:2;11650:9;11646:18;11627:38;:::i;:::-;11617:48;;11712:2;11701:9;11697:18;11684:32;11674:42;;11394:328;;;;;:::o;11909:127::-;11970:10;11965:3;11961:20;11958:1;11951:31;12001:4;11998:1;11991:15;12025:4;12022:1;12015:15;12041:127;12102:10;12097:3;12093:20;12090:1;12083:31;12133:4;12130:1;12123:15;12157:4;12154:1;12147:15;12173:127;12234:10;12229:3;12225:20;12222:1;12215:31;12265:4;12262:1;12255:15;12289:4;12286:1;12279:15;12305:135;12344:3;12365:17;;;12362:43;;12385:18;;:::i;:::-;-1:-1:-1;12432:1:25;12421:13;;12305:135::o;12445:380::-;12524:1;12520:12;;;;12567;;;12588:61;;12642:4;12634:6;12630:17;12620:27;;12588:61;12695:2;12687:6;12684:14;12664:18;12661:38;12658:161;;12741:10;12736:3;12732:20;12729:1;12722:31;12776:4;12773:1;12766:15;12804:4;12801:1;12794:15;12658:161;;12445:380;;;:::o;12956:545::-;13058:2;13053:3;13050:11;13047:448;;;13094:1;13119:5;13115:2;13108:17;13164:4;13160:2;13150:19;13234:2;13222:10;13218:19;13215:1;13211:27;13205:4;13201:38;13270:4;13258:10;13255:20;13252:47;;;-1:-1:-1;13293:4:25;13252:47;13348:2;13343:3;13339:12;13336:1;13332:20;13326:4;13322:31;13312:41;;13403:82;13421:2;13414:5;13411:13;13403:82;;;13466:17;;;13447:1;13436:13;13403:82;;;13407:3;;;12956:545;;;:::o;13677:1352::-;13803:3;13797:10;13830:18;13822:6;13819:30;13816:56;;;13852:18;;:::i;:::-;13881:97;13971:6;13931:38;13963:4;13957:11;13931:38;:::i;:::-;13925:4;13881:97;:::i;:::-;14033:4;;14097:2;14086:14;;14114:1;14109:663;;;;14816:1;14833:6;14830:89;;;-1:-1:-1;14885:19:25;;;14879:26;14830:89;-1:-1:-1;;13634:1:25;13630:11;;;13626:24;13622:29;13612:40;13658:1;13654:11;;;13609:57;14932:81;;14079:944;;14109:663;12903:1;12896:14;;;12940:4;12927:18;;-1:-1:-1;;14145:20:25;;;14263:236;14277:7;14274:1;14271:14;14263:236;;;14366:19;;;14360:26;14345:42;;14458:27;;;;14426:1;14414:14;;;;14293:19;;14263:236;;;14267:3;14527:6;14518:7;14515:19;14512:201;;;14588:19;;;14582:26;-1:-1:-1;;14671:1:25;14667:14;;;14683:3;14663:24;14659:37;14655:42;14640:58;14625:74;;14512:201;-1:-1:-1;;;;;14759:1:25;14743:14;;;14739:22;14726:36;;-1:-1:-1;13677:1352:25:o;15034:267::-;15123:6;15118:3;15111:19;15175:6;15168:5;15161:4;15156:3;15152:14;15139:43;-1:-1:-1;15227:1:25;15202:16;;;15220:4;15198:27;;;15191:38;;;;15283:2;15262:15;;;-1:-1:-1;;15258:29:25;15249:39;;;15245:50;;15034:267::o;15306:415::-;-1:-1:-1;;;;;15521:32:25;;15503:51;;15590:2;15585;15570:18;;15563:30;;;-1:-1:-1;;15610:62:25;;15653:18;;15645:6;15637;15610:62;:::i;:::-;15602:70;;15708:6;15703:2;15692:9;15688:18;15681:34;15306:415;;;;;;;:::o;15726:128::-;15793:9;;;15814:11;;;15811:37;;;15828:18;;:::i;15859:125::-;15924:9;;;15945:10;;;15942:36;;;15958:18;;:::i;16298:551::-;16469:3;16500;16547:6;16469:3;16581:241;16595:6;16592:1;16589:13;16581:241;;;-1:-1:-1;;;;;16662:26:25;16681:6;16662:26;:::i;:::-;16658:52;16644:67;;16734:4;16760:14;;;;16797:15;;;;;16617:1;16610:9;16581:241;;16854:443;17043:2;17025:21;;;17062:18;;17055:34;;;-1:-1:-1;;;;;;17101:31:25;;17098:51;;;17145:1;17142;17135:12;17098:51;17179:6;17176:1;17172:14;17236:6;17228;17223:2;17212:9;17208:18;17195:48;17264:22;;;;17288:2;17260:31;;16854:443;-1:-1:-1;;;16854:443:25:o;17302:168::-;17375:9;;;17406;;17423:15;;;17417:22;;17403:37;17393:71;;17444:18;;:::i;17683:591::-;17964:6;17957:14;17950:22;17939:9;17932:41;18009:3;18004:2;17993:9;17989:18;17982:31;17913:4;18036:63;18094:3;18083:9;18079:19;18071:6;18063;18036:63;:::i;:::-;18147:9;18139:6;18135:22;18130:2;18119:9;18115:18;18108:50;18175;18218:6;18210;18202;18175:50;:::i;:::-;18167:58;;;18261:6;18256:2;18245:9;18241:18;18234:34;17683:591;;;;;;;;;:::o;18279:245::-;18346:6;18399:2;18387:9;18378:7;18374:23;18370:32;18367:52;;;18415:1;18412;18405:12;18367:52;18447:9;18441:16;18466:28;18488:5;18466:28;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"2829200","executionCost":"infinite","totalCost":"infinite"},"external":{"AUDITOR_ROLE()":"infinite","CERTIFICATE_FACTORY_ROLE()":"infinite","CERTIFIER_ROLE()":"infinite","DEFAULT_ADMIN_ROLE()":"284","ENTERPRISE_ROLE()":"infinite","INSPECTOR_ROLE()":"infinite","PUBLIC_ROLE()":"infinite","assignInspector(address,address,uint256)":"infinite","bulkGrantRoles(bytes32[],address[])":"infinite","certAuthority()":"infinite","checkExpiryRoles(address)":"infinite","claimTemporaryPublicRole(uint256)":"infinite","flagInspection(address,uint256,string)":"infinite","getActiveRoles(address)":"infinite","getEnterpriseFlaggedReports(address)":"infinite","getEnterpriseInspectionReports(address)":"infinite","getEnterpriseInspectors(address)":"infinite","getFlaggedInspections(uint256,uint256)":"infinite","getInspectorReports(address)":"infinite","getMaxPublicRoleDuration()":"325","getRoleAdmin(bytes32)":"2582","grantAuditor(address)":"infinite","grantCertificateFactory(address)":"infinite","grantCertifier(address)":"infinite","grantEnterprise(address)":"infinite","grantInspector(address)":"infinite","grantPublicRole(address)":"infinite","grantRole(bytes32,address)":"infinite","hasAdminRole(address)":"2735","hasAuditorRole(address)":"infinite","hasCertificateFactoryRole(address)":"infinite","hasCertifierRole(address)":"infinite","hasEnterpriseRole(address)":"infinite","hasInspectorRole(address)":"infinite","hasPublicRole(address)":"infinite","hasRole(bytes32,address)":"2785","publicRoleExpiry(address)":"2630","renounceRole(bytes32,address)":"29113","revokeAuditorRole(address)":"infinite","revokeCertificateFactoryRole(address)":"infinite","revokeCertifierRole(address)":"infinite","revokeEnterpriseRole(address)":"infinite","revokeInspectorRole(address)":"infinite","revokePublicRole(address)":"infinite","revokeRole(bytes32,address)":"infinite","rolesManager()":"infinite","submitInspectionReport(address,bool,string,string)":"infinite","supportsInterface(bytes4)":"473","transferRole(bytes32,address,address)":"infinite"},"internal":{"_isInspectorAssigned(address,address)":"infinite"}},"methodIdentifiers":{"AUDITOR_ROLE()":"6e1d616e","CERTIFICATE_FACTORY_ROLE()":"784fee0e","CERTIFIER_ROLE()":"69d0b517","DEFAULT_ADMIN_ROLE()":"a217fddf","ENTERPRISE_ROLE()":"68dd17a5","INSPECTOR_ROLE()":"e3a3c522","PUBLIC_ROLE()":"3ca7c02a","assignInspector(address,address,uint256)":"b1ea540e","bulkGrantRoles(bytes32[],address[])":"61462f0e","certAuthority()":"99eb08d6","checkExpiryRoles(address)":"25d5e87e","claimTemporaryPublicRole(uint256)":"7780e9c1","flagInspection(address,uint256,string)":"4308ac98","getActiveRoles(address)":"b0614db3","getEnterpriseFlaggedReports(address)":"68b688c1","getEnterpriseInspectionReports(address)":"9a98163b","getEnterpriseInspectors(address)":"08d0aef7","getFlaggedInspections(uint256,uint256)":"4e4ddb92","getInspectorReports(address)":"cc5ed5ea","getMaxPublicRoleDuration()":"b8ad415e","getRoleAdmin(bytes32)":"248a9ca3","grantAuditor(address)":"e55b4f93","grantCertificateFactory(address)":"aa52617c","grantCertifier(address)":"60376528","grantEnterprise(address)":"1e223b2a","grantInspector(address)":"456f19fc","grantPublicRole(address)":"57c03371","grantRole(bytes32,address)":"2f2ff15d","hasAdminRole(address)":"c395fcb3","hasAuditorRole(address)":"abaa536f","hasCertificateFactoryRole(address)":"52f84b72","hasCertifierRole(address)":"7bff0975","hasEnterpriseRole(address)":"a1f34163","hasInspectorRole(address)":"8850845f","hasPublicRole(address)":"f53f5e1e","hasRole(bytes32,address)":"91d14854","publicRoleExpiry(address)":"b5617ef7","renounceRole(bytes32,address)":"36568abe","revokeAuditorRole(address)":"3e251518","revokeCertificateFactoryRole(address)":"261191b7","revokeCertifierRole(address)":"fc810286","revokeEnterpriseRole(address)":"7e5effa4","revokeInspectorRole(address)":"bd7ca7ba","revokePublicRole(address)":"0443cd2a","revokeRole(bytes32,address)":"d547741f","rolesManager()":"a3574c5b","submitInspectionReport(address,bool,string,string)":"b1ba3883","supportsInterface(bytes4)":"01ffc9a7","transferRole(bytes32,address,address)":"5cb87d26"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rolesManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_certAuthority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuditorOversight__AppealWindowClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuditorOversight__CaseNotPending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuditorOversight__NotAuthorizedEnterpriseOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificateNFT__CertificateDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificateNFT__EnterpriseAlreadyCertified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificationAuthority__CertificationNotExpiredYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificationAuthority__EnterpriseAlreadyCertified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificationAuthority__EnterpriseNotCertifiedYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnterpriseRegistry__EnterpriseAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnterpriseRegistry__EnterpriseDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnterpriseRegistry__InvalidStart\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__InspectionPeriodExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__InspectorAlreadyAssigned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__InvalidReportIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__NoReportsAssociatedWithEnterprise\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__NotAssignedToEnterprise\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__ReportAlreadyFlagged\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__AlreadyHasRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__EmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedAuditor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedCertificateFactory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedCertifier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedEnterprise\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedInspector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedPublicUser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__RoleDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__UnauthorizedToPerformAction\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"roles\",\"type\":\"bytes32[]\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"BulkRolesGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reportIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"flaggedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"InspectionReportFlagged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inspector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"remarks\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"evidenceURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ReportedAt\",\"type\":\"uint256\"}],\"name\":\"InspectionReportSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inspector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validityPeriod\",\"type\":\"uint256\"}],\"name\":\"InspectorAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"PublicRoleExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"PublicRoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RoleTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUDITOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CERTIFICATE_FACTORY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CERTIFIER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENTERPRISE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INSPECTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inspector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"validityPeriod\",\"type\":\"uint256\"}],\"name\":\"assignInspector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"roles\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"bulkGrantRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"certAuthority\",\"outputs\":[{\"internalType\":\"contract CertificationAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkExpiryRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"durationInHours\",\"type\":\"uint256\"}],\"name\":\"claimTemporaryPublicRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reportIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"flagInspection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getActiveRoles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCertifier\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isInspector\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAuditor\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnterprise\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCertificateFactory\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"}],\"name\":\"getEnterpriseFlaggedReports\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reportIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"inspector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"remarks\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"evidenceURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"inspectedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"flagged\",\"type\":\"bool\"}],\"internalType\":\"struct DataTypes.InspectionReport\",\"name\":\"report\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"flaggedBy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"flaggedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.FlaggedInspection[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"}],\"name\":\"getEnterpriseInspectionReports\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"inspector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"remarks\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"evidenceURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"inspectedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"flagged\",\"type\":\"bool\"}],\"internalType\":\"struct DataTypes.InspectionReport[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"}],\"name\":\"getEnterpriseInspectors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"validityPeriods\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getFlaggedInspections\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reportIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"inspector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"remarks\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"evidenceURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"inspectedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"flagged\",\"type\":\"bool\"}],\"internalType\":\"struct DataTypes.InspectionReport\",\"name\":\"report\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"flaggedBy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"flaggedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.FlaggedInspection[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inspector\",\"type\":\"address\"}],\"name\":\"getInspectorReports\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"inspector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"remarks\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"evidenceURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"inspectedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"flagged\",\"type\":\"bool\"}],\"internalType\":\"struct DataTypes.InspectionReport[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxPublicRoleDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantAuditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantCertificateFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantCertifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantEnterprise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantInspector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantPublicRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAdminRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAuditorRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasCertificateFactoryRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasCertifierRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasEnterpriseRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasInspectorRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasPublicRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"publicRoleExpiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeAuditorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeCertificateFactoryRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeCertifierRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeEnterpriseRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeInspectorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokePublicRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rolesManager\",\"outputs\":[{\"internalType\":\"contract RolesManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_enterprise\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_passed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_remarks\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_evidenceURI\",\"type\":\"string\"}],\"name\":\"submitInspectionReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"bulkGrantRoles(bytes32[],address[])\":{\"details\":\"Bulk grant roles to accounts\",\"params\":{\"accounts\":\"The array of accounts to grant roles emits BulkRolesGranted event on successful grant\",\"roles\":\"The array of roles to grant\"}},\"checkExpiryRoles(address)\":{\"details\":\"helper to check expiry of `PUBLIC` role\",\"params\":{\"account\":\"The account to check for role expiry\"}},\"claimTemporaryPublicRole(uint256)\":{\"details\":\"allows users to claim temporary `PUBLIC` role for `durationInHours` hours on their visit to platform\",\"params\":{\"durationInHours\":\"The duration in hours the user will have the `PUBLIC` role\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantCertifier(address)\":{\"details\":\"Functions to grant roles to!\",\"params\":{\"account\":\"The account to grant the role to\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasAdminRole(address)\":{\"details\":\"Functions to check if a certain account has the specified role\",\"params\":{\"account\":\"The account to check \"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeCertifierRole(address)\":{\"details\":\"Functions to revoke roles\",\"params\":{\"account\":\"The account to revoke the role from\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferRole(bytes32,address,address)\":{\"details\":\"Transfers a role from one account to another\",\"params\":{\"from\":\"The account to transfer the role from\",\"role\":\"The role to transfer\",\"to\":\"The account to transfer the role to\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bulkGrantRoles(bytes32[],address[])\":{\"notice\":\"---------- # Bulk Role Grant(Auto) ------- //\"},\"checkExpiryRoles(address)\":{\"notice\":\"--------- #  Auto-expiry check (Call periodically) ------- //Emits PublicRoleExpired event on expiry\"},\"claimTemporaryPublicRole(uint256)\":{\"notice\":\"----------- #claim temporary public role -------------- //`durationInHours` must be less than 24 hoursEmits PublicRoleGranted event on successful claim \"},\"getEnterpriseInspectionReports(address)\":{\"notice\":\"Simple reports getter for testing////\"},\"grantCertifier(address)\":{\"notice\":\"---------# GRANTING ROLES ---------//Emits RoleGranted event on successful grant\"},\"hasAdminRole(address)\":{\"notice\":\"--------- # CHECKING ROLES --------- //\"},\"revokeCertifierRole(address)\":{\"notice\":\"------------- # REVOKING ROLES ------------- //Emits RoleRevoked event on successful revoke\"},\"transferRole(bytes32,address,address)\":{\"notice\":\"-------- # Safe Role Transfer ------- //Emits RoleTransferred event on successful transfer\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/InspectionManager.sol\":\"InspectionManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0xb31b86c03f4677dcffa4655285d62433509513be9bafa0e04984565052d34e44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        _update(address(0), tokenId, _msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xc48434419baa510862ba4b4802bc0500ccddadd02ae2f195548af748c3206b20\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xcc6f49e0c57072d6a18eef0d5fc22a4cc20462c18f0c365d2dd9a2c732fde670\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/core/CertificationAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n\\n/**\\n* @author @0xJonaseb11\\n* @title CertificationAuthority Contract\\n* @dev Acts like a Certificate Authority main house for enterprises\\n* @dev Only the Certifier can certify enterprises\\n* @dev Allows update of NFT certificate's metadata URI\\n* @dev Automatic revocation of certificates after expiry duration\\n*/\\nimport {RolesManager} from \\\"./RolesManager.sol\\\";\\nimport {Events} from \\\"../utils/Events.sol\\\";\\nimport {DataTypes} from \\\"../utils/DataTypes.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract CertificationAuthority is RolesManager, ERC721URIStorage, ERC721Burnable {\\n    using DataTypes for DataTypes.Enterprise;\\n    using DataTypes for DataTypes.Certification;\\n    using DataTypes for DataTypes.InspectionReport;\\n\\n    mapping(address => DataTypes.Certification) public certifications;\\n    mapping(uint256 => address) private _tokenToEnterprise;\\n    uint256 private _tokenIdCounter;\\n\\n    constructor() ERC721(\\\"EnterpriseCertificate\\\", \\\"ECERT\\\") {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(CERTIFIER_ROLE, msg.sender);\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// ENTERPRISE CERTIFICATION ///////////////////\\n    //////////////////////////////////////////////////////////\\n\\n    /**\\n    * @dev This function is used to certify enterprises\\n    * @dev Only the Certifier can certify enterprises\\n    * @dev mints and assigns NFT certificate to an enterprise\\n    * @dev sets token URI to metadata URI of a certificate\\n    * @param enterpriseAddress The address of the enterprise to be certified\\n    * @param _industry The industry of the enterprise to be certified\\n    * @param _metadataURI The metadata URI of the certificate (IPFS hash)\\n    * @param validityDurationSeconds The validity duration of the certificate in seconds\\n    * @notice Emits CertificationGranted event on successful enterprise certification\\n    */\\n\\n    function certifyEnterprise(\\n        address enterpriseAddress,\\n        string memory _industry,\\n        string memory _metadataURI,\\n        uint256 validityDurationSeconds\\n    ) external onlyValidAddress(enterpriseAddress) onlyRole(CERTIFIER_ROLE) {\\n        if (certifications[enterpriseAddress].isCertified) {\\n            revert CertificationAuthority__EnterpriseAlreadyCertified();\\n        }\\n\\n        uint256 tokenId = _tokenIdCounter++;\\n        _safeMint(enterpriseAddress, tokenId);\\n        _setTokenURI(tokenId, _metadataURI);\\n\\n        certifications[enterpriseAddress] = DataTypes.Certification({\\n            industry: _industry,\\n            metadataURI: _metadataURI,\\n            certifiedAt: block.timestamp,\\n            expiryDate: block.timestamp + validityDurationSeconds,\\n            isCertified: true,\\n            tokenId: tokenId\\n        });\\n\\n        _tokenToEnterprise[tokenId] = enterpriseAddress;\\n\\n        emit Events.CertificationGranted(\\n            enterpriseAddress,\\n            _industry,\\n            _metadataURI,\\n            block.timestamp + validityDurationSeconds\\n        );\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// REVOCATION & EXPIRY HANDLING //////////////\\n    //////////////////////////////////////////////////////////\\n    \\n\\n    /**\\n    * @dev allows the revocation of certifications from enterprises\\n    * @dev Only the `Certifier` or `Super Admin` can revoke certifications\\n    * @dev allows automatic destruction of NFT certificates via oppenzeppelin's`burn` function\\n    * @param enterpriseAddress The address of the enterprise to be revoked\\n    * @notice Emits CertificationRevoked event on successful enterprise revocation\\n    */\\n    function revokeCertification(address enterpriseAddress)\\n        external\\n        onlyValidAddress(enterpriseAddress)\\n        onlyRole(CERTIFIER_ROLE) onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\\n        if (!cert.isCertified) {\\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\\n        }\\n\\n        if (cert.tokenId != 0) {\\n            burn(cert.tokenId); \\n            delete _tokenToEnterprise[cert.tokenId];\\n        }\\n\\n        cert.isCertified = false;\\n        emit Events.CertificationRevoked(enterpriseAddress);\\n    }\\n    \\n\\n    /**\\n    * @dev alloes automatic revokation of NFT certificates after expiry duration \\n    * @dev callable by anyone as long as expiry date kicks in\\n    * @notice Emits CertificationRevoked event on successful enterprise revocation\\n    */\\n    function revokeIfExpired(address enterpriseAddress) external {\\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\\n\\n        if (!cert.isCertified) {\\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\\n        }\\n        if (block.timestamp < cert.expiryDate) {\\n            revert CertificationAuthority__CertificationNotExpiredYet();\\n        }\\n\\n        if (cert.tokenId != 0) {\\n            burn(cert.tokenId);\\n            delete _tokenToEnterprise[cert.tokenId];\\n        }\\n\\n        cert.isCertified = false;\\n        emit Events.CertificationRevoked(enterpriseAddress);\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// TRANSFER CONTROL ///////////////////////////\\n    //////////////////////////////////////////////////////////\\n\\n    function _update(\\n        address to,\\n        uint256 tokenId,\\n        address auth\\n    ) internal override(ERC721) returns (address) {\\n        // Block all transfers except minting (to) and burning (address(0))\\n        if (auth != address(0)) {\\n            require(to == address(0), \\\"Certificates are non-transferable\\\");\\n        }\\n        return super._update(to, tokenId, auth);\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// VALIDATION & METADATA //////////////////////\\n    //////////////////////////////////////////////////////////\\n\\n    function isCertificationValid(address enterpriseAddress)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\\n        return cert.isCertified && block.timestamp <= cert.expiryDate;\\n    }\\n\\n    function isCertificateValid(uint256 tokenId) public view returns (bool) {\\n        address enterprise = _tokenToEnterprise[tokenId];\\n        return isCertificationValid(enterprise);\\n    }\\n    \\n    \\n    /**\\n    * @dev updates the metadata URI of the NFT certificate\\n    * @dev Only the `Certifier` can update certification metadata URI\\n    * @param enterpriseAddress The address of the enterprise to be updated\\n    * @param newMetadataURI The new metadata URI of the certificate\\n    * @notice Emits CertificationUpdated event on successful metadata update\\n    */\\n    function updateCertificationMetadata(\\n        address enterpriseAddress,\\n        string calldata newMetadataURI\\n    ) external onlyValidAddress(enterpriseAddress) onlyRole(CERTIFIER_ROLE) {\\n        DataTypes.Certification storage cert = certifications[enterpriseAddress];\\n        if (!cert.isCertified) {\\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\\n        }\\n\\n        if (cert.tokenId != 0) {\\n            _setTokenURI(cert.tokenId, newMetadataURI);\\n        }\\n\\n        cert.metadataURI = newMetadataURI;\\n        emit Events.CertificationUpdated(enterpriseAddress, newMetadataURI);\\n    }\\n\\n    //////////////////////////////////////////////////////////\\n    ///////////// GETTERS & OVERRIDES ////////////////////////\\n    //////////////////////////////////////////////////////////\\n\\n    function getCertification(address enterpriseAddress)\\n        public\\n        view\\n        returns (DataTypes.Certification memory)\\n    {\\n        return certifications[enterpriseAddress];\\n    }\\n\\n    function getEnterpriseByTokenId(uint256 tokenId)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return _tokenToEnterprise[tokenId];\\n    }\\n\\n    // ----- Required overrides for multiple inheritance --- //\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override(ERC721, ERC721URIStorage)\\n        returns (string memory)\\n    {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721, ERC721URIStorage, AccessControl)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x164ee8ef3581d2569d9d769b4c38912e3fa51b07b7db5e1a51b4e125ba40b5d6\",\"license\":\"MIT\"},\"contracts/core/RolesManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n\\n/**\\n* @author @0xJonaseb11\\n\\n* @dev manages the roles of the whole ecosystem \\n* @dev Only Super Admin can assign roles\\n* @dev On very high roles, there's DAO voting\\n*/\\n\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { Events } from \\\"../utils/Events.sol\\\";\\nimport { Errors } from \\\"../utils/Errors.sol\\\";\\nimport { DataTypes } from \\\"../utils/DataTypes.sol\\\";\\n\\n\\ncontract RolesManager is AccessControl, Errors {\\n\\n    bytes32 public constant CERTIFIER_ROLE = keccak256(\\\"CERTIFYING_BODY_ROLE\\\");\\n    bytes32 public constant INSPECTOR_ROLE = keccak256(\\\"INSPECTION_MANAGER_ROLE\\\");\\n    bytes32 public constant AUDITOR_ROLE = keccak256(\\\"AUDITOR_ROLE\\\");\\n    bytes32 public constant ENTERPRISE_ROLE = keccak256(\\\"ENTERPRISE_ROLE\\\");\\n    bytes32 public constant CERTIFICATE_FACTORY_ROLE = keccak256(\\\"CERTIFICATE_FACTORY_ROLE\\\");\\n    bytes32 public constant PUBLIC_ROLE = keccak256(\\\"PUBLIC_ROLE\\\");\\n\\n    mapping(address => uint256) public publicRoleExpiry;\\n\\n   // ----- modifiers\\n   modifier onlyValidAddress(address account) {\\n    if (account == address(0)) {\\n        revert InvalidAddress();\\n    }\\n    _;\\n   }\\n\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(CERTIFIER_ROLE,  msg.sender);\\n    }\\n\\n\\n    /** ----------- #claim temporary public role -------------- //\\n    * @dev allows users to claim temporary `PUBLIC` role for `durationInHours` hours on their visit to platform\\n    * @param durationInHours The duration in hours the user will have the `PUBLIC` role\\n    * @notice `durationInHours` must be less than 24 hours\\n    * @notice Emits PublicRoleGranted event on successful claim \\n    */\\n    function claimTemporaryPublicRole(uint256 durationInHours) external {\\n        if (hasPublicRole(msg.sender)) {\\n            revert RolesManager__AlreadyHasRole();\\n        }\\n        if (durationInHours > 0) {\\n            revert RolesManager__InvalidDuration();\\n        }\\n         if (durationInHours > 24 /*hours */) {\\n            revert RolesManager__InvalidDuration();\\n         }\\n        uint256 durationInSeconds = durationInHours * 1 hours;\\n    \\n        _grantRole(PUBLIC_ROLE, msg.sender);\\n        publicRoleExpiry[msg.sender] = block.timestamp + durationInSeconds;\\n\\n        emit Events.PublicRoleGranted(msg.sender, durationInHours);\\n    }\\n\\n    // ------- helper for client ---- //\\n    function getMaxPublicRoleDuration() public pure returns (uint256) {\\n        return 24;\\n    }\\n\\n\\n    /** --------- #  Auto-expiry check (Call periodically) ------- //\\n    * @dev helper to check expiry of `PUBLIC` role\\n    * @param account The account to check for role expiry\\n    * @notice Emits PublicRoleExpired event on expiry\\n    */\\n    function checkExpiryRoles(address account) public {\\n        if (hasPublicRole(account) && publicRoleExpiry[account] < block.timestamp) {\\n            _revokeRole(PUBLIC_ROLE, account);\\n\\n            emit Events.PublicRoleExpired(account);\\n        }\\n    }\\n\\n    /** ---------- # Bulk Role Grant(Auto) ------- //\\n    * @dev Bulk grant roles to accounts\\n    * @param roles The array of roles to grant\\n    * @param accounts The array of accounts to grant roles\\n    * emits BulkRolesGranted event on successful grant\\n    */\\n    function bulkGrantRoles(\\n        bytes32[] calldata roles,\\n        address[] calldata accounts\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (roles.length == 0 || accounts.length == 0) {\\n            revert RolesManager__EmptyArray();\\n        }\\n        if (roles.length != accounts.length) {\\n            revert RolesManager__ArrayLengthMismatch();\\n        }\\n        \\n        for (uint256 i = 0; i < roles.length; i++) {\\n            _grantRole(roles[i], accounts[i]);\\n        }\\n\\n        emit Events.BulkRolesGranted(roles, accounts);\\n    }\\n\\n    /** -------- # Safe Role Transfer ------- //\\n    * @dev Transfers a role from one account to another\\n    * @param role The role to transfer\\n    * @param from The account to transfer the role from\\n    * @param to The account to transfer the role to\\n    * @notice Emits RoleTransferred event on successful transfer\\n    */\\n    function transferRole(\\n        bytes32 role,\\n        address from,\\n        address to  \\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!hasRole(role, from)) {\\n            revert RolesManager__RoleDoesNotExist();\\n        }\\n        _revokeRole(role, from);\\n        _grantRole(role, to);\\n\\n        emit Events.RoleTransferred(role, from, to);\\n    }\\n\\n    // ---- combined role check ----- //\\n    function getActiveRoles(address account) public view returns (\\n        bool isAdmin,\\n        bool isCertifier,\\n        bool isInspector,\\n        bool isAuditor,\\n        bool isEnterprise,\\n        bool isCertificateFactory,\\n        bool isPublic\\n    ) {\\n        return (\\n            hasRole(DEFAULT_ADMIN_ROLE, account),\\n            hasRole(CERTIFIER_ROLE, account),\\n            hasRole(INSPECTOR_ROLE, account),\\n            hasRole(AUDITOR_ROLE, account),\\n            hasRole(ENTERPRISE_ROLE, account),\\n            hasRole(CERTIFICATE_FACTORY_ROLE, account),\\n            hasRole(PUBLIC_ROLE, account)\\n        );\\n    }\\n    \\n\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n    _grantRole(role, account);\\n}\\n\\n\\n    ////////////////////////////////////////////////\\n    /////// MANAUAL ROLES MANAGEMENT  ////////////////\\n    ////////////////////////////////////////////////\\n    \\n\\n    /////////////////////////////////\\n    ////// ROLE GRANTING ////////////\\n    /////////////////////////////////\\n    \\n    /** ---------# GRANTING ROLES ---------//\\n    * @dev Functions to grant roles to!\\n    * @param account The account to grant the role to\\n    * @notice Emits RoleGranted event on successful grant\\n    */\\n    function grantCertifier(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        grantRole(CERTIFIER_ROLE, account);\\n\\n        emit Events.RoleGranted(CERTIFIER_ROLE, account);\\n\\n    }\\n    \\n    function grantInspector(address account ) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        grantRole(INSPECTOR_ROLE, account);\\n        emit Events.RoleGranted(INSPECTOR_ROLE, account);\\n    }\\n\\n    function grantAuditor(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        grantRole(AUDITOR_ROLE, account);\\n        emit Events.RoleGranted(AUDITOR_ROLE, account);\\n    }\\n\\n    function grantEnterprise(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        grantRole(ENTERPRISE_ROLE, account);\\n        emit Events.RoleGranted(ENTERPRISE_ROLE, account);\\n    }\\n     \\n    function grantCertificateFactory(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        grantRole(CERTIFICATE_FACTORY_ROLE, account);\\n        emit Events.RoleGranted(CERTIFICATE_FACTORY_ROLE, account);\\n    }\\n\\n    function grantPublicRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        grantRole(PUBLIC_ROLE, account);\\n        emit Events.RoleGranted(PUBLIC_ROLE, account);\\n    }\\n\\n\\n    /**\\n    * @dev Public role will be claimed instantly\\n    * On the entry of a user to our platform\\n    * Just clicking `claim public role` and user is assigned role\\n    * @notice I plan to make it a temporary role on every visit to our platform\\n    */\\n\\n    /////////////////////////////////\\n    // ROLE REVOKATION /////////////\\n    ////////////////////////////////\\n    \\n\\n    /** ------------- # REVOKING ROLES ------------- //\\n    * @dev Functions to revoke roles\\n    * @param account The account to revoke the role from\\n    * @notice Emits RoleRevoked event on successful revoke\\n    */\\n    function revokeCertifierRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        revokeRole(CERTIFIER_ROLE, account);\\n        emit Events.RoleRevoked(CERTIFIER_ROLE, account);\\n    }\\n\\n    function revokeInspectorRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        revokeRole(INSPECTOR_ROLE, account);\\n    }\\n\\n    function revokeAuditorRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n    revokeRole(AUDITOR_ROLE, account);\\n    emit Events.RoleRevoked(AUDITOR_ROLE, account);\\n    }\\n\\n    function revokeEnterpriseRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE){\\n        revokeRole(ENTERPRISE_ROLE, account);\\n        emit Events.RoleRevoked(ENTERPRISE_ROLE, account);\\n    }\\n\\n    function revokeCertificateFactoryRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        revokeRole(CERTIFICATE_FACTORY_ROLE, account);\\n        emit Events.RoleRevoked(CERTIFICATE_FACTORY_ROLE, account);\\n    }\\n    \\n    function revokePublicRole(address account) external onlyValidAddress(account) onlyRole(DEFAULT_ADMIN_ROLE) {\\n        revokeRole(PUBLIC_ROLE, account);\\n        emit Events.RoleRevoked(PUBLIC_ROLE, account);\\n    }\\n\\n\\n    /////////////////////////////////////////////////\\n    //////// ROLE CHECKS //////////////////\\n    /////////////////////////////////////////////////\\n    \\n   /** --------- # CHECKING ROLES --------- //\\n   * @dev Functions to check if a certain account has the specified role\\n   * @param account The account to check \\n   */\\n    function hasAdminRole(address account) public view returns(bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    function hasCertifierRole(address account) public view returns(bool) { \\n        return hasRole(CERTIFIER_ROLE, account);\\n    }\\n\\n    function hasInspectorRole(address account) public view  returns(bool) {\\n        return hasRole(INSPECTOR_ROLE, account);\\n    }\\n\\n    function hasAuditorRole(address account) public view  returns(bool) {\\n        return hasRole(AUDITOR_ROLE, account);\\n    }\\n\\n    function hasEnterpriseRole(address account) public view  returns(bool) {\\n        return hasRole(ENTERPRISE_ROLE, account);\\n    }\\n\\n    function hasCertificateFactoryRole(address account) public view  returns(bool) {\\n        return hasRole(CERTIFICATE_FACTORY_ROLE, account);\\n    }\\n    \\n    function hasPublicRole(address account) public view  returns(bool) {\\n        return hasRole(PUBLIC_ROLE, account);\\n    }\\n}\",\"keccak256\":\"0xa05e7e551d2a2566e2248a6044cf96d7913b4382bedc4c1920f8149c90b5e1ca\",\"license\":\"MIT\"},\"contracts/modules/InspectionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n* @author @0xJonaseb11 \\n* @title InspectionManager Contract\\n* @dev Manages inspection process and reports\\n* @automates certification revocation when inspection is not passed\\n*/\\n\\n///////////////////////////////////////////////////////////////////\\n/////// TO-DO : : Implement Inspection Validity specification/////\\n/////// Initial 30 days atleast - can be changed by Super Admin //\\n////// ASK REGIS HOW LONG A CERTIFICATION WOULD LAST ////////////\\n////////////////////////////////////////////////////////////////\\n\\n\\nimport { RolesManager } from \\\"../core/RolesManager.sol\\\";\\nimport { CertificationAuthority } from \\\"../core/CertificationAuthority.sol\\\";\\nimport { Events } from \\\"../utils/Events.sol\\\";\\nimport { DataTypes } from \\\"../utils/DataTypes.sol\\\";\\n\\ncontract InspectionManager is RolesManager {\\n    RolesManager public immutable rolesManager;\\n    CertificationAuthority public immutable certAuthority;\\n\\n    // Inspection relationships\\n    mapping(address => address[]) private _enterpriseInspectors;\\n    mapping(address => address[]) private _inspectorEnterprises;\\n\\n    // Inspection reports storage\\n    mapping(address => DataTypes.InspectionReport[]) private _enterpriseReports;\\n    mapping(address => mapping(address => uint256)) private _lastInspectionTimestamps;\\n\\n    // flagged inspection tracking\\n    mapping(uint256 => DataTypes.FlaggedInspection) private _flaggedInspections;\\n    mapping(address => uint256[]) private _enterpriseFlaggedReports;\\n    uint256 private _flagCounter;\\n    constructor(address _rolesManager, address _certAuthority) {\\n        rolesManager = RolesManager(_rolesManager);\\n        certAuthority = CertificationAuthority(_certAuthority);\\n    }\\n\\n\\n\\n    ////////////////////////////////////////\\n    //////// ENHANCED ACCESS CONTROL //////\\n    //////////////////////////////////////\\n\\n        modifier onlyCertifier() {\\n        if (!hasCertifierRole(msg.sender)) {\\n            revert RolesManager__NotAuthorizedCertifier();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyActiveInspector(address enterprise) {\\n\\n        if (!hasInspectorRole(msg.sender)) {\\n            revert RolesManager__NotAuthorizedInspector();\\n        }\\n\\n        if (!_isInspectorAssigned(enterprise, msg.sender)) {\\n            revert InspectionManager__NotAssignedToEnterprise();\\n        }\\n\\n        if (block.timestamp > _lastInspectionTimestamps[enterprise][msg.sender]) {\\n            revert InspectionManager__InspectionPeriodExpired();\\n        }\\n        _;\\n    }\\n\\n\\n\\n    ////////////////////////////////////////////\\n    ////////// INSPECTOR ASSIGNMENT ///////////\\n    ///////////////////////////////////////////\\n    function assignInspector(\\n        address enterprise,\\n        address inspector,\\n        uint256 validityPeriod\\n    ) external onlyCertifier {\\n\\n        if (!certAuthority.isCertificationValid(enterprise)) {\\n            revert CertificationAuthority__EnterpriseNotCertifiedYet();\\n        }\\n\\n        if (!hasInspectorRole(inspector)) {\\n            revert RolesManager__NotAuthorizedInspector();\\n        }\\n\\n        _enterpriseInspectors[enterprise].push(inspector);\\n        _inspectorEnterprises[inspector].push(enterprise);\\n        _lastInspectionTimestamps[enterprise][inspector] = block.timestamp + validityPeriod;\\n\\n        emit Events.InspectorAssigned(\\n            enterprise, inspector, validityPeriod\\n        );\\n    }\\n\\n    ///////////////////////////////////////////////\\n    /////// INSPECTION REPORTING /////////////////\\n    /////////////////////////////////////////////\\n    function submitInspectionReport (\\n        address _enterprise,\\n        bool _passed,\\n        string calldata _remarks,\\n        string calldata _evidenceURI\\n    ) external onlyActiveInspector(_enterprise) {\\n\\n        if (block.timestamp > _lastInspectionTimestamps[_enterprise][msg.sender]) {\\n            revert InspectionManager__InspectionPeriodExpired();\\n        }\\n\\n        DataTypes.InspectionReport memory report = DataTypes.InspectionReport({\\n            inspector: msg.sender,\\n            enterprise: _enterprise,\\n            remarks: _remarks,\\n            evidenceURI: _evidenceURI, // IPFS hash\\n            inspectedAt: block.timestamp,\\n            passed: _passed,\\n            flagged: false\\n        });\\n\\n        _enterpriseReports[_enterprise].push(report);\\n\\n        // Auto-revoke certification if not passed\\n        if (!_passed) {\\n            certAuthority.revokeCertification(_enterprise);\\n            \\n\\n        }\\n\\n   \\n\\n        emit Events.InspectionReportSubmitted(\\n            msg.sender,\\n            _enterprise,\\n            _passed,\\n            _remarks,\\n            _evidenceURI,\\n            block.timestamp\\n        );\\n    }\\n\\n\\n         /////////////////////////////////////////////////\\n        ////////// INSPECTION FLAGGING /////////////////\\n        ////////////////////////////////////////////////\\n        function flagInspection(\\n            address enterprise,\\n            uint256 reportIndex,\\n            string calldata reason\\n        ) external onlyRole(AUDITOR_ROLE) {\\n            if (reportIndex >_enterpriseReports[enterprise].length) {\\n                revert InspectionManager__InvalidReportIndex();\\n            }\\n            \\n            if (_enterpriseReports[enterprise][reportIndex].flagged) {\\n                revert InspectionManager__ReportAlreadyFlagged();\\n            }\\n\\n            _enterpriseReports[enterprise][reportIndex].flagged = true;\\n\\n            DataTypes.FlaggedInspection memory flagged = DataTypes.FlaggedInspection({\\n                enterprise: enterprise,\\n                reportIndex: reportIndex,\\n                report: _enterpriseReports[enterprise][reportIndex],\\n                flaggedBy: msg.sender,\\n                reason: reason,\\n                flaggedAt: block.timestamp\\n            });\\n\\n            _flaggedInspections[_flagCounter] = flagged;\\n            _enterpriseFlaggedReports[enterprise].push(_flagCounter);\\n            _flagCounter++;\\n\\n            emit Events.InspectionReportFlagged(\\n                enterprise,\\n                reportIndex,\\n                msg.sender,\\n                reason,\\n                block.timestamp\\n            );\\n\\n        }\\n\\n\\n    ////////////////////////////////////////////////\\n    /////// CROSS-CONTRACT VALIDATION /////////////\\n    //////////////////////////////////////////////\\n    function _isInspectorAssigned(address enterprise, address inspector) private view returns(bool) {\\n        for (uint256 i = 0; i < _enterpriseInspectors[enterprise].length; i++) {\\n            if (_enterpriseInspectors[enterprise][i] == inspector) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    //////////////////////////////////////////////\\n    //////// COMPEREHENSIVE GETTERS /////////////\\n    ////////////////////////////////////////////\\n    function getEnterpriseInspectors(address enterprise)\\n    public \\n    view \\n    returns(address[] memory, uint256[] memory validityPeriods)\\n     {\\n        address[] memory inspectors = _enterpriseInspectors[enterprise];\\n        uint256[] memory periods = new uint256[](inspectors.length);\\n\\n        for (uint256 i = 0; i < inspectors.length; i++) {\\n            periods[i] = _lastInspectionTimestamps[enterprise][inspectors[i]];\\n        }\\n\\n        return (inspectors, periods);\\n     }\\n\\n    function getInspectorReports(address inspector)\\n      public\\n      view \\n      returns(DataTypes.InspectionReport[] memory) {\\n\\n      address[] memory enterprises = _inspectorEnterprises[inspector];\\n      uint256 totalReports;\\n\\n      // First pass: count reports\\n      for (uint256 i = 0; i < enterprises.length; i++) {\\n        totalReports += _enterpriseReports[enterprises[i]].length;\\n      }\\n\\n     // Second pass: collect reports\\n    DataTypes.InspectionReport[] memory reports = new DataTypes.InspectionReport[](totalReports);\\n    uint256 counter;\\n\\n    for (uint256 i = 0; i < enterprises.length; i++) {\\n        for (uint256 j = 0; j <_enterpriseReports[enterprises[i]].length; j++) {\\n            if (_enterpriseReports[enterprises[i]][j].inspector == inspector) {\\n                reports[counter++] = _enterpriseReports[enterprises[i]][j];\\n            }\\n        }\\n    }    \\n\\n        return reports;\\n    }\\n\\n    /////////////////////////////////////////\\n    /// Simple reports getter for testing////\\n    /////////////////////////////////////////\\n      function getEnterpriseInspectionReports(address enterprise) external view returns(DataTypes.InspectionReport[] memory) {\\n\\n        if (_enterpriseReports[enterprise].length == 0) {\\n            revert InspectionManager__NoReportsAssociatedWithEnterprise();\\n        }\\n        return _enterpriseReports[enterprise];\\n    }\\n\\n\\n\\n    //////////////////////////////////////////\\n    ///// FLAGGED INSPECTION GETTERS ////////\\n    ////////////////////////////////////////\\n    function getFlaggedInspections(uint256 limit, uint256 offset) \\n        public view \\n        returns(DataTypes.FlaggedInspection[] memory) {\\n            uint256 resultSize = limit > _flagCounter - offset ?  _flagCounter - offset : limit;\\n            DataTypes.FlaggedInspection[] memory result = new DataTypes.FlaggedInspection[](resultSize);\\n\\n            for (uint256 i = 0; i < resultSize; i++) {\\n                result[i] = _flaggedInspections[offset + i];\\n            }\\n\\n            return result;\\n    }\\n\\n    function getEnterpriseFlaggedReports(address enterprise)\\n    public\\n    view\\n    returns(DataTypes.FlaggedInspection[] memory) {\\n        uint256[] memory flaggedIds = _enterpriseFlaggedReports[enterprise];\\n        DataTypes.FlaggedInspection[] memory result = new DataTypes.FlaggedInspection[](flaggedIds.length);\\n\\n        for (uint256 i = 0; i < flaggedIds.length; i++) {\\n            result[i] = _flaggedInspections[flaggedIds[i]];\\n        }\\n        return result;\\n    }\\n}\",\"keccak256\":\"0xd460a7c71d668cca2d551869daa4082bef805dc9108b5870d91a1d3cd5b73fb5\",\"license\":\"MIT\"},\"contracts/utils/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n* @author @0xJonaseb11\\n* @dev This library contains the data types used by the contracts\\n* @dev These structs hold a huge role in maintaining contract states\\n*/\\nlibrary DataTypes {\\n    struct Certification {\\n        string industry;\\n        string metadataURI;\\n        uint256 certifiedAt;\\n        uint256 expiryDate;\\n        bool isCertified;\\n        uint256 tokenId;\\n    }\\n\\n    struct Enterprise {\\n        address enterpriseAddress;\\n        string name;\\n        string industry;\\n        string metadataURI;\\n        bool isRegistered;\\n        uint256 registrationDate;\\n        uint256 lastUpdated;\\n        uint256 certificateId;\\n    }\\n\\n    struct InspectionReport {\\n        address inspector;\\n        address enterprise;\\n        string remarks;\\n        string evidenceURI; // IPFS hash\\n        uint256 inspectedAt;\\n        bool passed;\\n        bool flagged;\\n    }\\n\\n    struct FlaggedInspection {\\n        address enterprise;\\n        uint256 reportIndex;\\n        InspectionReport report;\\n        address flaggedBy;\\n        string reason;\\n        uint256 flaggedAt;\\n    }\\n\\n    struct NFTCertificate {\\n    address enterprise;\\n    address issuer;\\n    uint256 issuedAt;\\n    uint256 expiresAt;\\n    bool isRevoked;\\n    }\\n\\n    struct AuditCase {\\n        uint256 id;\\n        address targetEnterprise;\\n        uint256 inspectionId;\\n        address auditor;\\n        string reason;\\n        string evidenceURI;\\n        uint256 depositAmount;\\n        AuditStatus status;\\n        uint256 createdAt;\\n        uint256 resolvedAt;\\n    }\\n\\n    enum AuditStatus {\\n        Pending,\\n        Upheld,\\n        Rejected,\\n        Appealed\\n    }\\n}\",\"keccak256\":\"0xdd54b6675ea527069420c989adb49b0cd9a67ba27876feee92e0ee8a5d99fa3e\",\"license\":\"MIT\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n* @author @0xJonaseb11\\n* @dev contains the custom errors emitted by the contracts\\n@notice All the contracts inherit this to handle custom errors\\n*/\\n\\ncontract Errors {\\n    error InvalidAddress();\\n\\n    // -------- RolesManager ------------------//\\n    error RolesManager__UnauthorizedToPerformAction();\\n    error RolesManager__NotAuthorizedCertifier();\\n    error RolesManager__NotAuthorizedInspector();\\n    error RolesManager__NotAuthorizedAuditor();\\n    error RolesManager__NotAuthorizedEnterprise();\\n    error RolesManager__NotAuthorizedCertificateFactory();\\n    error RolesManager__NotAuthorizedPublicUser();\\n    error RolesManager__AlreadyHasRole();\\n    error RolesManager__InvalidDuration();\\n    error RolesManager__EmptyArray();\\n    error RolesManager__ArrayLengthMismatch();\\n    error RolesManager__RoleDoesNotExist();\\n\\n    // ------- EnterpriseRegistry --------------//\\n    error EnterpriseRegistry__EnterpriseAlreadyExists();\\n    error EnterpriseRegistry__EnterpriseDoesNotExist();\\n    error EnterpriseRegistry__InvalidStart();\\n\\n    // ------- CertificationAuthority ------- //\\n    error CertificationAuthority__EnterpriseAlreadyCertified();\\n    error CertificationAuthority__EnterpriseNotCertifiedYet();\\n    error CertificationAuthority__CertificationNotExpiredYet();\\n\\n    // -------- CertificateNFT --------- //\\n    error CertificateNFT__EnterpriseAlreadyCertified();\\n    error CertificateNFT__CertificateDoesNotExist();\\n\\n    // -------- InspectionManageer --------- //\\n    error InspectionManager__InspectorAlreadyAssigned();\\n    error InspectionManager__InspectionPeriodExpired();\\n    error InspectionManager__NotAssignedToEnterprise();\\n    error InspectionManager__InvalidReportIndex();\\n    error InspectionManager__ReportAlreadyFlagged();\\n    error InspectionManager__NoReportsAssociatedWithEnterprise();\\n\\n\\n    // ---------- InspectionReport ----------- //\\n\\n    error AuditorOversight__NotAuthorizedEnterpriseOwner();\\n    error AuditorOversight__AppealWindowClosed();\\n    error AuditorOversight__CaseNotPending();\\n\\n}\",\"keccak256\":\"0xe1870fe63ce3362913db4f28a24dd1ae1cb1044dbd327874658b71e0177f9241\",\"license\":\"MIT\"},\"contracts/utils/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n/**\\n* @author @0xJonaseb11\\n* @dev This library contains the events emitted by the contracts\\n* @dev All the contracts inherit this to handle events\\n*/\\n\\nlibrary Events {\\n    event CertificationGranted(address indexed enterprise, string industry, string metadataURI, uint256 expiryDate);\\n    event CertificationRevoked(address indexed enterprise);\\n    event CertificationUpdated(address indexed enterprise, string newMetadataURI);\\n\\n    event EnterpriseRegistered(address indexed enterprise, string name, string industry, string metadataURI, uint256 certificateId);\\n    event EnterpriseUpdated(address indexed enterprise, string newMetadataURI);\\n    event EnterpriseDeregistered(address indexed enterprise, uint256 deregisteredAt);\\n    \\n    event InspectorAssigned(address indexed enterprise, address indexed inspector, uint256 validityPeriod);\\n    event InspectionReportSubmitted(address indexed inspector, address indexed enterprise, bool passed, string remarks, string evidenceURI, uint256 ReportedAt);\\n    event InspectionReportFlagged(address indexed enterprise, uint256 indexed reportIndex, address flaggedBy, string reason, uint256 timestamp);\\n    \\n    event CertificateMinted(uint256 certificateId, address indexed enterprise, address indexed certifier, uint256 mintedAt);\\n    event CertificateRevoked(uint256 certificateId, address indexed revoker, uint256 timestamp);\\n\\n\\n    event PublicRoleGranted(address indexed user, uint256 duration);\\n    event PublicRoleExpired(address indexed user);\\n    event RoleTransferred(bytes32 indexed role, address from, address to);\\n    event BulkRolesGranted(bytes32[] roles, address[] indexed accounts);\\n    event RoleGranted(bytes32 indexed role, address indexed account);\\n    event RoleRevoked(bytes32 indexed role, address indexed account);\\n\\n    event AuditInitiated(uint256 indexed caseId, address indexed enterprise, uint256 inspectionId, address auditor, string reason, string evidenceURI);\\n    event AuditResolved(uint256 indexed caseId, address indexed enterprise, address resolvedBy, bool upheld, string remarks);\\n    event AppealFiled(uint256 indexed caseid, address indexed enterprise, string counterEvidenceURI, uint256 timestamp);\\n\\n}    \",\"keccak256\":\"0x16284b3e5d51e25be566f386cec7ad356796324565c6403c4de723411b734122\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":26,"contract":"contracts/modules/InspectionManager.sol:InspectionManager","label":"_roles","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_struct(RoleData)21_storage)"},{"astId":3880,"contract":"contracts/modules/InspectionManager.sol:InspectionManager","label":"publicRoleExpiry","offset":0,"slot":"1","type":"t_mapping(t_address,t_uint256)"},{"astId":4584,"contract":"contracts/modules/InspectionManager.sol:InspectionManager","label":"_enterpriseInspectors","offset":0,"slot":"2","type":"t_mapping(t_address,t_array(t_address)dyn_storage)"},{"astId":4589,"contract":"contracts/modules/InspectionManager.sol:InspectionManager","label":"_inspectorEnterprises","offset":0,"slot":"3","type":"t_mapping(t_address,t_array(t_address)dyn_storage)"},{"astId":4595,"contract":"contracts/modules/InspectionManager.sol:InspectionManager","label":"_enterpriseReports","offset":0,"slot":"4","type":"t_mapping(t_address,t_array(t_struct(InspectionReport)5334_storage)dyn_storage)"},{"astId":4601,"contract":"contracts/modules/InspectionManager.sol:InspectionManager","label":"_lastInspectionTimestamps","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":4606,"contract":"contracts/modules/InspectionManager.sol:InspectionManager","label":"_flaggedInspections","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_struct(FlaggedInspection)5348_storage)"},{"astId":4611,"contract":"contracts/modules/InspectionManager.sol:InspectionManager","label":"_enterpriseFlaggedReports","offset":0,"slot":"7","type":"t_mapping(t_address,t_array(t_uint256)dyn_storage)"},{"astId":4613,"contract":"contracts/modules/InspectionManager.sol:InspectionManager","label":"_flagCounter","offset":0,"slot":"8","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"base":"t_address","encoding":"dynamic_array","label":"address[]","numberOfBytes":"32"},"t_array(t_struct(InspectionReport)5334_storage)dyn_storage":{"base":"t_struct(InspectionReport)5334_storage","encoding":"dynamic_array","label":"struct DataTypes.InspectionReport[]","numberOfBytes":"32"},"t_array(t_uint256)dyn_storage":{"base":"t_uint256","encoding":"dynamic_array","label":"uint256[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_array(t_address)dyn_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => address[])","numberOfBytes":"32","value":"t_array(t_address)dyn_storage"},"t_mapping(t_address,t_array(t_struct(InspectionReport)5334_storage)dyn_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct DataTypes.InspectionReport[])","numberOfBytes":"32","value":"t_array(t_struct(InspectionReport)5334_storage)dyn_storage"},"t_mapping(t_address,t_array(t_uint256)dyn_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256[])","numberOfBytes":"32","value":"t_array(t_uint256)dyn_storage"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_struct(RoleData)21_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)21_storage"},"t_mapping(t_uint256,t_struct(FlaggedInspection)5348_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct DataTypes.FlaggedInspection)","numberOfBytes":"32","value":"t_struct(FlaggedInspection)5348_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(FlaggedInspection)5348_storage":{"encoding":"inplace","label":"struct DataTypes.FlaggedInspection","members":[{"astId":5336,"contract":"contracts/modules/InspectionManager.sol:InspectionManager","label":"enterprise","offset":0,"slot":"0","type":"t_address"},{"astId":5338,"contract":"contracts/modules/InspectionManager.sol:InspectionManager","label":"reportIndex","offset":0,"slot":"1","type":"t_uint256"},{"astId":5341,"contract":"contracts/modules/InspectionManager.sol:InspectionManager","label":"report","offset":0,"slot":"2","type":"t_struct(InspectionReport)5334_storage"},{"astId":5343,"contract":"contracts/modules/InspectionManager.sol:InspectionManager","label":"flaggedBy","offset":0,"slot":"8","type":"t_address"},{"astId":5345,"contract":"contracts/modules/InspectionManager.sol:InspectionManager","label":"reason","offset":0,"slot":"9","type":"t_string_storage"},{"astId":5347,"contract":"contracts/modules/InspectionManager.sol:InspectionManager","label":"flaggedAt","offset":0,"slot":"10","type":"t_uint256"}],"numberOfBytes":"352"},"t_struct(InspectionReport)5334_storage":{"encoding":"inplace","label":"struct DataTypes.InspectionReport","members":[{"astId":5321,"contract":"contracts/modules/InspectionManager.sol:InspectionManager","label":"inspector","offset":0,"slot":"0","type":"t_address"},{"astId":5323,"contract":"contracts/modules/InspectionManager.sol:InspectionManager","label":"enterprise","offset":0,"slot":"1","type":"t_address"},{"astId":5325,"contract":"contracts/modules/InspectionManager.sol:InspectionManager","label":"remarks","offset":0,"slot":"2","type":"t_string_storage"},{"astId":5327,"contract":"contracts/modules/InspectionManager.sol:InspectionManager","label":"evidenceURI","offset":0,"slot":"3","type":"t_string_storage"},{"astId":5329,"contract":"contracts/modules/InspectionManager.sol:InspectionManager","label":"inspectedAt","offset":0,"slot":"4","type":"t_uint256"},{"astId":5331,"contract":"contracts/modules/InspectionManager.sol:InspectionManager","label":"passed","offset":0,"slot":"5","type":"t_bool"},{"astId":5333,"contract":"contracts/modules/InspectionManager.sol:InspectionManager","label":"flagged","offset":1,"slot":"5","type":"t_bool"}],"numberOfBytes":"192"},"t_struct(RoleData)21_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":18,"contract":"contracts/modules/InspectionManager.sol:InspectionManager","label":"hasRole","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":20,"contract":"contracts/modules/InspectionManager.sol:InspectionManager","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{"bulkGrantRoles(bytes32[],address[])":{"notice":"---------- # Bulk Role Grant(Auto) ------- //"},"checkExpiryRoles(address)":{"notice":"--------- #  Auto-expiry check (Call periodically) ------- //Emits PublicRoleExpired event on expiry"},"claimTemporaryPublicRole(uint256)":{"notice":"----------- #claim temporary public role -------------- //`durationInHours` must be less than 24 hoursEmits PublicRoleGranted event on successful claim "},"getEnterpriseInspectionReports(address)":{"notice":"Simple reports getter for testing////"},"grantCertifier(address)":{"notice":"---------# GRANTING ROLES ---------//Emits RoleGranted event on successful grant"},"hasAdminRole(address)":{"notice":"--------- # CHECKING ROLES --------- //"},"revokeCertifierRole(address)":{"notice":"------------- # REVOKING ROLES ------------- //Emits RoleRevoked event on successful revoke"},"transferRole(bytes32,address,address)":{"notice":"-------- # Safe Role Transfer ------- //Emits RoleTransferred event on successful transfer"}},"version":1}}},"contracts/utils/DataTypes.sol":{"DataTypes":{"abi":[],"devdoc":{"author":"@0xJonaseb11","details":"This library contains the data types used by the contractsThese structs hold a huge role in maintaining contract states","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b3f31c85f44f8b66cedce72e3b9fa97bb90fee2e88390171da3ed57df9181d4464736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB3 RETURN SHR DUP6 DELEGATECALL 0x4F DUP12 PUSH7 0xCEDCE72E3B9FA9 PUSH28 0xB90FEE2E88390171DA3ED57DF9181D4464736F6C6343000814003300 ","sourceMap":"223:1456:22:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;223:1456:22;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b3f31c85f44f8b66cedce72e3b9fa97bb90fee2e88390171da3ed57df9181d4464736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB3 RETURN SHR DUP6 DELEGATECALL 0x4F DUP12 PUSH7 0xCEDCE72E3B9FA9 PUSH28 0xB90FEE2E88390171DA3ED57DF9181D4464736F6C6343000814003300 ","sourceMap":"223:1456:22:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"@0xJonaseb11\",\"details\":\"This library contains the data types used by the contractsThese structs hold a huge role in maintaining contract states\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/DataTypes.sol\":\"DataTypes\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/utils/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n* @author @0xJonaseb11\\n* @dev This library contains the data types used by the contracts\\n* @dev These structs hold a huge role in maintaining contract states\\n*/\\nlibrary DataTypes {\\n    struct Certification {\\n        string industry;\\n        string metadataURI;\\n        uint256 certifiedAt;\\n        uint256 expiryDate;\\n        bool isCertified;\\n        uint256 tokenId;\\n    }\\n\\n    struct Enterprise {\\n        address enterpriseAddress;\\n        string name;\\n        string industry;\\n        string metadataURI;\\n        bool isRegistered;\\n        uint256 registrationDate;\\n        uint256 lastUpdated;\\n        uint256 certificateId;\\n    }\\n\\n    struct InspectionReport {\\n        address inspector;\\n        address enterprise;\\n        string remarks;\\n        string evidenceURI; // IPFS hash\\n        uint256 inspectedAt;\\n        bool passed;\\n        bool flagged;\\n    }\\n\\n    struct FlaggedInspection {\\n        address enterprise;\\n        uint256 reportIndex;\\n        InspectionReport report;\\n        address flaggedBy;\\n        string reason;\\n        uint256 flaggedAt;\\n    }\\n\\n    struct NFTCertificate {\\n    address enterprise;\\n    address issuer;\\n    uint256 issuedAt;\\n    uint256 expiresAt;\\n    bool isRevoked;\\n    }\\n\\n    struct AuditCase {\\n        uint256 id;\\n        address targetEnterprise;\\n        uint256 inspectionId;\\n        address auditor;\\n        string reason;\\n        string evidenceURI;\\n        uint256 depositAmount;\\n        AuditStatus status;\\n        uint256 createdAt;\\n        uint256 resolvedAt;\\n    }\\n\\n    enum AuditStatus {\\n        Pending,\\n        Upheld,\\n        Rejected,\\n        Appealed\\n    }\\n}\",\"keccak256\":\"0xdd54b6675ea527069420c989adb49b0cd9a67ba27876feee92e0ee8a5d99fa3e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/utils/Errors.sol":{"Errors":{"abi":[{"inputs":[],"name":"AuditorOversight__AppealWindowClosed","type":"error"},{"inputs":[],"name":"AuditorOversight__CaseNotPending","type":"error"},{"inputs":[],"name":"AuditorOversight__NotAuthorizedEnterpriseOwner","type":"error"},{"inputs":[],"name":"CertificateNFT__CertificateDoesNotExist","type":"error"},{"inputs":[],"name":"CertificateNFT__EnterpriseAlreadyCertified","type":"error"},{"inputs":[],"name":"CertificationAuthority__CertificationNotExpiredYet","type":"error"},{"inputs":[],"name":"CertificationAuthority__EnterpriseAlreadyCertified","type":"error"},{"inputs":[],"name":"CertificationAuthority__EnterpriseNotCertifiedYet","type":"error"},{"inputs":[],"name":"EnterpriseRegistry__EnterpriseAlreadyExists","type":"error"},{"inputs":[],"name":"EnterpriseRegistry__EnterpriseDoesNotExist","type":"error"},{"inputs":[],"name":"EnterpriseRegistry__InvalidStart","type":"error"},{"inputs":[],"name":"InspectionManager__InspectionPeriodExpired","type":"error"},{"inputs":[],"name":"InspectionManager__InspectorAlreadyAssigned","type":"error"},{"inputs":[],"name":"InspectionManager__InvalidReportIndex","type":"error"},{"inputs":[],"name":"InspectionManager__NoReportsAssociatedWithEnterprise","type":"error"},{"inputs":[],"name":"InspectionManager__NotAssignedToEnterprise","type":"error"},{"inputs":[],"name":"InspectionManager__ReportAlreadyFlagged","type":"error"},{"inputs":[],"name":"InvalidAddress","type":"error"},{"inputs":[],"name":"RolesManager__AlreadyHasRole","type":"error"},{"inputs":[],"name":"RolesManager__ArrayLengthMismatch","type":"error"},{"inputs":[],"name":"RolesManager__EmptyArray","type":"error"},{"inputs":[],"name":"RolesManager__InvalidDuration","type":"error"},{"inputs":[],"name":"RolesManager__NotAuthorizedAuditor","type":"error"},{"inputs":[],"name":"RolesManager__NotAuthorizedCertificateFactory","type":"error"},{"inputs":[],"name":"RolesManager__NotAuthorizedCertifier","type":"error"},{"inputs":[],"name":"RolesManager__NotAuthorizedEnterprise","type":"error"},{"inputs":[],"name":"RolesManager__NotAuthorizedInspector","type":"error"},{"inputs":[],"name":"RolesManager__NotAuthorizedPublicUser","type":"error"},{"inputs":[],"name":"RolesManager__RoleDoesNotExist","type":"error"},{"inputs":[],"name":"RolesManager__UnauthorizedToPerformAction","type":"error"}],"devdoc":{"author":"@0xJonaseb11","details":"contains the custom errors emitted by the contracts","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212206ffb534b15053409499c007d1f0d3e0a7b91466d09f6108f0bf622a41223e28364736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH16 0xFB534B15053409499C007D1F0D3E0A7B SWAP2 CHAINID PUSH14 0x9F6108F0BF622A41223E2836473 PUSH16 0x6C634300081400330000000000000000 ","sourceMap":"211:1880:23:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea26469706673582212206ffb534b15053409499c007d1f0d3e0a7b91466d09f6108f0bf622a41223e28364736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH16 0xFB534B15053409499C007D1F0D3E0A7B SWAP2 CHAINID PUSH14 0x9F6108F0BF622A41223E2836473 PUSH16 0x6C634300081400330000000000000000 ","sourceMap":"211:1880:23:-:0;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"12600","executionCost":"66","totalCost":"12666"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AuditorOversight__AppealWindowClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuditorOversight__CaseNotPending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuditorOversight__NotAuthorizedEnterpriseOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificateNFT__CertificateDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificateNFT__EnterpriseAlreadyCertified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificationAuthority__CertificationNotExpiredYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificationAuthority__EnterpriseAlreadyCertified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CertificationAuthority__EnterpriseNotCertifiedYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnterpriseRegistry__EnterpriseAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnterpriseRegistry__EnterpriseDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnterpriseRegistry__InvalidStart\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__InspectionPeriodExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__InspectorAlreadyAssigned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__InvalidReportIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__NoReportsAssociatedWithEnterprise\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__NotAssignedToEnterprise\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InspectionManager__ReportAlreadyFlagged\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__AlreadyHasRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__EmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__InvalidDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedAuditor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedCertificateFactory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedCertifier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedEnterprise\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedInspector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__NotAuthorizedPublicUser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__RoleDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RolesManager__UnauthorizedToPerformAction\",\"type\":\"error\"}],\"devdoc\":{\"author\":\"@0xJonaseb11\",\"details\":\"contains the custom errors emitted by the contracts\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"All the contracts inherit this to handle custom errors\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/Errors.sol\":\"Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n* @author @0xJonaseb11\\n* @dev contains the custom errors emitted by the contracts\\n@notice All the contracts inherit this to handle custom errors\\n*/\\n\\ncontract Errors {\\n    error InvalidAddress();\\n\\n    // -------- RolesManager ------------------//\\n    error RolesManager__UnauthorizedToPerformAction();\\n    error RolesManager__NotAuthorizedCertifier();\\n    error RolesManager__NotAuthorizedInspector();\\n    error RolesManager__NotAuthorizedAuditor();\\n    error RolesManager__NotAuthorizedEnterprise();\\n    error RolesManager__NotAuthorizedCertificateFactory();\\n    error RolesManager__NotAuthorizedPublicUser();\\n    error RolesManager__AlreadyHasRole();\\n    error RolesManager__InvalidDuration();\\n    error RolesManager__EmptyArray();\\n    error RolesManager__ArrayLengthMismatch();\\n    error RolesManager__RoleDoesNotExist();\\n\\n    // ------- EnterpriseRegistry --------------//\\n    error EnterpriseRegistry__EnterpriseAlreadyExists();\\n    error EnterpriseRegistry__EnterpriseDoesNotExist();\\n    error EnterpriseRegistry__InvalidStart();\\n\\n    // ------- CertificationAuthority ------- //\\n    error CertificationAuthority__EnterpriseAlreadyCertified();\\n    error CertificationAuthority__EnterpriseNotCertifiedYet();\\n    error CertificationAuthority__CertificationNotExpiredYet();\\n\\n    // -------- CertificateNFT --------- //\\n    error CertificateNFT__EnterpriseAlreadyCertified();\\n    error CertificateNFT__CertificateDoesNotExist();\\n\\n    // -------- InspectionManageer --------- //\\n    error InspectionManager__InspectorAlreadyAssigned();\\n    error InspectionManager__InspectionPeriodExpired();\\n    error InspectionManager__NotAssignedToEnterprise();\\n    error InspectionManager__InvalidReportIndex();\\n    error InspectionManager__ReportAlreadyFlagged();\\n    error InspectionManager__NoReportsAssociatedWithEnterprise();\\n\\n\\n    // ---------- InspectionReport ----------- //\\n\\n    error AuditorOversight__NotAuthorizedEnterpriseOwner();\\n    error AuditorOversight__AppealWindowClosed();\\n    error AuditorOversight__CaseNotPending();\\n\\n}\",\"keccak256\":\"0xe1870fe63ce3362913db4f28a24dd1ae1cb1044dbd327874658b71e0177f9241\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"All the contracts inherit this to handle custom errors","version":1}}},"contracts/utils/Events.sol":{"Events":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"caseid","type":"uint256"},{"indexed":true,"internalType":"address","name":"enterprise","type":"address"},{"indexed":false,"internalType":"string","name":"counterEvidenceURI","type":"string"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"AppealFiled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"caseId","type":"uint256"},{"indexed":true,"internalType":"address","name":"enterprise","type":"address"},{"indexed":false,"internalType":"uint256","name":"inspectionId","type":"uint256"},{"indexed":false,"internalType":"address","name":"auditor","type":"address"},{"indexed":false,"internalType":"string","name":"reason","type":"string"},{"indexed":false,"internalType":"string","name":"evidenceURI","type":"string"}],"name":"AuditInitiated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"caseId","type":"uint256"},{"indexed":true,"internalType":"address","name":"enterprise","type":"address"},{"indexed":false,"internalType":"address","name":"resolvedBy","type":"address"},{"indexed":false,"internalType":"bool","name":"upheld","type":"bool"},{"indexed":false,"internalType":"string","name":"remarks","type":"string"}],"name":"AuditResolved","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32[]","name":"roles","type":"bytes32[]"},{"indexed":true,"internalType":"address[]","name":"accounts","type":"address[]"}],"name":"BulkRolesGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"certificateId","type":"uint256"},{"indexed":true,"internalType":"address","name":"enterprise","type":"address"},{"indexed":true,"internalType":"address","name":"certifier","type":"address"},{"indexed":false,"internalType":"uint256","name":"mintedAt","type":"uint256"}],"name":"CertificateMinted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"certificateId","type":"uint256"},{"indexed":true,"internalType":"address","name":"revoker","type":"address"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"CertificateRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"enterprise","type":"address"},{"indexed":false,"internalType":"string","name":"industry","type":"string"},{"indexed":false,"internalType":"string","name":"metadataURI","type":"string"},{"indexed":false,"internalType":"uint256","name":"expiryDate","type":"uint256"}],"name":"CertificationGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"enterprise","type":"address"}],"name":"CertificationRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"enterprise","type":"address"},{"indexed":false,"internalType":"string","name":"newMetadataURI","type":"string"}],"name":"CertificationUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"enterprise","type":"address"},{"indexed":false,"internalType":"uint256","name":"deregisteredAt","type":"uint256"}],"name":"EnterpriseDeregistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"enterprise","type":"address"},{"indexed":false,"internalType":"string","name":"name","type":"string"},{"indexed":false,"internalType":"string","name":"industry","type":"string"},{"indexed":false,"internalType":"string","name":"metadataURI","type":"string"},{"indexed":false,"internalType":"uint256","name":"certificateId","type":"uint256"}],"name":"EnterpriseRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"enterprise","type":"address"},{"indexed":false,"internalType":"string","name":"newMetadataURI","type":"string"}],"name":"EnterpriseUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"enterprise","type":"address"},{"indexed":true,"internalType":"uint256","name":"reportIndex","type":"uint256"},{"indexed":false,"internalType":"address","name":"flaggedBy","type":"address"},{"indexed":false,"internalType":"string","name":"reason","type":"string"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"InspectionReportFlagged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"inspector","type":"address"},{"indexed":true,"internalType":"address","name":"enterprise","type":"address"},{"indexed":false,"internalType":"bool","name":"passed","type":"bool"},{"indexed":false,"internalType":"string","name":"remarks","type":"string"},{"indexed":false,"internalType":"string","name":"evidenceURI","type":"string"},{"indexed":false,"internalType":"uint256","name":"ReportedAt","type":"uint256"}],"name":"InspectionReportSubmitted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"enterprise","type":"address"},{"indexed":true,"internalType":"address","name":"inspector","type":"address"},{"indexed":false,"internalType":"uint256","name":"validityPeriod","type":"uint256"}],"name":"InspectorAssigned","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"}],"name":"PublicRoleExpired","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"duration","type":"uint256"}],"name":"PublicRoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"address","name":"to","type":"address"}],"name":"RoleTransferred","type":"event"}],"devdoc":{"author":"@0xJonaseb11","details":"This library contains the events emitted by the contractsAll the contracts inherit this to handle events","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cbdacf9bb36aa38cdbcb5111ae6a5b2c52e1246fa4a025c2867b2c366b0ba1e364736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCB 0xDA 0xCF SWAP12 0xB3 PUSH11 0xA38CDBCB5111AE6A5B2C52 0xE1 0x24 PUSH16 0xA4A025C2867B2C366B0BA1E364736F6C PUSH4 0x43000814 STOP CALLER ","sourceMap":"208:2035:24:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;208:2035:24;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cbdacf9bb36aa38cdbcb5111ae6a5b2c52e1246fa4a025c2867b2c366b0ba1e364736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCB 0xDA 0xCF SWAP12 0xB3 PUSH11 0xA38CDBCB5111AE6A5B2C52 0xE1 0x24 PUSH16 0xA4A025C2867B2C366B0BA1E364736F6C PUSH4 0x43000814 STOP CALLER ","sourceMap":"208:2035:24:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"caseid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"counterEvidenceURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AppealFiled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"caseId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inspectionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"auditor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"evidenceURI\",\"type\":\"string\"}],\"name\":\"AuditInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"caseId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"resolvedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"upheld\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"remarks\",\"type\":\"string\"}],\"name\":\"AuditResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"roles\",\"type\":\"bytes32[]\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"BulkRolesGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"certificateId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"certifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedAt\",\"type\":\"uint256\"}],\"name\":\"CertificateMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"certificateId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CertificateRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"industry\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiryDate\",\"type\":\"uint256\"}],\"name\":\"CertificationGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"}],\"name\":\"CertificationRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newMetadataURI\",\"type\":\"string\"}],\"name\":\"CertificationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deregisteredAt\",\"type\":\"uint256\"}],\"name\":\"EnterpriseDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"industry\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"certificateId\",\"type\":\"uint256\"}],\"name\":\"EnterpriseRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newMetadataURI\",\"type\":\"string\"}],\"name\":\"EnterpriseUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reportIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"flaggedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"InspectionReportFlagged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inspector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"remarks\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"evidenceURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ReportedAt\",\"type\":\"uint256\"}],\"name\":\"InspectionReportSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inspector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validityPeriod\",\"type\":\"uint256\"}],\"name\":\"InspectorAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"PublicRoleExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"PublicRoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RoleTransferred\",\"type\":\"event\"}],\"devdoc\":{\"author\":\"@0xJonaseb11\",\"details\":\"This library contains the events emitted by the contractsAll the contracts inherit this to handle events\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/Events.sol\":\"Events\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/utils/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n/**\\n* @author @0xJonaseb11\\n* @dev This library contains the events emitted by the contracts\\n* @dev All the contracts inherit this to handle events\\n*/\\n\\nlibrary Events {\\n    event CertificationGranted(address indexed enterprise, string industry, string metadataURI, uint256 expiryDate);\\n    event CertificationRevoked(address indexed enterprise);\\n    event CertificationUpdated(address indexed enterprise, string newMetadataURI);\\n\\n    event EnterpriseRegistered(address indexed enterprise, string name, string industry, string metadataURI, uint256 certificateId);\\n    event EnterpriseUpdated(address indexed enterprise, string newMetadataURI);\\n    event EnterpriseDeregistered(address indexed enterprise, uint256 deregisteredAt);\\n    \\n    event InspectorAssigned(address indexed enterprise, address indexed inspector, uint256 validityPeriod);\\n    event InspectionReportSubmitted(address indexed inspector, address indexed enterprise, bool passed, string remarks, string evidenceURI, uint256 ReportedAt);\\n    event InspectionReportFlagged(address indexed enterprise, uint256 indexed reportIndex, address flaggedBy, string reason, uint256 timestamp);\\n    \\n    event CertificateMinted(uint256 certificateId, address indexed enterprise, address indexed certifier, uint256 mintedAt);\\n    event CertificateRevoked(uint256 certificateId, address indexed revoker, uint256 timestamp);\\n\\n\\n    event PublicRoleGranted(address indexed user, uint256 duration);\\n    event PublicRoleExpired(address indexed user);\\n    event RoleTransferred(bytes32 indexed role, address from, address to);\\n    event BulkRolesGranted(bytes32[] roles, address[] indexed accounts);\\n    event RoleGranted(bytes32 indexed role, address indexed account);\\n    event RoleRevoked(bytes32 indexed role, address indexed account);\\n\\n    event AuditInitiated(uint256 indexed caseId, address indexed enterprise, uint256 inspectionId, address auditor, string reason, string evidenceURI);\\n    event AuditResolved(uint256 indexed caseId, address indexed enterprise, address resolvedBy, bool upheld, string remarks);\\n    event AppealFiled(uint256 indexed caseid, address indexed enterprise, string counterEvidenceURI, uint256 timestamp);\\n\\n}    \",\"keccak256\":\"0x16284b3e5d51e25be566f386cec7ad356796324565c6403c4de723411b734122\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}