/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface CertificateNFTInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AUDITOR_ROLE"
      | "CERTIFICATE_FACTORY_ROLE"
      | "CERTIFIER_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "DEFAULT_PUBLIC_ROLE_DURATION"
      | "ENTERPRISE_ROLE"
      | "INSPECTOR_ROLE"
      | "PUBLIC_ROLE"
      | "approve"
      | "balanceOf"
      | "bulkGrantRoles"
      | "checkExpiryRoles"
      | "claimTemporaryPublicRole"
      | "enterpriseCertificate"
      | "getActiveRoles"
      | "getApproved"
      | "getCertificateId"
      | "getMaxPublicRoleDuration"
      | "getRoleAdmin"
      | "grantAuditor"
      | "grantCertificateFactory"
      | "grantCertifier"
      | "grantEnterprise"
      | "grantInspector"
      | "grantPublicRole"
      | "grantRole"
      | "hasAdminRole"
      | "hasAuditorRole"
      | "hasCertificateFactoryRole"
      | "hasCertifierRole"
      | "hasEnterpriseRole"
      | "hasInspectorRole"
      | "hasPublicRole"
      | "hasRole"
      | "isApprovedForAll"
      | "isCertificateValid"
      | "mintCertificate"
      | "name"
      | "nextCertificateId"
      | "owner"
      | "ownerOf"
      | "publicRoleExpiry"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeAuditorRole"
      | "revokeCertificate"
      | "revokeCertificateFactoryRole"
      | "revokeCertifierRole"
      | "revokeEnterpriseRole"
      | "revokeInspectorRole"
      | "revokePublicRole"
      | "revokeRole"
      | "rolesManager"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
      | "transferOwnership"
      | "transferRole"
      | "validCertificates"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "BatchMetadataUpdate"
      | "BulkRolesGranted"
      | "CertificateMinted"
      | "CertificateRevoked"
      | "MetadataUpdate"
      | "OwnershipTransferred"
      | "PublicRoleExpired"
      | "PublicRoleGranted"
      | "RoleAdminChanged"
      | "RoleGranted(bytes32,address,address)"
      | "RoleGranted(bytes32,address)"
      | "RoleRevoked(bytes32,address,address)"
      | "RoleRevoked(bytes32,address)"
      | "RoleTransferred"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "AUDITOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CERTIFICATE_FACTORY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CERTIFIER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_PUBLIC_ROLE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ENTERPRISE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INSPECTOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PUBLIC_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGrantRoles",
    values: [BytesLike[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkExpiryRoles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTemporaryPublicRole",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enterpriseCertificate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveRoles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCertificateId",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxPublicRoleDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAuditor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantCertificateFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantCertifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantEnterprise",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantInspector",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantPublicRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAdminRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAuditorRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasCertificateFactoryRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasCertifierRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasEnterpriseRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasInspectorRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPublicRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCertificateValid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintCertificate",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextCertificateId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "publicRoleExpiry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAuditorRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeCertificate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeCertificateFactoryRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeCertifierRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeEnterpriseRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeInspectorRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePublicRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rolesManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferRole",
    values: [BytesLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validCertificates",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "AUDITOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CERTIFICATE_FACTORY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CERTIFIER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_PUBLIC_ROLE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ENTERPRISE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INSPECTOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PUBLIC_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bulkGrantRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkExpiryRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTemporaryPublicRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterpriseCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCertificateId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxPublicRoleDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAuditor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantCertificateFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantCertifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantEnterprise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantInspector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantPublicRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAuditorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasCertificateFactoryRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasCertifierRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasEnterpriseRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasInspectorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPublicRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCertificateValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextCertificateId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicRoleExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAuditorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeCertificateFactoryRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeCertifierRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeEnterpriseRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeInspectorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePublicRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rolesManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validCertificates",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchMetadataUpdateEvent {
  export type InputTuple = [
    _fromTokenId: BigNumberish,
    _toTokenId: BigNumberish
  ];
  export type OutputTuple = [_fromTokenId: bigint, _toTokenId: bigint];
  export interface OutputObject {
    _fromTokenId: bigint;
    _toTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BulkRolesGrantedEvent {
  export type InputTuple = [roles: BytesLike[], accounts: AddressLike[]];
  export type OutputTuple = [roles: string[], accounts: string[]];
  export interface OutputObject {
    roles: string[];
    accounts: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CertificateMintedEvent {
  export type InputTuple = [
    certificateId: BigNumberish,
    enterprise: AddressLike,
    certifier: AddressLike,
    mintedAt: BigNumberish
  ];
  export type OutputTuple = [
    certificateId: bigint,
    enterprise: string,
    certifier: string,
    mintedAt: bigint
  ];
  export interface OutputObject {
    certificateId: bigint;
    enterprise: string;
    certifier: string;
    mintedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CertificateRevokedEvent {
  export type InputTuple = [
    certificateId: BigNumberish,
    revoker: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    certificateId: bigint,
    revoker: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    certificateId: bigint;
    revoker: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdateEvent {
  export type InputTuple = [_tokenId: BigNumberish];
  export type OutputTuple = [_tokenId: bigint];
  export interface OutputObject {
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PublicRoleExpiredEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PublicRoleGrantedEvent {
  export type InputTuple = [user: AddressLike, duration: BigNumberish];
  export type OutputTuple = [user: string, duration: bigint];
  export interface OutputObject {
    user: string;
    duration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGranted_bytes32_address_address_Event {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGranted_bytes32_address_Event {
  export type InputTuple = [role: BytesLike, account: AddressLike];
  export type OutputTuple = [role: string, account: string];
  export interface OutputObject {
    role: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevoked_bytes32_address_address_Event {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevoked_bytes32_address_Event {
  export type InputTuple = [role: BytesLike, account: AddressLike];
  export type OutputTuple = [role: string, account: string];
  export interface OutputObject {
    role: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleTransferredEvent {
  export type InputTuple = [
    role: BytesLike,
    from: AddressLike,
    to: AddressLike
  ];
  export type OutputTuple = [role: string, from: string, to: string];
  export interface OutputObject {
    role: string;
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CertificateNFT extends BaseContract {
  connect(runner?: ContractRunner | null): CertificateNFT;
  waitForDeployment(): Promise<this>;

  interface: CertificateNFTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AUDITOR_ROLE: TypedContractMethod<[], [string], "view">;

  CERTIFICATE_FACTORY_ROLE: TypedContractMethod<[], [string], "view">;

  CERTIFIER_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_PUBLIC_ROLE_DURATION: TypedContractMethod<[], [bigint], "view">;

  ENTERPRISE_ROLE: TypedContractMethod<[], [string], "view">;

  INSPECTOR_ROLE: TypedContractMethod<[], [string], "view">;

  PUBLIC_ROLE: TypedContractMethod<[], [string], "view">;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  bulkGrantRoles: TypedContractMethod<
    [roles: BytesLike[], accounts: AddressLike[]],
    [void],
    "nonpayable"
  >;

  checkExpiryRoles: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  claimTemporaryPublicRole: TypedContractMethod<
    [durationInHours: BigNumberish],
    [void],
    "nonpayable"
  >;

  enterpriseCertificate: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  getActiveRoles: TypedContractMethod<
    [account: AddressLike],
    [
      [boolean, boolean, boolean, boolean, boolean, boolean, boolean] & {
        isAdmin: boolean;
        isCertifier: boolean;
        isInspector: boolean;
        isAuditor: boolean;
        isEnterprise: boolean;
        isCertificateFactory: boolean;
        isPublic: boolean;
      }
    ],
    "view"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getCertificateId: TypedContractMethod<
    [enterprise: AddressLike],
    [bigint],
    "view"
  >;

  getMaxPublicRoleDuration: TypedContractMethod<[], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantAuditor: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  grantCertificateFactory: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  grantCertifier: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  grantEnterprise: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  grantInspector: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  grantPublicRole: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasAdminRole: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  hasAuditorRole: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  hasCertificateFactoryRole: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  hasCertifierRole: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  hasEnterpriseRole: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  hasInspectorRole: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  hasPublicRole: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isCertificateValid: TypedContractMethod<
    [certId: BigNumberish],
    [boolean],
    "view"
  >;

  mintCertificate: TypedContractMethod<
    [enterprise: AddressLike, metadataURI: string],
    [bigint],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  nextCertificateId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  publicRoleExpiry: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeAuditorRole: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeCertificate: TypedContractMethod<
    [certId: BigNumberish],
    [void],
    "nonpayable"
  >;

  revokeCertificateFactoryRole: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeCertifierRole: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeEnterpriseRole: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeInspectorRole: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokePublicRole: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  rolesManager: TypedContractMethod<[], [string], "view">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferRole: TypedContractMethod<
    [role: BytesLike, from: AddressLike, to: AddressLike],
    [void],
    "nonpayable"
  >;

  validCertificates: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AUDITOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CERTIFICATE_FACTORY_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CERTIFIER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_PUBLIC_ROLE_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ENTERPRISE_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "INSPECTOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PUBLIC_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "bulkGrantRoles"
  ): TypedContractMethod<
    [roles: BytesLike[], accounts: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkExpiryRoles"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimTemporaryPublicRole"
  ): TypedContractMethod<[durationInHours: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enterpriseCertificate"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getActiveRoles"
  ): TypedContractMethod<
    [account: AddressLike],
    [
      [boolean, boolean, boolean, boolean, boolean, boolean, boolean] & {
        isAdmin: boolean;
        isCertifier: boolean;
        isInspector: boolean;
        isAuditor: boolean;
        isEnterprise: boolean;
        isCertificateFactory: boolean;
        isPublic: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getCertificateId"
  ): TypedContractMethod<[enterprise: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMaxPublicRoleDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantAuditor"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantCertificateFactory"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantCertifier"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantEnterprise"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantInspector"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantPublicRole"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasAdminRole"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasAuditorRole"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasCertificateFactoryRole"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasCertifierRole"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasEnterpriseRole"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasInspectorRole"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasPublicRole"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isCertificateValid"
  ): TypedContractMethod<[certId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "mintCertificate"
  ): TypedContractMethod<
    [enterprise: AddressLike, metadataURI: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nextCertificateId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "publicRoleExpiry"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeAuditorRole"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeCertificate"
  ): TypedContractMethod<[certId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeCertificateFactoryRole"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeCertifierRole"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeEnterpriseRole"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeInspectorRole"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokePublicRole"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rolesManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferRole"
  ): TypedContractMethod<
    [role: BytesLike, from: AddressLike, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validCertificates"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BatchMetadataUpdate"
  ): TypedContractEvent<
    BatchMetadataUpdateEvent.InputTuple,
    BatchMetadataUpdateEvent.OutputTuple,
    BatchMetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "BulkRolesGranted"
  ): TypedContractEvent<
    BulkRolesGrantedEvent.InputTuple,
    BulkRolesGrantedEvent.OutputTuple,
    BulkRolesGrantedEvent.OutputObject
  >;
  getEvent(
    key: "CertificateMinted"
  ): TypedContractEvent<
    CertificateMintedEvent.InputTuple,
    CertificateMintedEvent.OutputTuple,
    CertificateMintedEvent.OutputObject
  >;
  getEvent(
    key: "CertificateRevoked"
  ): TypedContractEvent<
    CertificateRevokedEvent.InputTuple,
    CertificateRevokedEvent.OutputTuple,
    CertificateRevokedEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdate"
  ): TypedContractEvent<
    MetadataUpdateEvent.InputTuple,
    MetadataUpdateEvent.OutputTuple,
    MetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PublicRoleExpired"
  ): TypedContractEvent<
    PublicRoleExpiredEvent.InputTuple,
    PublicRoleExpiredEvent.OutputTuple,
    PublicRoleExpiredEvent.OutputObject
  >;
  getEvent(
    key: "PublicRoleGranted"
  ): TypedContractEvent<
    PublicRoleGrantedEvent.InputTuple,
    PublicRoleGrantedEvent.OutputTuple,
    PublicRoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted(bytes32,address,address)"
  ): TypedContractEvent<
    RoleGranted_bytes32_address_address_Event.InputTuple,
    RoleGranted_bytes32_address_address_Event.OutputTuple,
    RoleGranted_bytes32_address_address_Event.OutputObject
  >;
  getEvent(
    key: "RoleGranted(bytes32,address)"
  ): TypedContractEvent<
    RoleGranted_bytes32_address_Event.InputTuple,
    RoleGranted_bytes32_address_Event.OutputTuple,
    RoleGranted_bytes32_address_Event.OutputObject
  >;
  getEvent(
    key: "RoleRevoked(bytes32,address,address)"
  ): TypedContractEvent<
    RoleRevoked_bytes32_address_address_Event.InputTuple,
    RoleRevoked_bytes32_address_address_Event.OutputTuple,
    RoleRevoked_bytes32_address_address_Event.OutputObject
  >;
  getEvent(
    key: "RoleRevoked(bytes32,address)"
  ): TypedContractEvent<
    RoleRevoked_bytes32_address_Event.InputTuple,
    RoleRevoked_bytes32_address_Event.OutputTuple,
    RoleRevoked_bytes32_address_Event.OutputObject
  >;
  getEvent(
    key: "RoleTransferred"
  ): TypedContractEvent<
    RoleTransferredEvent.InputTuple,
    RoleTransferredEvent.OutputTuple,
    RoleTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BatchMetadataUpdate(uint256,uint256)": TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;
    BatchMetadataUpdate: TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;

    "BulkRolesGranted(bytes32[],address[])": TypedContractEvent<
      BulkRolesGrantedEvent.InputTuple,
      BulkRolesGrantedEvent.OutputTuple,
      BulkRolesGrantedEvent.OutputObject
    >;
    BulkRolesGranted: TypedContractEvent<
      BulkRolesGrantedEvent.InputTuple,
      BulkRolesGrantedEvent.OutputTuple,
      BulkRolesGrantedEvent.OutputObject
    >;

    "CertificateMinted(uint256,address,address,uint256)": TypedContractEvent<
      CertificateMintedEvent.InputTuple,
      CertificateMintedEvent.OutputTuple,
      CertificateMintedEvent.OutputObject
    >;
    CertificateMinted: TypedContractEvent<
      CertificateMintedEvent.InputTuple,
      CertificateMintedEvent.OutputTuple,
      CertificateMintedEvent.OutputObject
    >;

    "CertificateRevoked(uint256,address,uint256)": TypedContractEvent<
      CertificateRevokedEvent.InputTuple,
      CertificateRevokedEvent.OutputTuple,
      CertificateRevokedEvent.OutputObject
    >;
    CertificateRevoked: TypedContractEvent<
      CertificateRevokedEvent.InputTuple,
      CertificateRevokedEvent.OutputTuple,
      CertificateRevokedEvent.OutputObject
    >;

    "MetadataUpdate(uint256)": TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;
    MetadataUpdate: TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PublicRoleExpired(address)": TypedContractEvent<
      PublicRoleExpiredEvent.InputTuple,
      PublicRoleExpiredEvent.OutputTuple,
      PublicRoleExpiredEvent.OutputObject
    >;
    PublicRoleExpired: TypedContractEvent<
      PublicRoleExpiredEvent.InputTuple,
      PublicRoleExpiredEvent.OutputTuple,
      PublicRoleExpiredEvent.OutputObject
    >;

    "PublicRoleGranted(address,uint256)": TypedContractEvent<
      PublicRoleGrantedEvent.InputTuple,
      PublicRoleGrantedEvent.OutputTuple,
      PublicRoleGrantedEvent.OutputObject
    >;
    PublicRoleGranted: TypedContractEvent<
      PublicRoleGrantedEvent.InputTuple,
      PublicRoleGrantedEvent.OutputTuple,
      PublicRoleGrantedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGranted_bytes32_address_address_Event.InputTuple,
      RoleGranted_bytes32_address_address_Event.OutputTuple,
      RoleGranted_bytes32_address_address_Event.OutputObject
    >;
    "RoleGranted(bytes32,address)": TypedContractEvent<
      RoleGranted_bytes32_address_Event.InputTuple,
      RoleGranted_bytes32_address_Event.OutputTuple,
      RoleGranted_bytes32_address_Event.OutputObject
    >;
    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevoked_bytes32_address_address_Event.InputTuple,
      RoleRevoked_bytes32_address_address_Event.OutputTuple,
      RoleRevoked_bytes32_address_address_Event.OutputObject
    >;
    "RoleRevoked(bytes32,address)": TypedContractEvent<
      RoleRevoked_bytes32_address_Event.InputTuple,
      RoleRevoked_bytes32_address_Event.OutputTuple,
      RoleRevoked_bytes32_address_Event.OutputObject
    >;

    "RoleTransferred(bytes32,address,address)": TypedContractEvent<
      RoleTransferredEvent.InputTuple,
      RoleTransferredEvent.OutputTuple,
      RoleTransferredEvent.OutputObject
    >;
    RoleTransferred: TypedContractEvent<
      RoleTransferredEvent.InputTuple,
      RoleTransferredEvent.OutputTuple,
      RoleTransferredEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
