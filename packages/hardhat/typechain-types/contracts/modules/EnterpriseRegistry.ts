/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace DataTypes {
  export type EnterpriseStruct = {
    enterpriseAddress: AddressLike;
    name: string;
    industry: string;
    metadataURI: string;
    isRegistered: boolean;
    registrationDate: BigNumberish;
    lastUpdated: BigNumberish;
    certificateId: BigNumberish;
  };

  export type EnterpriseStructOutput = [
    enterpriseAddress: string,
    name: string,
    industry: string,
    metadataURI: string,
    isRegistered: boolean,
    registrationDate: bigint,
    lastUpdated: bigint,
    certificateId: bigint
  ] & {
    enterpriseAddress: string;
    name: string;
    industry: string;
    metadataURI: string;
    isRegistered: boolean;
    registrationDate: bigint;
    lastUpdated: bigint;
    certificateId: bigint;
  };
}

export interface EnterpriseRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AUDITOR_ROLE"
      | "CERTIFICATE_FACTORY_ROLE"
      | "CERTIFIER_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "ENTERPRISE_ROLE"
      | "INSPECTOR_ROLE"
      | "PUBLIC_ROLE"
      | "allEnterprises"
      | "bulkGrantRoles"
      | "certAuthority"
      | "certificateNFT"
      | "checkExpiryRoles"
      | "claimTemporaryPublicRole"
      | "deRegisterEnterprise"
      | "getActiveRoles"
      | "getEnterprise"
      | "getEnterpriseWithStatus"
      | "getMaxPublicRoleDuration"
      | "getRoleAdmin"
      | "grantAuditor"
      | "grantCertificateFactory"
      | "grantCertifier"
      | "grantEnterprise"
      | "grantInspector"
      | "grantPublicRole"
      | "grantRole"
      | "hasAdminRole"
      | "hasAuditorRole"
      | "hasCertificateFactoryRole"
      | "hasCertifierRole"
      | "hasEnterpriseRole"
      | "hasInspectorRole"
      | "hasPublicRole"
      | "hasRole"
      | "isEnterpriseActive"
      | "lisEnterprisesPaginated"
      | "listEnterprises"
      | "publicRoleExpiry"
      | "registerEnterprise"
      | "renounceRole"
      | "revokeAuditorRole"
      | "revokeCertificateFactoryRole"
      | "revokeCertifierRole"
      | "revokeEnterpriseRole"
      | "revokeInspectorRole"
      | "revokePublicRole"
      | "revokeRole"
      | "rolesManager"
      | "supportsInterface"
      | "transferRole"
      | "updateEnterpriseMetadata"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BulkRolesGranted"
      | "EnterpriseDeregistered"
      | "EnterpriseRegistered"
      | "EnterpriseUpdated"
      | "PublicRoleExpired"
      | "PublicRoleGranted"
      | "RoleAdminChanged"
      | "RoleGranted(bytes32,address,address)"
      | "RoleGranted(bytes32,address)"
      | "RoleRevoked(bytes32,address,address)"
      | "RoleRevoked(bytes32,address)"
      | "RoleTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "AUDITOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CERTIFICATE_FACTORY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CERTIFIER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ENTERPRISE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INSPECTOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PUBLIC_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allEnterprises",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGrantRoles",
    values: [BytesLike[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "certAuthority",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "certificateNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkExpiryRoles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTemporaryPublicRole",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deRegisterEnterprise",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveRoles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEnterprise",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEnterpriseWithStatus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxPublicRoleDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAuditor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantCertificateFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantCertifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantEnterprise",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantInspector",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantPublicRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAdminRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAuditorRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasCertificateFactoryRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasCertifierRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasEnterpriseRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasInspectorRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPublicRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isEnterpriseActive",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lisEnterprisesPaginated",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listEnterprises",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicRoleExpiry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerEnterprise",
    values: [AddressLike, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAuditorRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeCertificateFactoryRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeCertifierRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeEnterpriseRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeInspectorRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePublicRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rolesManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferRole",
    values: [BytesLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEnterpriseMetadata",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "AUDITOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CERTIFICATE_FACTORY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CERTIFIER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ENTERPRISE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INSPECTOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PUBLIC_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allEnterprises",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGrantRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "certAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "certificateNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkExpiryRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTemporaryPublicRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deRegisterEnterprise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnterprise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnterpriseWithStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxPublicRoleDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAuditor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantCertificateFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantCertifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantEnterprise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantInspector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantPublicRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAuditorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasCertificateFactoryRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasCertifierRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasEnterpriseRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasInspectorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPublicRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isEnterpriseActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lisEnterprisesPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listEnterprises",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicRoleExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerEnterprise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAuditorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeCertificateFactoryRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeCertifierRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeEnterpriseRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeInspectorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePublicRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rolesManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEnterpriseMetadata",
    data: BytesLike
  ): Result;
}

export namespace BulkRolesGrantedEvent {
  export type InputTuple = [roles: BytesLike[], accounts: AddressLike[]];
  export type OutputTuple = [roles: string[], accounts: string[]];
  export interface OutputObject {
    roles: string[];
    accounts: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnterpriseDeregisteredEvent {
  export type InputTuple = [
    enterprise: AddressLike,
    deregisteredAt: BigNumberish
  ];
  export type OutputTuple = [enterprise: string, deregisteredAt: bigint];
  export interface OutputObject {
    enterprise: string;
    deregisteredAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnterpriseRegisteredEvent {
  export type InputTuple = [
    enterprise: AddressLike,
    name: string,
    industry: string,
    metadataURI: string,
    certificateId: BigNumberish
  ];
  export type OutputTuple = [
    enterprise: string,
    name: string,
    industry: string,
    metadataURI: string,
    certificateId: bigint
  ];
  export interface OutputObject {
    enterprise: string;
    name: string;
    industry: string;
    metadataURI: string;
    certificateId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnterpriseUpdatedEvent {
  export type InputTuple = [enterprise: AddressLike, newMetadataURI: string];
  export type OutputTuple = [enterprise: string, newMetadataURI: string];
  export interface OutputObject {
    enterprise: string;
    newMetadataURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PublicRoleExpiredEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PublicRoleGrantedEvent {
  export type InputTuple = [user: AddressLike, duration: BigNumberish];
  export type OutputTuple = [user: string, duration: bigint];
  export interface OutputObject {
    user: string;
    duration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGranted_bytes32_address_address_Event {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGranted_bytes32_address_Event {
  export type InputTuple = [role: BytesLike, account: AddressLike];
  export type OutputTuple = [role: string, account: string];
  export interface OutputObject {
    role: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevoked_bytes32_address_address_Event {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevoked_bytes32_address_Event {
  export type InputTuple = [role: BytesLike, account: AddressLike];
  export type OutputTuple = [role: string, account: string];
  export interface OutputObject {
    role: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleTransferredEvent {
  export type InputTuple = [
    role: BytesLike,
    from: AddressLike,
    to: AddressLike
  ];
  export type OutputTuple = [role: string, from: string, to: string];
  export interface OutputObject {
    role: string;
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EnterpriseRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): EnterpriseRegistry;
  waitForDeployment(): Promise<this>;

  interface: EnterpriseRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AUDITOR_ROLE: TypedContractMethod<[], [string], "view">;

  CERTIFICATE_FACTORY_ROLE: TypedContractMethod<[], [string], "view">;

  CERTIFIER_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  ENTERPRISE_ROLE: TypedContractMethod<[], [string], "view">;

  INSPECTOR_ROLE: TypedContractMethod<[], [string], "view">;

  PUBLIC_ROLE: TypedContractMethod<[], [string], "view">;

  allEnterprises: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  bulkGrantRoles: TypedContractMethod<
    [roles: BytesLike[], accounts: AddressLike[]],
    [void],
    "nonpayable"
  >;

  certAuthority: TypedContractMethod<[], [string], "view">;

  certificateNFT: TypedContractMethod<[], [string], "view">;

  checkExpiryRoles: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  claimTemporaryPublicRole: TypedContractMethod<
    [durationInHours: BigNumberish],
    [void],
    "nonpayable"
  >;

  deRegisterEnterprise: TypedContractMethod<
    [_enterprise: AddressLike],
    [void],
    "nonpayable"
  >;

  getActiveRoles: TypedContractMethod<
    [account: AddressLike],
    [
      [boolean, boolean, boolean, boolean, boolean, boolean, boolean] & {
        isAdmin: boolean;
        isCertifier: boolean;
        isInspector: boolean;
        isAuditor: boolean;
        isEnterprise: boolean;
        isCertificateFactory: boolean;
        isPublic: boolean;
      }
    ],
    "view"
  >;

  getEnterprise: TypedContractMethod<
    [enterpriseAddress: AddressLike],
    [DataTypes.EnterpriseStructOutput],
    "view"
  >;

  getEnterpriseWithStatus: TypedContractMethod<
    [_enterprise: AddressLike],
    [[DataTypes.EnterpriseStructOutput, boolean] & { isActive: boolean }],
    "view"
  >;

  getMaxPublicRoleDuration: TypedContractMethod<[], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantAuditor: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  grantCertificateFactory: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  grantCertifier: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  grantEnterprise: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  grantInspector: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  grantPublicRole: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasAdminRole: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  hasAuditorRole: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  hasCertificateFactoryRole: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  hasCertifierRole: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  hasEnterpriseRole: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  hasInspectorRole: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  hasPublicRole: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isEnterpriseActive: TypedContractMethod<
    [_enterprise: AddressLike],
    [boolean],
    "view"
  >;

  lisEnterprisesPaginated: TypedContractMethod<
    [start: BigNumberish, limit: BigNumberish],
    [string[]],
    "view"
  >;

  listEnterprises: TypedContractMethod<[], [string[]], "view">;

  publicRoleExpiry: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  registerEnterprise: TypedContractMethod<
    [
      _enterpriseAddress: AddressLike,
      _name: string,
      _industry: string,
      _metadataURI: string,
      _initialCertDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeAuditorRole: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeCertificateFactoryRole: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeCertifierRole: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeEnterpriseRole: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeInspectorRole: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokePublicRole: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  rolesManager: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  transferRole: TypedContractMethod<
    [role: BytesLike, from: AddressLike, to: AddressLike],
    [void],
    "nonpayable"
  >;

  updateEnterpriseMetadata: TypedContractMethod<
    [newMetadataURI: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AUDITOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CERTIFICATE_FACTORY_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CERTIFIER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ENTERPRISE_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "INSPECTOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PUBLIC_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allEnterprises"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "bulkGrantRoles"
  ): TypedContractMethod<
    [roles: BytesLike[], accounts: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "certAuthority"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "certificateNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "checkExpiryRoles"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimTemporaryPublicRole"
  ): TypedContractMethod<[durationInHours: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deRegisterEnterprise"
  ): TypedContractMethod<[_enterprise: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveRoles"
  ): TypedContractMethod<
    [account: AddressLike],
    [
      [boolean, boolean, boolean, boolean, boolean, boolean, boolean] & {
        isAdmin: boolean;
        isCertifier: boolean;
        isInspector: boolean;
        isAuditor: boolean;
        isEnterprise: boolean;
        isCertificateFactory: boolean;
        isPublic: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEnterprise"
  ): TypedContractMethod<
    [enterpriseAddress: AddressLike],
    [DataTypes.EnterpriseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEnterpriseWithStatus"
  ): TypedContractMethod<
    [_enterprise: AddressLike],
    [[DataTypes.EnterpriseStructOutput, boolean] & { isActive: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMaxPublicRoleDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantAuditor"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantCertificateFactory"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantCertifier"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantEnterprise"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantInspector"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantPublicRole"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasAdminRole"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasAuditorRole"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasCertificateFactoryRole"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasCertifierRole"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasEnterpriseRole"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasInspectorRole"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasPublicRole"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isEnterpriseActive"
  ): TypedContractMethod<[_enterprise: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lisEnterprisesPaginated"
  ): TypedContractMethod<
    [start: BigNumberish, limit: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "listEnterprises"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "publicRoleExpiry"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerEnterprise"
  ): TypedContractMethod<
    [
      _enterpriseAddress: AddressLike,
      _name: string,
      _industry: string,
      _metadataURI: string,
      _initialCertDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeAuditorRole"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeCertificateFactoryRole"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeCertifierRole"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeEnterpriseRole"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeInspectorRole"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokePublicRole"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rolesManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferRole"
  ): TypedContractMethod<
    [role: BytesLike, from: AddressLike, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateEnterpriseMetadata"
  ): TypedContractMethod<[newMetadataURI: string], [void], "nonpayable">;

  getEvent(
    key: "BulkRolesGranted"
  ): TypedContractEvent<
    BulkRolesGrantedEvent.InputTuple,
    BulkRolesGrantedEvent.OutputTuple,
    BulkRolesGrantedEvent.OutputObject
  >;
  getEvent(
    key: "EnterpriseDeregistered"
  ): TypedContractEvent<
    EnterpriseDeregisteredEvent.InputTuple,
    EnterpriseDeregisteredEvent.OutputTuple,
    EnterpriseDeregisteredEvent.OutputObject
  >;
  getEvent(
    key: "EnterpriseRegistered"
  ): TypedContractEvent<
    EnterpriseRegisteredEvent.InputTuple,
    EnterpriseRegisteredEvent.OutputTuple,
    EnterpriseRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "EnterpriseUpdated"
  ): TypedContractEvent<
    EnterpriseUpdatedEvent.InputTuple,
    EnterpriseUpdatedEvent.OutputTuple,
    EnterpriseUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PublicRoleExpired"
  ): TypedContractEvent<
    PublicRoleExpiredEvent.InputTuple,
    PublicRoleExpiredEvent.OutputTuple,
    PublicRoleExpiredEvent.OutputObject
  >;
  getEvent(
    key: "PublicRoleGranted"
  ): TypedContractEvent<
    PublicRoleGrantedEvent.InputTuple,
    PublicRoleGrantedEvent.OutputTuple,
    PublicRoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted(bytes32,address,address)"
  ): TypedContractEvent<
    RoleGranted_bytes32_address_address_Event.InputTuple,
    RoleGranted_bytes32_address_address_Event.OutputTuple,
    RoleGranted_bytes32_address_address_Event.OutputObject
  >;
  getEvent(
    key: "RoleGranted(bytes32,address)"
  ): TypedContractEvent<
    RoleGranted_bytes32_address_Event.InputTuple,
    RoleGranted_bytes32_address_Event.OutputTuple,
    RoleGranted_bytes32_address_Event.OutputObject
  >;
  getEvent(
    key: "RoleRevoked(bytes32,address,address)"
  ): TypedContractEvent<
    RoleRevoked_bytes32_address_address_Event.InputTuple,
    RoleRevoked_bytes32_address_address_Event.OutputTuple,
    RoleRevoked_bytes32_address_address_Event.OutputObject
  >;
  getEvent(
    key: "RoleRevoked(bytes32,address)"
  ): TypedContractEvent<
    RoleRevoked_bytes32_address_Event.InputTuple,
    RoleRevoked_bytes32_address_Event.OutputTuple,
    RoleRevoked_bytes32_address_Event.OutputObject
  >;
  getEvent(
    key: "RoleTransferred"
  ): TypedContractEvent<
    RoleTransferredEvent.InputTuple,
    RoleTransferredEvent.OutputTuple,
    RoleTransferredEvent.OutputObject
  >;

  filters: {
    "BulkRolesGranted(bytes32[],address[])": TypedContractEvent<
      BulkRolesGrantedEvent.InputTuple,
      BulkRolesGrantedEvent.OutputTuple,
      BulkRolesGrantedEvent.OutputObject
    >;
    BulkRolesGranted: TypedContractEvent<
      BulkRolesGrantedEvent.InputTuple,
      BulkRolesGrantedEvent.OutputTuple,
      BulkRolesGrantedEvent.OutputObject
    >;

    "EnterpriseDeregistered(address,uint256)": TypedContractEvent<
      EnterpriseDeregisteredEvent.InputTuple,
      EnterpriseDeregisteredEvent.OutputTuple,
      EnterpriseDeregisteredEvent.OutputObject
    >;
    EnterpriseDeregistered: TypedContractEvent<
      EnterpriseDeregisteredEvent.InputTuple,
      EnterpriseDeregisteredEvent.OutputTuple,
      EnterpriseDeregisteredEvent.OutputObject
    >;

    "EnterpriseRegistered(address,string,string,string,uint256)": TypedContractEvent<
      EnterpriseRegisteredEvent.InputTuple,
      EnterpriseRegisteredEvent.OutputTuple,
      EnterpriseRegisteredEvent.OutputObject
    >;
    EnterpriseRegistered: TypedContractEvent<
      EnterpriseRegisteredEvent.InputTuple,
      EnterpriseRegisteredEvent.OutputTuple,
      EnterpriseRegisteredEvent.OutputObject
    >;

    "EnterpriseUpdated(address,string)": TypedContractEvent<
      EnterpriseUpdatedEvent.InputTuple,
      EnterpriseUpdatedEvent.OutputTuple,
      EnterpriseUpdatedEvent.OutputObject
    >;
    EnterpriseUpdated: TypedContractEvent<
      EnterpriseUpdatedEvent.InputTuple,
      EnterpriseUpdatedEvent.OutputTuple,
      EnterpriseUpdatedEvent.OutputObject
    >;

    "PublicRoleExpired(address)": TypedContractEvent<
      PublicRoleExpiredEvent.InputTuple,
      PublicRoleExpiredEvent.OutputTuple,
      PublicRoleExpiredEvent.OutputObject
    >;
    PublicRoleExpired: TypedContractEvent<
      PublicRoleExpiredEvent.InputTuple,
      PublicRoleExpiredEvent.OutputTuple,
      PublicRoleExpiredEvent.OutputObject
    >;

    "PublicRoleGranted(address,uint256)": TypedContractEvent<
      PublicRoleGrantedEvent.InputTuple,
      PublicRoleGrantedEvent.OutputTuple,
      PublicRoleGrantedEvent.OutputObject
    >;
    PublicRoleGranted: TypedContractEvent<
      PublicRoleGrantedEvent.InputTuple,
      PublicRoleGrantedEvent.OutputTuple,
      PublicRoleGrantedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGranted_bytes32_address_address_Event.InputTuple,
      RoleGranted_bytes32_address_address_Event.OutputTuple,
      RoleGranted_bytes32_address_address_Event.OutputObject
    >;
    "RoleGranted(bytes32,address)": TypedContractEvent<
      RoleGranted_bytes32_address_Event.InputTuple,
      RoleGranted_bytes32_address_Event.OutputTuple,
      RoleGranted_bytes32_address_Event.OutputObject
    >;
    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevoked_bytes32_address_address_Event.InputTuple,
      RoleRevoked_bytes32_address_address_Event.OutputTuple,
      RoleRevoked_bytes32_address_address_Event.OutputObject
    >;
    "RoleRevoked(bytes32,address)": TypedContractEvent<
      RoleRevoked_bytes32_address_Event.InputTuple,
      RoleRevoked_bytes32_address_Event.OutputTuple,
      RoleRevoked_bytes32_address_Event.OutputObject
    >;

    "RoleTransferred(bytes32,address,address)": TypedContractEvent<
      RoleTransferredEvent.InputTuple,
      RoleTransferredEvent.OutputTuple,
      RoleTransferredEvent.OutputObject
    >;
    RoleTransferred: TypedContractEvent<
      RoleTransferredEvent.InputTuple,
      RoleTransferredEvent.OutputTuple,
      RoleTransferredEvent.OutputObject
    >;
  };
}
