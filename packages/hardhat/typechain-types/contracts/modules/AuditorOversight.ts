/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace DataTypes {
  export type AuditCaseStruct = {
    id: BigNumberish;
    targetEnterprise: AddressLike;
    inspectionId: BigNumberish;
    auditor: AddressLike;
    reason: string;
    evidenceURI: string;
    depositAmount: BigNumberish;
    status: BigNumberish;
    createdAt: BigNumberish;
    resolvedAt: BigNumberish;
  };

  export type AuditCaseStructOutput = [
    id: bigint,
    targetEnterprise: string,
    inspectionId: bigint,
    auditor: string,
    reason: string,
    evidenceURI: string,
    depositAmount: bigint,
    status: bigint,
    createdAt: bigint,
    resolvedAt: bigint
  ] & {
    id: bigint;
    targetEnterprise: string;
    inspectionId: bigint;
    auditor: string;
    reason: string;
    evidenceURI: string;
    depositAmount: bigint;
    status: bigint;
    createdAt: bigint;
    resolvedAt: bigint;
  };
}

export interface AuditorOversightInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "APPEAL_WINDOW"
      | "AUDIT_DEPOSIT"
      | "certAuthority"
      | "fileAppeal"
      | "getActiveAudits"
      | "initiateAudit"
      | "inspectionManager"
      | "resolveAudit"
      | "rolesManager"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AppealFiled" | "AuditInitiated" | "AuditResolved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "APPEAL_WINDOW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AUDIT_DEPOSIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "certAuthority",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fileAppeal",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveAudits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initiateAudit",
    values: [AddressLike, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "inspectionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveAudit",
    values: [BigNumberish, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rolesManager",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "APPEAL_WINDOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AUDIT_DEPOSIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "certAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fileAppeal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActiveAudits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateAudit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inspectionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveAudit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rolesManager",
    data: BytesLike
  ): Result;
}

export namespace AppealFiledEvent {
  export type InputTuple = [
    caseid: BigNumberish,
    enterprise: AddressLike,
    counterEvidenceURI: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    caseid: bigint,
    enterprise: string,
    counterEvidenceURI: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    caseid: bigint;
    enterprise: string;
    counterEvidenceURI: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuditInitiatedEvent {
  export type InputTuple = [
    caseId: BigNumberish,
    enterprise: AddressLike,
    inspectionId: BigNumberish,
    auditor: AddressLike,
    reason: string,
    evidenceURI: string
  ];
  export type OutputTuple = [
    caseId: bigint,
    enterprise: string,
    inspectionId: bigint,
    auditor: string,
    reason: string,
    evidenceURI: string
  ];
  export interface OutputObject {
    caseId: bigint;
    enterprise: string;
    inspectionId: bigint;
    auditor: string;
    reason: string;
    evidenceURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuditResolvedEvent {
  export type InputTuple = [
    caseId: BigNumberish,
    enterprise: AddressLike,
    resolvedBy: AddressLike,
    upheld: boolean,
    remarks: string
  ];
  export type OutputTuple = [
    caseId: bigint,
    enterprise: string,
    resolvedBy: string,
    upheld: boolean,
    remarks: string
  ];
  export interface OutputObject {
    caseId: bigint;
    enterprise: string;
    resolvedBy: string;
    upheld: boolean;
    remarks: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AuditorOversight extends BaseContract {
  connect(runner?: ContractRunner | null): AuditorOversight;
  waitForDeployment(): Promise<this>;

  interface: AuditorOversightInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  APPEAL_WINDOW: TypedContractMethod<[], [bigint], "view">;

  AUDIT_DEPOSIT: TypedContractMethod<[], [bigint], "view">;

  certAuthority: TypedContractMethod<[], [string], "view">;

  fileAppeal: TypedContractMethod<
    [caseId: BigNumberish, counterEvidenceURI: string],
    [void],
    "nonpayable"
  >;

  getActiveAudits: TypedContractMethod<
    [],
    [DataTypes.AuditCaseStructOutput[]],
    "view"
  >;

  initiateAudit: TypedContractMethod<
    [
      _targetEnterprise: AddressLike,
      _inspectionId: BigNumberish,
      _reason: string,
      _evidenceURI: string
    ],
    [void],
    "payable"
  >;

  inspectionManager: TypedContractMethod<[], [string], "view">;

  resolveAudit: TypedContractMethod<
    [caseId: BigNumberish, upholdDecision: boolean, remarks: string],
    [void],
    "nonpayable"
  >;

  rolesManager: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "APPEAL_WINDOW"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "AUDIT_DEPOSIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "certAuthority"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fileAppeal"
  ): TypedContractMethod<
    [caseId: BigNumberish, counterEvidenceURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getActiveAudits"
  ): TypedContractMethod<[], [DataTypes.AuditCaseStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "initiateAudit"
  ): TypedContractMethod<
    [
      _targetEnterprise: AddressLike,
      _inspectionId: BigNumberish,
      _reason: string,
      _evidenceURI: string
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "inspectionManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "resolveAudit"
  ): TypedContractMethod<
    [caseId: BigNumberish, upholdDecision: boolean, remarks: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rolesManager"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AppealFiled"
  ): TypedContractEvent<
    AppealFiledEvent.InputTuple,
    AppealFiledEvent.OutputTuple,
    AppealFiledEvent.OutputObject
  >;
  getEvent(
    key: "AuditInitiated"
  ): TypedContractEvent<
    AuditInitiatedEvent.InputTuple,
    AuditInitiatedEvent.OutputTuple,
    AuditInitiatedEvent.OutputObject
  >;
  getEvent(
    key: "AuditResolved"
  ): TypedContractEvent<
    AuditResolvedEvent.InputTuple,
    AuditResolvedEvent.OutputTuple,
    AuditResolvedEvent.OutputObject
  >;

  filters: {
    "AppealFiled(uint256,address,string,uint256)": TypedContractEvent<
      AppealFiledEvent.InputTuple,
      AppealFiledEvent.OutputTuple,
      AppealFiledEvent.OutputObject
    >;
    AppealFiled: TypedContractEvent<
      AppealFiledEvent.InputTuple,
      AppealFiledEvent.OutputTuple,
      AppealFiledEvent.OutputObject
    >;

    "AuditInitiated(uint256,address,uint256,address,string,string)": TypedContractEvent<
      AuditInitiatedEvent.InputTuple,
      AuditInitiatedEvent.OutputTuple,
      AuditInitiatedEvent.OutputObject
    >;
    AuditInitiated: TypedContractEvent<
      AuditInitiatedEvent.InputTuple,
      AuditInitiatedEvent.OutputTuple,
      AuditInitiatedEvent.OutputObject
    >;

    "AuditResolved(uint256,address,address,bool,string)": TypedContractEvent<
      AuditResolvedEvent.InputTuple,
      AuditResolvedEvent.OutputTuple,
      AuditResolvedEvent.OutputObject
    >;
    AuditResolved: TypedContractEvent<
      AuditResolvedEvent.InputTuple,
      AuditResolvedEvent.OutputTuple,
      AuditResolvedEvent.OutputObject
    >;
  };
}
