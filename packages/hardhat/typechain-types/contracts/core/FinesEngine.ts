/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface FinesEngineInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "finesERC20"
      | "finesETH"
      | "imposeFineETH"
      | "payFineERC20"
      | "payFineETH"
      | "penaltyTiers"
      | "treasury"
      | "withdrawERC20"
      | "withdrawETH"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FineImposedERC20"
      | "FineImposedETH"
      | "FinePaidERC20"
      | "FinePaidETH"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finesERC20",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "finesETH",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "imposeFineETH",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "payFineERC20",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payFineETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "penaltyTiers",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finesERC20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finesETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "imposeFineETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payFineERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payFineETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "penaltyTiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
}

export namespace FineImposedERC20Event {
  export type InputTuple = [
    enterprise: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [enterprise: string, token: string, amount: bigint];
  export interface OutputObject {
    enterprise: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FineImposedETHEvent {
  export type InputTuple = [enterprise: AddressLike, amount: BigNumberish];
  export type OutputTuple = [enterprise: string, amount: bigint];
  export interface OutputObject {
    enterprise: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FinePaidERC20Event {
  export type InputTuple = [
    enterprise: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [enterprise: string, token: string, amount: bigint];
  export interface OutputObject {
    enterprise: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FinePaidETHEvent {
  export type InputTuple = [enterprise: AddressLike, amount: BigNumberish];
  export type OutputTuple = [enterprise: string, amount: bigint];
  export interface OutputObject {
    enterprise: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FinesEngine extends BaseContract {
  connect(runner?: ContractRunner | null): FinesEngine;
  waitForDeployment(): Promise<this>;

  interface: FinesEngineInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  finesERC20: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  finesETH: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  imposeFineETH: TypedContractMethod<
    [_enterprise: AddressLike, _tier: string],
    [void],
    "nonpayable"
  >;

  payFineERC20: TypedContractMethod<
    [_token: AddressLike],
    [void],
    "nonpayable"
  >;

  payFineETH: TypedContractMethod<[], [void], "payable">;

  penaltyTiers: TypedContractMethod<[arg0: string], [bigint], "view">;

  treasury: TypedContractMethod<[], [string], "view">;

  withdrawERC20: TypedContractMethod<
    [_token: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawETH: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "finesERC20"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "finesETH"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "imposeFineETH"
  ): TypedContractMethod<
    [_enterprise: AddressLike, _tier: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payFineERC20"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "payFineETH"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "penaltyTiers"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawERC20"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawETH"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "FineImposedERC20"
  ): TypedContractEvent<
    FineImposedERC20Event.InputTuple,
    FineImposedERC20Event.OutputTuple,
    FineImposedERC20Event.OutputObject
  >;
  getEvent(
    key: "FineImposedETH"
  ): TypedContractEvent<
    FineImposedETHEvent.InputTuple,
    FineImposedETHEvent.OutputTuple,
    FineImposedETHEvent.OutputObject
  >;
  getEvent(
    key: "FinePaidERC20"
  ): TypedContractEvent<
    FinePaidERC20Event.InputTuple,
    FinePaidERC20Event.OutputTuple,
    FinePaidERC20Event.OutputObject
  >;
  getEvent(
    key: "FinePaidETH"
  ): TypedContractEvent<
    FinePaidETHEvent.InputTuple,
    FinePaidETHEvent.OutputTuple,
    FinePaidETHEvent.OutputObject
  >;

  filters: {
    "FineImposedERC20(address,address,uint256)": TypedContractEvent<
      FineImposedERC20Event.InputTuple,
      FineImposedERC20Event.OutputTuple,
      FineImposedERC20Event.OutputObject
    >;
    FineImposedERC20: TypedContractEvent<
      FineImposedERC20Event.InputTuple,
      FineImposedERC20Event.OutputTuple,
      FineImposedERC20Event.OutputObject
    >;

    "FineImposedETH(address,uint256)": TypedContractEvent<
      FineImposedETHEvent.InputTuple,
      FineImposedETHEvent.OutputTuple,
      FineImposedETHEvent.OutputObject
    >;
    FineImposedETH: TypedContractEvent<
      FineImposedETHEvent.InputTuple,
      FineImposedETHEvent.OutputTuple,
      FineImposedETHEvent.OutputObject
    >;

    "FinePaidERC20(address,address,uint256)": TypedContractEvent<
      FinePaidERC20Event.InputTuple,
      FinePaidERC20Event.OutputTuple,
      FinePaidERC20Event.OutputObject
    >;
    FinePaidERC20: TypedContractEvent<
      FinePaidERC20Event.InputTuple,
      FinePaidERC20Event.OutputTuple,
      FinePaidERC20Event.OutputObject
    >;

    "FinePaidETH(address,uint256)": TypedContractEvent<
      FinePaidETHEvent.InputTuple,
      FinePaidETHEvent.OutputTuple,
      FinePaidETHEvent.OutputObject
    >;
    FinePaidETH: TypedContractEvent<
      FinePaidETHEvent.InputTuple,
      FinePaidETHEvent.OutputTuple,
      FinePaidETHEvent.OutputObject
    >;
  };
}
