/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace DataTypes {
  export type InspectionReportStruct = {
    inspector: AddressLike;
    enterprise: AddressLike;
    remarks: string;
    evidenceURI: string;
    inspectedAt: BigNumberish;
    passed: boolean;
  };

  export type InspectionReportStructOutput = [
    inspector: string,
    enterprise: string,
    remarks: string,
    evidenceURI: string,
    inspectedAt: bigint,
    passed: boolean
  ] & {
    inspector: string;
    enterprise: string;
    remarks: string;
    evidenceURI: string;
    inspectedAt: bigint;
    passed: boolean;
  };
}

export interface InspectionSystemInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "assignInspector"
      | "certAuthority"
      | "getEnterpriseInspectors"
      | "getInspectorReports"
      | "rolesManager"
      | "submitInspectionReport"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "InspectionReportSubmitted" | "InspectorAssigned"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "assignInspector",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "certAuthority",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEnterpriseInspectors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getInspectorReports",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rolesManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitInspectionReport",
    values: [AddressLike, boolean, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "assignInspector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "certAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnterpriseInspectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInspectorReports",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rolesManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitInspectionReport",
    data: BytesLike
  ): Result;
}

export namespace InspectionReportSubmittedEvent {
  export type InputTuple = [
    inspector: AddressLike,
    enterprise: AddressLike,
    passed: boolean,
    remarks: string,
    evidenceURI: string,
    ReportedAt: BigNumberish
  ];
  export type OutputTuple = [
    inspector: string,
    enterprise: string,
    passed: boolean,
    remarks: string,
    evidenceURI: string,
    ReportedAt: bigint
  ];
  export interface OutputObject {
    inspector: string;
    enterprise: string;
    passed: boolean;
    remarks: string;
    evidenceURI: string;
    ReportedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InspectorAssignedEvent {
  export type InputTuple = [
    enterprise: AddressLike,
    inspector: AddressLike,
    validityPeriod: BigNumberish
  ];
  export type OutputTuple = [
    enterprise: string,
    inspector: string,
    validityPeriod: bigint
  ];
  export interface OutputObject {
    enterprise: string;
    inspector: string;
    validityPeriod: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface InspectionSystem extends BaseContract {
  connect(runner?: ContractRunner | null): InspectionSystem;
  waitForDeployment(): Promise<this>;

  interface: InspectionSystemInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  assignInspector: TypedContractMethod<
    [
      enterprise: AddressLike,
      inspector: AddressLike,
      validityPeriod: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  certAuthority: TypedContractMethod<[], [string], "view">;

  getEnterpriseInspectors: TypedContractMethod<
    [enterprise: AddressLike],
    [[string[], bigint[]] & { validityPeriods: bigint[] }],
    "view"
  >;

  getInspectorReports: TypedContractMethod<
    [inspector: AddressLike],
    [DataTypes.InspectionReportStructOutput[]],
    "view"
  >;

  rolesManager: TypedContractMethod<[], [string], "view">;

  submitInspectionReport: TypedContractMethod<
    [
      enterprise: AddressLike,
      passed: boolean,
      remarks: string,
      evidenceURI: string
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "assignInspector"
  ): TypedContractMethod<
    [
      enterprise: AddressLike,
      inspector: AddressLike,
      validityPeriod: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "certAuthority"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getEnterpriseInspectors"
  ): TypedContractMethod<
    [enterprise: AddressLike],
    [[string[], bigint[]] & { validityPeriods: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getInspectorReports"
  ): TypedContractMethod<
    [inspector: AddressLike],
    [DataTypes.InspectionReportStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "rolesManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "submitInspectionReport"
  ): TypedContractMethod<
    [
      enterprise: AddressLike,
      passed: boolean,
      remarks: string,
      evidenceURI: string
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "InspectionReportSubmitted"
  ): TypedContractEvent<
    InspectionReportSubmittedEvent.InputTuple,
    InspectionReportSubmittedEvent.OutputTuple,
    InspectionReportSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "InspectorAssigned"
  ): TypedContractEvent<
    InspectorAssignedEvent.InputTuple,
    InspectorAssignedEvent.OutputTuple,
    InspectorAssignedEvent.OutputObject
  >;

  filters: {
    "InspectionReportSubmitted(address,address,bool,string,string,uint256)": TypedContractEvent<
      InspectionReportSubmittedEvent.InputTuple,
      InspectionReportSubmittedEvent.OutputTuple,
      InspectionReportSubmittedEvent.OutputObject
    >;
    InspectionReportSubmitted: TypedContractEvent<
      InspectionReportSubmittedEvent.InputTuple,
      InspectionReportSubmittedEvent.OutputTuple,
      InspectionReportSubmittedEvent.OutputObject
    >;

    "InspectorAssigned(address,address,uint256)": TypedContractEvent<
      InspectorAssignedEvent.InputTuple,
      InspectorAssignedEvent.OutputTuple,
      InspectorAssignedEvent.OutputObject
    >;
    InspectorAssigned: TypedContractEvent<
      InspectorAssignedEvent.InputTuple,
      InspectorAssignedEvent.OutputTuple,
      InspectorAssignedEvent.OutputObject
    >;
  };
}
