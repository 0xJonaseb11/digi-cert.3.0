/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AccessModifiersInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AUDITOR_ROLE"
      | "CERTIFICATE_FACTORY_ROLE"
      | "CERTIFIER_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "ENTERPRISE_ROLE"
      | "INSPECTOR_ROLE"
      | "PUBLIC_ROLE"
      | "getRoleAdmin"
      | "grantAuditor"
      | "grantCertificateFactory"
      | "grantCertifier"
      | "grantEnterprise"
      | "grantInspector"
      | "grantPublicRole"
      | "grantRole"
      | "hasAdminRole"
      | "hasAuditorRole"
      | "hasCertificateFactoryRole"
      | "hasCertifierRole"
      | "hasEnterpriseRole"
      | "hasInspectorRole"
      | "hasPublicRole"
      | "hasRole"
      | "renounceRole"
      | "revokeAuditor"
      | "revokeCertificateFactory"
      | "revokeCertifier"
      | "revokeEnterprise"
      | "revokeInspector"
      | "revokePublicRole"
      | "revokeRole"
      | "rolesManager"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "RoleAdminChanged" | "RoleGranted" | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "AUDITOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CERTIFICATE_FACTORY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CERTIFIER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ENTERPRISE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INSPECTOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PUBLIC_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAuditor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantCertificateFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantCertifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantEnterprise",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantInspector",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantPublicRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAdminRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAuditorRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasCertificateFactoryRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasCertifierRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasEnterpriseRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasInspectorRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPublicRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAuditor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeCertificateFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeCertifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeEnterprise",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeInspector",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePublicRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rolesManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "AUDITOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CERTIFICATE_FACTORY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CERTIFIER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ENTERPRISE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INSPECTOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PUBLIC_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAuditor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantCertificateFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantCertifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantEnterprise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantInspector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantPublicRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAuditorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasCertificateFactoryRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasCertifierRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasEnterpriseRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasInspectorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPublicRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAuditor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeCertificateFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeCertifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeEnterprise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeInspector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePublicRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rolesManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AccessModifiers extends BaseContract {
  connect(runner?: ContractRunner | null): AccessModifiers;
  waitForDeployment(): Promise<this>;

  interface: AccessModifiersInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AUDITOR_ROLE: TypedContractMethod<[], [string], "view">;

  CERTIFICATE_FACTORY_ROLE: TypedContractMethod<[], [string], "view">;

  CERTIFIER_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  ENTERPRISE_ROLE: TypedContractMethod<[], [string], "view">;

  INSPECTOR_ROLE: TypedContractMethod<[], [string], "view">;

  PUBLIC_ROLE: TypedContractMethod<[], [string], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantAuditor: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  grantCertificateFactory: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  grantCertifier: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  grantEnterprise: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  grantInspector: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  grantPublicRole: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasAdminRole: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  hasAuditorRole: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  hasCertificateFactoryRole: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  hasCertifierRole: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  hasEnterpriseRole: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  hasInspectorRole: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  hasPublicRole: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeAuditor: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeCertificateFactory: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeCertifier: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeEnterprise: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeInspector: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokePublicRole: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  rolesManager: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AUDITOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CERTIFICATE_FACTORY_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CERTIFIER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ENTERPRISE_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "INSPECTOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PUBLIC_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantAuditor"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantCertificateFactory"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantCertifier"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantEnterprise"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantInspector"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantPublicRole"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasAdminRole"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasAuditorRole"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasCertificateFactoryRole"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasCertifierRole"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasEnterpriseRole"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasInspectorRole"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasPublicRole"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeAuditor"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeCertificateFactory"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeCertifier"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeEnterprise"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeInspector"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokePublicRole"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rolesManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
