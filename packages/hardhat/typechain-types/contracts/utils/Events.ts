/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export interface EventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "AppealFiled"
      | "AuditInitiated"
      | "AuditResolved"
      | "BulkRolesGranted"
      | "CertificateMinted"
      | "CertificateRevoked"
      | "CertificationGranted"
      | "CertificationRevoked"
      | "CertificationUpdated"
      | "EnterpriseDeregistered"
      | "EnterpriseRegistered"
      | "EnterpriseUpdated"
      | "InspectionReportFlagged"
      | "InspectionReportSubmitted"
      | "InspectorAssigned"
      | "PublicRoleExpired"
      | "PublicRoleGranted"
      | "RoleGranted"
      | "RoleRevoked"
      | "RoleTransferred"
  ): EventFragment;
}

export namespace AppealFiledEvent {
  export type InputTuple = [
    caseid: BigNumberish,
    enterprise: AddressLike,
    counterEvidenceURI: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    caseid: bigint,
    enterprise: string,
    counterEvidenceURI: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    caseid: bigint;
    enterprise: string;
    counterEvidenceURI: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuditInitiatedEvent {
  export type InputTuple = [
    caseId: BigNumberish,
    enterprise: AddressLike,
    inspectionId: BigNumberish,
    auditor: AddressLike,
    reason: string,
    evidenceURI: string
  ];
  export type OutputTuple = [
    caseId: bigint,
    enterprise: string,
    inspectionId: bigint,
    auditor: string,
    reason: string,
    evidenceURI: string
  ];
  export interface OutputObject {
    caseId: bigint;
    enterprise: string;
    inspectionId: bigint;
    auditor: string;
    reason: string;
    evidenceURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuditResolvedEvent {
  export type InputTuple = [
    caseId: BigNumberish,
    enterprise: AddressLike,
    resolvedBy: AddressLike,
    upheld: boolean,
    remarks: string
  ];
  export type OutputTuple = [
    caseId: bigint,
    enterprise: string,
    resolvedBy: string,
    upheld: boolean,
    remarks: string
  ];
  export interface OutputObject {
    caseId: bigint;
    enterprise: string;
    resolvedBy: string;
    upheld: boolean;
    remarks: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BulkRolesGrantedEvent {
  export type InputTuple = [roles: BytesLike[], accounts: AddressLike[]];
  export type OutputTuple = [roles: string[], accounts: string[]];
  export interface OutputObject {
    roles: string[];
    accounts: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CertificateMintedEvent {
  export type InputTuple = [
    certificateId: BigNumberish,
    enterprise: AddressLike,
    certifier: AddressLike,
    mintedAt: BigNumberish
  ];
  export type OutputTuple = [
    certificateId: bigint,
    enterprise: string,
    certifier: string,
    mintedAt: bigint
  ];
  export interface OutputObject {
    certificateId: bigint;
    enterprise: string;
    certifier: string;
    mintedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CertificateRevokedEvent {
  export type InputTuple = [
    certificateId: BigNumberish,
    revoker: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    certificateId: bigint,
    revoker: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    certificateId: bigint;
    revoker: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CertificationGrantedEvent {
  export type InputTuple = [
    enterprise: AddressLike,
    industry: string,
    metadataURI: string,
    expiryDate: BigNumberish
  ];
  export type OutputTuple = [
    enterprise: string,
    industry: string,
    metadataURI: string,
    expiryDate: bigint
  ];
  export interface OutputObject {
    enterprise: string;
    industry: string;
    metadataURI: string;
    expiryDate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CertificationRevokedEvent {
  export type InputTuple = [enterprise: AddressLike];
  export type OutputTuple = [enterprise: string];
  export interface OutputObject {
    enterprise: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CertificationUpdatedEvent {
  export type InputTuple = [enterprise: AddressLike, newMetadataURI: string];
  export type OutputTuple = [enterprise: string, newMetadataURI: string];
  export interface OutputObject {
    enterprise: string;
    newMetadataURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnterpriseDeregisteredEvent {
  export type InputTuple = [
    enterprise: AddressLike,
    deregisteredAt: BigNumberish
  ];
  export type OutputTuple = [enterprise: string, deregisteredAt: bigint];
  export interface OutputObject {
    enterprise: string;
    deregisteredAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnterpriseRegisteredEvent {
  export type InputTuple = [
    enterprise: AddressLike,
    name: string,
    industry: string,
    metadataURI: string,
    certificateId: BigNumberish
  ];
  export type OutputTuple = [
    enterprise: string,
    name: string,
    industry: string,
    metadataURI: string,
    certificateId: bigint
  ];
  export interface OutputObject {
    enterprise: string;
    name: string;
    industry: string;
    metadataURI: string;
    certificateId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnterpriseUpdatedEvent {
  export type InputTuple = [enterprise: AddressLike, newMetadataURI: string];
  export type OutputTuple = [enterprise: string, newMetadataURI: string];
  export interface OutputObject {
    enterprise: string;
    newMetadataURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InspectionReportFlaggedEvent {
  export type InputTuple = [
    enterprise: AddressLike,
    reportIndex: BigNumberish,
    flaggedBy: AddressLike,
    reason: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    enterprise: string,
    reportIndex: bigint,
    flaggedBy: string,
    reason: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    enterprise: string;
    reportIndex: bigint;
    flaggedBy: string;
    reason: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InspectionReportSubmittedEvent {
  export type InputTuple = [
    inspector: AddressLike,
    enterprise: AddressLike,
    passed: boolean,
    remarks: string,
    evidenceURI: string,
    ReportedAt: BigNumberish
  ];
  export type OutputTuple = [
    inspector: string,
    enterprise: string,
    passed: boolean,
    remarks: string,
    evidenceURI: string,
    ReportedAt: bigint
  ];
  export interface OutputObject {
    inspector: string;
    enterprise: string;
    passed: boolean;
    remarks: string;
    evidenceURI: string;
    ReportedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InspectorAssignedEvent {
  export type InputTuple = [
    enterprise: AddressLike,
    inspector: AddressLike,
    validityPeriod: BigNumberish
  ];
  export type OutputTuple = [
    enterprise: string,
    inspector: string,
    validityPeriod: bigint
  ];
  export interface OutputObject {
    enterprise: string;
    inspector: string;
    validityPeriod: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PublicRoleExpiredEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PublicRoleGrantedEvent {
  export type InputTuple = [user: AddressLike, duration: BigNumberish];
  export type OutputTuple = [user: string, duration: bigint];
  export interface OutputObject {
    user: string;
    duration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [role: BytesLike, account: AddressLike];
  export type OutputTuple = [role: string, account: string];
  export interface OutputObject {
    role: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [role: BytesLike, account: AddressLike];
  export type OutputTuple = [role: string, account: string];
  export interface OutputObject {
    role: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleTransferredEvent {
  export type InputTuple = [
    role: BytesLike,
    from: AddressLike,
    to: AddressLike
  ];
  export type OutputTuple = [role: string, from: string, to: string];
  export interface OutputObject {
    role: string;
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Events extends BaseContract {
  connect(runner?: ContractRunner | null): Events;
  waitForDeployment(): Promise<this>;

  interface: EventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "AppealFiled"
  ): TypedContractEvent<
    AppealFiledEvent.InputTuple,
    AppealFiledEvent.OutputTuple,
    AppealFiledEvent.OutputObject
  >;
  getEvent(
    key: "AuditInitiated"
  ): TypedContractEvent<
    AuditInitiatedEvent.InputTuple,
    AuditInitiatedEvent.OutputTuple,
    AuditInitiatedEvent.OutputObject
  >;
  getEvent(
    key: "AuditResolved"
  ): TypedContractEvent<
    AuditResolvedEvent.InputTuple,
    AuditResolvedEvent.OutputTuple,
    AuditResolvedEvent.OutputObject
  >;
  getEvent(
    key: "BulkRolesGranted"
  ): TypedContractEvent<
    BulkRolesGrantedEvent.InputTuple,
    BulkRolesGrantedEvent.OutputTuple,
    BulkRolesGrantedEvent.OutputObject
  >;
  getEvent(
    key: "CertificateMinted"
  ): TypedContractEvent<
    CertificateMintedEvent.InputTuple,
    CertificateMintedEvent.OutputTuple,
    CertificateMintedEvent.OutputObject
  >;
  getEvent(
    key: "CertificateRevoked"
  ): TypedContractEvent<
    CertificateRevokedEvent.InputTuple,
    CertificateRevokedEvent.OutputTuple,
    CertificateRevokedEvent.OutputObject
  >;
  getEvent(
    key: "CertificationGranted"
  ): TypedContractEvent<
    CertificationGrantedEvent.InputTuple,
    CertificationGrantedEvent.OutputTuple,
    CertificationGrantedEvent.OutputObject
  >;
  getEvent(
    key: "CertificationRevoked"
  ): TypedContractEvent<
    CertificationRevokedEvent.InputTuple,
    CertificationRevokedEvent.OutputTuple,
    CertificationRevokedEvent.OutputObject
  >;
  getEvent(
    key: "CertificationUpdated"
  ): TypedContractEvent<
    CertificationUpdatedEvent.InputTuple,
    CertificationUpdatedEvent.OutputTuple,
    CertificationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "EnterpriseDeregistered"
  ): TypedContractEvent<
    EnterpriseDeregisteredEvent.InputTuple,
    EnterpriseDeregisteredEvent.OutputTuple,
    EnterpriseDeregisteredEvent.OutputObject
  >;
  getEvent(
    key: "EnterpriseRegistered"
  ): TypedContractEvent<
    EnterpriseRegisteredEvent.InputTuple,
    EnterpriseRegisteredEvent.OutputTuple,
    EnterpriseRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "EnterpriseUpdated"
  ): TypedContractEvent<
    EnterpriseUpdatedEvent.InputTuple,
    EnterpriseUpdatedEvent.OutputTuple,
    EnterpriseUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "InspectionReportFlagged"
  ): TypedContractEvent<
    InspectionReportFlaggedEvent.InputTuple,
    InspectionReportFlaggedEvent.OutputTuple,
    InspectionReportFlaggedEvent.OutputObject
  >;
  getEvent(
    key: "InspectionReportSubmitted"
  ): TypedContractEvent<
    InspectionReportSubmittedEvent.InputTuple,
    InspectionReportSubmittedEvent.OutputTuple,
    InspectionReportSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "InspectorAssigned"
  ): TypedContractEvent<
    InspectorAssignedEvent.InputTuple,
    InspectorAssignedEvent.OutputTuple,
    InspectorAssignedEvent.OutputObject
  >;
  getEvent(
    key: "PublicRoleExpired"
  ): TypedContractEvent<
    PublicRoleExpiredEvent.InputTuple,
    PublicRoleExpiredEvent.OutputTuple,
    PublicRoleExpiredEvent.OutputObject
  >;
  getEvent(
    key: "PublicRoleGranted"
  ): TypedContractEvent<
    PublicRoleGrantedEvent.InputTuple,
    PublicRoleGrantedEvent.OutputTuple,
    PublicRoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "RoleTransferred"
  ): TypedContractEvent<
    RoleTransferredEvent.InputTuple,
    RoleTransferredEvent.OutputTuple,
    RoleTransferredEvent.OutputObject
  >;

  filters: {
    "AppealFiled(uint256,address,string,uint256)": TypedContractEvent<
      AppealFiledEvent.InputTuple,
      AppealFiledEvent.OutputTuple,
      AppealFiledEvent.OutputObject
    >;
    AppealFiled: TypedContractEvent<
      AppealFiledEvent.InputTuple,
      AppealFiledEvent.OutputTuple,
      AppealFiledEvent.OutputObject
    >;

    "AuditInitiated(uint256,address,uint256,address,string,string)": TypedContractEvent<
      AuditInitiatedEvent.InputTuple,
      AuditInitiatedEvent.OutputTuple,
      AuditInitiatedEvent.OutputObject
    >;
    AuditInitiated: TypedContractEvent<
      AuditInitiatedEvent.InputTuple,
      AuditInitiatedEvent.OutputTuple,
      AuditInitiatedEvent.OutputObject
    >;

    "AuditResolved(uint256,address,address,bool,string)": TypedContractEvent<
      AuditResolvedEvent.InputTuple,
      AuditResolvedEvent.OutputTuple,
      AuditResolvedEvent.OutputObject
    >;
    AuditResolved: TypedContractEvent<
      AuditResolvedEvent.InputTuple,
      AuditResolvedEvent.OutputTuple,
      AuditResolvedEvent.OutputObject
    >;

    "BulkRolesGranted(bytes32[],address[])": TypedContractEvent<
      BulkRolesGrantedEvent.InputTuple,
      BulkRolesGrantedEvent.OutputTuple,
      BulkRolesGrantedEvent.OutputObject
    >;
    BulkRolesGranted: TypedContractEvent<
      BulkRolesGrantedEvent.InputTuple,
      BulkRolesGrantedEvent.OutputTuple,
      BulkRolesGrantedEvent.OutputObject
    >;

    "CertificateMinted(uint256,address,address,uint256)": TypedContractEvent<
      CertificateMintedEvent.InputTuple,
      CertificateMintedEvent.OutputTuple,
      CertificateMintedEvent.OutputObject
    >;
    CertificateMinted: TypedContractEvent<
      CertificateMintedEvent.InputTuple,
      CertificateMintedEvent.OutputTuple,
      CertificateMintedEvent.OutputObject
    >;

    "CertificateRevoked(uint256,address,uint256)": TypedContractEvent<
      CertificateRevokedEvent.InputTuple,
      CertificateRevokedEvent.OutputTuple,
      CertificateRevokedEvent.OutputObject
    >;
    CertificateRevoked: TypedContractEvent<
      CertificateRevokedEvent.InputTuple,
      CertificateRevokedEvent.OutputTuple,
      CertificateRevokedEvent.OutputObject
    >;

    "CertificationGranted(address,string,string,uint256)": TypedContractEvent<
      CertificationGrantedEvent.InputTuple,
      CertificationGrantedEvent.OutputTuple,
      CertificationGrantedEvent.OutputObject
    >;
    CertificationGranted: TypedContractEvent<
      CertificationGrantedEvent.InputTuple,
      CertificationGrantedEvent.OutputTuple,
      CertificationGrantedEvent.OutputObject
    >;

    "CertificationRevoked(address)": TypedContractEvent<
      CertificationRevokedEvent.InputTuple,
      CertificationRevokedEvent.OutputTuple,
      CertificationRevokedEvent.OutputObject
    >;
    CertificationRevoked: TypedContractEvent<
      CertificationRevokedEvent.InputTuple,
      CertificationRevokedEvent.OutputTuple,
      CertificationRevokedEvent.OutputObject
    >;

    "CertificationUpdated(address,string)": TypedContractEvent<
      CertificationUpdatedEvent.InputTuple,
      CertificationUpdatedEvent.OutputTuple,
      CertificationUpdatedEvent.OutputObject
    >;
    CertificationUpdated: TypedContractEvent<
      CertificationUpdatedEvent.InputTuple,
      CertificationUpdatedEvent.OutputTuple,
      CertificationUpdatedEvent.OutputObject
    >;

    "EnterpriseDeregistered(address,uint256)": TypedContractEvent<
      EnterpriseDeregisteredEvent.InputTuple,
      EnterpriseDeregisteredEvent.OutputTuple,
      EnterpriseDeregisteredEvent.OutputObject
    >;
    EnterpriseDeregistered: TypedContractEvent<
      EnterpriseDeregisteredEvent.InputTuple,
      EnterpriseDeregisteredEvent.OutputTuple,
      EnterpriseDeregisteredEvent.OutputObject
    >;

    "EnterpriseRegistered(address,string,string,string,uint256)": TypedContractEvent<
      EnterpriseRegisteredEvent.InputTuple,
      EnterpriseRegisteredEvent.OutputTuple,
      EnterpriseRegisteredEvent.OutputObject
    >;
    EnterpriseRegistered: TypedContractEvent<
      EnterpriseRegisteredEvent.InputTuple,
      EnterpriseRegisteredEvent.OutputTuple,
      EnterpriseRegisteredEvent.OutputObject
    >;

    "EnterpriseUpdated(address,string)": TypedContractEvent<
      EnterpriseUpdatedEvent.InputTuple,
      EnterpriseUpdatedEvent.OutputTuple,
      EnterpriseUpdatedEvent.OutputObject
    >;
    EnterpriseUpdated: TypedContractEvent<
      EnterpriseUpdatedEvent.InputTuple,
      EnterpriseUpdatedEvent.OutputTuple,
      EnterpriseUpdatedEvent.OutputObject
    >;

    "InspectionReportFlagged(address,uint256,address,string,uint256)": TypedContractEvent<
      InspectionReportFlaggedEvent.InputTuple,
      InspectionReportFlaggedEvent.OutputTuple,
      InspectionReportFlaggedEvent.OutputObject
    >;
    InspectionReportFlagged: TypedContractEvent<
      InspectionReportFlaggedEvent.InputTuple,
      InspectionReportFlaggedEvent.OutputTuple,
      InspectionReportFlaggedEvent.OutputObject
    >;

    "InspectionReportSubmitted(address,address,bool,string,string,uint256)": TypedContractEvent<
      InspectionReportSubmittedEvent.InputTuple,
      InspectionReportSubmittedEvent.OutputTuple,
      InspectionReportSubmittedEvent.OutputObject
    >;
    InspectionReportSubmitted: TypedContractEvent<
      InspectionReportSubmittedEvent.InputTuple,
      InspectionReportSubmittedEvent.OutputTuple,
      InspectionReportSubmittedEvent.OutputObject
    >;

    "InspectorAssigned(address,address,uint256)": TypedContractEvent<
      InspectorAssignedEvent.InputTuple,
      InspectorAssignedEvent.OutputTuple,
      InspectorAssignedEvent.OutputObject
    >;
    InspectorAssigned: TypedContractEvent<
      InspectorAssignedEvent.InputTuple,
      InspectorAssignedEvent.OutputTuple,
      InspectorAssignedEvent.OutputObject
    >;

    "PublicRoleExpired(address)": TypedContractEvent<
      PublicRoleExpiredEvent.InputTuple,
      PublicRoleExpiredEvent.OutputTuple,
      PublicRoleExpiredEvent.OutputObject
    >;
    PublicRoleExpired: TypedContractEvent<
      PublicRoleExpiredEvent.InputTuple,
      PublicRoleExpiredEvent.OutputTuple,
      PublicRoleExpiredEvent.OutputObject
    >;

    "PublicRoleGranted(address,uint256)": TypedContractEvent<
      PublicRoleGrantedEvent.InputTuple,
      PublicRoleGrantedEvent.OutputTuple,
      PublicRoleGrantedEvent.OutputObject
    >;
    PublicRoleGranted: TypedContractEvent<
      PublicRoleGrantedEvent.InputTuple,
      PublicRoleGrantedEvent.OutputTuple,
      PublicRoleGrantedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "RoleTransferred(bytes32,address,address)": TypedContractEvent<
      RoleTransferredEvent.InputTuple,
      RoleTransferredEvent.OutputTuple,
      RoleTransferredEvent.OutputObject
    >;
    RoleTransferred: TypedContractEvent<
      RoleTransferredEvent.InputTuple,
      RoleTransferredEvent.OutputTuple,
      RoleTransferredEvent.OutputObject
    >;
  };
}
