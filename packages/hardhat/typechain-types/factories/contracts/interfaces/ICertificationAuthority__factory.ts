/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ICertificationAuthority,
  ICertificationAuthorityInterface,
} from "../../../contracts/interfaces/ICertificationAuthority";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_rolesManager",
        type: "address",
      },
    ],
    name: "setRolesManager",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_certificateNFT",
        type: "address",
      },
    ],
    name: "updateCertificateNFT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_enterprise",
        type: "address",
      },
    ],
    name: "updateEnterpriseRegistry",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_inspectionManager",
        type: "address",
      },
    ],
    name: "updateInspectionManager",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class ICertificationAuthority__factory {
  static readonly abi = _abi;
  static createInterface(): ICertificationAuthorityInterface {
    return new Interface(_abi) as ICertificationAuthorityInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ICertificationAuthority {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ICertificationAuthority;
  }
}
